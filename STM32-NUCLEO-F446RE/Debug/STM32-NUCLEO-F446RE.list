
STM32-NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007470  08007470  00008470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007900  08007900  000091ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007900  08007900  00008900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007908  08007908  000091ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00008908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800790c  0800790c  0000890c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08007910  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001ec  08007afc  000091ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08007afc  00009524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dffb  00000000  00000000  0000921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206f  00000000  00000000  00017217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00019288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa5  00000000  00000000  0001a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bd4  00000000  00000000  0001aacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103cb  00000000  00000000  0003d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2d87  00000000  00000000  0004da6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001207f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b64  00000000  00000000  00120838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0012539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007458 	.word	0x08007458

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	08007458 	.word	0x08007458

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay (uint16_t delay)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <microDelay+0x30>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000faa:	bf00      	nop
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <microDelay+0x30>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3f9      	bcc.n	8000fac <microDelay+0x14>
	  //printf("%d ticks \n",__HAL_TIM_GET_COUNTER(&htim1));
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000208 	.word	0x20000208

08000fcc <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000fe4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fe8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482d      	ldr	r0, [pc, #180]	@ (80010b0 <DHT11_Start+0xe4>)
 8000ffc:	f001 f912 	bl	8002224 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001006:	482a      	ldr	r0, [pc, #168]	@ (80010b0 <DHT11_Start+0xe4>)
 8001008:	f001 fab8 	bl	800257c <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 800100c:	2014      	movs	r0, #20
 800100e:	f000 ff41 	bl	8001e94 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001018:	4825      	ldr	r0, [pc, #148]	@ (80010b0 <DHT11_Start+0xe4>)
 800101a:	f001 faaf 	bl	800257c <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 800101e:	201e      	movs	r0, #30
 8001020:	f7ff ffba 	bl	8000f98 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	481f      	ldr	r0, [pc, #124]	@ (80010b0 <DHT11_Start+0xe4>)
 8001032:	f001 f8f7 	bl	8002224 <HAL_GPIO_Init>
  microDelay (40);
 8001036:	2028      	movs	r0, #40	@ 0x28
 8001038:	f7ff ffae 	bl	8000f98 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800103c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001040:	481b      	ldr	r0, [pc, #108]	@ (80010b0 <DHT11_Start+0xe4>)
 8001042:	f001 fa83 	bl	800254c <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10c      	bne.n	8001066 <DHT11_Start+0x9a>
  {
    microDelay (80);
 800104c:	2050      	movs	r0, #80	@ 0x50
 800104e:	f7ff ffa3 	bl	8000f98 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001052:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001056:	4816      	ldr	r0, [pc, #88]	@ (80010b0 <DHT11_Start+0xe4>)
 8001058:	f001 fa78 	bl	800254c <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <DHT11_Start+0x9a>
 8001062:	2301      	movs	r3, #1
 8001064:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001066:	f000 ff09 	bl	8001e7c <HAL_GetTick>
 800106a:	4603      	mov	r3, r0
 800106c:	4a11      	ldr	r2, [pc, #68]	@ (80010b4 <DHT11_Start+0xe8>)
 800106e:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001070:	f000 ff04 	bl	8001e7c <HAL_GetTick>
 8001074:	4603      	mov	r3, r0
 8001076:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <DHT11_Start+0xec>)
 8001078:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800107a:	e004      	b.n	8001086 <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 800107c:	f000 fefe 	bl	8001e7c <HAL_GetTick>
 8001080:	4603      	mov	r3, r0
 8001082:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <DHT11_Start+0xec>)
 8001084:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001086:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <DHT11_Start+0xe4>)
 800108c:	f001 fa5e 	bl	800254c <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <DHT11_Start+0xd8>
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <DHT11_Start+0xe8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	1c9a      	adds	r2, r3, #2
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <DHT11_Start+0xec>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8eb      	bhi.n	800107c <DHT11_Start+0xb0>
  }
  return Response;
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020800 	.word	0x40020800
 80010b4:	200002e8 	.word	0x200002e8
 80010b8:	200002ec 	.word	0x200002ec

080010bc <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	e066      	b.n	8001196 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 80010c8:	f000 fed8 	bl	8001e7c <HAL_GetTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a36      	ldr	r2, [pc, #216]	@ (80011a8 <DHT11_Read+0xec>)
 80010d0:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010d2:	f000 fed3 	bl	8001e7c <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a34      	ldr	r2, [pc, #208]	@ (80011ac <DHT11_Read+0xf0>)
 80010da:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010dc:	e004      	b.n	80010e8 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80010de:	f000 fecd 	bl	8001e7c <HAL_GetTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a31      	ldr	r2, [pc, #196]	@ (80011ac <DHT11_Read+0xf0>)
 80010e6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ec:	4830      	ldr	r0, [pc, #192]	@ (80011b0 <DHT11_Read+0xf4>)
 80010ee:	f001 fa2d 	bl	800254c <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d106      	bne.n	8001106 <DHT11_Read+0x4a>
 80010f8:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <DHT11_Read+0xec>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	1c9a      	adds	r2, r3, #2
 80010fe:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <DHT11_Read+0xf0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d8eb      	bhi.n	80010de <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8001106:	2028      	movs	r0, #40	@ 0x28
 8001108:	f7ff ff46 	bl	8000f98 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800110c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001110:	4827      	ldr	r0, [pc, #156]	@ (80011b0 <DHT11_Read+0xf4>)
 8001112:	f001 fa1b 	bl	800254c <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10e      	bne.n	800113a <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2201      	movs	r2, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	b25b      	sxtb	r3, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	b25a      	sxtb	r2, r3
 800112e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001132:	4013      	ands	r3, r2
 8001134:	b25b      	sxtb	r3, r3
 8001136:	71bb      	strb	r3, [r7, #6]
 8001138:	e00b      	b.n	8001152 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f1c3 0307 	rsb	r3, r3, #7
 8001140:	2201      	movs	r2, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	b25a      	sxtb	r2, r3
 8001148:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800114c:	4313      	orrs	r3, r2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001152:	f000 fe93 	bl	8001e7c <HAL_GetTick>
 8001156:	4603      	mov	r3, r0
 8001158:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <DHT11_Read+0xec>)
 800115a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800115c:	f000 fe8e 	bl	8001e7c <HAL_GetTick>
 8001160:	4603      	mov	r3, r0
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <DHT11_Read+0xf0>)
 8001164:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001166:	e004      	b.n	8001172 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001168:	f000 fe88 	bl	8001e7c <HAL_GetTick>
 800116c:	4603      	mov	r3, r0
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <DHT11_Read+0xf0>)
 8001170:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001172:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001176:	480e      	ldr	r0, [pc, #56]	@ (80011b0 <DHT11_Read+0xf4>)
 8001178:	f001 f9e8 	bl	800254c <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <DHT11_Read+0xd4>
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <DHT11_Read+0xec>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	1c9a      	adds	r2, r3, #2
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <DHT11_Read+0xf0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8eb      	bhi.n	8001168 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3301      	adds	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d995      	bls.n	80010c8 <DHT11_Read+0xc>
    }
  }
  return b;
 800119c:	79bb      	ldrb	r3, [r7, #6]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200002e8 	.word	0x200002e8
 80011ac:	200002ec 	.word	0x200002ec
 80011b0:	40020800 	.word	0x40020800

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	ed2d 8b02 	vpush	{d8}
 80011ba:	b091      	sub	sp, #68	@ 0x44
 80011bc:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f000 fdf7 	bl	8001db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 f97b 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f000 fa89 	bl	80016dc <MX_GPIO_Init>
  MX_UART4_Init();
 80011ca:	f000 fa33 	bl	8001634 <MX_UART4_Init>
  MX_TIM1_Init();
 80011ce:	f000 f9e1 	bl	8001594 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80011d2:	f000 fa59 	bl	8001688 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80011d6:	489c      	ldr	r0, [pc, #624]	@ (8001448 <main+0x294>)
 80011d8:	f001 ff9c 	bl	8003114 <HAL_TIM_Base_Start>
  //HAL_UART_Transmit(&huart2, "Start\n", 28, 1000u);

  UART_SendString("[DEBUG] STM32 USART6 Initialized!\n");
 80011dc:	489b      	ldr	r0, [pc, #620]	@ (800144c <main+0x298>)
 80011de:	f000 faf9 	bl	80017d4 <UART_SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (DHT11_Start()) {
 80011e2:	f7ff fef3 	bl	8000fcc <DHT11_Start>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80ca 	beq.w	8001382 <main+0x1ce>
          RHI = DHT11_Read(); // Relative humidity integral
 80011ee:	f7ff ff65 	bl	80010bc <DHT11_Read>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b96      	ldr	r3, [pc, #600]	@ (8001450 <main+0x29c>)
 80011f8:	701a      	strb	r2, [r3, #0]
          RHD = DHT11_Read(); // Relative humidity decimal
 80011fa:	f7ff ff5f 	bl	80010bc <DHT11_Read>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b94      	ldr	r3, [pc, #592]	@ (8001454 <main+0x2a0>)
 8001204:	701a      	strb	r2, [r3, #0]
          TCI = DHT11_Read(); // Celsius integral
 8001206:	f7ff ff59 	bl	80010bc <DHT11_Read>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b92      	ldr	r3, [pc, #584]	@ (8001458 <main+0x2a4>)
 8001210:	701a      	strb	r2, [r3, #0]
          TCD = DHT11_Read(); // Celsius decimal
 8001212:	f7ff ff53 	bl	80010bc <DHT11_Read>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b90      	ldr	r3, [pc, #576]	@ (800145c <main+0x2a8>)
 800121c:	701a      	strb	r2, [r3, #0]
          SUM = DHT11_Read(); // Check sum
 800121e:	f7ff ff4d 	bl	80010bc <DHT11_Read>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b8e      	ldr	r3, [pc, #568]	@ (8001460 <main+0x2ac>)
 8001228:	701a      	strb	r2, [r3, #0]
          if (RHI + RHD + TCI + TCD == SUM) {
 800122a:	4b89      	ldr	r3, [pc, #548]	@ (8001450 <main+0x29c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b88      	ldr	r3, [pc, #544]	@ (8001454 <main+0x2a0>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4413      	add	r3, r2
 8001236:	4a88      	ldr	r2, [pc, #544]	@ (8001458 <main+0x2a4>)
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a87      	ldr	r2, [pc, #540]	@ (800145c <main+0x2a8>)
 800123e:	7812      	ldrb	r2, [r2, #0]
 8001240:	4413      	add	r3, r2
 8001242:	4a87      	ldr	r2, [pc, #540]	@ (8001460 <main+0x2ac>)
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	4293      	cmp	r3, r2
 8001248:	f040 809b 	bne.w	8001382 <main+0x1ce>
              // Can use RHI and TCI for any purposes if whole number only needed
              tCelsius = (float) TCI + (float) (TCD / 10.0);
 800124c:	4b82      	ldr	r3, [pc, #520]	@ (8001458 <main+0x2a4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001258:	4b80      	ldr	r3, [pc, #512]	@ (800145c <main+0x2a8>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f991 	bl	8000584 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b7f      	ldr	r3, [pc, #508]	@ (8001464 <main+0x2b0>)
 8001268:	f7ff fb20 	bl	80008ac <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fcc8 	bl	8000c08 <__aeabi_d2f>
 8001278:	ee07 0a90 	vmov	s15, r0
 800127c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001280:	4b79      	ldr	r3, [pc, #484]	@ (8001468 <main+0x2b4>)
 8001282:	edc3 7a00 	vstr	s15, [r3]
              tFahrenheit = tCelsius * 9 / 5 + 32;
 8001286:	4b78      	ldr	r3, [pc, #480]	@ (8001468 <main+0x2b4>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001294:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129c:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800146c <main+0x2b8>
 80012a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a4:	4b72      	ldr	r3, [pc, #456]	@ (8001470 <main+0x2bc>)
 80012a6:	edc3 7a00 	vstr	s15, [r3]
              RH = (float) RHI + (float) (RHD / 10.0);
 80012aa:	4b69      	ldr	r3, [pc, #420]	@ (8001450 <main+0x29c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80012b6:	4b67      	ldr	r3, [pc, #412]	@ (8001454 <main+0x2a0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f962 	bl	8000584 <__aeabi_i2d>
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	4b67      	ldr	r3, [pc, #412]	@ (8001464 <main+0x2b0>)
 80012c6:	f7ff faf1 	bl	80008ac <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fc99 	bl	8000c08 <__aeabi_d2f>
 80012d6:	ee07 0a90 	vmov	s15, r0
 80012da:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012de:	4b65      	ldr	r3, [pc, #404]	@ (8001474 <main+0x2c0>)
 80012e0:	edc3 7a00 	vstr	s15, [r3]
              // Can use tCelsius, tFahrenheit and RH for any purposes
              TFI = tFahrenheit;  // Fahrenheit integral
 80012e4:	4b62      	ldr	r3, [pc, #392]	@ (8001470 <main+0x2bc>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ee:	edc7 7a03 	vstr	s15, [r7, #12]
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b60      	ldr	r3, [pc, #384]	@ (8001478 <main+0x2c4>)
 80012f8:	701a      	strb	r2, [r3, #0]
              TFD = tFahrenheit * 10 - TFI * 10; // Fahrenheit decimal
 80012fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001470 <main+0x2bc>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001304:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001308:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <main+0x2c4>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001326:	edc7 7a03 	vstr	s15, [r7, #12]
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b53      	ldr	r3, [pc, #332]	@ (800147c <main+0x2c8>)
 8001330:	701a      	strb	r2, [r3, #0]
              printf("%d.%d C   %d.%d F", TCI, TCD, TFI, TFD);
 8001332:	4b49      	ldr	r3, [pc, #292]	@ (8001458 <main+0x2a4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	4b48      	ldr	r3, [pc, #288]	@ (800145c <main+0x2a8>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b4e      	ldr	r3, [pc, #312]	@ (8001478 <main+0x2c4>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <main+0x2c8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4603      	mov	r3, r0
 800134c:	484c      	ldr	r0, [pc, #304]	@ (8001480 <main+0x2cc>)
 800134e:	f003 fff9 	bl	8005344 <iprintf>
              char *buf = (char *) malloc(sizeof(char) * 100);
 8001352:	2064      	movs	r0, #100	@ 0x64
 8001354:	f003 fa26 	bl	80047a4 <malloc>
 8001358:	4603      	mov	r3, r0
 800135a:	617b      	str	r3, [r7, #20]
              sprintf(buf, "%d.%d C %d.%d %%\n", TCI, TCD, RHI, RHD);
 800135c:	4b3e      	ldr	r3, [pc, #248]	@ (8001458 <main+0x2a4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <main+0x2a8>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	4b39      	ldr	r3, [pc, #228]	@ (8001450 <main+0x29c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <main+0x2a0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	4942      	ldr	r1, [pc, #264]	@ (8001484 <main+0x2d0>)
 800137c:	6978      	ldr	r0, [r7, #20]
 800137e:	f003 fff3 	bl	8005368 <siprintf>
              //HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000u);
          }
      }

      sprintf(
 8001382:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <main+0x2a4>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	469c      	mov	ip, r3
 8001388:	4b34      	ldr	r3, [pc, #208]	@ (800145c <main+0x2a8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	469e      	mov	lr, r3
 800138e:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <main+0x29c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <main+0x2a0>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b3b      	ldr	r3, [pc, #236]	@ (8001488 <main+0x2d4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4a3a      	ldr	r2, [pc, #232]	@ (800148c <main+0x2d8>)
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	493a      	ldr	r1, [pc, #232]	@ (8001490 <main+0x2dc>)
 80013a6:	6809      	ldr	r1, [r1, #0]
              uart_buf,
              "{\"Temperature\":%d.%d,\"Humidity\":%d.%d,\"RGB\":{\"red\":%d,\"green\":%d,\"blue\":%d,\"state\":%s},\"Led\":%s,\"Buzzer\":%s,\"Button\":%s,\"TemperatureThreshold\":%d}\n",
              TCI, TCD, // Temperature
              RHI, RHD, // Humidity
              rgbr, rgbg, rgbb, // RGB color
              rgb ? "true" : "false", // RGB state
 80013a8:	483a      	ldr	r0, [pc, #232]	@ (8001494 <main+0x2e0>)
 80013aa:	7800      	ldrb	r0, [r0, #0]
      sprintf(
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d001      	beq.n	80013b4 <main+0x200>
 80013b0:	4839      	ldr	r0, [pc, #228]	@ (8001498 <main+0x2e4>)
 80013b2:	e000      	b.n	80013b6 <main+0x202>
 80013b4:	4839      	ldr	r0, [pc, #228]	@ (800149c <main+0x2e8>)
              led ? "true" : "false", // Led state
 80013b6:	4c3a      	ldr	r4, [pc, #232]	@ (80014a0 <main+0x2ec>)
 80013b8:	7824      	ldrb	r4, [r4, #0]
      sprintf(
 80013ba:	2c00      	cmp	r4, #0
 80013bc:	d001      	beq.n	80013c2 <main+0x20e>
 80013be:	4c36      	ldr	r4, [pc, #216]	@ (8001498 <main+0x2e4>)
 80013c0:	e000      	b.n	80013c4 <main+0x210>
 80013c2:	4c36      	ldr	r4, [pc, #216]	@ (800149c <main+0x2e8>)
              buz ? "true" : "false", // Buzzer state
 80013c4:	4d37      	ldr	r5, [pc, #220]	@ (80014a4 <main+0x2f0>)
 80013c6:	782d      	ldrb	r5, [r5, #0]
      sprintf(
 80013c8:	2d00      	cmp	r5, #0
 80013ca:	d001      	beq.n	80013d0 <main+0x21c>
 80013cc:	4d32      	ldr	r5, [pc, #200]	@ (8001498 <main+0x2e4>)
 80013ce:	e000      	b.n	80013d2 <main+0x21e>
 80013d0:	4d32      	ldr	r5, [pc, #200]	@ (800149c <main+0x2e8>)
              but ? "true" : "false", // Button state
 80013d2:	4e35      	ldr	r6, [pc, #212]	@ (80014a8 <main+0x2f4>)
 80013d4:	7836      	ldrb	r6, [r6, #0]
      sprintf(
 80013d6:	2e00      	cmp	r6, #0
 80013d8:	d001      	beq.n	80013de <main+0x22a>
 80013da:	4e2f      	ldr	r6, [pc, #188]	@ (8001498 <main+0x2e4>)
 80013dc:	e000      	b.n	80013e0 <main+0x22c>
 80013de:	4e2f      	ldr	r6, [pc, #188]	@ (800149c <main+0x2e8>)
 80013e0:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <main+0x2f8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80013e6:	9608      	str	r6, [sp, #32]
 80013e8:	9507      	str	r5, [sp, #28]
 80013ea:	9406      	str	r4, [sp, #24]
 80013ec:	9005      	str	r0, [sp, #20]
 80013ee:	9104      	str	r1, [sp, #16]
 80013f0:	9203      	str	r2, [sp, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	4673      	mov	r3, lr
 8001400:	4662      	mov	r2, ip
 8001402:	492b      	ldr	r1, [pc, #172]	@ (80014b0 <main+0x2fc>)
 8001404:	482b      	ldr	r0, [pc, #172]	@ (80014b4 <main+0x300>)
 8001406:	f003 ffaf 	bl	8005368 <siprintf>
              temp_threshold // Temperature threshold
      );
      UART_SendString(uart_buf);
 800140a:	482a      	ldr	r0, [pc, #168]	@ (80014b4 <main+0x300>)
 800140c:	f000 f9e2 	bl	80017d4 <UART_SendString>

      HAL_Delay(2000);
 8001410:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001414:	f000 fd3e 	bl	8001e94 <HAL_Delay>

      //if (HAL_UART_Receive(&huart4, (uint8_t *) rx_buffer, 1, 100) == HAL_OK) {
      //    HAL_UART_Transmit(&huart4, (uint8_t *) rx_buffer, 1, HAL_MAX_DELAY);
      //}

      Update_RGB_LED(rgbr, rgbg, rgbb, rgb);
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <main+0x2d4>)
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <main+0x2d8>)
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <main+0x2dc>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <main+0x2e0>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f000 f9ea 	bl	8001800 <Update_RGB_LED>
      Update_Buzzer(buz, buz_intensity);
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <main+0x2f0>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4a21      	ldr	r2, [pc, #132]	@ (80014b8 <main+0x304>)
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fa28 	bl	800188c <Update_Buzzer>
      Update_Radiator(led);
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <main+0x2ec>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fa53 	bl	80018ec <Update_Radiator>
      if (DHT11_Start()) {
 8001446:	e6cc      	b.n	80011e2 <main+0x2e>
 8001448:	20000208 	.word	0x20000208
 800144c:	08007470 	.word	0x08007470
 8001450:	200002e0 	.word	0x200002e0
 8001454:	200002e1 	.word	0x200002e1
 8001458:	200002e2 	.word	0x200002e2
 800145c:	200002e3 	.word	0x200002e3
 8001460:	200002e4 	.word	0x200002e4
 8001464:	40240000 	.word	0x40240000
 8001468:	200002f0 	.word	0x200002f0
 800146c:	42000000 	.word	0x42000000
 8001470:	200002f4 	.word	0x200002f4
 8001474:	200002f8 	.word	0x200002f8
 8001478:	200002fc 	.word	0x200002fc
 800147c:	200002fd 	.word	0x200002fd
 8001480:	08007494 	.word	0x08007494
 8001484:	080074a8 	.word	0x080074a8
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004
 8001490:	20000008 	.word	0x20000008
 8001494:	2000000c 	.word	0x2000000c
 8001498:	080074bc 	.word	0x080074bc
 800149c:	080074c4 	.word	0x080074c4
 80014a0:	200002fe 	.word	0x200002fe
 80014a4:	200002ff 	.word	0x200002ff
 80014a8:	20000300 	.word	0x20000300
 80014ac:	20000010 	.word	0x20000010
 80014b0:	080074cc 	.word	0x080074cc
 80014b4:	20000304 	.word	0x20000304
 80014b8:	20000014 	.word	0x20000014

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	@ 0x50
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2234      	movs	r2, #52	@ 0x34
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 ffaf 	bl	800542e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b29      	ldr	r3, [pc, #164]	@ (800158c <SystemClock_Config+0xd0>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	4a28      	ldr	r2, [pc, #160]	@ (800158c <SystemClock_Config+0xd0>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f0:	4b26      	ldr	r3, [pc, #152]	@ (800158c <SystemClock_Config+0xd0>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4b23      	ldr	r3, [pc, #140]	@ (8001590 <SystemClock_Config+0xd4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <SystemClock_Config+0xd4>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <SystemClock_Config+0xd4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	2302      	movs	r3, #2
 800152a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152c:	2300      	movs	r3, #0
 800152e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001530:	2308      	movs	r3, #8
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001534:	2348      	movs	r3, #72	@ 0x48
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4618      	mov	r0, r3
 800154a:	f001 faf5 	bl	8002b38 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001554:	f000 fa0a 	bl	800196c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001568:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2102      	movs	r1, #2
 8001574:	4618      	mov	r0, r3
 8001576:	f001 f81b 	bl	80025b0 <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001580:	f000 f9f4 	bl	800196c <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3750      	adds	r7, #80	@ 0x50
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_TIM1_Init+0x98>)
 80015b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001630 <MX_TIM1_Init+0x9c>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <MX_TIM1_Init+0x98>)
 80015b8:	2247      	movs	r2, #71	@ 0x47
 80015ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <MX_TIM1_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <MX_TIM1_Init+0x98>)
 80015c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <MX_TIM1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <MX_TIM1_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <MX_TIM1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015dc:	4813      	ldr	r0, [pc, #76]	@ (800162c <MX_TIM1_Init+0x98>)
 80015de:	f001 fd49 	bl	8003074 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 f9c0 	bl	800196c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_TIM1_Init+0x98>)
 80015fa:	f001 fdf3 	bl	80031e4 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001604:	f000 f9b2 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_TIM1_Init+0x98>)
 8001616:	f001 fff3 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001620:	f000 f9a4 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000208 	.word	0x20000208
 8001630:	40010000 	.word	0x40010000

08001634 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_UART4_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <MX_UART4_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <MX_UART4_Init+0x4c>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_UART4_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <MX_UART4_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <MX_UART4_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <MX_UART4_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <MX_UART4_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_UART4_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_UART4_Init+0x4c>)
 800166c:	f002 f844 	bl	80036f8 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f979 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000250 	.word	0x20000250
 8001684:	40004c00 	.word	0x40004c00

08001688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <MX_USART2_UART_Init+0x50>)
 8001690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f002 f81a 	bl	80036f8 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ca:	f000 f94f 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000298 	.word	0x20000298
 80016d8:	40004400 	.word	0x40004400

080016dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b33      	ldr	r3, [pc, #204]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a32      	ldr	r2, [pc, #200]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a2b      	ldr	r2, [pc, #172]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a24      	ldr	r2, [pc, #144]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGBBLUE_Pin|TEMP_Pin|RADIATEUR_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	f641 4102 	movw	r1, #7170	@ 0x1c02
 800174c:	481e      	ldr	r0, [pc, #120]	@ (80017c8 <MX_GPIO_Init+0xec>)
 800174e:	f000 ff15 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGBRED_GPIO_Port, RGBRED_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2110      	movs	r1, #16
 8001756:	481d      	ldr	r0, [pc, #116]	@ (80017cc <MX_GPIO_Init+0xf0>)
 8001758:	f000 ff10 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGBGREEN_Pin|TEMP_SENSOR_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2121      	movs	r1, #33	@ 0x21
 8001760:	481b      	ldr	r0, [pc, #108]	@ (80017d0 <MX_GPIO_Init+0xf4>)
 8001762:	f000 ff0b 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGBBLUE_Pin TEMP_Pin RADIATEUR_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = RGBBLUE_Pin|TEMP_Pin|RADIATEUR_Pin|BUZZER_Pin;
 8001766:	f641 4302 	movw	r3, #7170	@ 0x1c02
 800176a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4619      	mov	r1, r3
 800177e:	4812      	ldr	r0, [pc, #72]	@ (80017c8 <MX_GPIO_Init+0xec>)
 8001780:	f000 fd50 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGBRED_Pin */
  GPIO_InitStruct.Pin = RGBRED_Pin;
 8001784:	2310      	movs	r3, #16
 8001786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RGBRED_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	480c      	ldr	r0, [pc, #48]	@ (80017cc <MX_GPIO_Init+0xf0>)
 800179c:	f000 fd42 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGBGREEN_Pin TEMP_SENSOR_Pin */
  GPIO_InitStruct.Pin = RGBGREEN_Pin|TEMP_SENSOR_Pin;
 80017a0:	2321      	movs	r3, #33	@ 0x21
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	4806      	ldr	r0, [pc, #24]	@ (80017d0 <MX_GPIO_Init+0xf4>)
 80017b8:	f000 fd34 	bl	8002224 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400

080017d4 <UART_SendString>:

/* USER CODE BEGIN 4 */

void UART_SendString(char *str) { HAL_UART_Transmit(&huart4, (uint8_t *) str, strlen(str), HAL_MAX_DELAY); }
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7fe fd77 	bl	80002d0 <strlen>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <UART_SendString+0x28>)
 80017ee:	f001 ffd3 	bl	8003798 <HAL_UART_Transmit>
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000250 	.word	0x20000250

08001800 <Update_RGB_LED>:

void Update_RGB_LED(int red, int green, int blue, bool state) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	70fb      	strb	r3, [r7, #3]
    if (state) {
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d021      	beq.n	8001858 <Update_RGB_LED+0x58>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, red > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfcc      	ite	gt
 800181a:	2301      	movgt	r3, #1
 800181c:	2300      	movle	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	2110      	movs	r1, #16
 8001824:	4816      	ldr	r0, [pc, #88]	@ (8001880 <Update_RGB_LED+0x80>)
 8001826:	f000 fea9 	bl	800257c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, green > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bfcc      	ite	gt
 8001830:	2301      	movgt	r3, #1
 8001832:	2300      	movle	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	2101      	movs	r1, #1
 800183a:	4812      	ldr	r0, [pc, #72]	@ (8001884 <Update_RGB_LED+0x84>)
 800183c:	f000 fe9e 	bl	800257c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, blue > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	bfcc      	ite	gt
 8001846:	2301      	movgt	r3, #1
 8001848:	2300      	movle	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	2102      	movs	r1, #2
 8001850:	480d      	ldr	r0, [pc, #52]	@ (8001888 <Update_RGB_LED+0x88>)
 8001852:	f000 fe93 	bl	800257c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    }
}
 8001856:	e00e      	b.n	8001876 <Update_RGB_LED+0x76>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2110      	movs	r1, #16
 800185c:	4808      	ldr	r0, [pc, #32]	@ (8001880 <Update_RGB_LED+0x80>)
 800185e:	f000 fe8d 	bl	800257c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2101      	movs	r1, #1
 8001866:	4807      	ldr	r0, [pc, #28]	@ (8001884 <Update_RGB_LED+0x84>)
 8001868:	f000 fe88 	bl	800257c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2102      	movs	r1, #2
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <Update_RGB_LED+0x88>)
 8001872:	f000 fe83 	bl	800257c <HAL_GPIO_WritePin>
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800

0800188c <Update_Buzzer>:

void Update_Buzzer(bool state, int intensity) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
    if (state) {
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <Update_Buzzer+0x3e>
        // Convertir l'intensité en une valeur de PWM (0-100% -> 0-255)
        int pwm_value = (intensity * 255) / 100;
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	4a0e      	ldr	r2, [pc, #56]	@ (80018e0 <Update_Buzzer+0x54>)
 80018a8:	fb82 1203 	smull	r1, r2, r2, r3
 80018ac:	1152      	asrs	r2, r2, #5
 80018ae:	17db      	asrs	r3, r3, #31
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	60fb      	str	r3, [r7, #12]
        // Configurer le timer pour générer un signal PWM avec la valeur calculée
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <Update_Buzzer+0x58>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018c2:	4809      	ldr	r0, [pc, #36]	@ (80018e8 <Update_Buzzer+0x5c>)
 80018c4:	f000 fe5a 	bl	800257c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, GPIO_PIN_RESET);
    }
}
 80018c8:	e005      	b.n	80018d6 <Update_Buzzer+0x4a>
        HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <Update_Buzzer+0x5c>)
 80018d2:	f000 fe53 	bl	800257c <HAL_GPIO_WritePin>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	51eb851f 	.word	0x51eb851f
 80018e4:	20000208 	.word	0x20000208
 80018e8:	40020800 	.word	0x40020800

080018ec <Update_Radiator>:

void Update_Radiator(bool state) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
    if (state) {
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <Update_Radiator+0x1e>
        HAL_GPIO_WritePin(GPIOC, RADIATEUR_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001902:	4807      	ldr	r0, [pc, #28]	@ (8001920 <Update_Radiator+0x34>)
 8001904:	f000 fe3a 	bl	800257c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, RADIATEUR_Pin, GPIO_PIN_RESET);
    }
}
 8001908:	e005      	b.n	8001916 <Update_Radiator+0x2a>
        HAL_GPIO_WritePin(GPIOC, RADIATEUR_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001910:	4803      	ldr	r0, [pc, #12]	@ (8001920 <Update_Radiator+0x34>)
 8001912:	f000 fe33 	bl	800257c <HAL_GPIO_WritePin>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020800 	.word	0x40020800

08001924 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
        HAL_UART_Receive_IT(&huart4, rx_buffer, 1);
 800192c:	2201      	movs	r2, #1
 800192e:	490b      	ldr	r1, [pc, #44]	@ (800195c <HAL_UART_RxCpltCallback+0x38>)
 8001930:	480b      	ldr	r0, [pc, #44]	@ (8001960 <HAL_UART_RxCpltCallback+0x3c>)
 8001932:	f001 ffbc 	bl	80038ae <HAL_UART_Receive_IT>
        //UART_SendString(rx_buffer);
        if (strcmp(rx_buffer,"\n")) {
 8001936:	490b      	ldr	r1, [pc, #44]	@ (8001964 <HAL_UART_RxCpltCallback+0x40>)
 8001938:	4808      	ldr	r0, [pc, #32]	@ (800195c <HAL_UART_RxCpltCallback+0x38>)
 800193a:	f7fe fc69 	bl	8000210 <strcmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_UART_RxCpltCallback+0x28>
                UART_SendString(rx_buffer);
 8001944:	4805      	ldr	r0, [pc, #20]	@ (800195c <HAL_UART_RxCpltCallback+0x38>)
 8001946:	f7ff ff45 	bl	80017d4 <UART_SendString>
            // Relancez la réception pour le prochain caractère

   // HAL_UART_Receive_IT(&huart2, rx_buffer, 16);
    //HAL_UART_Transmit(&huart2, rx_buffer, 16, 0xFFFF);

}
 800194a:	e002      	b.n	8001952 <HAL_UART_RxCpltCallback+0x2e>
                UART_SendString("[DEBUG] ESPACE\n");
 800194c:	4806      	ldr	r0, [pc, #24]	@ (8001968 <HAL_UART_RxCpltCallback+0x44>)
 800194e:	f7ff ff41 	bl	80017d4 <UART_SendString>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200003cc 	.word	0x200003cc
 8001960:	20000250 	.word	0x20000250
 8001964:	08007560 	.word	0x08007560
 8001968:	08007564 	.word	0x08007564

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <Error_Handler+0x8>

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a04 <HAL_TIM_Base_MspInit+0x3c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10d      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_TIM_Base_MspInit+0x40>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_TIM_Base_MspInit+0x40>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <HAL_TIM_Base_MspInit+0x40>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	@ 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a3a      	ldr	r2, [pc, #232]	@ (8001b14 <HAL_UART_MspInit+0x108>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d134      	bne.n	8001a98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	4b39      	ldr	r3, [pc, #228]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	4a38      	ldr	r2, [pc, #224]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001a38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3e:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	4b32      	ldr	r3, [pc, #200]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a31      	ldr	r2, [pc, #196]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a66:	2303      	movs	r3, #3
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a76:	2308      	movs	r3, #8
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4826      	ldr	r0, [pc, #152]	@ (8001b1c <HAL_UART_MspInit+0x110>)
 8001a82:	f000 fbcf 	bl	8002224 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2034      	movs	r0, #52	@ 0x34
 8001a8c:	f000 fb01 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a90:	2034      	movs	r0, #52	@ 0x34
 8001a92:	f000 fb1a 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a96:	e038      	b.n	8001b0a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a20      	ldr	r2, [pc, #128]	@ (8001b20 <HAL_UART_MspInit+0x114>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d133      	bne.n	8001b0a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_UART_MspInit+0x10c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ada:	230c      	movs	r3, #12
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aea:	2307      	movs	r3, #7
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4809      	ldr	r0, [pc, #36]	@ (8001b1c <HAL_UART_MspInit+0x110>)
 8001af6:	f000 fb95 	bl	8002224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2026      	movs	r0, #38	@ 0x26
 8001b00:	f000 fac7 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b04:	2026      	movs	r0, #38	@ 0x26
 8001b06:	f000 fae0 	bl	80020ca <HAL_NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3730      	adds	r7, #48	@ 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40004c00 	.word	0x40004c00
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40004400 	.word	0x40004400

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <NMI_Handler+0x4>

08001b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f000 f96b 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <USART2_IRQHandler+0x10>)
 8001b8a:	f001 feb5 	bl	80038f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000298 	.word	0x20000298

08001b98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <UART4_IRQHandler+0x10>)
 8001b9e:	f001 feab 	bl	80038f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000250 	.word	0x20000250

08001bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_kill>:

int _kill(int pid, int sig)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc6:	f003 fc95 	bl	80054f4 <__errno>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2216      	movs	r2, #22
 8001bce:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_exit>:

void _exit (int status)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ffe7 	bl	8001bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bee:	bf00      	nop
 8001bf0:	e7fd      	b.n	8001bee <_exit+0x12>

08001bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e00a      	b.n	8001c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c04:	f3af 8000 	nop.w
 8001c08:	4601      	mov	r1, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf0      	blt.n	8001c04 <_read+0x12>
  }

  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e009      	b.n	8001c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf1      	blt.n	8001c3e <_write+0x12>
  }
  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_close>:

int _close(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_isatty>:

int _isatty(int file)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f003 fbfa 	bl	80054f4 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20020000 	.word	0x20020000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	200003d0 	.word	0x200003d0
 8001d34:	20000528 	.word	0x20000528

08001d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <SystemInit+0x20>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d42:	4a05      	ldr	r2, [pc, #20]	@ (8001d58 <SystemInit+0x20>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d60:	f7ff ffea 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d64:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d66:	490d      	ldr	r1, [pc, #52]	@ (8001d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d68:	4a0d      	ldr	r2, [pc, #52]	@ (8001da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d8a:	f003 fbb9 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8e:	f7ff fa11 	bl	80011b4 <main>
  bx  lr    
 8001d92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001da0:	08007910 	.word	0x08007910
  ldr r2, =_sbss
 8001da4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001da8:	20000524 	.word	0x20000524

08001dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <HAL_Init+0x40>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <HAL_Init+0x40>)
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <HAL_Init+0x40>)
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 f94f 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dde:	200f      	movs	r0, #15
 8001de0:	f000 f808 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de4:	f7ff fdc8 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <HAL_InitTick+0x54>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_InitTick+0x58>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f967 	bl	80020e6 <HAL_SYSTICK_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00e      	b.n	8001e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d80a      	bhi.n	8001e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f000 f92f 	bl	8002092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e34:	4a06      	ldr	r2, [pc, #24]	@ (8001e50 <HAL_InitTick+0x5c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000018 	.word	0x20000018
 8001e4c:	20000020 	.word	0x20000020
 8001e50:	2000001c 	.word	0x2000001c

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000020 	.word	0x20000020
 8001e78:	200003d4 	.word	0x200003d4

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	200003d4 	.word	0x200003d4

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff ffee 	bl	8001e7c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eba:	bf00      	nop
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000020 	.word	0x20000020

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	@ (8001f78 <__NVIC_EnableIRQ+0x38>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	@ (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	@ 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f7ff ff8e 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff29 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a4:	f7ff ff3e 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 80020a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff ff8e 	bl	8001fd0 <NVIC_EncodePriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff5d 	bl	8001f7c <__NVIC_SetPriority>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff31 	bl	8001f40 <__NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffa2 	bl	8002038 <SysTick_Config>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff feb6 	bl	8001e7c <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d008      	beq.n	8002130 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2280      	movs	r2, #128	@ 0x80
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e052      	b.n	80021d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0216 	bic.w	r2, r2, #22
 800213e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800214e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d103      	bne.n	8002160 <HAL_DMA_Abort+0x62>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0208 	bic.w	r2, r2, #8
 800216e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002180:	e013      	b.n	80021aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002182:	f7ff fe7b 	bl	8001e7c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b05      	cmp	r3, #5
 800218e:	d90c      	bls.n	80021aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2203      	movs	r2, #3
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e015      	b.n	80021d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1e4      	bne.n	8002182 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	223f      	movs	r2, #63	@ 0x3f
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d004      	beq.n	80021fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2280      	movs	r2, #128	@ 0x80
 80021f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e00c      	b.n	8002216 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2205      	movs	r2, #5
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	@ 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e165      	b.n	800250c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8154 	bne.w	8002506 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	2b02      	cmp	r3, #2
 8002274:	d130      	bne.n	80022d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d017      	beq.n	8002314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80ae 	beq.w	8002506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002524 <HAL_GPIO_Init+0x300>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002524 <HAL_GPIO_Init+0x300>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002524 <HAL_GPIO_Init+0x300>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a58      	ldr	r2, [pc, #352]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	@ (800252c <HAL_GPIO_Init+0x308>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d025      	beq.n	800243e <HAL_GPIO_Init+0x21a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002530 <HAL_GPIO_Init+0x30c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <HAL_GPIO_Init+0x216>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002534 <HAL_GPIO_Init+0x310>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x212>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4c      	ldr	r2, [pc, #304]	@ (8002538 <HAL_GPIO_Init+0x314>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x20e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4b      	ldr	r2, [pc, #300]	@ (800253c <HAL_GPIO_Init+0x318>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x20a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4a      	ldr	r2, [pc, #296]	@ (8002540 <HAL_GPIO_Init+0x31c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x206>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a49      	ldr	r2, [pc, #292]	@ (8002544 <HAL_GPIO_Init+0x320>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x202>
 8002422:	2306      	movs	r3, #6
 8002424:	e00c      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002426:	2307      	movs	r3, #7
 8002428:	e00a      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800242a:	2305      	movs	r3, #5
 800242c:	e008      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800242e:	2304      	movs	r3, #4
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002432:	2303      	movs	r3, #3
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002436:	2302      	movs	r3, #2
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800243e:	2300      	movs	r3, #0
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f002 0203 	and.w	r2, r2, #3
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b3a      	ldr	r3, [pc, #232]	@ (8002548 <HAL_GPIO_Init+0x324>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002482:	4a31      	ldr	r2, [pc, #196]	@ (8002548 <HAL_GPIO_Init+0x324>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002488:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <HAL_GPIO_Init+0x324>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ac:	4a26      	ldr	r2, [pc, #152]	@ (8002548 <HAL_GPIO_Init+0x324>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b2:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <HAL_GPIO_Init+0x324>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002548 <HAL_GPIO_Init+0x324>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <HAL_GPIO_Init+0x324>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002500:	4a11      	ldr	r2, [pc, #68]	@ (8002548 <HAL_GPIO_Init+0x324>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	f67f ae96 	bls.w	8002240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e001      	b.n	800256e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0cc      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b68      	ldr	r3, [pc, #416]	@ (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d90c      	bls.n	80025ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b65      	ldr	r3, [pc, #404]	@ (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b63      	ldr	r3, [pc, #396]	@ (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0b8      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002604:	4b59      	ldr	r3, [pc, #356]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a58      	ldr	r2, [pc, #352]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800260e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800261c:	4b53      	ldr	r3, [pc, #332]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a52      	ldr	r2, [pc, #328]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002628:	4b50      	ldr	r3, [pc, #320]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	494d      	ldr	r1, [pc, #308]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d044      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b47      	ldr	r3, [pc, #284]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d119      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e07f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d003      	beq.n	800266e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266a:	2b03      	cmp	r3, #3
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b3f      	ldr	r3, [pc, #252]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	4b3b      	ldr	r3, [pc, #236]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e067      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b37      	ldr	r3, [pc, #220]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4934      	ldr	r1, [pc, #208]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7ff fbec 	bl	8001e7c <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7ff fbe8 	bl	8001e7c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e04f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b25      	ldr	r3, [pc, #148]	@ (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d20c      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e032      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	4b19      	ldr	r3, [pc, #100]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4916      	ldr	r1, [pc, #88]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002722:	4b12      	ldr	r3, [pc, #72]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	490e      	ldr	r1, [pc, #56]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002736:	f000 f855 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	490a      	ldr	r1, [pc, #40]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	4a09      	ldr	r2, [pc, #36]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002752:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fb4c 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023c00 	.word	0x40023c00
 800276c:	40023800 	.word	0x40023800
 8002770:	08007574 	.word	0x08007574
 8002774:	20000018 	.word	0x20000018
 8002778:	2000001c 	.word	0x2000001c

0800277c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_RCC_GetHCLKFreq+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000018 	.word	0x20000018

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002798:	f7ff fff0 	bl	800277c <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0a9b      	lsrs	r3, r3, #10
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4903      	ldr	r1, [pc, #12]	@ (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08007584 	.word	0x08007584

080027bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c0:	f7ff ffdc 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0b5b      	lsrs	r3, r3, #13
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4903      	ldr	r1, [pc, #12]	@ (80027e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	08007584 	.word	0x08007584

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e8:	b0a6      	sub	sp, #152	@ 0x98
 80027ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280a:	4bc8      	ldr	r3, [pc, #800]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b0c      	cmp	r3, #12
 8002814:	f200 817e 	bhi.w	8002b14 <HAL_RCC_GetSysClockFreq+0x330>
 8002818:	a201      	add	r2, pc, #4	@ (adr r2, 8002820 <HAL_RCC_GetSysClockFreq+0x3c>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002855 	.word	0x08002855
 8002824:	08002b15 	.word	0x08002b15
 8002828:	08002b15 	.word	0x08002b15
 800282c:	08002b15 	.word	0x08002b15
 8002830:	0800285d 	.word	0x0800285d
 8002834:	08002b15 	.word	0x08002b15
 8002838:	08002b15 	.word	0x08002b15
 800283c:	08002b15 	.word	0x08002b15
 8002840:	08002865 	.word	0x08002865
 8002844:	08002b15 	.word	0x08002b15
 8002848:	08002b15 	.word	0x08002b15
 800284c:	08002b15 	.word	0x08002b15
 8002850:	080029cf 	.word	0x080029cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4bb6      	ldr	r3, [pc, #728]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800285a:	e15f      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285c:	4bb5      	ldr	r3, [pc, #724]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 800285e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002862:	e15b      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002864:	4bb1      	ldr	r3, [pc, #708]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002870:	4bae      	ldr	r3, [pc, #696]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d031      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287c:	4bab      	ldr	r3, [pc, #684]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	2200      	movs	r2, #0
 8002884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002890:	2300      	movs	r3, #0
 8002892:	667b      	str	r3, [r7, #100]	@ 0x64
 8002894:	4ba7      	ldr	r3, [pc, #668]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8002896:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800289a:	462a      	mov	r2, r5
 800289c:	fb03 f202 	mul.w	r2, r3, r2
 80028a0:	2300      	movs	r3, #0
 80028a2:	4621      	mov	r1, r4
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	4aa2      	ldr	r2, [pc, #648]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80028ac:	4621      	mov	r1, r4
 80028ae:	fba1 1202 	umull	r1, r2, r1, r2
 80028b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028b4:	460a      	mov	r2, r1
 80028b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80028b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80028ba:	4413      	add	r3, r2
 80028bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c2:	2200      	movs	r2, #0
 80028c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80028d0:	f7fe f9ea 	bl	8000ca8 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028de:	e064      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4b92      	ldr	r3, [pc, #584]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80028ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80028ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028f4:	2300      	movs	r3, #0
 80028f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80028fc:	4622      	mov	r2, r4
 80028fe:	462b      	mov	r3, r5
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0159      	lsls	r1, r3, #5
 800290a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290e:	0150      	lsls	r0, r2, #5
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4621      	mov	r1, r4
 8002916:	1a51      	subs	r1, r2, r1
 8002918:	6139      	str	r1, [r7, #16]
 800291a:	4629      	mov	r1, r5
 800291c:	eb63 0301 	sbc.w	r3, r3, r1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800292e:	4659      	mov	r1, fp
 8002930:	018b      	lsls	r3, r1, #6
 8002932:	4651      	mov	r1, sl
 8002934:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002938:	4651      	mov	r1, sl
 800293a:	018a      	lsls	r2, r1, #6
 800293c:	4651      	mov	r1, sl
 800293e:	ebb2 0801 	subs.w	r8, r2, r1
 8002942:	4659      	mov	r1, fp
 8002944:	eb63 0901 	sbc.w	r9, r3, r1
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002954:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002958:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800295c:	4690      	mov	r8, r2
 800295e:	4699      	mov	r9, r3
 8002960:	4623      	mov	r3, r4
 8002962:	eb18 0303 	adds.w	r3, r8, r3
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	462b      	mov	r3, r5
 800296a:	eb49 0303 	adc.w	r3, r9, r3
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800297c:	4629      	mov	r1, r5
 800297e:	028b      	lsls	r3, r1, #10
 8002980:	4621      	mov	r1, r4
 8002982:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002986:	4621      	mov	r1, r4
 8002988:	028a      	lsls	r2, r1, #10
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002992:	2200      	movs	r2, #0
 8002994:	643b      	str	r3, [r7, #64]	@ 0x40
 8002996:	647a      	str	r2, [r7, #68]	@ 0x44
 8002998:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800299c:	f7fe f984 	bl	8000ca8 <__aeabi_uldivmod>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4613      	mov	r3, r2
 80029a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029aa:	4b60      	ldr	r3, [pc, #384]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0c1b      	lsrs	r3, r3, #16
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	3301      	adds	r3, #1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80029bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029cc:	e0a6      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ce:	4b57      	ldr	r3, [pc, #348]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029da:	4b54      	ldr	r3, [pc, #336]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d02a      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b51      	ldr	r3, [pc, #324]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029f8:	2100      	movs	r1, #0
 80029fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80029fc:	fb03 f201 	mul.w	r2, r3, r1
 8002a00:	2300      	movs	r3, #0
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	4a4a      	ldr	r2, [pc, #296]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a10:	460a      	mov	r2, r1
 8002a12:	673a      	str	r2, [r7, #112]	@ 0x70
 8002a14:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a16:	4413      	add	r3, r2
 8002a18:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a1e:	2200      	movs	r2, #0
 8002a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a22:	637a      	str	r2, [r7, #52]	@ 0x34
 8002a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002a2c:	f7fe f93c 	bl	8000ca8 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a3a:	e05b      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	2200      	movs	r2, #0
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a58:	4642      	mov	r2, r8
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	f04f 0000 	mov.w	r0, #0
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	0159      	lsls	r1, r3, #5
 8002a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a6a:	0150      	lsls	r0, r2, #5
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4641      	mov	r1, r8
 8002a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a76:	4649      	mov	r1, r9
 8002a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a90:	ebb2 040a 	subs.w	r4, r2, sl
 8002a94:	eb63 050b 	sbc.w	r5, r3, fp
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	00eb      	lsls	r3, r5, #3
 8002aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aa6:	00e2      	lsls	r2, r4, #3
 8002aa8:	4614      	mov	r4, r2
 8002aaa:	461d      	mov	r5, r3
 8002aac:	4643      	mov	r3, r8
 8002aae:	18e3      	adds	r3, r4, r3
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	eb45 0303 	adc.w	r3, r5, r3
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	028b      	lsls	r3, r1, #10
 8002aca:	4621      	mov	r1, r4
 8002acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	028a      	lsls	r2, r1, #10
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002adc:	2200      	movs	r2, #0
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	61fa      	str	r2, [r7, #28]
 8002ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae6:	f7fe f8df 	bl	8000ca8 <__aeabi_uldivmod>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4613      	mov	r3, r2
 8002af0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002af4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0f1b      	lsrs	r3, r3, #28
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b12:	e003      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3798      	adds	r7, #152	@ 0x98
 8002b24:	46bd      	mov	sp, r7
 8002b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	017d7840 	.word	0x017d7840

08002b38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e28d      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8083 	beq.w	8002c5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b58:	4b94      	ldr	r3, [pc, #592]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d019      	beq.n	8002b98 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b64:	4b91      	ldr	r3, [pc, #580]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b70:	4b8e      	ldr	r3, [pc, #568]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b7c:	d00c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d112      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8a:	4b88      	ldr	r3, [pc, #544]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b84      	ldr	r3, [pc, #528]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x124>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d157      	bne.n	8002c5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e25a      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x90>
 8002bba:	4b7c      	ldr	r3, [pc, #496]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7b      	ldr	r2, [pc, #492]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xcc>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xb4>
 8002bd2:	4b76      	ldr	r3, [pc, #472]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a75      	ldr	r2, [pc, #468]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b73      	ldr	r3, [pc, #460]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a72      	ldr	r2, [pc, #456]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xcc>
 8002bec:	4b6f      	ldr	r3, [pc, #444]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7ff f936 	bl	8001e7c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7ff f932 	bl	8001e7c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e21f      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b61      	ldr	r3, [pc, #388]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xdc>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7ff f922 	bl	8001e7c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7ff f91e 	bl	8001e7c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	@ 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e20b      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x104>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06f      	beq.n	8002d4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c6a:	4b50      	ldr	r3, [pc, #320]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d017      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c76:	4b4d      	ldr	r3, [pc, #308]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c82:	4b4a      	ldr	r3, [pc, #296]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b47      	ldr	r3, [pc, #284]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b44      	ldr	r3, [pc, #272]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x186>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1d3      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4937      	ldr	r1, [pc, #220]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	e03a      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cdc:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <HAL_RCC_OscConfig+0x278>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7ff f8cb 	bl	8001e7c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cea:	f7ff f8c7 	bl	8001e7c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1b4      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4925      	ldr	r1, [pc, #148]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b24      	ldr	r3, [pc, #144]	@ (8002db0 <HAL_RCC_OscConfig+0x278>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7ff f8aa 	bl	8001e7c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7ff f8a6 	bl	8001e7c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e193      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d036      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7ff f88a 	bl	8001e7c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7ff f886 	bl	8001e7c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e173      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x234>
 8002d8a:	e01b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7ff f873 	bl	8001e7c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	e00e      	b.n	8002db8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7ff f86f 	bl	8001e7c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d907      	bls.n	8002db8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e15c      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	42470000 	.word	0x42470000
 8002db4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ea      	bne.n	8002d9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8097 	beq.w	8002f00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd6:	4b83      	ldr	r3, [pc, #524]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b79      	ldr	r3, [pc, #484]	@ (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d118      	bne.n	8002e40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0e:	4b76      	ldr	r3, [pc, #472]	@ (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	@ (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1a:	f7ff f82f 	bl	8001e7c <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7ff f82b 	bl	8001e7c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e118      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x31e>
 8002e48:	4b66      	ldr	r3, [pc, #408]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4c:	4a65      	ldr	r2, [pc, #404]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x358>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x340>
 8002e5e:	4b61      	ldr	r3, [pc, #388]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	4a60      	ldr	r2, [pc, #384]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0x358>
 8002e78:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	4a59      	ldr	r2, [pc, #356]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e84:	4b57      	ldr	r3, [pc, #348]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e88:	4a56      	ldr	r2, [pc, #344]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe fff0 	bl	8001e7c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe ffec 	bl	8001e7c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0d7      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ee      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x368>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe ffda 	bl	8001e7c <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe ffd6 	bl	8001e7c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0c1      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee2:	4b40      	ldr	r3, [pc, #256]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ee      	bne.n	8002ecc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80ad 	beq.w	8003064 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0a:	4b36      	ldr	r3, [pc, #216]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d060      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d145      	bne.n	8002faa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b33      	ldr	r3, [pc, #204]	@ (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe ffaa 	bl	8001e7c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe ffa6 	bl	8001e7c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e093      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b29      	ldr	r3, [pc, #164]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	491b      	ldr	r1, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe ff7b 	bl	8001e7c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe ff77 	bl	8001e7c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e064      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x452>
 8002fa8:	e05c      	b.n	8003064 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe ff64 	bl	8001e7c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe ff60 	bl	8001e7c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e04d      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x480>
 8002fd6:	e045      	b.n	8003064 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e040      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8003070 <HAL_RCC_OscConfig+0x538>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d030      	beq.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d129      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d122      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003028:	4293      	cmp	r3, r2
 800302a:	d119      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d10f      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d107      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800

08003074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e041      	b.n	800310a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe fc94 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f000 f95e 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d001      	beq.n	800312c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e046      	b.n	80031ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a23      	ldr	r2, [pc, #140]	@ (80031c8 <HAL_TIM_Base_Start+0xb4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003146:	d01d      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1f      	ldr	r2, [pc, #124]	@ (80031cc <HAL_TIM_Base_Start+0xb8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	@ (80031d0 <HAL_TIM_Base_Start+0xbc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	@ (80031d4 <HAL_TIM_Base_Start+0xc0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1b      	ldr	r2, [pc, #108]	@ (80031d8 <HAL_TIM_Base_Start+0xc4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <HAL_TIM_Base_Start+0xc8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a18      	ldr	r2, [pc, #96]	@ (80031e0 <HAL_TIM_Base_Start+0xcc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d111      	bne.n	80031a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b06      	cmp	r3, #6
 8003194:	d010      	beq.n	80031b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	e007      	b.n	80031b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800
 80031d4:	40000c00 	.word	0x40000c00
 80031d8:	40010400 	.word	0x40010400
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40001800 	.word	0x40001800

080031e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_TIM_ConfigClockSource+0x1c>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0b4      	b.n	800336a <HAL_TIM_ConfigClockSource+0x186>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800321e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003238:	d03e      	beq.n	80032b8 <HAL_TIM_ConfigClockSource+0xd4>
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323e:	f200 8087 	bhi.w	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003246:	f000 8086 	beq.w	8003356 <HAL_TIM_ConfigClockSource+0x172>
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324e:	d87f      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	2b70      	cmp	r3, #112	@ 0x70
 8003252:	d01a      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xa6>
 8003254:	2b70      	cmp	r3, #112	@ 0x70
 8003256:	d87b      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b60      	cmp	r3, #96	@ 0x60
 800325a:	d050      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x11a>
 800325c:	2b60      	cmp	r3, #96	@ 0x60
 800325e:	d877      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b50      	cmp	r3, #80	@ 0x50
 8003262:	d03c      	beq.n	80032de <HAL_TIM_ConfigClockSource+0xfa>
 8003264:	2b50      	cmp	r3, #80	@ 0x50
 8003266:	d873      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d058      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x13a>
 800326c:	2b40      	cmp	r3, #64	@ 0x40
 800326e:	d86f      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b30      	cmp	r3, #48	@ 0x30
 8003272:	d064      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x15a>
 8003274:	2b30      	cmp	r3, #48	@ 0x30
 8003276:	d86b      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b20      	cmp	r3, #32
 800327a:	d060      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x15a>
 800327c:	2b20      	cmp	r3, #32
 800327e:	d867      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05c      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b10      	cmp	r3, #16
 8003286:	d05a      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	e062      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800329a:	f000 f991 	bl	80035c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	609a      	str	r2, [r3, #8]
      break;
 80032b6:	e04f      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	f000 f97a 	bl	80035c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032da:	609a      	str	r2, [r3, #8]
      break;
 80032dc:	e03c      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 f8ee 	bl	80034cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2150      	movs	r1, #80	@ 0x50
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f947 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 80032fc:	e02c      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800330a:	461a      	mov	r2, r3
 800330c:	f000 f90d 	bl	800352a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2160      	movs	r1, #96	@ 0x60
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f937 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 800331c:	e01c      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	461a      	mov	r2, r3
 800332c:	f000 f8ce 	bl	80034cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2140      	movs	r1, #64	@ 0x40
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f927 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 800333c:	e00c      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f000 f91e 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 800334e:	e003      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e000      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a46      	ldr	r2, [pc, #280]	@ (80034a0 <TIM_Base_SetConfig+0x12c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003392:	d00f      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a43      	ldr	r2, [pc, #268]	@ (80034a4 <TIM_Base_SetConfig+0x130>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a42      	ldr	r2, [pc, #264]	@ (80034a8 <TIM_Base_SetConfig+0x134>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a41      	ldr	r2, [pc, #260]	@ (80034ac <TIM_Base_SetConfig+0x138>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a40      	ldr	r2, [pc, #256]	@ (80034b0 <TIM_Base_SetConfig+0x13c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d108      	bne.n	80033c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a35      	ldr	r2, [pc, #212]	@ (80034a0 <TIM_Base_SetConfig+0x12c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d4:	d027      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a32      	ldr	r2, [pc, #200]	@ (80034a4 <TIM_Base_SetConfig+0x130>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d023      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a31      	ldr	r2, [pc, #196]	@ (80034a8 <TIM_Base_SetConfig+0x134>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a30      	ldr	r2, [pc, #192]	@ (80034ac <TIM_Base_SetConfig+0x138>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2f      	ldr	r2, [pc, #188]	@ (80034b0 <TIM_Base_SetConfig+0x13c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d017      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2e      	ldr	r2, [pc, #184]	@ (80034b4 <TIM_Base_SetConfig+0x140>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2d      	ldr	r2, [pc, #180]	@ (80034b8 <TIM_Base_SetConfig+0x144>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00f      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2c      	ldr	r2, [pc, #176]	@ (80034bc <TIM_Base_SetConfig+0x148>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <TIM_Base_SetConfig+0x14c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2a      	ldr	r2, [pc, #168]	@ (80034c4 <TIM_Base_SetConfig+0x150>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a29      	ldr	r2, [pc, #164]	@ (80034c8 <TIM_Base_SetConfig+0x154>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a10      	ldr	r2, [pc, #64]	@ (80034a0 <TIM_Base_SetConfig+0x12c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0xf8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <TIM_Base_SetConfig+0x13c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d103      	bne.n	8003474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f023 0201 	bic.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	611a      	str	r2, [r3, #16]
  }
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40010400 	.word	0x40010400
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40014400 	.word	0x40014400
 80034bc:	40014800 	.word	0x40014800
 80034c0:	40001800 	.word	0x40001800
 80034c4:	40001c00 	.word	0x40001c00
 80034c8:	40002000 	.word	0x40002000

080034cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f023 0201 	bic.w	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f023 030a 	bic.w	r3, r3, #10
 8003508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352a:	b480      	push	{r7}
 800352c:	b087      	sub	sp, #28
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f023 0210 	bic.w	r2, r3, #16
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003566:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f043 0307 	orr.w	r3, r3, #7
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003614:	2302      	movs	r3, #2
 8003616:	e05a      	b.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a21      	ldr	r2, [pc, #132]	@ (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003664:	d01d      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1d      	ldr	r2, [pc, #116]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a15      	ldr	r2, [pc, #84]	@ (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40010400 	.word	0x40010400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40001800 	.word	0x40001800

080036f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e042      	b.n	8003790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe f974 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	@ 0x24
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800373a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fdbd 	bl	80042bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	@ 0x28
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d175      	bne.n	80038a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_UART_Transmit+0x2c>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e06e      	b.n	80038a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2221      	movs	r2, #33	@ 0x21
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fe fb51 	bl	8001e7c <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f0:	d108      	bne.n	8003804 <HAL_UART_Transmit+0x6c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e003      	b.n	800380c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800380c:	e02e      	b.n	800386c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2200      	movs	r2, #0
 8003816:	2180      	movs	r1, #128	@ 0x80
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fb1f 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e03a      	b.n	80038a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	3302      	adds	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e007      	b.n	800385e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3301      	adds	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1cb      	bne.n	800380e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	2140      	movs	r1, #64	@ 0x40
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 faeb 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e006      	b.n	80038a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	4613      	mov	r3, r2
 80038ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d112      	bne.n	80038ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_UART_Receive_IT+0x26>
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e00b      	b.n	80038f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	461a      	mov	r2, r3
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fb12 	bl	8003f0e <UART_Start_Receive_IT>
 80038ea:	4603      	mov	r3, r0
 80038ec:	e000      	b.n	80038f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
  }
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b0ba      	sub	sp, #232	@ 0xe8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_UART_IRQHandler+0x66>
 800394a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fbf2 	bl	8004140 <UART_Receive_IT>
      return;
 800395c:	e25b      	b.n	8003e16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800395e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80de 	beq.w	8003b24 <HAL_UART_IRQHandler+0x22c>
 8003968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003978:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80d1 	beq.w	8003b24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_UART_IRQHandler+0xae>
 800398e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xd2>
 80039b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f043 0202 	orr.w	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_UART_IRQHandler+0xf6>
 80039d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d011      	beq.n	8003a1e <HAL_UART_IRQHandler+0x126>
 80039fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d105      	bne.n	8003a12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f043 0208 	orr.w	r2, r3, #8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 81f2 	beq.w	8003e0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_UART_IRQHandler+0x14e>
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fb7d 	bl	8004140 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <HAL_UART_IRQHandler+0x17a>
 8003a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d04f      	beq.n	8003b12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa85 	bl	8003f82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a82:	2b40      	cmp	r3, #64	@ 0x40
 8003a84:	d141      	bne.n	8003b0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3314      	adds	r3, #20
 8003aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1d9      	bne.n	8003a86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d013      	beq.n	8003b02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	4a7e      	ldr	r2, [pc, #504]	@ (8003cd8 <HAL_UART_IRQHandler+0x3e0>)
 8003ae0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe fb79 	bl	80021de <HAL_DMA_Abort_IT>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003afc:	4610      	mov	r0, r2
 8003afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e00e      	b.n	8003b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f994 	bl	8003e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e00a      	b.n	8003b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f990 	bl	8003e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	e006      	b.n	8003b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f98c 	bl	8003e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b1e:	e175      	b.n	8003e0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	bf00      	nop
    return;
 8003b22:	e173      	b.n	8003e0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	f040 814f 	bne.w	8003dcc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8148 	beq.w	8003dcc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8141 	beq.w	8003dcc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6a:	2b40      	cmp	r3, #64	@ 0x40
 8003b6c:	f040 80b6 	bne.w	8003cdc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8145 	beq.w	8003e10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	f080 813e 	bcs.w	8003e10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba6:	f000 8088 	beq.w	8003cba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1d9      	bne.n	8003baa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3314      	adds	r3, #20
 8003bfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e1      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3314      	adds	r3, #20
 8003c52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e3      	bne.n	8003c32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	330c      	adds	r3, #12
 8003c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c8a:	f023 0310 	bic.w	r3, r3, #16
 8003c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e3      	bne.n	8003c78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fa22 	bl	80020fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f8b7 	bl	8003e44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd6:	e09b      	b.n	8003e10 <HAL_UART_IRQHandler+0x518>
 8003cd8:	08004049 	.word	0x08004049
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 808e 	beq.w	8003e14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8089 	beq.w	8003e14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d26:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e3      	bne.n	8003d02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e3      	bne.n	8003d3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0310 	bic.w	r3, r3, #16
 8003d96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003da4:	61fa      	str	r2, [r7, #28]
 8003da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	617b      	str	r3, [r7, #20]
   return(result);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e3      	bne.n	8003d80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f83d 	bl	8003e44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dca:	e023      	b.n	8003e14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HAL_UART_IRQHandler+0x4f4>
 8003dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f943 	bl	8004070 <UART_Transmit_IT>
    return;
 8003dea:	e014      	b.n	8003e16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <HAL_UART_IRQHandler+0x51e>
 8003df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f983 	bl	8004110 <UART_EndTransmit_IT>
    return;
 8003e0a:	e004      	b.n	8003e16 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e0c:	bf00      	nop
 8003e0e:	e002      	b.n	8003e16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e14:	bf00      	nop
  }
}
 8003e16:	37e8      	adds	r7, #232	@ 0xe8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6c:	e03b      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d037      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fe f801 	bl	8001e7c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e03a      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d023      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b80      	cmp	r3, #128	@ 0x80
 8003ea2:	d020      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b40      	cmp	r3, #64	@ 0x40
 8003ea8:	d01d      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d116      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f857 	bl	8003f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e00f      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	bf0c      	ite	eq
 8003ef6:	2301      	moveq	r3, #1
 8003ef8:	2300      	movne	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d0b4      	beq.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2222      	movs	r2, #34	@ 0x22
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0220 	orr.w	r2, r2, #32
 8003f72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b095      	sub	sp, #84	@ 0x54
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003faa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e5      	bne.n	8003fbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d119      	bne.n	800402e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	60bb      	str	r3, [r7, #8]
   return(result);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f023 0310 	bic.w	r3, r3, #16
 8004010:	647b      	str	r3, [r7, #68]	@ 0x44
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800401a:	61ba      	str	r2, [r7, #24]
 800401c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6979      	ldr	r1, [r7, #20]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	613b      	str	r3, [r7, #16]
   return(result);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800403c:	bf00      	nop
 800403e:	3754      	adds	r7, #84	@ 0x54
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004054:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff fee4 	bl	8003e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b21      	cmp	r3, #33	@ 0x21
 8004082:	d13e      	bne.n	8004102 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408c:	d114      	bne.n	80040b8 <UART_Transmit_IT+0x48>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d110      	bne.n	80040b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]
 80040b6:	e008      	b.n	80040ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	1c59      	adds	r1, r3, #1
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6211      	str	r1, [r2, #32]
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4619      	mov	r1, r3
 80040d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10f      	bne.n	80040fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004126:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fe73 	bl	8003e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08c      	sub	sp, #48	@ 0x30
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b22      	cmp	r3, #34	@ 0x22
 8004152:	f040 80ae 	bne.w	80042b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415e:	d117      	bne.n	8004190 <UART_Receive_IT+0x50>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d113      	bne.n	8004190 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	b29a      	uxth	r2, r3
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	629a      	str	r2, [r3, #40]	@ 0x28
 800418e:	e026      	b.n	80041de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a2:	d007      	beq.n	80041b4 <UART_Receive_IT+0x74>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <UART_Receive_IT+0x82>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e008      	b.n	80041d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	4619      	mov	r1, r3
 80041ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d15d      	bne.n	80042ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0220 	bic.w	r2, r2, #32
 8004200:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004210:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	d135      	bne.n	80042a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	613b      	str	r3, [r7, #16]
   return(result);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425e:	623a      	str	r2, [r7, #32]
 8004260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	69f9      	ldr	r1, [r7, #28]
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	61bb      	str	r3, [r7, #24]
   return(result);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b10      	cmp	r3, #16
 800427e:	d10a      	bne.n	8004296 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800429a:	4619      	mov	r1, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fdd1 	bl	8003e44 <HAL_UARTEx_RxEventCallback>
 80042a2:	e002      	b.n	80042aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fd fb3d 	bl	8001924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e002      	b.n	80042b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3730      	adds	r7, #48	@ 0x30
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b0c0      	sub	sp, #256	@ 0x100
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d8:	68d9      	ldr	r1, [r3, #12]
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	ea40 0301 	orr.w	r3, r0, r1
 80042e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004314:	f021 010c 	bic.w	r1, r1, #12
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004336:	6999      	ldr	r1, [r3, #24]
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	ea40 0301 	orr.w	r3, r0, r1
 8004342:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b8f      	ldr	r3, [pc, #572]	@ (8004588 <UART_SetConfig+0x2cc>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d005      	beq.n	800435c <UART_SetConfig+0xa0>
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b8d      	ldr	r3, [pc, #564]	@ (800458c <UART_SetConfig+0x2d0>)
 8004358:	429a      	cmp	r2, r3
 800435a:	d104      	bne.n	8004366 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe fa2e 	bl	80027bc <HAL_RCC_GetPCLK2Freq>
 8004360:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004364:	e003      	b.n	800436e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004366:	f7fe fa15 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 800436a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004378:	f040 810c 	bne.w	8004594 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800437c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004386:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800438a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	1891      	adds	r1, r2, r2
 8004394:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004396:	415b      	adcs	r3, r3
 8004398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800439a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800439e:	4621      	mov	r1, r4
 80043a0:	eb12 0801 	adds.w	r8, r2, r1
 80043a4:	4629      	mov	r1, r5
 80043a6:	eb43 0901 	adc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043cc:	462b      	mov	r3, r5
 80043ce:	eb49 0303 	adc.w	r3, r9, r3
 80043d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043ea:	460b      	mov	r3, r1
 80043ec:	18db      	adds	r3, r3, r3
 80043ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f0:	4613      	mov	r3, r2
 80043f2:	eb42 0303 	adc.w	r3, r2, r3
 80043f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80043f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004400:	f7fc fc52 	bl	8000ca8 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b61      	ldr	r3, [pc, #388]	@ (8004590 <UART_SetConfig+0x2d4>)
 800440a:	fba3 2302 	umull	r2, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	011c      	lsls	r4, r3, #4
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800441c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004420:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	1891      	adds	r1, r2, r2
 800442a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800442c:	415b      	adcs	r3, r3
 800442e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004434:	4641      	mov	r1, r8
 8004436:	eb12 0a01 	adds.w	sl, r2, r1
 800443a:	4649      	mov	r1, r9
 800443c:	eb43 0b01 	adc.w	fp, r3, r1
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800444c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004454:	4692      	mov	sl, r2
 8004456:	469b      	mov	fp, r3
 8004458:	4643      	mov	r3, r8
 800445a:	eb1a 0303 	adds.w	r3, sl, r3
 800445e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004462:	464b      	mov	r3, r9
 8004464:	eb4b 0303 	adc.w	r3, fp, r3
 8004468:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004478:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800447c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004480:	460b      	mov	r3, r1
 8004482:	18db      	adds	r3, r3, r3
 8004484:	643b      	str	r3, [r7, #64]	@ 0x40
 8004486:	4613      	mov	r3, r2
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	647b      	str	r3, [r7, #68]	@ 0x44
 800448e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004492:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004496:	f7fc fc07 	bl	8000ca8 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004590 <UART_SetConfig+0x2d4>)
 80044a2:	fba3 2301 	umull	r2, r3, r3, r1
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2264      	movs	r2, #100	@ 0x64
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	1acb      	subs	r3, r1, r3
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044b6:	4b36      	ldr	r3, [pc, #216]	@ (8004590 <UART_SetConfig+0x2d4>)
 80044b8:	fba3 2302 	umull	r2, r3, r3, r2
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044c4:	441c      	add	r4, r3
 80044c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044e0:	415b      	adcs	r3, r3
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044e8:	4641      	mov	r1, r8
 80044ea:	1851      	adds	r1, r2, r1
 80044ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80044ee:	4649      	mov	r1, r9
 80044f0:	414b      	adcs	r3, r1
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004500:	4659      	mov	r1, fp
 8004502:	00cb      	lsls	r3, r1, #3
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450a:	4651      	mov	r1, sl
 800450c:	00ca      	lsls	r2, r1, #3
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	4603      	mov	r3, r0
 8004514:	4642      	mov	r2, r8
 8004516:	189b      	adds	r3, r3, r2
 8004518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800451c:	464b      	mov	r3, r9
 800451e:	460a      	mov	r2, r1
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004534:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800453c:	460b      	mov	r3, r1
 800453e:	18db      	adds	r3, r3, r3
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004542:	4613      	mov	r3, r2
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800454a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800454e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004552:	f7fc fba9 	bl	8000ca8 <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <UART_SetConfig+0x2d4>)
 800455c:	fba3 1302 	umull	r1, r3, r3, r2
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	2164      	movs	r1, #100	@ 0x64
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	3332      	adds	r3, #50	@ 0x32
 800456e:	4a08      	ldr	r2, [pc, #32]	@ (8004590 <UART_SetConfig+0x2d4>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	f003 0207 	and.w	r2, r3, #7
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4422      	add	r2, r4
 8004582:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004584:	e106      	b.n	8004794 <UART_SetConfig+0x4d8>
 8004586:	bf00      	nop
 8004588:	40011000 	.word	0x40011000
 800458c:	40011400 	.word	0x40011400
 8004590:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004598:	2200      	movs	r2, #0
 800459a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800459e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045a6:	4642      	mov	r2, r8
 80045a8:	464b      	mov	r3, r9
 80045aa:	1891      	adds	r1, r2, r2
 80045ac:	6239      	str	r1, [r7, #32]
 80045ae:	415b      	adcs	r3, r3
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045b6:	4641      	mov	r1, r8
 80045b8:	1854      	adds	r4, r2, r1
 80045ba:	4649      	mov	r1, r9
 80045bc:	eb43 0501 	adc.w	r5, r3, r1
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	00eb      	lsls	r3, r5, #3
 80045ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ce:	00e2      	lsls	r2, r4, #3
 80045d0:	4614      	mov	r4, r2
 80045d2:	461d      	mov	r5, r3
 80045d4:	4643      	mov	r3, r8
 80045d6:	18e3      	adds	r3, r4, r3
 80045d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045dc:	464b      	mov	r3, r9
 80045de:	eb45 0303 	adc.w	r3, r5, r3
 80045e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004602:	4629      	mov	r1, r5
 8004604:	008b      	lsls	r3, r1, #2
 8004606:	4621      	mov	r1, r4
 8004608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460c:	4621      	mov	r1, r4
 800460e:	008a      	lsls	r2, r1, #2
 8004610:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004614:	f7fc fb48 	bl	8000ca8 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4b60      	ldr	r3, [pc, #384]	@ (80047a0 <UART_SetConfig+0x4e4>)
 800461e:	fba3 2302 	umull	r2, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	011c      	lsls	r4, r3, #4
 8004626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004630:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004634:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	1891      	adds	r1, r2, r2
 800463e:	61b9      	str	r1, [r7, #24]
 8004640:	415b      	adcs	r3, r3
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004648:	4641      	mov	r1, r8
 800464a:	1851      	adds	r1, r2, r1
 800464c:	6139      	str	r1, [r7, #16]
 800464e:	4649      	mov	r1, r9
 8004650:	414b      	adcs	r3, r1
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004660:	4659      	mov	r1, fp
 8004662:	00cb      	lsls	r3, r1, #3
 8004664:	4651      	mov	r1, sl
 8004666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466a:	4651      	mov	r1, sl
 800466c:	00ca      	lsls	r2, r1, #3
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	4603      	mov	r3, r0
 8004674:	4642      	mov	r2, r8
 8004676:	189b      	adds	r3, r3, r2
 8004678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800467c:	464b      	mov	r3, r9
 800467e:	460a      	mov	r2, r1
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004692:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046a0:	4649      	mov	r1, r9
 80046a2:	008b      	lsls	r3, r1, #2
 80046a4:	4641      	mov	r1, r8
 80046a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046aa:	4641      	mov	r1, r8
 80046ac:	008a      	lsls	r2, r1, #2
 80046ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046b2:	f7fc faf9 	bl	8000ca8 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	4b38      	ldr	r3, [pc, #224]	@ (80047a0 <UART_SetConfig+0x4e4>)
 80046be:	fba3 2301 	umull	r2, r3, r3, r1
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2264      	movs	r2, #100	@ 0x64
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	1acb      	subs	r3, r1, r3
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	3332      	adds	r3, #50	@ 0x32
 80046d0:	4a33      	ldr	r2, [pc, #204]	@ (80047a0 <UART_SetConfig+0x4e4>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046dc:	441c      	add	r4, r3
 80046de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e2:	2200      	movs	r2, #0
 80046e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046ec:	4642      	mov	r2, r8
 80046ee:	464b      	mov	r3, r9
 80046f0:	1891      	adds	r1, r2, r2
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	415b      	adcs	r3, r3
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046fc:	4641      	mov	r1, r8
 80046fe:	1851      	adds	r1, r2, r1
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	4649      	mov	r1, r9
 8004704:	414b      	adcs	r3, r1
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004714:	4659      	mov	r1, fp
 8004716:	00cb      	lsls	r3, r1, #3
 8004718:	4651      	mov	r1, sl
 800471a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800471e:	4651      	mov	r1, sl
 8004720:	00ca      	lsls	r2, r1, #3
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	4603      	mov	r3, r0
 8004728:	4642      	mov	r2, r8
 800472a:	189b      	adds	r3, r3, r2
 800472c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800472e:	464b      	mov	r3, r9
 8004730:	460a      	mov	r2, r1
 8004732:	eb42 0303 	adc.w	r3, r2, r3
 8004736:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	663b      	str	r3, [r7, #96]	@ 0x60
 8004742:	667a      	str	r2, [r7, #100]	@ 0x64
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004750:	4649      	mov	r1, r9
 8004752:	008b      	lsls	r3, r1, #2
 8004754:	4641      	mov	r1, r8
 8004756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800475a:	4641      	mov	r1, r8
 800475c:	008a      	lsls	r2, r1, #2
 800475e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004762:	f7fc faa1 	bl	8000ca8 <__aeabi_uldivmod>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <UART_SetConfig+0x4e4>)
 800476c:	fba3 1302 	umull	r1, r3, r3, r2
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	2164      	movs	r1, #100	@ 0x64
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	3332      	adds	r3, #50	@ 0x32
 800477e:	4a08      	ldr	r2, [pc, #32]	@ (80047a0 <UART_SetConfig+0x4e4>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4422      	add	r2, r4
 8004792:	609a      	str	r2, [r3, #8]
}
 8004794:	bf00      	nop
 8004796:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a0:	51eb851f 	.word	0x51eb851f

080047a4 <malloc>:
 80047a4:	4b02      	ldr	r3, [pc, #8]	@ (80047b0 <malloc+0xc>)
 80047a6:	4601      	mov	r1, r0
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	f000 b825 	b.w	80047f8 <_malloc_r>
 80047ae:	bf00      	nop
 80047b0:	20000030 	.word	0x20000030

080047b4 <sbrk_aligned>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4e0f      	ldr	r6, [pc, #60]	@ (80047f4 <sbrk_aligned+0x40>)
 80047b8:	460c      	mov	r4, r1
 80047ba:	6831      	ldr	r1, [r6, #0]
 80047bc:	4605      	mov	r5, r0
 80047be:	b911      	cbnz	r1, 80047c6 <sbrk_aligned+0x12>
 80047c0:	f000 fe76 	bl	80054b0 <_sbrk_r>
 80047c4:	6030      	str	r0, [r6, #0]
 80047c6:	4621      	mov	r1, r4
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 fe71 	bl	80054b0 <_sbrk_r>
 80047ce:	1c43      	adds	r3, r0, #1
 80047d0:	d103      	bne.n	80047da <sbrk_aligned+0x26>
 80047d2:	f04f 34ff 	mov.w	r4, #4294967295
 80047d6:	4620      	mov	r0, r4
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
 80047da:	1cc4      	adds	r4, r0, #3
 80047dc:	f024 0403 	bic.w	r4, r4, #3
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d0f8      	beq.n	80047d6 <sbrk_aligned+0x22>
 80047e4:	1a21      	subs	r1, r4, r0
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 fe62 	bl	80054b0 <_sbrk_r>
 80047ec:	3001      	adds	r0, #1
 80047ee:	d1f2      	bne.n	80047d6 <sbrk_aligned+0x22>
 80047f0:	e7ef      	b.n	80047d2 <sbrk_aligned+0x1e>
 80047f2:	bf00      	nop
 80047f4:	200003d8 	.word	0x200003d8

080047f8 <_malloc_r>:
 80047f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047fc:	1ccd      	adds	r5, r1, #3
 80047fe:	f025 0503 	bic.w	r5, r5, #3
 8004802:	3508      	adds	r5, #8
 8004804:	2d0c      	cmp	r5, #12
 8004806:	bf38      	it	cc
 8004808:	250c      	movcc	r5, #12
 800480a:	2d00      	cmp	r5, #0
 800480c:	4606      	mov	r6, r0
 800480e:	db01      	blt.n	8004814 <_malloc_r+0x1c>
 8004810:	42a9      	cmp	r1, r5
 8004812:	d904      	bls.n	800481e <_malloc_r+0x26>
 8004814:	230c      	movs	r3, #12
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	2000      	movs	r0, #0
 800481a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800481e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048f4 <_malloc_r+0xfc>
 8004822:	f000 f869 	bl	80048f8 <__malloc_lock>
 8004826:	f8d8 3000 	ldr.w	r3, [r8]
 800482a:	461c      	mov	r4, r3
 800482c:	bb44      	cbnz	r4, 8004880 <_malloc_r+0x88>
 800482e:	4629      	mov	r1, r5
 8004830:	4630      	mov	r0, r6
 8004832:	f7ff ffbf 	bl	80047b4 <sbrk_aligned>
 8004836:	1c43      	adds	r3, r0, #1
 8004838:	4604      	mov	r4, r0
 800483a:	d158      	bne.n	80048ee <_malloc_r+0xf6>
 800483c:	f8d8 4000 	ldr.w	r4, [r8]
 8004840:	4627      	mov	r7, r4
 8004842:	2f00      	cmp	r7, #0
 8004844:	d143      	bne.n	80048ce <_malloc_r+0xd6>
 8004846:	2c00      	cmp	r4, #0
 8004848:	d04b      	beq.n	80048e2 <_malloc_r+0xea>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	4639      	mov	r1, r7
 800484e:	4630      	mov	r0, r6
 8004850:	eb04 0903 	add.w	r9, r4, r3
 8004854:	f000 fe2c 	bl	80054b0 <_sbrk_r>
 8004858:	4581      	cmp	r9, r0
 800485a:	d142      	bne.n	80048e2 <_malloc_r+0xea>
 800485c:	6821      	ldr	r1, [r4, #0]
 800485e:	1a6d      	subs	r5, r5, r1
 8004860:	4629      	mov	r1, r5
 8004862:	4630      	mov	r0, r6
 8004864:	f7ff ffa6 	bl	80047b4 <sbrk_aligned>
 8004868:	3001      	adds	r0, #1
 800486a:	d03a      	beq.n	80048e2 <_malloc_r+0xea>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	442b      	add	r3, r5
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	f8d8 3000 	ldr.w	r3, [r8]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	bb62      	cbnz	r2, 80048d4 <_malloc_r+0xdc>
 800487a:	f8c8 7000 	str.w	r7, [r8]
 800487e:	e00f      	b.n	80048a0 <_malloc_r+0xa8>
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	1b52      	subs	r2, r2, r5
 8004884:	d420      	bmi.n	80048c8 <_malloc_r+0xd0>
 8004886:	2a0b      	cmp	r2, #11
 8004888:	d917      	bls.n	80048ba <_malloc_r+0xc2>
 800488a:	1961      	adds	r1, r4, r5
 800488c:	42a3      	cmp	r3, r4
 800488e:	6025      	str	r5, [r4, #0]
 8004890:	bf18      	it	ne
 8004892:	6059      	strne	r1, [r3, #4]
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	bf08      	it	eq
 8004898:	f8c8 1000 	streq.w	r1, [r8]
 800489c:	5162      	str	r2, [r4, r5]
 800489e:	604b      	str	r3, [r1, #4]
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 f82f 	bl	8004904 <__malloc_unlock>
 80048a6:	f104 000b 	add.w	r0, r4, #11
 80048aa:	1d23      	adds	r3, r4, #4
 80048ac:	f020 0007 	bic.w	r0, r0, #7
 80048b0:	1ac2      	subs	r2, r0, r3
 80048b2:	bf1c      	itt	ne
 80048b4:	1a1b      	subne	r3, r3, r0
 80048b6:	50a3      	strne	r3, [r4, r2]
 80048b8:	e7af      	b.n	800481a <_malloc_r+0x22>
 80048ba:	6862      	ldr	r2, [r4, #4]
 80048bc:	42a3      	cmp	r3, r4
 80048be:	bf0c      	ite	eq
 80048c0:	f8c8 2000 	streq.w	r2, [r8]
 80048c4:	605a      	strne	r2, [r3, #4]
 80048c6:	e7eb      	b.n	80048a0 <_malloc_r+0xa8>
 80048c8:	4623      	mov	r3, r4
 80048ca:	6864      	ldr	r4, [r4, #4]
 80048cc:	e7ae      	b.n	800482c <_malloc_r+0x34>
 80048ce:	463c      	mov	r4, r7
 80048d0:	687f      	ldr	r7, [r7, #4]
 80048d2:	e7b6      	b.n	8004842 <_malloc_r+0x4a>
 80048d4:	461a      	mov	r2, r3
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	42a3      	cmp	r3, r4
 80048da:	d1fb      	bne.n	80048d4 <_malloc_r+0xdc>
 80048dc:	2300      	movs	r3, #0
 80048de:	6053      	str	r3, [r2, #4]
 80048e0:	e7de      	b.n	80048a0 <_malloc_r+0xa8>
 80048e2:	230c      	movs	r3, #12
 80048e4:	6033      	str	r3, [r6, #0]
 80048e6:	4630      	mov	r0, r6
 80048e8:	f000 f80c 	bl	8004904 <__malloc_unlock>
 80048ec:	e794      	b.n	8004818 <_malloc_r+0x20>
 80048ee:	6005      	str	r5, [r0, #0]
 80048f0:	e7d6      	b.n	80048a0 <_malloc_r+0xa8>
 80048f2:	bf00      	nop
 80048f4:	200003dc 	.word	0x200003dc

080048f8 <__malloc_lock>:
 80048f8:	4801      	ldr	r0, [pc, #4]	@ (8004900 <__malloc_lock+0x8>)
 80048fa:	f000 be26 	b.w	800554a <__retarget_lock_acquire_recursive>
 80048fe:	bf00      	nop
 8004900:	20000520 	.word	0x20000520

08004904 <__malloc_unlock>:
 8004904:	4801      	ldr	r0, [pc, #4]	@ (800490c <__malloc_unlock+0x8>)
 8004906:	f000 be21 	b.w	800554c <__retarget_lock_release_recursive>
 800490a:	bf00      	nop
 800490c:	20000520 	.word	0x20000520

08004910 <__cvt>:
 8004910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	ec57 6b10 	vmov	r6, r7, d0
 8004918:	2f00      	cmp	r7, #0
 800491a:	460c      	mov	r4, r1
 800491c:	4619      	mov	r1, r3
 800491e:	463b      	mov	r3, r7
 8004920:	bfbb      	ittet	lt
 8004922:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004926:	461f      	movlt	r7, r3
 8004928:	2300      	movge	r3, #0
 800492a:	232d      	movlt	r3, #45	@ 0x2d
 800492c:	700b      	strb	r3, [r1, #0]
 800492e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004930:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004934:	4691      	mov	r9, r2
 8004936:	f023 0820 	bic.w	r8, r3, #32
 800493a:	bfbc      	itt	lt
 800493c:	4632      	movlt	r2, r6
 800493e:	4616      	movlt	r6, r2
 8004940:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004944:	d005      	beq.n	8004952 <__cvt+0x42>
 8004946:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800494a:	d100      	bne.n	800494e <__cvt+0x3e>
 800494c:	3401      	adds	r4, #1
 800494e:	2102      	movs	r1, #2
 8004950:	e000      	b.n	8004954 <__cvt+0x44>
 8004952:	2103      	movs	r1, #3
 8004954:	ab03      	add	r3, sp, #12
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	ab02      	add	r3, sp, #8
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	ec47 6b10 	vmov	d0, r6, r7
 8004960:	4653      	mov	r3, sl
 8004962:	4622      	mov	r2, r4
 8004964:	f000 fe7c 	bl	8005660 <_dtoa_r>
 8004968:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800496c:	4605      	mov	r5, r0
 800496e:	d119      	bne.n	80049a4 <__cvt+0x94>
 8004970:	f019 0f01 	tst.w	r9, #1
 8004974:	d00e      	beq.n	8004994 <__cvt+0x84>
 8004976:	eb00 0904 	add.w	r9, r0, r4
 800497a:	2200      	movs	r2, #0
 800497c:	2300      	movs	r3, #0
 800497e:	4630      	mov	r0, r6
 8004980:	4639      	mov	r1, r7
 8004982:	f7fc f8d1 	bl	8000b28 <__aeabi_dcmpeq>
 8004986:	b108      	cbz	r0, 800498c <__cvt+0x7c>
 8004988:	f8cd 900c 	str.w	r9, [sp, #12]
 800498c:	2230      	movs	r2, #48	@ 0x30
 800498e:	9b03      	ldr	r3, [sp, #12]
 8004990:	454b      	cmp	r3, r9
 8004992:	d31e      	bcc.n	80049d2 <__cvt+0xc2>
 8004994:	9b03      	ldr	r3, [sp, #12]
 8004996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004998:	1b5b      	subs	r3, r3, r5
 800499a:	4628      	mov	r0, r5
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	b004      	add	sp, #16
 80049a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049a8:	eb00 0904 	add.w	r9, r0, r4
 80049ac:	d1e5      	bne.n	800497a <__cvt+0x6a>
 80049ae:	7803      	ldrb	r3, [r0, #0]
 80049b0:	2b30      	cmp	r3, #48	@ 0x30
 80049b2:	d10a      	bne.n	80049ca <__cvt+0xba>
 80049b4:	2200      	movs	r2, #0
 80049b6:	2300      	movs	r3, #0
 80049b8:	4630      	mov	r0, r6
 80049ba:	4639      	mov	r1, r7
 80049bc:	f7fc f8b4 	bl	8000b28 <__aeabi_dcmpeq>
 80049c0:	b918      	cbnz	r0, 80049ca <__cvt+0xba>
 80049c2:	f1c4 0401 	rsb	r4, r4, #1
 80049c6:	f8ca 4000 	str.w	r4, [sl]
 80049ca:	f8da 3000 	ldr.w	r3, [sl]
 80049ce:	4499      	add	r9, r3
 80049d0:	e7d3      	b.n	800497a <__cvt+0x6a>
 80049d2:	1c59      	adds	r1, r3, #1
 80049d4:	9103      	str	r1, [sp, #12]
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e7d9      	b.n	800498e <__cvt+0x7e>

080049da <__exponent>:
 80049da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049dc:	2900      	cmp	r1, #0
 80049de:	bfba      	itte	lt
 80049e0:	4249      	neglt	r1, r1
 80049e2:	232d      	movlt	r3, #45	@ 0x2d
 80049e4:	232b      	movge	r3, #43	@ 0x2b
 80049e6:	2909      	cmp	r1, #9
 80049e8:	7002      	strb	r2, [r0, #0]
 80049ea:	7043      	strb	r3, [r0, #1]
 80049ec:	dd29      	ble.n	8004a42 <__exponent+0x68>
 80049ee:	f10d 0307 	add.w	r3, sp, #7
 80049f2:	461d      	mov	r5, r3
 80049f4:	270a      	movs	r7, #10
 80049f6:	461a      	mov	r2, r3
 80049f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80049fc:	fb07 1416 	mls	r4, r7, r6, r1
 8004a00:	3430      	adds	r4, #48	@ 0x30
 8004a02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a06:	460c      	mov	r4, r1
 8004a08:	2c63      	cmp	r4, #99	@ 0x63
 8004a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a0e:	4631      	mov	r1, r6
 8004a10:	dcf1      	bgt.n	80049f6 <__exponent+0x1c>
 8004a12:	3130      	adds	r1, #48	@ 0x30
 8004a14:	1e94      	subs	r4, r2, #2
 8004a16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a1a:	1c41      	adds	r1, r0, #1
 8004a1c:	4623      	mov	r3, r4
 8004a1e:	42ab      	cmp	r3, r5
 8004a20:	d30a      	bcc.n	8004a38 <__exponent+0x5e>
 8004a22:	f10d 0309 	add.w	r3, sp, #9
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	42ac      	cmp	r4, r5
 8004a2a:	bf88      	it	hi
 8004a2c:	2300      	movhi	r3, #0
 8004a2e:	3302      	adds	r3, #2
 8004a30:	4403      	add	r3, r0
 8004a32:	1a18      	subs	r0, r3, r0
 8004a34:	b003      	add	sp, #12
 8004a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a40:	e7ed      	b.n	8004a1e <__exponent+0x44>
 8004a42:	2330      	movs	r3, #48	@ 0x30
 8004a44:	3130      	adds	r1, #48	@ 0x30
 8004a46:	7083      	strb	r3, [r0, #2]
 8004a48:	70c1      	strb	r1, [r0, #3]
 8004a4a:	1d03      	adds	r3, r0, #4
 8004a4c:	e7f1      	b.n	8004a32 <__exponent+0x58>
	...

08004a50 <_printf_float>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	b08d      	sub	sp, #52	@ 0x34
 8004a56:	460c      	mov	r4, r1
 8004a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	461f      	mov	r7, r3
 8004a60:	4605      	mov	r5, r0
 8004a62:	f000 fced 	bl	8005440 <_localeconv_r>
 8004a66:	6803      	ldr	r3, [r0, #0]
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fb fc30 	bl	80002d0 <strlen>
 8004a70:	2300      	movs	r3, #0
 8004a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a74:	f8d8 3000 	ldr.w	r3, [r8]
 8004a78:	9005      	str	r0, [sp, #20]
 8004a7a:	3307      	adds	r3, #7
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	f103 0208 	add.w	r2, r3, #8
 8004a84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a88:	f8d4 b000 	ldr.w	fp, [r4]
 8004a8c:	f8c8 2000 	str.w	r2, [r8]
 8004a90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a98:	9307      	str	r3, [sp, #28]
 8004a9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8004d18 <_printf_float+0x2c8>)
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	f7fc f86e 	bl	8000b8c <__aeabi_dcmpun>
 8004ab0:	bb70      	cbnz	r0, 8004b10 <_printf_float+0xc0>
 8004ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab6:	4b98      	ldr	r3, [pc, #608]	@ (8004d18 <_printf_float+0x2c8>)
 8004ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8004abc:	f7fc f848 	bl	8000b50 <__aeabi_dcmple>
 8004ac0:	bb30      	cbnz	r0, 8004b10 <_printf_float+0xc0>
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	4649      	mov	r1, r9
 8004aca:	f7fc f837 	bl	8000b3c <__aeabi_dcmplt>
 8004ace:	b110      	cbz	r0, 8004ad6 <_printf_float+0x86>
 8004ad0:	232d      	movs	r3, #45	@ 0x2d
 8004ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ad6:	4a91      	ldr	r2, [pc, #580]	@ (8004d1c <_printf_float+0x2cc>)
 8004ad8:	4b91      	ldr	r3, [pc, #580]	@ (8004d20 <_printf_float+0x2d0>)
 8004ada:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ade:	bf94      	ite	ls
 8004ae0:	4690      	movls	r8, r2
 8004ae2:	4698      	movhi	r8, r3
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	f02b 0304 	bic.w	r3, fp, #4
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	f04f 0900 	mov.w	r9, #0
 8004af2:	9700      	str	r7, [sp, #0]
 8004af4:	4633      	mov	r3, r6
 8004af6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004af8:	4621      	mov	r1, r4
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 f9d2 	bl	8004ea4 <_printf_common>
 8004b00:	3001      	adds	r0, #1
 8004b02:	f040 808d 	bne.w	8004c20 <_printf_float+0x1d0>
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0a:	b00d      	add	sp, #52	@ 0x34
 8004b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	4640      	mov	r0, r8
 8004b16:	4649      	mov	r1, r9
 8004b18:	f7fc f838 	bl	8000b8c <__aeabi_dcmpun>
 8004b1c:	b140      	cbz	r0, 8004b30 <_printf_float+0xe0>
 8004b1e:	464b      	mov	r3, r9
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bfbc      	itt	lt
 8004b24:	232d      	movlt	r3, #45	@ 0x2d
 8004b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d24 <_printf_float+0x2d4>)
 8004b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d28 <_printf_float+0x2d8>)
 8004b2e:	e7d4      	b.n	8004ada <_printf_float+0x8a>
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004b36:	9206      	str	r2, [sp, #24]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	d13b      	bne.n	8004bb4 <_printf_float+0x164>
 8004b3c:	2306      	movs	r3, #6
 8004b3e:	6063      	str	r3, [r4, #4]
 8004b40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b44:	2300      	movs	r3, #0
 8004b46:	6022      	str	r2, [r4, #0]
 8004b48:	9303      	str	r3, [sp, #12]
 8004b4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b50:	ab09      	add	r3, sp, #36	@ 0x24
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	6861      	ldr	r1, [r4, #4]
 8004b56:	ec49 8b10 	vmov	d0, r8, r9
 8004b5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f7ff fed6 	bl	8004910 <__cvt>
 8004b64:	9b06      	ldr	r3, [sp, #24]
 8004b66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b68:	2b47      	cmp	r3, #71	@ 0x47
 8004b6a:	4680      	mov	r8, r0
 8004b6c:	d129      	bne.n	8004bc2 <_printf_float+0x172>
 8004b6e:	1cc8      	adds	r0, r1, #3
 8004b70:	db02      	blt.n	8004b78 <_printf_float+0x128>
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	4299      	cmp	r1, r3
 8004b76:	dd41      	ble.n	8004bfc <_printf_float+0x1ac>
 8004b78:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b7c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b80:	3901      	subs	r1, #1
 8004b82:	4652      	mov	r2, sl
 8004b84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b88:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b8a:	f7ff ff26 	bl	80049da <__exponent>
 8004b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b90:	1813      	adds	r3, r2, r0
 8004b92:	2a01      	cmp	r2, #1
 8004b94:	4681      	mov	r9, r0
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	dc02      	bgt.n	8004ba0 <_printf_float+0x150>
 8004b9a:	6822      	ldr	r2, [r4, #0]
 8004b9c:	07d2      	lsls	r2, r2, #31
 8004b9e:	d501      	bpl.n	8004ba4 <_printf_float+0x154>
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0a2      	beq.n	8004af2 <_printf_float+0xa2>
 8004bac:	232d      	movs	r3, #45	@ 0x2d
 8004bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb2:	e79e      	b.n	8004af2 <_printf_float+0xa2>
 8004bb4:	9a06      	ldr	r2, [sp, #24]
 8004bb6:	2a47      	cmp	r2, #71	@ 0x47
 8004bb8:	d1c2      	bne.n	8004b40 <_printf_float+0xf0>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1c0      	bne.n	8004b40 <_printf_float+0xf0>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e7bd      	b.n	8004b3e <_printf_float+0xee>
 8004bc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bc6:	d9db      	bls.n	8004b80 <_printf_float+0x130>
 8004bc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004bcc:	d118      	bne.n	8004c00 <_printf_float+0x1b0>
 8004bce:	2900      	cmp	r1, #0
 8004bd0:	6863      	ldr	r3, [r4, #4]
 8004bd2:	dd0b      	ble.n	8004bec <_printf_float+0x19c>
 8004bd4:	6121      	str	r1, [r4, #16]
 8004bd6:	b913      	cbnz	r3, 8004bde <_printf_float+0x18e>
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	07d0      	lsls	r0, r2, #31
 8004bdc:	d502      	bpl.n	8004be4 <_printf_float+0x194>
 8004bde:	3301      	adds	r3, #1
 8004be0:	440b      	add	r3, r1
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004be6:	f04f 0900 	mov.w	r9, #0
 8004bea:	e7db      	b.n	8004ba4 <_printf_float+0x154>
 8004bec:	b913      	cbnz	r3, 8004bf4 <_printf_float+0x1a4>
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	07d2      	lsls	r2, r2, #31
 8004bf2:	d501      	bpl.n	8004bf8 <_printf_float+0x1a8>
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	e7f4      	b.n	8004be2 <_printf_float+0x192>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e7f2      	b.n	8004be2 <_printf_float+0x192>
 8004bfc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c02:	4299      	cmp	r1, r3
 8004c04:	db05      	blt.n	8004c12 <_printf_float+0x1c2>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	6121      	str	r1, [r4, #16]
 8004c0a:	07d8      	lsls	r0, r3, #31
 8004c0c:	d5ea      	bpl.n	8004be4 <_printf_float+0x194>
 8004c0e:	1c4b      	adds	r3, r1, #1
 8004c10:	e7e7      	b.n	8004be2 <_printf_float+0x192>
 8004c12:	2900      	cmp	r1, #0
 8004c14:	bfd4      	ite	le
 8004c16:	f1c1 0202 	rsble	r2, r1, #2
 8004c1a:	2201      	movgt	r2, #1
 8004c1c:	4413      	add	r3, r2
 8004c1e:	e7e0      	b.n	8004be2 <_printf_float+0x192>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	055a      	lsls	r2, r3, #21
 8004c24:	d407      	bmi.n	8004c36 <_printf_float+0x1e6>
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	4642      	mov	r2, r8
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b8      	blx	r7
 8004c30:	3001      	adds	r0, #1
 8004c32:	d12b      	bne.n	8004c8c <_printf_float+0x23c>
 8004c34:	e767      	b.n	8004b06 <_printf_float+0xb6>
 8004c36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c3a:	f240 80dd 	bls.w	8004df8 <_printf_float+0x3a8>
 8004c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c42:	2200      	movs	r2, #0
 8004c44:	2300      	movs	r3, #0
 8004c46:	f7fb ff6f 	bl	8000b28 <__aeabi_dcmpeq>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d033      	beq.n	8004cb6 <_printf_float+0x266>
 8004c4e:	4a37      	ldr	r2, [pc, #220]	@ (8004d2c <_printf_float+0x2dc>)
 8004c50:	2301      	movs	r3, #1
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f af54 	beq.w	8004b06 <_printf_float+0xb6>
 8004c5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c62:	4543      	cmp	r3, r8
 8004c64:	db02      	blt.n	8004c6c <_printf_float+0x21c>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	07d8      	lsls	r0, r3, #31
 8004c6a:	d50f      	bpl.n	8004c8c <_printf_float+0x23c>
 8004c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	f43f af45 	beq.w	8004b06 <_printf_float+0xb6>
 8004c7c:	f04f 0900 	mov.w	r9, #0
 8004c80:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c84:	f104 0a1a 	add.w	sl, r4, #26
 8004c88:	45c8      	cmp	r8, r9
 8004c8a:	dc09      	bgt.n	8004ca0 <_printf_float+0x250>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	079b      	lsls	r3, r3, #30
 8004c90:	f100 8103 	bmi.w	8004e9a <_printf_float+0x44a>
 8004c94:	68e0      	ldr	r0, [r4, #12]
 8004c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c98:	4298      	cmp	r0, r3
 8004c9a:	bfb8      	it	lt
 8004c9c:	4618      	movlt	r0, r3
 8004c9e:	e734      	b.n	8004b0a <_printf_float+0xba>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	4652      	mov	r2, sl
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	47b8      	blx	r7
 8004caa:	3001      	adds	r0, #1
 8004cac:	f43f af2b 	beq.w	8004b06 <_printf_float+0xb6>
 8004cb0:	f109 0901 	add.w	r9, r9, #1
 8004cb4:	e7e8      	b.n	8004c88 <_printf_float+0x238>
 8004cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	dc39      	bgt.n	8004d30 <_printf_float+0x2e0>
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <_printf_float+0x2dc>)
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f43f af1d 	beq.w	8004b06 <_printf_float+0xb6>
 8004ccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004cd0:	ea59 0303 	orrs.w	r3, r9, r3
 8004cd4:	d102      	bne.n	8004cdc <_printf_float+0x28c>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	07d9      	lsls	r1, r3, #31
 8004cda:	d5d7      	bpl.n	8004c8c <_printf_float+0x23c>
 8004cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f af0d 	beq.w	8004b06 <_printf_float+0xb6>
 8004cec:	f04f 0a00 	mov.w	sl, #0
 8004cf0:	f104 0b1a 	add.w	fp, r4, #26
 8004cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf6:	425b      	negs	r3, r3
 8004cf8:	4553      	cmp	r3, sl
 8004cfa:	dc01      	bgt.n	8004d00 <_printf_float+0x2b0>
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	e793      	b.n	8004c28 <_printf_float+0x1d8>
 8004d00:	2301      	movs	r3, #1
 8004d02:	465a      	mov	r2, fp
 8004d04:	4631      	mov	r1, r6
 8004d06:	4628      	mov	r0, r5
 8004d08:	47b8      	blx	r7
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	f43f aefb 	beq.w	8004b06 <_printf_float+0xb6>
 8004d10:	f10a 0a01 	add.w	sl, sl, #1
 8004d14:	e7ee      	b.n	8004cf4 <_printf_float+0x2a4>
 8004d16:	bf00      	nop
 8004d18:	7fefffff 	.word	0x7fefffff
 8004d1c:	0800758c 	.word	0x0800758c
 8004d20:	08007590 	.word	0x08007590
 8004d24:	08007594 	.word	0x08007594
 8004d28:	08007598 	.word	0x08007598
 8004d2c:	0800759c 	.word	0x0800759c
 8004d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d36:	4553      	cmp	r3, sl
 8004d38:	bfa8      	it	ge
 8004d3a:	4653      	movge	r3, sl
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	4699      	mov	r9, r3
 8004d40:	dc36      	bgt.n	8004db0 <_printf_float+0x360>
 8004d42:	f04f 0b00 	mov.w	fp, #0
 8004d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d4a:	f104 021a 	add.w	r2, r4, #26
 8004d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d50:	9306      	str	r3, [sp, #24]
 8004d52:	eba3 0309 	sub.w	r3, r3, r9
 8004d56:	455b      	cmp	r3, fp
 8004d58:	dc31      	bgt.n	8004dbe <_printf_float+0x36e>
 8004d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d5c:	459a      	cmp	sl, r3
 8004d5e:	dc3a      	bgt.n	8004dd6 <_printf_float+0x386>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	07da      	lsls	r2, r3, #31
 8004d64:	d437      	bmi.n	8004dd6 <_printf_float+0x386>
 8004d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d68:	ebaa 0903 	sub.w	r9, sl, r3
 8004d6c:	9b06      	ldr	r3, [sp, #24]
 8004d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8004d72:	4599      	cmp	r9, r3
 8004d74:	bfa8      	it	ge
 8004d76:	4699      	movge	r9, r3
 8004d78:	f1b9 0f00 	cmp.w	r9, #0
 8004d7c:	dc33      	bgt.n	8004de6 <_printf_float+0x396>
 8004d7e:	f04f 0800 	mov.w	r8, #0
 8004d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d86:	f104 0b1a 	add.w	fp, r4, #26
 8004d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8004d90:	eba3 0309 	sub.w	r3, r3, r9
 8004d94:	4543      	cmp	r3, r8
 8004d96:	f77f af79 	ble.w	8004c8c <_printf_float+0x23c>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	465a      	mov	r2, fp
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f aeae 	beq.w	8004b06 <_printf_float+0xb6>
 8004daa:	f108 0801 	add.w	r8, r8, #1
 8004dae:	e7ec      	b.n	8004d8a <_printf_float+0x33a>
 8004db0:	4642      	mov	r2, r8
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	d1c2      	bne.n	8004d42 <_printf_float+0x2f2>
 8004dbc:	e6a3      	b.n	8004b06 <_printf_float+0xb6>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	9206      	str	r2, [sp, #24]
 8004dc6:	47b8      	blx	r7
 8004dc8:	3001      	adds	r0, #1
 8004dca:	f43f ae9c 	beq.w	8004b06 <_printf_float+0xb6>
 8004dce:	9a06      	ldr	r2, [sp, #24]
 8004dd0:	f10b 0b01 	add.w	fp, fp, #1
 8004dd4:	e7bb      	b.n	8004d4e <_printf_float+0x2fe>
 8004dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	d1c0      	bne.n	8004d66 <_printf_float+0x316>
 8004de4:	e68f      	b.n	8004b06 <_printf_float+0xb6>
 8004de6:	9a06      	ldr	r2, [sp, #24]
 8004de8:	464b      	mov	r3, r9
 8004dea:	4442      	add	r2, r8
 8004dec:	4631      	mov	r1, r6
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	d1c3      	bne.n	8004d7e <_printf_float+0x32e>
 8004df6:	e686      	b.n	8004b06 <_printf_float+0xb6>
 8004df8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004dfc:	f1ba 0f01 	cmp.w	sl, #1
 8004e00:	dc01      	bgt.n	8004e06 <_printf_float+0x3b6>
 8004e02:	07db      	lsls	r3, r3, #31
 8004e04:	d536      	bpl.n	8004e74 <_printf_float+0x424>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4642      	mov	r2, r8
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b8      	blx	r7
 8004e10:	3001      	adds	r0, #1
 8004e12:	f43f ae78 	beq.w	8004b06 <_printf_float+0xb6>
 8004e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae70 	beq.w	8004b06 <_printf_float+0xb6>
 8004e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e32:	f7fb fe79 	bl	8000b28 <__aeabi_dcmpeq>
 8004e36:	b9c0      	cbnz	r0, 8004e6a <_printf_float+0x41a>
 8004e38:	4653      	mov	r3, sl
 8004e3a:	f108 0201 	add.w	r2, r8, #1
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b8      	blx	r7
 8004e44:	3001      	adds	r0, #1
 8004e46:	d10c      	bne.n	8004e62 <_printf_float+0x412>
 8004e48:	e65d      	b.n	8004b06 <_printf_float+0xb6>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	465a      	mov	r2, fp
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f ae56 	beq.w	8004b06 <_printf_float+0xb6>
 8004e5a:	f108 0801 	add.w	r8, r8, #1
 8004e5e:	45d0      	cmp	r8, sl
 8004e60:	dbf3      	blt.n	8004e4a <_printf_float+0x3fa>
 8004e62:	464b      	mov	r3, r9
 8004e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e68:	e6df      	b.n	8004c2a <_printf_float+0x1da>
 8004e6a:	f04f 0800 	mov.w	r8, #0
 8004e6e:	f104 0b1a 	add.w	fp, r4, #26
 8004e72:	e7f4      	b.n	8004e5e <_printf_float+0x40e>
 8004e74:	2301      	movs	r3, #1
 8004e76:	4642      	mov	r2, r8
 8004e78:	e7e1      	b.n	8004e3e <_printf_float+0x3ee>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	464a      	mov	r2, r9
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	f43f ae3e 	beq.w	8004b06 <_printf_float+0xb6>
 8004e8a:	f108 0801 	add.w	r8, r8, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	4543      	cmp	r3, r8
 8004e96:	dcf0      	bgt.n	8004e7a <_printf_float+0x42a>
 8004e98:	e6fc      	b.n	8004c94 <_printf_float+0x244>
 8004e9a:	f04f 0800 	mov.w	r8, #0
 8004e9e:	f104 0919 	add.w	r9, r4, #25
 8004ea2:	e7f4      	b.n	8004e8e <_printf_float+0x43e>

08004ea4 <_printf_common>:
 8004ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	4698      	mov	r8, r3
 8004eac:	688a      	ldr	r2, [r1, #8]
 8004eae:	690b      	ldr	r3, [r1, #16]
 8004eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	bfb8      	it	lt
 8004eb8:	4613      	movlt	r3, r2
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	b10a      	cbz	r2, 8004eca <_printf_common+0x26>
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	6033      	str	r3, [r6, #0]
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	0699      	lsls	r1, r3, #26
 8004ece:	bf42      	ittt	mi
 8004ed0:	6833      	ldrmi	r3, [r6, #0]
 8004ed2:	3302      	addmi	r3, #2
 8004ed4:	6033      	strmi	r3, [r6, #0]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	f015 0506 	ands.w	r5, r5, #6
 8004edc:	d106      	bne.n	8004eec <_printf_common+0x48>
 8004ede:	f104 0a19 	add.w	sl, r4, #25
 8004ee2:	68e3      	ldr	r3, [r4, #12]
 8004ee4:	6832      	ldr	r2, [r6, #0]
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	42ab      	cmp	r3, r5
 8004eea:	dc26      	bgt.n	8004f3a <_printf_common+0x96>
 8004eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	3b00      	subs	r3, #0
 8004ef4:	bf18      	it	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	0692      	lsls	r2, r2, #26
 8004efa:	d42b      	bmi.n	8004f54 <_printf_common+0xb0>
 8004efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f00:	4641      	mov	r1, r8
 8004f02:	4638      	mov	r0, r7
 8004f04:	47c8      	blx	r9
 8004f06:	3001      	adds	r0, #1
 8004f08:	d01e      	beq.n	8004f48 <_printf_common+0xa4>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	6922      	ldr	r2, [r4, #16]
 8004f0e:	f003 0306 	and.w	r3, r3, #6
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	bf02      	ittt	eq
 8004f16:	68e5      	ldreq	r5, [r4, #12]
 8004f18:	6833      	ldreq	r3, [r6, #0]
 8004f1a:	1aed      	subeq	r5, r5, r3
 8004f1c:	68a3      	ldr	r3, [r4, #8]
 8004f1e:	bf0c      	ite	eq
 8004f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f24:	2500      	movne	r5, #0
 8004f26:	4293      	cmp	r3, r2
 8004f28:	bfc4      	itt	gt
 8004f2a:	1a9b      	subgt	r3, r3, r2
 8004f2c:	18ed      	addgt	r5, r5, r3
 8004f2e:	2600      	movs	r6, #0
 8004f30:	341a      	adds	r4, #26
 8004f32:	42b5      	cmp	r5, r6
 8004f34:	d11a      	bne.n	8004f6c <_printf_common+0xc8>
 8004f36:	2000      	movs	r0, #0
 8004f38:	e008      	b.n	8004f4c <_printf_common+0xa8>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4652      	mov	r2, sl
 8004f3e:	4641      	mov	r1, r8
 8004f40:	4638      	mov	r0, r7
 8004f42:	47c8      	blx	r9
 8004f44:	3001      	adds	r0, #1
 8004f46:	d103      	bne.n	8004f50 <_printf_common+0xac>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f50:	3501      	adds	r5, #1
 8004f52:	e7c6      	b.n	8004ee2 <_printf_common+0x3e>
 8004f54:	18e1      	adds	r1, r4, r3
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	2030      	movs	r0, #48	@ 0x30
 8004f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f5e:	4422      	add	r2, r4
 8004f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f68:	3302      	adds	r3, #2
 8004f6a:	e7c7      	b.n	8004efc <_printf_common+0x58>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4641      	mov	r1, r8
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c8      	blx	r9
 8004f76:	3001      	adds	r0, #1
 8004f78:	d0e6      	beq.n	8004f48 <_printf_common+0xa4>
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7d9      	b.n	8004f32 <_printf_common+0x8e>
	...

08004f80 <_printf_i>:
 8004f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	7e0f      	ldrb	r7, [r1, #24]
 8004f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f88:	2f78      	cmp	r7, #120	@ 0x78
 8004f8a:	4691      	mov	r9, r2
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	469a      	mov	sl, r3
 8004f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f96:	d807      	bhi.n	8004fa8 <_printf_i+0x28>
 8004f98:	2f62      	cmp	r7, #98	@ 0x62
 8004f9a:	d80a      	bhi.n	8004fb2 <_printf_i+0x32>
 8004f9c:	2f00      	cmp	r7, #0
 8004f9e:	f000 80d2 	beq.w	8005146 <_printf_i+0x1c6>
 8004fa2:	2f58      	cmp	r7, #88	@ 0x58
 8004fa4:	f000 80b9 	beq.w	800511a <_printf_i+0x19a>
 8004fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fb0:	e03a      	b.n	8005028 <_printf_i+0xa8>
 8004fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fb6:	2b15      	cmp	r3, #21
 8004fb8:	d8f6      	bhi.n	8004fa8 <_printf_i+0x28>
 8004fba:	a101      	add	r1, pc, #4	@ (adr r1, 8004fc0 <_printf_i+0x40>)
 8004fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	0800502d 	.word	0x0800502d
 8004fc8:	08004fa9 	.word	0x08004fa9
 8004fcc:	08004fa9 	.word	0x08004fa9
 8004fd0:	08004fa9 	.word	0x08004fa9
 8004fd4:	08004fa9 	.word	0x08004fa9
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	08004fa9 	.word	0x08004fa9
 8004fe0:	08004fa9 	.word	0x08004fa9
 8004fe4:	08004fa9 	.word	0x08004fa9
 8004fe8:	08004fa9 	.word	0x08004fa9
 8004fec:	0800512d 	.word	0x0800512d
 8004ff0:	08005057 	.word	0x08005057
 8004ff4:	080050e7 	.word	0x080050e7
 8004ff8:	08004fa9 	.word	0x08004fa9
 8004ffc:	08004fa9 	.word	0x08004fa9
 8005000:	0800514f 	.word	0x0800514f
 8005004:	08004fa9 	.word	0x08004fa9
 8005008:	08005057 	.word	0x08005057
 800500c:	08004fa9 	.word	0x08004fa9
 8005010:	08004fa9 	.word	0x08004fa9
 8005014:	080050ef 	.word	0x080050ef
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	1d1a      	adds	r2, r3, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6032      	str	r2, [r6, #0]
 8005020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005028:	2301      	movs	r3, #1
 800502a:	e09d      	b.n	8005168 <_printf_i+0x1e8>
 800502c:	6833      	ldr	r3, [r6, #0]
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	1d19      	adds	r1, r3, #4
 8005032:	6031      	str	r1, [r6, #0]
 8005034:	0606      	lsls	r6, r0, #24
 8005036:	d501      	bpl.n	800503c <_printf_i+0xbc>
 8005038:	681d      	ldr	r5, [r3, #0]
 800503a:	e003      	b.n	8005044 <_printf_i+0xc4>
 800503c:	0645      	lsls	r5, r0, #25
 800503e:	d5fb      	bpl.n	8005038 <_printf_i+0xb8>
 8005040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005044:	2d00      	cmp	r5, #0
 8005046:	da03      	bge.n	8005050 <_printf_i+0xd0>
 8005048:	232d      	movs	r3, #45	@ 0x2d
 800504a:	426d      	negs	r5, r5
 800504c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005050:	4859      	ldr	r0, [pc, #356]	@ (80051b8 <_printf_i+0x238>)
 8005052:	230a      	movs	r3, #10
 8005054:	e011      	b.n	800507a <_printf_i+0xfa>
 8005056:	6821      	ldr	r1, [r4, #0]
 8005058:	6833      	ldr	r3, [r6, #0]
 800505a:	0608      	lsls	r0, r1, #24
 800505c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005060:	d402      	bmi.n	8005068 <_printf_i+0xe8>
 8005062:	0649      	lsls	r1, r1, #25
 8005064:	bf48      	it	mi
 8005066:	b2ad      	uxthmi	r5, r5
 8005068:	2f6f      	cmp	r7, #111	@ 0x6f
 800506a:	4853      	ldr	r0, [pc, #332]	@ (80051b8 <_printf_i+0x238>)
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	bf14      	ite	ne
 8005070:	230a      	movne	r3, #10
 8005072:	2308      	moveq	r3, #8
 8005074:	2100      	movs	r1, #0
 8005076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800507a:	6866      	ldr	r6, [r4, #4]
 800507c:	60a6      	str	r6, [r4, #8]
 800507e:	2e00      	cmp	r6, #0
 8005080:	bfa2      	ittt	ge
 8005082:	6821      	ldrge	r1, [r4, #0]
 8005084:	f021 0104 	bicge.w	r1, r1, #4
 8005088:	6021      	strge	r1, [r4, #0]
 800508a:	b90d      	cbnz	r5, 8005090 <_printf_i+0x110>
 800508c:	2e00      	cmp	r6, #0
 800508e:	d04b      	beq.n	8005128 <_printf_i+0x1a8>
 8005090:	4616      	mov	r6, r2
 8005092:	fbb5 f1f3 	udiv	r1, r5, r3
 8005096:	fb03 5711 	mls	r7, r3, r1, r5
 800509a:	5dc7      	ldrb	r7, [r0, r7]
 800509c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050a0:	462f      	mov	r7, r5
 80050a2:	42bb      	cmp	r3, r7
 80050a4:	460d      	mov	r5, r1
 80050a6:	d9f4      	bls.n	8005092 <_printf_i+0x112>
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d10b      	bne.n	80050c4 <_printf_i+0x144>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07df      	lsls	r7, r3, #31
 80050b0:	d508      	bpl.n	80050c4 <_printf_i+0x144>
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	6861      	ldr	r1, [r4, #4]
 80050b6:	4299      	cmp	r1, r3
 80050b8:	bfde      	ittt	le
 80050ba:	2330      	movle	r3, #48	@ 0x30
 80050bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050c4:	1b92      	subs	r2, r2, r6
 80050c6:	6122      	str	r2, [r4, #16]
 80050c8:	f8cd a000 	str.w	sl, [sp]
 80050cc:	464b      	mov	r3, r9
 80050ce:	aa03      	add	r2, sp, #12
 80050d0:	4621      	mov	r1, r4
 80050d2:	4640      	mov	r0, r8
 80050d4:	f7ff fee6 	bl	8004ea4 <_printf_common>
 80050d8:	3001      	adds	r0, #1
 80050da:	d14a      	bne.n	8005172 <_printf_i+0x1f2>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	b004      	add	sp, #16
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	f043 0320 	orr.w	r3, r3, #32
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	4833      	ldr	r0, [pc, #204]	@ (80051bc <_printf_i+0x23c>)
 80050f0:	2778      	movs	r7, #120	@ 0x78
 80050f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	6831      	ldr	r1, [r6, #0]
 80050fa:	061f      	lsls	r7, r3, #24
 80050fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005100:	d402      	bmi.n	8005108 <_printf_i+0x188>
 8005102:	065f      	lsls	r7, r3, #25
 8005104:	bf48      	it	mi
 8005106:	b2ad      	uxthmi	r5, r5
 8005108:	6031      	str	r1, [r6, #0]
 800510a:	07d9      	lsls	r1, r3, #31
 800510c:	bf44      	itt	mi
 800510e:	f043 0320 	orrmi.w	r3, r3, #32
 8005112:	6023      	strmi	r3, [r4, #0]
 8005114:	b11d      	cbz	r5, 800511e <_printf_i+0x19e>
 8005116:	2310      	movs	r3, #16
 8005118:	e7ac      	b.n	8005074 <_printf_i+0xf4>
 800511a:	4827      	ldr	r0, [pc, #156]	@ (80051b8 <_printf_i+0x238>)
 800511c:	e7e9      	b.n	80050f2 <_printf_i+0x172>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f023 0320 	bic.w	r3, r3, #32
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	e7f6      	b.n	8005116 <_printf_i+0x196>
 8005128:	4616      	mov	r6, r2
 800512a:	e7bd      	b.n	80050a8 <_printf_i+0x128>
 800512c:	6833      	ldr	r3, [r6, #0]
 800512e:	6825      	ldr	r5, [r4, #0]
 8005130:	6961      	ldr	r1, [r4, #20]
 8005132:	1d18      	adds	r0, r3, #4
 8005134:	6030      	str	r0, [r6, #0]
 8005136:	062e      	lsls	r6, r5, #24
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	d501      	bpl.n	8005140 <_printf_i+0x1c0>
 800513c:	6019      	str	r1, [r3, #0]
 800513e:	e002      	b.n	8005146 <_printf_i+0x1c6>
 8005140:	0668      	lsls	r0, r5, #25
 8005142:	d5fb      	bpl.n	800513c <_printf_i+0x1bc>
 8005144:	8019      	strh	r1, [r3, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	4616      	mov	r6, r2
 800514c:	e7bc      	b.n	80050c8 <_printf_i+0x148>
 800514e:	6833      	ldr	r3, [r6, #0]
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	6032      	str	r2, [r6, #0]
 8005154:	681e      	ldr	r6, [r3, #0]
 8005156:	6862      	ldr	r2, [r4, #4]
 8005158:	2100      	movs	r1, #0
 800515a:	4630      	mov	r0, r6
 800515c:	f7fb f868 	bl	8000230 <memchr>
 8005160:	b108      	cbz	r0, 8005166 <_printf_i+0x1e6>
 8005162:	1b80      	subs	r0, r0, r6
 8005164:	6060      	str	r0, [r4, #4]
 8005166:	6863      	ldr	r3, [r4, #4]
 8005168:	6123      	str	r3, [r4, #16]
 800516a:	2300      	movs	r3, #0
 800516c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005170:	e7aa      	b.n	80050c8 <_printf_i+0x148>
 8005172:	6923      	ldr	r3, [r4, #16]
 8005174:	4632      	mov	r2, r6
 8005176:	4649      	mov	r1, r9
 8005178:	4640      	mov	r0, r8
 800517a:	47d0      	blx	sl
 800517c:	3001      	adds	r0, #1
 800517e:	d0ad      	beq.n	80050dc <_printf_i+0x15c>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	079b      	lsls	r3, r3, #30
 8005184:	d413      	bmi.n	80051ae <_printf_i+0x22e>
 8005186:	68e0      	ldr	r0, [r4, #12]
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	4298      	cmp	r0, r3
 800518c:	bfb8      	it	lt
 800518e:	4618      	movlt	r0, r3
 8005190:	e7a6      	b.n	80050e0 <_printf_i+0x160>
 8005192:	2301      	movs	r3, #1
 8005194:	4632      	mov	r2, r6
 8005196:	4649      	mov	r1, r9
 8005198:	4640      	mov	r0, r8
 800519a:	47d0      	blx	sl
 800519c:	3001      	adds	r0, #1
 800519e:	d09d      	beq.n	80050dc <_printf_i+0x15c>
 80051a0:	3501      	adds	r5, #1
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	9903      	ldr	r1, [sp, #12]
 80051a6:	1a5b      	subs	r3, r3, r1
 80051a8:	42ab      	cmp	r3, r5
 80051aa:	dcf2      	bgt.n	8005192 <_printf_i+0x212>
 80051ac:	e7eb      	b.n	8005186 <_printf_i+0x206>
 80051ae:	2500      	movs	r5, #0
 80051b0:	f104 0619 	add.w	r6, r4, #25
 80051b4:	e7f5      	b.n	80051a2 <_printf_i+0x222>
 80051b6:	bf00      	nop
 80051b8:	0800759e 	.word	0x0800759e
 80051bc:	080075af 	.word	0x080075af

080051c0 <std>:
 80051c0:	2300      	movs	r3, #0
 80051c2:	b510      	push	{r4, lr}
 80051c4:	4604      	mov	r4, r0
 80051c6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ce:	6083      	str	r3, [r0, #8]
 80051d0:	8181      	strh	r1, [r0, #12]
 80051d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80051d4:	81c2      	strh	r2, [r0, #14]
 80051d6:	6183      	str	r3, [r0, #24]
 80051d8:	4619      	mov	r1, r3
 80051da:	2208      	movs	r2, #8
 80051dc:	305c      	adds	r0, #92	@ 0x5c
 80051de:	f000 f926 	bl	800542e <memset>
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <std+0x58>)
 80051e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <std+0x5c>)
 80051e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <std+0x60>)
 80051ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <std+0x64>)
 80051f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <std+0x68>)
 80051f4:	6224      	str	r4, [r4, #32]
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d006      	beq.n	8005208 <std+0x48>
 80051fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051fe:	4294      	cmp	r4, r2
 8005200:	d002      	beq.n	8005208 <std+0x48>
 8005202:	33d0      	adds	r3, #208	@ 0xd0
 8005204:	429c      	cmp	r4, r3
 8005206:	d105      	bne.n	8005214 <std+0x54>
 8005208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005210:	f000 b99a 	b.w	8005548 <__retarget_lock_init_recursive>
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop
 8005218:	080053a9 	.word	0x080053a9
 800521c:	080053cb 	.word	0x080053cb
 8005220:	08005403 	.word	0x08005403
 8005224:	08005427 	.word	0x08005427
 8005228:	200003e0 	.word	0x200003e0

0800522c <stdio_exit_handler>:
 800522c:	4a02      	ldr	r2, [pc, #8]	@ (8005238 <stdio_exit_handler+0xc>)
 800522e:	4903      	ldr	r1, [pc, #12]	@ (800523c <stdio_exit_handler+0x10>)
 8005230:	4803      	ldr	r0, [pc, #12]	@ (8005240 <stdio_exit_handler+0x14>)
 8005232:	f000 b869 	b.w	8005308 <_fwalk_sglue>
 8005236:	bf00      	nop
 8005238:	20000024 	.word	0x20000024
 800523c:	08006fbd 	.word	0x08006fbd
 8005240:	20000034 	.word	0x20000034

08005244 <cleanup_stdio>:
 8005244:	6841      	ldr	r1, [r0, #4]
 8005246:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <cleanup_stdio+0x34>)
 8005248:	4299      	cmp	r1, r3
 800524a:	b510      	push	{r4, lr}
 800524c:	4604      	mov	r4, r0
 800524e:	d001      	beq.n	8005254 <cleanup_stdio+0x10>
 8005250:	f001 feb4 	bl	8006fbc <_fflush_r>
 8005254:	68a1      	ldr	r1, [r4, #8]
 8005256:	4b09      	ldr	r3, [pc, #36]	@ (800527c <cleanup_stdio+0x38>)
 8005258:	4299      	cmp	r1, r3
 800525a:	d002      	beq.n	8005262 <cleanup_stdio+0x1e>
 800525c:	4620      	mov	r0, r4
 800525e:	f001 fead 	bl	8006fbc <_fflush_r>
 8005262:	68e1      	ldr	r1, [r4, #12]
 8005264:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <cleanup_stdio+0x3c>)
 8005266:	4299      	cmp	r1, r3
 8005268:	d004      	beq.n	8005274 <cleanup_stdio+0x30>
 800526a:	4620      	mov	r0, r4
 800526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005270:	f001 bea4 	b.w	8006fbc <_fflush_r>
 8005274:	bd10      	pop	{r4, pc}
 8005276:	bf00      	nop
 8005278:	200003e0 	.word	0x200003e0
 800527c:	20000448 	.word	0x20000448
 8005280:	200004b0 	.word	0x200004b0

08005284 <global_stdio_init.part.0>:
 8005284:	b510      	push	{r4, lr}
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <global_stdio_init.part.0+0x30>)
 8005288:	4c0b      	ldr	r4, [pc, #44]	@ (80052b8 <global_stdio_init.part.0+0x34>)
 800528a:	4a0c      	ldr	r2, [pc, #48]	@ (80052bc <global_stdio_init.part.0+0x38>)
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	4620      	mov	r0, r4
 8005290:	2200      	movs	r2, #0
 8005292:	2104      	movs	r1, #4
 8005294:	f7ff ff94 	bl	80051c0 <std>
 8005298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800529c:	2201      	movs	r2, #1
 800529e:	2109      	movs	r1, #9
 80052a0:	f7ff ff8e 	bl	80051c0 <std>
 80052a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052a8:	2202      	movs	r2, #2
 80052aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ae:	2112      	movs	r1, #18
 80052b0:	f7ff bf86 	b.w	80051c0 <std>
 80052b4:	20000518 	.word	0x20000518
 80052b8:	200003e0 	.word	0x200003e0
 80052bc:	0800522d 	.word	0x0800522d

080052c0 <__sfp_lock_acquire>:
 80052c0:	4801      	ldr	r0, [pc, #4]	@ (80052c8 <__sfp_lock_acquire+0x8>)
 80052c2:	f000 b942 	b.w	800554a <__retarget_lock_acquire_recursive>
 80052c6:	bf00      	nop
 80052c8:	20000521 	.word	0x20000521

080052cc <__sfp_lock_release>:
 80052cc:	4801      	ldr	r0, [pc, #4]	@ (80052d4 <__sfp_lock_release+0x8>)
 80052ce:	f000 b93d 	b.w	800554c <__retarget_lock_release_recursive>
 80052d2:	bf00      	nop
 80052d4:	20000521 	.word	0x20000521

080052d8 <__sinit>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	4604      	mov	r4, r0
 80052dc:	f7ff fff0 	bl	80052c0 <__sfp_lock_acquire>
 80052e0:	6a23      	ldr	r3, [r4, #32]
 80052e2:	b11b      	cbz	r3, 80052ec <__sinit+0x14>
 80052e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e8:	f7ff bff0 	b.w	80052cc <__sfp_lock_release>
 80052ec:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <__sinit+0x28>)
 80052ee:	6223      	str	r3, [r4, #32]
 80052f0:	4b04      	ldr	r3, [pc, #16]	@ (8005304 <__sinit+0x2c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f5      	bne.n	80052e4 <__sinit+0xc>
 80052f8:	f7ff ffc4 	bl	8005284 <global_stdio_init.part.0>
 80052fc:	e7f2      	b.n	80052e4 <__sinit+0xc>
 80052fe:	bf00      	nop
 8005300:	08005245 	.word	0x08005245
 8005304:	20000518 	.word	0x20000518

08005308 <_fwalk_sglue>:
 8005308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800530c:	4607      	mov	r7, r0
 800530e:	4688      	mov	r8, r1
 8005310:	4614      	mov	r4, r2
 8005312:	2600      	movs	r6, #0
 8005314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005318:	f1b9 0901 	subs.w	r9, r9, #1
 800531c:	d505      	bpl.n	800532a <_fwalk_sglue+0x22>
 800531e:	6824      	ldr	r4, [r4, #0]
 8005320:	2c00      	cmp	r4, #0
 8005322:	d1f7      	bne.n	8005314 <_fwalk_sglue+0xc>
 8005324:	4630      	mov	r0, r6
 8005326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d907      	bls.n	8005340 <_fwalk_sglue+0x38>
 8005330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005334:	3301      	adds	r3, #1
 8005336:	d003      	beq.n	8005340 <_fwalk_sglue+0x38>
 8005338:	4629      	mov	r1, r5
 800533a:	4638      	mov	r0, r7
 800533c:	47c0      	blx	r8
 800533e:	4306      	orrs	r6, r0
 8005340:	3568      	adds	r5, #104	@ 0x68
 8005342:	e7e9      	b.n	8005318 <_fwalk_sglue+0x10>

08005344 <iprintf>:
 8005344:	b40f      	push	{r0, r1, r2, r3}
 8005346:	b507      	push	{r0, r1, r2, lr}
 8005348:	4906      	ldr	r1, [pc, #24]	@ (8005364 <iprintf+0x20>)
 800534a:	ab04      	add	r3, sp, #16
 800534c:	6808      	ldr	r0, [r1, #0]
 800534e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005352:	6881      	ldr	r1, [r0, #8]
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	f001 fc95 	bl	8006c84 <_vfiprintf_r>
 800535a:	b003      	add	sp, #12
 800535c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005360:	b004      	add	sp, #16
 8005362:	4770      	bx	lr
 8005364:	20000030 	.word	0x20000030

08005368 <siprintf>:
 8005368:	b40e      	push	{r1, r2, r3}
 800536a:	b500      	push	{lr}
 800536c:	b09c      	sub	sp, #112	@ 0x70
 800536e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005370:	9002      	str	r0, [sp, #8]
 8005372:	9006      	str	r0, [sp, #24]
 8005374:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005378:	4809      	ldr	r0, [pc, #36]	@ (80053a0 <siprintf+0x38>)
 800537a:	9107      	str	r1, [sp, #28]
 800537c:	9104      	str	r1, [sp, #16]
 800537e:	4909      	ldr	r1, [pc, #36]	@ (80053a4 <siprintf+0x3c>)
 8005380:	f853 2b04 	ldr.w	r2, [r3], #4
 8005384:	9105      	str	r1, [sp, #20]
 8005386:	6800      	ldr	r0, [r0, #0]
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	a902      	add	r1, sp, #8
 800538c:	f001 fb54 	bl	8006a38 <_svfiprintf_r>
 8005390:	9b02      	ldr	r3, [sp, #8]
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	b01c      	add	sp, #112	@ 0x70
 8005398:	f85d eb04 	ldr.w	lr, [sp], #4
 800539c:	b003      	add	sp, #12
 800539e:	4770      	bx	lr
 80053a0:	20000030 	.word	0x20000030
 80053a4:	ffff0208 	.word	0xffff0208

080053a8 <__sread>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	460c      	mov	r4, r1
 80053ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b0:	f000 f86c 	bl	800548c <_read_r>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	bfab      	itete	ge
 80053b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053ba:	89a3      	ldrhlt	r3, [r4, #12]
 80053bc:	181b      	addge	r3, r3, r0
 80053be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053c2:	bfac      	ite	ge
 80053c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053c6:	81a3      	strhlt	r3, [r4, #12]
 80053c8:	bd10      	pop	{r4, pc}

080053ca <__swrite>:
 80053ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ce:	461f      	mov	r7, r3
 80053d0:	898b      	ldrh	r3, [r1, #12]
 80053d2:	05db      	lsls	r3, r3, #23
 80053d4:	4605      	mov	r5, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	4616      	mov	r6, r2
 80053da:	d505      	bpl.n	80053e8 <__swrite+0x1e>
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	2302      	movs	r3, #2
 80053e2:	2200      	movs	r2, #0
 80053e4:	f000 f840 	bl	8005468 <_lseek_r>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053f2:	81a3      	strh	r3, [r4, #12]
 80053f4:	4632      	mov	r2, r6
 80053f6:	463b      	mov	r3, r7
 80053f8:	4628      	mov	r0, r5
 80053fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	f000 b867 	b.w	80054d0 <_write_r>

08005402 <__sseek>:
 8005402:	b510      	push	{r4, lr}
 8005404:	460c      	mov	r4, r1
 8005406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540a:	f000 f82d 	bl	8005468 <_lseek_r>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	bf15      	itete	ne
 8005414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800541a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800541e:	81a3      	strheq	r3, [r4, #12]
 8005420:	bf18      	it	ne
 8005422:	81a3      	strhne	r3, [r4, #12]
 8005424:	bd10      	pop	{r4, pc}

08005426 <__sclose>:
 8005426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542a:	f000 b80d 	b.w	8005448 <_close_r>

0800542e <memset>:
 800542e:	4402      	add	r2, r0
 8005430:	4603      	mov	r3, r0
 8005432:	4293      	cmp	r3, r2
 8005434:	d100      	bne.n	8005438 <memset+0xa>
 8005436:	4770      	bx	lr
 8005438:	f803 1b01 	strb.w	r1, [r3], #1
 800543c:	e7f9      	b.n	8005432 <memset+0x4>
	...

08005440 <_localeconv_r>:
 8005440:	4800      	ldr	r0, [pc, #0]	@ (8005444 <_localeconv_r+0x4>)
 8005442:	4770      	bx	lr
 8005444:	20000170 	.word	0x20000170

08005448 <_close_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d06      	ldr	r5, [pc, #24]	@ (8005464 <_close_r+0x1c>)
 800544c:	2300      	movs	r3, #0
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	f7fc fc06 	bl	8001c64 <_close>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_close_r+0x1a>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_close_r+0x1a>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	2000051c 	.word	0x2000051c

08005468 <_lseek_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d07      	ldr	r5, [pc, #28]	@ (8005488 <_lseek_r+0x20>)
 800546c:	4604      	mov	r4, r0
 800546e:	4608      	mov	r0, r1
 8005470:	4611      	mov	r1, r2
 8005472:	2200      	movs	r2, #0
 8005474:	602a      	str	r2, [r5, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	f7fc fc1b 	bl	8001cb2 <_lseek>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_lseek_r+0x1e>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_lseek_r+0x1e>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	2000051c 	.word	0x2000051c

0800548c <_read_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4d07      	ldr	r5, [pc, #28]	@ (80054ac <_read_r+0x20>)
 8005490:	4604      	mov	r4, r0
 8005492:	4608      	mov	r0, r1
 8005494:	4611      	mov	r1, r2
 8005496:	2200      	movs	r2, #0
 8005498:	602a      	str	r2, [r5, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	f7fc fba9 	bl	8001bf2 <_read>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_read_r+0x1e>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_read_r+0x1e>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	2000051c 	.word	0x2000051c

080054b0 <_sbrk_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d06      	ldr	r5, [pc, #24]	@ (80054cc <_sbrk_r+0x1c>)
 80054b4:	2300      	movs	r3, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fc fc06 	bl	8001ccc <_sbrk>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_sbrk_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_sbrk_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	2000051c 	.word	0x2000051c

080054d0 <_write_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d07      	ldr	r5, [pc, #28]	@ (80054f0 <_write_r+0x20>)
 80054d4:	4604      	mov	r4, r0
 80054d6:	4608      	mov	r0, r1
 80054d8:	4611      	mov	r1, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	602a      	str	r2, [r5, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fc fba4 	bl	8001c2c <_write>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_write_r+0x1e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_write_r+0x1e>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	2000051c 	.word	0x2000051c

080054f4 <__errno>:
 80054f4:	4b01      	ldr	r3, [pc, #4]	@ (80054fc <__errno+0x8>)
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20000030 	.word	0x20000030

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4d0d      	ldr	r5, [pc, #52]	@ (8005538 <__libc_init_array+0x38>)
 8005504:	4c0d      	ldr	r4, [pc, #52]	@ (800553c <__libc_init_array+0x3c>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	2600      	movs	r6, #0
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	4d0b      	ldr	r5, [pc, #44]	@ (8005540 <__libc_init_array+0x40>)
 8005512:	4c0c      	ldr	r4, [pc, #48]	@ (8005544 <__libc_init_array+0x44>)
 8005514:	f001 ffa0 	bl	8007458 <_init>
 8005518:	1b64      	subs	r4, r4, r5
 800551a:	10a4      	asrs	r4, r4, #2
 800551c:	2600      	movs	r6, #0
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	08007908 	.word	0x08007908
 800553c:	08007908 	.word	0x08007908
 8005540:	08007908 	.word	0x08007908
 8005544:	0800790c 	.word	0x0800790c

08005548 <__retarget_lock_init_recursive>:
 8005548:	4770      	bx	lr

0800554a <__retarget_lock_acquire_recursive>:
 800554a:	4770      	bx	lr

0800554c <__retarget_lock_release_recursive>:
 800554c:	4770      	bx	lr

0800554e <quorem>:
 800554e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005552:	6903      	ldr	r3, [r0, #16]
 8005554:	690c      	ldr	r4, [r1, #16]
 8005556:	42a3      	cmp	r3, r4
 8005558:	4607      	mov	r7, r0
 800555a:	db7e      	blt.n	800565a <quorem+0x10c>
 800555c:	3c01      	subs	r4, #1
 800555e:	f101 0814 	add.w	r8, r1, #20
 8005562:	00a3      	lsls	r3, r4, #2
 8005564:	f100 0514 	add.w	r5, r0, #20
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005578:	3301      	adds	r3, #1
 800557a:	429a      	cmp	r2, r3
 800557c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005580:	fbb2 f6f3 	udiv	r6, r2, r3
 8005584:	d32e      	bcc.n	80055e4 <quorem+0x96>
 8005586:	f04f 0a00 	mov.w	sl, #0
 800558a:	46c4      	mov	ip, r8
 800558c:	46ae      	mov	lr, r5
 800558e:	46d3      	mov	fp, sl
 8005590:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005594:	b298      	uxth	r0, r3
 8005596:	fb06 a000 	mla	r0, r6, r0, sl
 800559a:	0c02      	lsrs	r2, r0, #16
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	fb06 2303 	mla	r3, r6, r3, r2
 80055a2:	f8de 2000 	ldr.w	r2, [lr]
 80055a6:	b280      	uxth	r0, r0
 80055a8:	b292      	uxth	r2, r2
 80055aa:	1a12      	subs	r2, r2, r0
 80055ac:	445a      	add	r2, fp
 80055ae:	f8de 0000 	ldr.w	r0, [lr]
 80055b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055c0:	b292      	uxth	r2, r2
 80055c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055c6:	45e1      	cmp	r9, ip
 80055c8:	f84e 2b04 	str.w	r2, [lr], #4
 80055cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055d0:	d2de      	bcs.n	8005590 <quorem+0x42>
 80055d2:	9b00      	ldr	r3, [sp, #0]
 80055d4:	58eb      	ldr	r3, [r5, r3]
 80055d6:	b92b      	cbnz	r3, 80055e4 <quorem+0x96>
 80055d8:	9b01      	ldr	r3, [sp, #4]
 80055da:	3b04      	subs	r3, #4
 80055dc:	429d      	cmp	r5, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	d32f      	bcc.n	8005642 <quorem+0xf4>
 80055e2:	613c      	str	r4, [r7, #16]
 80055e4:	4638      	mov	r0, r7
 80055e6:	f001 f8c3 	bl	8006770 <__mcmp>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	db25      	blt.n	800563a <quorem+0xec>
 80055ee:	4629      	mov	r1, r5
 80055f0:	2000      	movs	r0, #0
 80055f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80055f6:	f8d1 c000 	ldr.w	ip, [r1]
 80055fa:	fa1f fe82 	uxth.w	lr, r2
 80055fe:	fa1f f38c 	uxth.w	r3, ip
 8005602:	eba3 030e 	sub.w	r3, r3, lr
 8005606:	4403      	add	r3, r0
 8005608:	0c12      	lsrs	r2, r2, #16
 800560a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800560e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005612:	b29b      	uxth	r3, r3
 8005614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005618:	45c1      	cmp	r9, r8
 800561a:	f841 3b04 	str.w	r3, [r1], #4
 800561e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005622:	d2e6      	bcs.n	80055f2 <quorem+0xa4>
 8005624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800562c:	b922      	cbnz	r2, 8005638 <quorem+0xea>
 800562e:	3b04      	subs	r3, #4
 8005630:	429d      	cmp	r5, r3
 8005632:	461a      	mov	r2, r3
 8005634:	d30b      	bcc.n	800564e <quorem+0x100>
 8005636:	613c      	str	r4, [r7, #16]
 8005638:	3601      	adds	r6, #1
 800563a:	4630      	mov	r0, r6
 800563c:	b003      	add	sp, #12
 800563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	3b04      	subs	r3, #4
 8005646:	2a00      	cmp	r2, #0
 8005648:	d1cb      	bne.n	80055e2 <quorem+0x94>
 800564a:	3c01      	subs	r4, #1
 800564c:	e7c6      	b.n	80055dc <quorem+0x8e>
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	3b04      	subs	r3, #4
 8005652:	2a00      	cmp	r2, #0
 8005654:	d1ef      	bne.n	8005636 <quorem+0xe8>
 8005656:	3c01      	subs	r4, #1
 8005658:	e7ea      	b.n	8005630 <quorem+0xe2>
 800565a:	2000      	movs	r0, #0
 800565c:	e7ee      	b.n	800563c <quorem+0xee>
	...

08005660 <_dtoa_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	69c7      	ldr	r7, [r0, #28]
 8005666:	b099      	sub	sp, #100	@ 0x64
 8005668:	ed8d 0b02 	vstr	d0, [sp, #8]
 800566c:	ec55 4b10 	vmov	r4, r5, d0
 8005670:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005672:	9109      	str	r1, [sp, #36]	@ 0x24
 8005674:	4683      	mov	fp, r0
 8005676:	920e      	str	r2, [sp, #56]	@ 0x38
 8005678:	9313      	str	r3, [sp, #76]	@ 0x4c
 800567a:	b97f      	cbnz	r7, 800569c <_dtoa_r+0x3c>
 800567c:	2010      	movs	r0, #16
 800567e:	f7ff f891 	bl	80047a4 <malloc>
 8005682:	4602      	mov	r2, r0
 8005684:	f8cb 001c 	str.w	r0, [fp, #28]
 8005688:	b920      	cbnz	r0, 8005694 <_dtoa_r+0x34>
 800568a:	4ba7      	ldr	r3, [pc, #668]	@ (8005928 <_dtoa_r+0x2c8>)
 800568c:	21ef      	movs	r1, #239	@ 0xef
 800568e:	48a7      	ldr	r0, [pc, #668]	@ (800592c <_dtoa_r+0x2cc>)
 8005690:	f001 fd78 	bl	8007184 <__assert_func>
 8005694:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005698:	6007      	str	r7, [r0, #0]
 800569a:	60c7      	str	r7, [r0, #12]
 800569c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	b159      	cbz	r1, 80056bc <_dtoa_r+0x5c>
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	604a      	str	r2, [r1, #4]
 80056a8:	2301      	movs	r3, #1
 80056aa:	4093      	lsls	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
 80056ae:	4658      	mov	r0, fp
 80056b0:	f000 fe24 	bl	80062fc <_Bfree>
 80056b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	1e2b      	subs	r3, r5, #0
 80056be:	bfb9      	ittee	lt
 80056c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056c4:	9303      	strlt	r3, [sp, #12]
 80056c6:	2300      	movge	r3, #0
 80056c8:	6033      	strge	r3, [r6, #0]
 80056ca:	9f03      	ldr	r7, [sp, #12]
 80056cc:	4b98      	ldr	r3, [pc, #608]	@ (8005930 <_dtoa_r+0x2d0>)
 80056ce:	bfbc      	itt	lt
 80056d0:	2201      	movlt	r2, #1
 80056d2:	6032      	strlt	r2, [r6, #0]
 80056d4:	43bb      	bics	r3, r7
 80056d6:	d112      	bne.n	80056fe <_dtoa_r+0x9e>
 80056d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056e4:	4323      	orrs	r3, r4
 80056e6:	f000 854d 	beq.w	8006184 <_dtoa_r+0xb24>
 80056ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005944 <_dtoa_r+0x2e4>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 854f 	beq.w	8006194 <_dtoa_r+0xb34>
 80056f6:	f10a 0303 	add.w	r3, sl, #3
 80056fa:	f000 bd49 	b.w	8006190 <_dtoa_r+0xb30>
 80056fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	ec51 0b17 	vmov	r0, r1, d7
 8005708:	2300      	movs	r3, #0
 800570a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800570e:	f7fb fa0b 	bl	8000b28 <__aeabi_dcmpeq>
 8005712:	4680      	mov	r8, r0
 8005714:	b158      	cbz	r0, 800572e <_dtoa_r+0xce>
 8005716:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005718:	2301      	movs	r3, #1
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800571e:	b113      	cbz	r3, 8005726 <_dtoa_r+0xc6>
 8005720:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005722:	4b84      	ldr	r3, [pc, #528]	@ (8005934 <_dtoa_r+0x2d4>)
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005948 <_dtoa_r+0x2e8>
 800572a:	f000 bd33 	b.w	8006194 <_dtoa_r+0xb34>
 800572e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005732:	aa16      	add	r2, sp, #88	@ 0x58
 8005734:	a917      	add	r1, sp, #92	@ 0x5c
 8005736:	4658      	mov	r0, fp
 8005738:	f001 f8ca 	bl	80068d0 <__d2b>
 800573c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005740:	4681      	mov	r9, r0
 8005742:	2e00      	cmp	r6, #0
 8005744:	d077      	beq.n	8005836 <_dtoa_r+0x1d6>
 8005746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005748:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800574c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005754:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005758:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800575c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005760:	4619      	mov	r1, r3
 8005762:	2200      	movs	r2, #0
 8005764:	4b74      	ldr	r3, [pc, #464]	@ (8005938 <_dtoa_r+0x2d8>)
 8005766:	f7fa fdbf 	bl	80002e8 <__aeabi_dsub>
 800576a:	a369      	add	r3, pc, #420	@ (adr r3, 8005910 <_dtoa_r+0x2b0>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa ff72 	bl	8000658 <__aeabi_dmul>
 8005774:	a368      	add	r3, pc, #416	@ (adr r3, 8005918 <_dtoa_r+0x2b8>)
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f7fa fdb7 	bl	80002ec <__adddf3>
 800577e:	4604      	mov	r4, r0
 8005780:	4630      	mov	r0, r6
 8005782:	460d      	mov	r5, r1
 8005784:	f7fa fefe 	bl	8000584 <__aeabi_i2d>
 8005788:	a365      	add	r3, pc, #404	@ (adr r3, 8005920 <_dtoa_r+0x2c0>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f7fa ff63 	bl	8000658 <__aeabi_dmul>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4620      	mov	r0, r4
 8005798:	4629      	mov	r1, r5
 800579a:	f7fa fda7 	bl	80002ec <__adddf3>
 800579e:	4604      	mov	r4, r0
 80057a0:	460d      	mov	r5, r1
 80057a2:	f7fb fa09 	bl	8000bb8 <__aeabi_d2iz>
 80057a6:	2200      	movs	r2, #0
 80057a8:	4607      	mov	r7, r0
 80057aa:	2300      	movs	r3, #0
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fb f9c4 	bl	8000b3c <__aeabi_dcmplt>
 80057b4:	b140      	cbz	r0, 80057c8 <_dtoa_r+0x168>
 80057b6:	4638      	mov	r0, r7
 80057b8:	f7fa fee4 	bl	8000584 <__aeabi_i2d>
 80057bc:	4622      	mov	r2, r4
 80057be:	462b      	mov	r3, r5
 80057c0:	f7fb f9b2 	bl	8000b28 <__aeabi_dcmpeq>
 80057c4:	b900      	cbnz	r0, 80057c8 <_dtoa_r+0x168>
 80057c6:	3f01      	subs	r7, #1
 80057c8:	2f16      	cmp	r7, #22
 80057ca:	d851      	bhi.n	8005870 <_dtoa_r+0x210>
 80057cc:	4b5b      	ldr	r3, [pc, #364]	@ (800593c <_dtoa_r+0x2dc>)
 80057ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057da:	f7fb f9af 	bl	8000b3c <__aeabi_dcmplt>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d048      	beq.n	8005874 <_dtoa_r+0x214>
 80057e2:	3f01      	subs	r7, #1
 80057e4:	2300      	movs	r3, #0
 80057e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80057e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80057ea:	1b9b      	subs	r3, r3, r6
 80057ec:	1e5a      	subs	r2, r3, #1
 80057ee:	bf44      	itt	mi
 80057f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80057f4:	2300      	movmi	r3, #0
 80057f6:	9208      	str	r2, [sp, #32]
 80057f8:	bf54      	ite	pl
 80057fa:	f04f 0800 	movpl.w	r8, #0
 80057fe:	9308      	strmi	r3, [sp, #32]
 8005800:	2f00      	cmp	r7, #0
 8005802:	db39      	blt.n	8005878 <_dtoa_r+0x218>
 8005804:	9b08      	ldr	r3, [sp, #32]
 8005806:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005808:	443b      	add	r3, r7
 800580a:	9308      	str	r3, [sp, #32]
 800580c:	2300      	movs	r3, #0
 800580e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005812:	2b09      	cmp	r3, #9
 8005814:	d864      	bhi.n	80058e0 <_dtoa_r+0x280>
 8005816:	2b05      	cmp	r3, #5
 8005818:	bfc4      	itt	gt
 800581a:	3b04      	subgt	r3, #4
 800581c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800581e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005820:	f1a3 0302 	sub.w	r3, r3, #2
 8005824:	bfcc      	ite	gt
 8005826:	2400      	movgt	r4, #0
 8005828:	2401      	movle	r4, #1
 800582a:	2b03      	cmp	r3, #3
 800582c:	d863      	bhi.n	80058f6 <_dtoa_r+0x296>
 800582e:	e8df f003 	tbb	[pc, r3]
 8005832:	372a      	.short	0x372a
 8005834:	5535      	.short	0x5535
 8005836:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800583a:	441e      	add	r6, r3
 800583c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005840:	2b20      	cmp	r3, #32
 8005842:	bfc1      	itttt	gt
 8005844:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005848:	409f      	lslgt	r7, r3
 800584a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800584e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005852:	bfd6      	itet	le
 8005854:	f1c3 0320 	rsble	r3, r3, #32
 8005858:	ea47 0003 	orrgt.w	r0, r7, r3
 800585c:	fa04 f003 	lslle.w	r0, r4, r3
 8005860:	f7fa fe80 	bl	8000564 <__aeabi_ui2d>
 8005864:	2201      	movs	r2, #1
 8005866:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800586a:	3e01      	subs	r6, #1
 800586c:	9214      	str	r2, [sp, #80]	@ 0x50
 800586e:	e777      	b.n	8005760 <_dtoa_r+0x100>
 8005870:	2301      	movs	r3, #1
 8005872:	e7b8      	b.n	80057e6 <_dtoa_r+0x186>
 8005874:	9012      	str	r0, [sp, #72]	@ 0x48
 8005876:	e7b7      	b.n	80057e8 <_dtoa_r+0x188>
 8005878:	427b      	negs	r3, r7
 800587a:	930a      	str	r3, [sp, #40]	@ 0x28
 800587c:	2300      	movs	r3, #0
 800587e:	eba8 0807 	sub.w	r8, r8, r7
 8005882:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005884:	e7c4      	b.n	8005810 <_dtoa_r+0x1b0>
 8005886:	2300      	movs	r3, #0
 8005888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800588a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	dc35      	bgt.n	80058fc <_dtoa_r+0x29c>
 8005890:	2301      	movs	r3, #1
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	9307      	str	r3, [sp, #28]
 8005896:	461a      	mov	r2, r3
 8005898:	920e      	str	r2, [sp, #56]	@ 0x38
 800589a:	e00b      	b.n	80058b4 <_dtoa_r+0x254>
 800589c:	2301      	movs	r3, #1
 800589e:	e7f3      	b.n	8005888 <_dtoa_r+0x228>
 80058a0:	2300      	movs	r3, #0
 80058a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	3301      	adds	r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	bfb8      	it	lt
 80058b2:	2301      	movlt	r3, #1
 80058b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058b8:	2100      	movs	r1, #0
 80058ba:	2204      	movs	r2, #4
 80058bc:	f102 0514 	add.w	r5, r2, #20
 80058c0:	429d      	cmp	r5, r3
 80058c2:	d91f      	bls.n	8005904 <_dtoa_r+0x2a4>
 80058c4:	6041      	str	r1, [r0, #4]
 80058c6:	4658      	mov	r0, fp
 80058c8:	f000 fcd8 	bl	800627c <_Balloc>
 80058cc:	4682      	mov	sl, r0
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d13c      	bne.n	800594c <_dtoa_r+0x2ec>
 80058d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005940 <_dtoa_r+0x2e0>)
 80058d4:	4602      	mov	r2, r0
 80058d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80058da:	e6d8      	b.n	800568e <_dtoa_r+0x2e>
 80058dc:	2301      	movs	r3, #1
 80058de:	e7e0      	b.n	80058a2 <_dtoa_r+0x242>
 80058e0:	2401      	movs	r4, #1
 80058e2:	2300      	movs	r3, #0
 80058e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2312      	movs	r3, #18
 80058f4:	e7d0      	b.n	8005898 <_dtoa_r+0x238>
 80058f6:	2301      	movs	r3, #1
 80058f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058fa:	e7f5      	b.n	80058e8 <_dtoa_r+0x288>
 80058fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	9307      	str	r3, [sp, #28]
 8005902:	e7d7      	b.n	80058b4 <_dtoa_r+0x254>
 8005904:	3101      	adds	r1, #1
 8005906:	0052      	lsls	r2, r2, #1
 8005908:	e7d8      	b.n	80058bc <_dtoa_r+0x25c>
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w
 8005910:	636f4361 	.word	0x636f4361
 8005914:	3fd287a7 	.word	0x3fd287a7
 8005918:	8b60c8b3 	.word	0x8b60c8b3
 800591c:	3fc68a28 	.word	0x3fc68a28
 8005920:	509f79fb 	.word	0x509f79fb
 8005924:	3fd34413 	.word	0x3fd34413
 8005928:	080075cd 	.word	0x080075cd
 800592c:	080075e4 	.word	0x080075e4
 8005930:	7ff00000 	.word	0x7ff00000
 8005934:	0800759d 	.word	0x0800759d
 8005938:	3ff80000 	.word	0x3ff80000
 800593c:	080076e0 	.word	0x080076e0
 8005940:	0800763c 	.word	0x0800763c
 8005944:	080075c9 	.word	0x080075c9
 8005948:	0800759c 	.word	0x0800759c
 800594c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005950:	6018      	str	r0, [r3, #0]
 8005952:	9b07      	ldr	r3, [sp, #28]
 8005954:	2b0e      	cmp	r3, #14
 8005956:	f200 80a4 	bhi.w	8005aa2 <_dtoa_r+0x442>
 800595a:	2c00      	cmp	r4, #0
 800595c:	f000 80a1 	beq.w	8005aa2 <_dtoa_r+0x442>
 8005960:	2f00      	cmp	r7, #0
 8005962:	dd33      	ble.n	80059cc <_dtoa_r+0x36c>
 8005964:	4bad      	ldr	r3, [pc, #692]	@ (8005c1c <_dtoa_r+0x5bc>)
 8005966:	f007 020f 	and.w	r2, r7, #15
 800596a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800596e:	ed93 7b00 	vldr	d7, [r3]
 8005972:	05f8      	lsls	r0, r7, #23
 8005974:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005978:	ea4f 1427 	mov.w	r4, r7, asr #4
 800597c:	d516      	bpl.n	80059ac <_dtoa_r+0x34c>
 800597e:	4ba8      	ldr	r3, [pc, #672]	@ (8005c20 <_dtoa_r+0x5c0>)
 8005980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005988:	f7fa ff90 	bl	80008ac <__aeabi_ddiv>
 800598c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005990:	f004 040f 	and.w	r4, r4, #15
 8005994:	2603      	movs	r6, #3
 8005996:	4da2      	ldr	r5, [pc, #648]	@ (8005c20 <_dtoa_r+0x5c0>)
 8005998:	b954      	cbnz	r4, 80059b0 <_dtoa_r+0x350>
 800599a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800599e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a2:	f7fa ff83 	bl	80008ac <__aeabi_ddiv>
 80059a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059aa:	e028      	b.n	80059fe <_dtoa_r+0x39e>
 80059ac:	2602      	movs	r6, #2
 80059ae:	e7f2      	b.n	8005996 <_dtoa_r+0x336>
 80059b0:	07e1      	lsls	r1, r4, #31
 80059b2:	d508      	bpl.n	80059c6 <_dtoa_r+0x366>
 80059b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059bc:	f7fa fe4c 	bl	8000658 <__aeabi_dmul>
 80059c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c4:	3601      	adds	r6, #1
 80059c6:	1064      	asrs	r4, r4, #1
 80059c8:	3508      	adds	r5, #8
 80059ca:	e7e5      	b.n	8005998 <_dtoa_r+0x338>
 80059cc:	f000 80d2 	beq.w	8005b74 <_dtoa_r+0x514>
 80059d0:	427c      	negs	r4, r7
 80059d2:	4b92      	ldr	r3, [pc, #584]	@ (8005c1c <_dtoa_r+0x5bc>)
 80059d4:	4d92      	ldr	r5, [pc, #584]	@ (8005c20 <_dtoa_r+0x5c0>)
 80059d6:	f004 020f 	and.w	r2, r4, #15
 80059da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059e6:	f7fa fe37 	bl	8000658 <__aeabi_dmul>
 80059ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ee:	1124      	asrs	r4, r4, #4
 80059f0:	2300      	movs	r3, #0
 80059f2:	2602      	movs	r6, #2
 80059f4:	2c00      	cmp	r4, #0
 80059f6:	f040 80b2 	bne.w	8005b5e <_dtoa_r+0x4fe>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1d3      	bne.n	80059a6 <_dtoa_r+0x346>
 80059fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80b7 	beq.w	8005b78 <_dtoa_r+0x518>
 8005a0a:	4b86      	ldr	r3, [pc, #536]	@ (8005c24 <_dtoa_r+0x5c4>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4629      	mov	r1, r5
 8005a12:	f7fb f893 	bl	8000b3c <__aeabi_dcmplt>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f000 80ae 	beq.w	8005b78 <_dtoa_r+0x518>
 8005a1c:	9b07      	ldr	r3, [sp, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80aa 	beq.w	8005b78 <_dtoa_r+0x518>
 8005a24:	9b00      	ldr	r3, [sp, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dd37      	ble.n	8005a9a <_dtoa_r+0x43a>
 8005a2a:	1e7b      	subs	r3, r7, #1
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	4620      	mov	r0, r4
 8005a30:	4b7d      	ldr	r3, [pc, #500]	@ (8005c28 <_dtoa_r+0x5c8>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	4629      	mov	r1, r5
 8005a36:	f7fa fe0f 	bl	8000658 <__aeabi_dmul>
 8005a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a3e:	9c00      	ldr	r4, [sp, #0]
 8005a40:	3601      	adds	r6, #1
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7fa fd9e 	bl	8000584 <__aeabi_i2d>
 8005a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a4c:	f7fa fe04 	bl	8000658 <__aeabi_dmul>
 8005a50:	4b76      	ldr	r3, [pc, #472]	@ (8005c2c <_dtoa_r+0x5cc>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	f7fa fc4a 	bl	80002ec <__adddf3>
 8005a58:	4605      	mov	r5, r0
 8005a5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a5e:	2c00      	cmp	r4, #0
 8005a60:	f040 808d 	bne.w	8005b7e <_dtoa_r+0x51e>
 8005a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a68:	4b71      	ldr	r3, [pc, #452]	@ (8005c30 <_dtoa_r+0x5d0>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f7fa fc3c 	bl	80002e8 <__aeabi_dsub>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a78:	462a      	mov	r2, r5
 8005a7a:	4633      	mov	r3, r6
 8005a7c:	f7fb f87c 	bl	8000b78 <__aeabi_dcmpgt>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f040 828b 	bne.w	8005f9c <_dtoa_r+0x93c>
 8005a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a8a:	462a      	mov	r2, r5
 8005a8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a90:	f7fb f854 	bl	8000b3c <__aeabi_dcmplt>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	f040 8128 	bne.w	8005cea <_dtoa_r+0x68a>
 8005a9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005aa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f2c0 815a 	blt.w	8005d5e <_dtoa_r+0x6fe>
 8005aaa:	2f0e      	cmp	r7, #14
 8005aac:	f300 8157 	bgt.w	8005d5e <_dtoa_r+0x6fe>
 8005ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c1c <_dtoa_r+0x5bc>)
 8005ab2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ab6:	ed93 7b00 	vldr	d7, [r3]
 8005aba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	ed8d 7b00 	vstr	d7, [sp]
 8005ac2:	da03      	bge.n	8005acc <_dtoa_r+0x46c>
 8005ac4:	9b07      	ldr	r3, [sp, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f340 8101 	ble.w	8005cce <_dtoa_r+0x66e>
 8005acc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ad0:	4656      	mov	r6, sl
 8005ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7fa fee7 	bl	80008ac <__aeabi_ddiv>
 8005ade:	f7fb f86b 	bl	8000bb8 <__aeabi_d2iz>
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	f7fa fd4e 	bl	8000584 <__aeabi_i2d>
 8005ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aec:	f7fa fdb4 	bl	8000658 <__aeabi_dmul>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005afc:	f7fa fbf4 	bl	80002e8 <__aeabi_dsub>
 8005b00:	f806 4b01 	strb.w	r4, [r6], #1
 8005b04:	9d07      	ldr	r5, [sp, #28]
 8005b06:	eba6 040a 	sub.w	r4, r6, sl
 8005b0a:	42a5      	cmp	r5, r4
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	f040 8117 	bne.w	8005d42 <_dtoa_r+0x6e2>
 8005b14:	f7fa fbea 	bl	80002ec <__adddf3>
 8005b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	f7fb f82a 	bl	8000b78 <__aeabi_dcmpgt>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	f040 80f9 	bne.w	8005d1c <_dtoa_r+0x6bc>
 8005b2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4629      	mov	r1, r5
 8005b32:	f7fa fff9 	bl	8000b28 <__aeabi_dcmpeq>
 8005b36:	b118      	cbz	r0, 8005b40 <_dtoa_r+0x4e0>
 8005b38:	f018 0f01 	tst.w	r8, #1
 8005b3c:	f040 80ee 	bne.w	8005d1c <_dtoa_r+0x6bc>
 8005b40:	4649      	mov	r1, r9
 8005b42:	4658      	mov	r0, fp
 8005b44:	f000 fbda 	bl	80062fc <_Bfree>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	7033      	strb	r3, [r6, #0]
 8005b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b4e:	3701      	adds	r7, #1
 8005b50:	601f      	str	r7, [r3, #0]
 8005b52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 831d 	beq.w	8006194 <_dtoa_r+0xb34>
 8005b5a:	601e      	str	r6, [r3, #0]
 8005b5c:	e31a      	b.n	8006194 <_dtoa_r+0xb34>
 8005b5e:	07e2      	lsls	r2, r4, #31
 8005b60:	d505      	bpl.n	8005b6e <_dtoa_r+0x50e>
 8005b62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b66:	f7fa fd77 	bl	8000658 <__aeabi_dmul>
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	1064      	asrs	r4, r4, #1
 8005b70:	3508      	adds	r5, #8
 8005b72:	e73f      	b.n	80059f4 <_dtoa_r+0x394>
 8005b74:	2602      	movs	r6, #2
 8005b76:	e742      	b.n	80059fe <_dtoa_r+0x39e>
 8005b78:	9c07      	ldr	r4, [sp, #28]
 8005b7a:	9704      	str	r7, [sp, #16]
 8005b7c:	e761      	b.n	8005a42 <_dtoa_r+0x3e2>
 8005b7e:	4b27      	ldr	r3, [pc, #156]	@ (8005c1c <_dtoa_r+0x5bc>)
 8005b80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b8a:	4454      	add	r4, sl
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d053      	beq.n	8005c38 <_dtoa_r+0x5d8>
 8005b90:	4928      	ldr	r1, [pc, #160]	@ (8005c34 <_dtoa_r+0x5d4>)
 8005b92:	2000      	movs	r0, #0
 8005b94:	f7fa fe8a 	bl	80008ac <__aeabi_ddiv>
 8005b98:	4633      	mov	r3, r6
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	f7fa fba4 	bl	80002e8 <__aeabi_dsub>
 8005ba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ba4:	4656      	mov	r6, sl
 8005ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005baa:	f7fb f805 	bl	8000bb8 <__aeabi_d2iz>
 8005bae:	4605      	mov	r5, r0
 8005bb0:	f7fa fce8 	bl	8000584 <__aeabi_i2d>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bbc:	f7fa fb94 	bl	80002e8 <__aeabi_dsub>
 8005bc0:	3530      	adds	r5, #48	@ 0x30
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bca:	f806 5b01 	strb.w	r5, [r6], #1
 8005bce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bd2:	f7fa ffb3 	bl	8000b3c <__aeabi_dcmplt>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d171      	bne.n	8005cbe <_dtoa_r+0x65e>
 8005bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bde:	4911      	ldr	r1, [pc, #68]	@ (8005c24 <_dtoa_r+0x5c4>)
 8005be0:	2000      	movs	r0, #0
 8005be2:	f7fa fb81 	bl	80002e8 <__aeabi_dsub>
 8005be6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bea:	f7fa ffa7 	bl	8000b3c <__aeabi_dcmplt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f040 8095 	bne.w	8005d1e <_dtoa_r+0x6be>
 8005bf4:	42a6      	cmp	r6, r4
 8005bf6:	f43f af50 	beq.w	8005a9a <_dtoa_r+0x43a>
 8005bfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <_dtoa_r+0x5c8>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7fa fd29 	bl	8000658 <__aeabi_dmul>
 8005c06:	4b08      	ldr	r3, [pc, #32]	@ (8005c28 <_dtoa_r+0x5c8>)
 8005c08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c12:	f7fa fd21 	bl	8000658 <__aeabi_dmul>
 8005c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c1a:	e7c4      	b.n	8005ba6 <_dtoa_r+0x546>
 8005c1c:	080076e0 	.word	0x080076e0
 8005c20:	080076b8 	.word	0x080076b8
 8005c24:	3ff00000 	.word	0x3ff00000
 8005c28:	40240000 	.word	0x40240000
 8005c2c:	401c0000 	.word	0x401c0000
 8005c30:	40140000 	.word	0x40140000
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f7fa fd0c 	bl	8000658 <__aeabi_dmul>
 8005c40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c44:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c46:	4656      	mov	r6, sl
 8005c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c4c:	f7fa ffb4 	bl	8000bb8 <__aeabi_d2iz>
 8005c50:	4605      	mov	r5, r0
 8005c52:	f7fa fc97 	bl	8000584 <__aeabi_i2d>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c5e:	f7fa fb43 	bl	80002e8 <__aeabi_dsub>
 8005c62:	3530      	adds	r5, #48	@ 0x30
 8005c64:	f806 5b01 	strb.w	r5, [r6], #1
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	42a6      	cmp	r6, r4
 8005c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	d124      	bne.n	8005cc2 <_dtoa_r+0x662>
 8005c78:	4bac      	ldr	r3, [pc, #688]	@ (8005f2c <_dtoa_r+0x8cc>)
 8005c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c7e:	f7fa fb35 	bl	80002ec <__adddf3>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8a:	f7fa ff75 	bl	8000b78 <__aeabi_dcmpgt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d145      	bne.n	8005d1e <_dtoa_r+0x6be>
 8005c92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c96:	49a5      	ldr	r1, [pc, #660]	@ (8005f2c <_dtoa_r+0x8cc>)
 8005c98:	2000      	movs	r0, #0
 8005c9a:	f7fa fb25 	bl	80002e8 <__aeabi_dsub>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca6:	f7fa ff49 	bl	8000b3c <__aeabi_dcmplt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f43f aef5 	beq.w	8005a9a <_dtoa_r+0x43a>
 8005cb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cb2:	1e73      	subs	r3, r6, #1
 8005cb4:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cba:	2b30      	cmp	r3, #48	@ 0x30
 8005cbc:	d0f8      	beq.n	8005cb0 <_dtoa_r+0x650>
 8005cbe:	9f04      	ldr	r7, [sp, #16]
 8005cc0:	e73e      	b.n	8005b40 <_dtoa_r+0x4e0>
 8005cc2:	4b9b      	ldr	r3, [pc, #620]	@ (8005f30 <_dtoa_r+0x8d0>)
 8005cc4:	f7fa fcc8 	bl	8000658 <__aeabi_dmul>
 8005cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ccc:	e7bc      	b.n	8005c48 <_dtoa_r+0x5e8>
 8005cce:	d10c      	bne.n	8005cea <_dtoa_r+0x68a>
 8005cd0:	4b98      	ldr	r3, [pc, #608]	@ (8005f34 <_dtoa_r+0x8d4>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cd8:	f7fa fcbe 	bl	8000658 <__aeabi_dmul>
 8005cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ce0:	f7fa ff40 	bl	8000b64 <__aeabi_dcmpge>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f000 8157 	beq.w	8005f98 <_dtoa_r+0x938>
 8005cea:	2400      	movs	r4, #0
 8005cec:	4625      	mov	r5, r4
 8005cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	4656      	mov	r6, sl
 8005cf6:	2700      	movs	r7, #0
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4658      	mov	r0, fp
 8005cfc:	f000 fafe 	bl	80062fc <_Bfree>
 8005d00:	2d00      	cmp	r5, #0
 8005d02:	d0dc      	beq.n	8005cbe <_dtoa_r+0x65e>
 8005d04:	b12f      	cbz	r7, 8005d12 <_dtoa_r+0x6b2>
 8005d06:	42af      	cmp	r7, r5
 8005d08:	d003      	beq.n	8005d12 <_dtoa_r+0x6b2>
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	4658      	mov	r0, fp
 8005d0e:	f000 faf5 	bl	80062fc <_Bfree>
 8005d12:	4629      	mov	r1, r5
 8005d14:	4658      	mov	r0, fp
 8005d16:	f000 faf1 	bl	80062fc <_Bfree>
 8005d1a:	e7d0      	b.n	8005cbe <_dtoa_r+0x65e>
 8005d1c:	9704      	str	r7, [sp, #16]
 8005d1e:	4633      	mov	r3, r6
 8005d20:	461e      	mov	r6, r3
 8005d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d26:	2a39      	cmp	r2, #57	@ 0x39
 8005d28:	d107      	bne.n	8005d3a <_dtoa_r+0x6da>
 8005d2a:	459a      	cmp	sl, r3
 8005d2c:	d1f8      	bne.n	8005d20 <_dtoa_r+0x6c0>
 8005d2e:	9a04      	ldr	r2, [sp, #16]
 8005d30:	3201      	adds	r2, #1
 8005d32:	9204      	str	r2, [sp, #16]
 8005d34:	2230      	movs	r2, #48	@ 0x30
 8005d36:	f88a 2000 	strb.w	r2, [sl]
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	3201      	adds	r2, #1
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e7bd      	b.n	8005cbe <_dtoa_r+0x65e>
 8005d42:	4b7b      	ldr	r3, [pc, #492]	@ (8005f30 <_dtoa_r+0x8d0>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	f7fa fc87 	bl	8000658 <__aeabi_dmul>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	460d      	mov	r5, r1
 8005d52:	f7fa fee9 	bl	8000b28 <__aeabi_dcmpeq>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f43f aebb 	beq.w	8005ad2 <_dtoa_r+0x472>
 8005d5c:	e6f0      	b.n	8005b40 <_dtoa_r+0x4e0>
 8005d5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	f000 80db 	beq.w	8005f1c <_dtoa_r+0x8bc>
 8005d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d68:	2a01      	cmp	r2, #1
 8005d6a:	f300 80bf 	bgt.w	8005eec <_dtoa_r+0x88c>
 8005d6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	f000 80b7 	beq.w	8005ee4 <_dtoa_r+0x884>
 8005d76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d7c:	4646      	mov	r6, r8
 8005d7e:	9a08      	ldr	r2, [sp, #32]
 8005d80:	2101      	movs	r1, #1
 8005d82:	441a      	add	r2, r3
 8005d84:	4658      	mov	r0, fp
 8005d86:	4498      	add	r8, r3
 8005d88:	9208      	str	r2, [sp, #32]
 8005d8a:	f000 fb6b 	bl	8006464 <__i2b>
 8005d8e:	4605      	mov	r5, r0
 8005d90:	b15e      	cbz	r6, 8005daa <_dtoa_r+0x74a>
 8005d92:	9b08      	ldr	r3, [sp, #32]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	dd08      	ble.n	8005daa <_dtoa_r+0x74a>
 8005d98:	42b3      	cmp	r3, r6
 8005d9a:	9a08      	ldr	r2, [sp, #32]
 8005d9c:	bfa8      	it	ge
 8005d9e:	4633      	movge	r3, r6
 8005da0:	eba8 0803 	sub.w	r8, r8, r3
 8005da4:	1af6      	subs	r6, r6, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	9308      	str	r3, [sp, #32]
 8005daa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dac:	b1f3      	cbz	r3, 8005dec <_dtoa_r+0x78c>
 8005dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80b7 	beq.w	8005f24 <_dtoa_r+0x8c4>
 8005db6:	b18c      	cbz	r4, 8005ddc <_dtoa_r+0x77c>
 8005db8:	4629      	mov	r1, r5
 8005dba:	4622      	mov	r2, r4
 8005dbc:	4658      	mov	r0, fp
 8005dbe:	f000 fc11 	bl	80065e4 <__pow5mult>
 8005dc2:	464a      	mov	r2, r9
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	4658      	mov	r0, fp
 8005dca:	f000 fb61 	bl	8006490 <__multiply>
 8005dce:	4649      	mov	r1, r9
 8005dd0:	9004      	str	r0, [sp, #16]
 8005dd2:	4658      	mov	r0, fp
 8005dd4:	f000 fa92 	bl	80062fc <_Bfree>
 8005dd8:	9b04      	ldr	r3, [sp, #16]
 8005dda:	4699      	mov	r9, r3
 8005ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dde:	1b1a      	subs	r2, r3, r4
 8005de0:	d004      	beq.n	8005dec <_dtoa_r+0x78c>
 8005de2:	4649      	mov	r1, r9
 8005de4:	4658      	mov	r0, fp
 8005de6:	f000 fbfd 	bl	80065e4 <__pow5mult>
 8005dea:	4681      	mov	r9, r0
 8005dec:	2101      	movs	r1, #1
 8005dee:	4658      	mov	r0, fp
 8005df0:	f000 fb38 	bl	8006464 <__i2b>
 8005df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005df6:	4604      	mov	r4, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 81cf 	beq.w	800619c <_dtoa_r+0xb3c>
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4601      	mov	r1, r0
 8005e02:	4658      	mov	r0, fp
 8005e04:	f000 fbee 	bl	80065e4 <__pow5mult>
 8005e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	f300 8095 	bgt.w	8005f3c <_dtoa_r+0x8dc>
 8005e12:	9b02      	ldr	r3, [sp, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 8087 	bne.w	8005f28 <_dtoa_r+0x8c8>
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 8089 	bne.w	8005f38 <_dtoa_r+0x8d8>
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e2c:	0d1b      	lsrs	r3, r3, #20
 8005e2e:	051b      	lsls	r3, r3, #20
 8005e30:	b12b      	cbz	r3, 8005e3e <_dtoa_r+0x7de>
 8005e32:	9b08      	ldr	r3, [sp, #32]
 8005e34:	3301      	adds	r3, #1
 8005e36:	9308      	str	r3, [sp, #32]
 8005e38:	f108 0801 	add.w	r8, r8, #1
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 81b0 	beq.w	80061a8 <_dtoa_r+0xb48>
 8005e48:	6923      	ldr	r3, [r4, #16]
 8005e4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e4e:	6918      	ldr	r0, [r3, #16]
 8005e50:	f000 fabc 	bl	80063cc <__hi0bits>
 8005e54:	f1c0 0020 	rsb	r0, r0, #32
 8005e58:	9b08      	ldr	r3, [sp, #32]
 8005e5a:	4418      	add	r0, r3
 8005e5c:	f010 001f 	ands.w	r0, r0, #31
 8005e60:	d077      	beq.n	8005f52 <_dtoa_r+0x8f2>
 8005e62:	f1c0 0320 	rsb	r3, r0, #32
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	dd6b      	ble.n	8005f42 <_dtoa_r+0x8e2>
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	f1c0 001c 	rsb	r0, r0, #28
 8005e70:	4403      	add	r3, r0
 8005e72:	4480      	add	r8, r0
 8005e74:	4406      	add	r6, r0
 8005e76:	9308      	str	r3, [sp, #32]
 8005e78:	f1b8 0f00 	cmp.w	r8, #0
 8005e7c:	dd05      	ble.n	8005e8a <_dtoa_r+0x82a>
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4642      	mov	r2, r8
 8005e82:	4658      	mov	r0, fp
 8005e84:	f000 fc08 	bl	8006698 <__lshift>
 8005e88:	4681      	mov	r9, r0
 8005e8a:	9b08      	ldr	r3, [sp, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dd05      	ble.n	8005e9c <_dtoa_r+0x83c>
 8005e90:	4621      	mov	r1, r4
 8005e92:	461a      	mov	r2, r3
 8005e94:	4658      	mov	r0, fp
 8005e96:	f000 fbff 	bl	8006698 <__lshift>
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d059      	beq.n	8005f56 <_dtoa_r+0x8f6>
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4648      	mov	r0, r9
 8005ea6:	f000 fc63 	bl	8006770 <__mcmp>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	da53      	bge.n	8005f56 <_dtoa_r+0x8f6>
 8005eae:	1e7b      	subs	r3, r7, #1
 8005eb0:	9304      	str	r3, [sp, #16]
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	220a      	movs	r2, #10
 8005eb8:	4658      	mov	r0, fp
 8005eba:	f000 fa41 	bl	8006340 <__multadd>
 8005ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec0:	4681      	mov	r9, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 8172 	beq.w	80061ac <_dtoa_r+0xb4c>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4629      	mov	r1, r5
 8005ecc:	220a      	movs	r2, #10
 8005ece:	4658      	mov	r0, fp
 8005ed0:	f000 fa36 	bl	8006340 <__multadd>
 8005ed4:	9b00      	ldr	r3, [sp, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	4605      	mov	r5, r0
 8005eda:	dc67      	bgt.n	8005fac <_dtoa_r+0x94c>
 8005edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	dc41      	bgt.n	8005f66 <_dtoa_r+0x906>
 8005ee2:	e063      	b.n	8005fac <_dtoa_r+0x94c>
 8005ee4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005ee6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005eea:	e746      	b.n	8005d7a <_dtoa_r+0x71a>
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	1e5c      	subs	r4, r3, #1
 8005ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	bfbf      	itttt	lt
 8005ef6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ef8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005efa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005efc:	1ae3      	sublt	r3, r4, r3
 8005efe:	bfb4      	ite	lt
 8005f00:	18d2      	addlt	r2, r2, r3
 8005f02:	1b1c      	subge	r4, r3, r4
 8005f04:	9b07      	ldr	r3, [sp, #28]
 8005f06:	bfbc      	itt	lt
 8005f08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f0a:	2400      	movlt	r4, #0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bfb5      	itete	lt
 8005f10:	eba8 0603 	sublt.w	r6, r8, r3
 8005f14:	9b07      	ldrge	r3, [sp, #28]
 8005f16:	2300      	movlt	r3, #0
 8005f18:	4646      	movge	r6, r8
 8005f1a:	e730      	b.n	8005d7e <_dtoa_r+0x71e>
 8005f1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f20:	4646      	mov	r6, r8
 8005f22:	e735      	b.n	8005d90 <_dtoa_r+0x730>
 8005f24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f26:	e75c      	b.n	8005de2 <_dtoa_r+0x782>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e788      	b.n	8005e3e <_dtoa_r+0x7de>
 8005f2c:	3fe00000 	.word	0x3fe00000
 8005f30:	40240000 	.word	0x40240000
 8005f34:	40140000 	.word	0x40140000
 8005f38:	9b02      	ldr	r3, [sp, #8]
 8005f3a:	e780      	b.n	8005e3e <_dtoa_r+0x7de>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f40:	e782      	b.n	8005e48 <_dtoa_r+0x7e8>
 8005f42:	d099      	beq.n	8005e78 <_dtoa_r+0x818>
 8005f44:	9a08      	ldr	r2, [sp, #32]
 8005f46:	331c      	adds	r3, #28
 8005f48:	441a      	add	r2, r3
 8005f4a:	4498      	add	r8, r3
 8005f4c:	441e      	add	r6, r3
 8005f4e:	9208      	str	r2, [sp, #32]
 8005f50:	e792      	b.n	8005e78 <_dtoa_r+0x818>
 8005f52:	4603      	mov	r3, r0
 8005f54:	e7f6      	b.n	8005f44 <_dtoa_r+0x8e4>
 8005f56:	9b07      	ldr	r3, [sp, #28]
 8005f58:	9704      	str	r7, [sp, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dc20      	bgt.n	8005fa0 <_dtoa_r+0x940>
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	dd1e      	ble.n	8005fa4 <_dtoa_r+0x944>
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f47f aec0 	bne.w	8005cee <_dtoa_r+0x68e>
 8005f6e:	4621      	mov	r1, r4
 8005f70:	2205      	movs	r2, #5
 8005f72:	4658      	mov	r0, fp
 8005f74:	f000 f9e4 	bl	8006340 <__multadd>
 8005f78:	4601      	mov	r1, r0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4648      	mov	r0, r9
 8005f7e:	f000 fbf7 	bl	8006770 <__mcmp>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f77f aeb3 	ble.w	8005cee <_dtoa_r+0x68e>
 8005f88:	4656      	mov	r6, sl
 8005f8a:	2331      	movs	r3, #49	@ 0x31
 8005f8c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f90:	9b04      	ldr	r3, [sp, #16]
 8005f92:	3301      	adds	r3, #1
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	e6ae      	b.n	8005cf6 <_dtoa_r+0x696>
 8005f98:	9c07      	ldr	r4, [sp, #28]
 8005f9a:	9704      	str	r7, [sp, #16]
 8005f9c:	4625      	mov	r5, r4
 8005f9e:	e7f3      	b.n	8005f88 <_dtoa_r+0x928>
 8005fa0:	9b07      	ldr	r3, [sp, #28]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8104 	beq.w	80061b4 <_dtoa_r+0xb54>
 8005fac:	2e00      	cmp	r6, #0
 8005fae:	dd05      	ble.n	8005fbc <_dtoa_r+0x95c>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4632      	mov	r2, r6
 8005fb4:	4658      	mov	r0, fp
 8005fb6:	f000 fb6f 	bl	8006698 <__lshift>
 8005fba:	4605      	mov	r5, r0
 8005fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d05a      	beq.n	8006078 <_dtoa_r+0xa18>
 8005fc2:	6869      	ldr	r1, [r5, #4]
 8005fc4:	4658      	mov	r0, fp
 8005fc6:	f000 f959 	bl	800627c <_Balloc>
 8005fca:	4606      	mov	r6, r0
 8005fcc:	b928      	cbnz	r0, 8005fda <_dtoa_r+0x97a>
 8005fce:	4b84      	ldr	r3, [pc, #528]	@ (80061e0 <_dtoa_r+0xb80>)
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fd6:	f7ff bb5a 	b.w	800568e <_dtoa_r+0x2e>
 8005fda:	692a      	ldr	r2, [r5, #16]
 8005fdc:	3202      	adds	r2, #2
 8005fde:	0092      	lsls	r2, r2, #2
 8005fe0:	f105 010c 	add.w	r1, r5, #12
 8005fe4:	300c      	adds	r0, #12
 8005fe6:	f001 f8bf 	bl	8007168 <memcpy>
 8005fea:	2201      	movs	r2, #1
 8005fec:	4631      	mov	r1, r6
 8005fee:	4658      	mov	r0, fp
 8005ff0:	f000 fb52 	bl	8006698 <__lshift>
 8005ff4:	f10a 0301 	add.w	r3, sl, #1
 8005ff8:	9307      	str	r3, [sp, #28]
 8005ffa:	9b00      	ldr	r3, [sp, #0]
 8005ffc:	4453      	add	r3, sl
 8005ffe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006000:	9b02      	ldr	r3, [sp, #8]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	462f      	mov	r7, r5
 8006008:	930a      	str	r3, [sp, #40]	@ 0x28
 800600a:	4605      	mov	r5, r0
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	4621      	mov	r1, r4
 8006010:	3b01      	subs	r3, #1
 8006012:	4648      	mov	r0, r9
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	f7ff fa9a 	bl	800554e <quorem>
 800601a:	4639      	mov	r1, r7
 800601c:	9002      	str	r0, [sp, #8]
 800601e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006022:	4648      	mov	r0, r9
 8006024:	f000 fba4 	bl	8006770 <__mcmp>
 8006028:	462a      	mov	r2, r5
 800602a:	9008      	str	r0, [sp, #32]
 800602c:	4621      	mov	r1, r4
 800602e:	4658      	mov	r0, fp
 8006030:	f000 fbba 	bl	80067a8 <__mdiff>
 8006034:	68c2      	ldr	r2, [r0, #12]
 8006036:	4606      	mov	r6, r0
 8006038:	bb02      	cbnz	r2, 800607c <_dtoa_r+0xa1c>
 800603a:	4601      	mov	r1, r0
 800603c:	4648      	mov	r0, r9
 800603e:	f000 fb97 	bl	8006770 <__mcmp>
 8006042:	4602      	mov	r2, r0
 8006044:	4631      	mov	r1, r6
 8006046:	4658      	mov	r0, fp
 8006048:	920e      	str	r2, [sp, #56]	@ 0x38
 800604a:	f000 f957 	bl	80062fc <_Bfree>
 800604e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006050:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006052:	9e07      	ldr	r6, [sp, #28]
 8006054:	ea43 0102 	orr.w	r1, r3, r2
 8006058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800605a:	4319      	orrs	r1, r3
 800605c:	d110      	bne.n	8006080 <_dtoa_r+0xa20>
 800605e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006062:	d029      	beq.n	80060b8 <_dtoa_r+0xa58>
 8006064:	9b08      	ldr	r3, [sp, #32]
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd02      	ble.n	8006070 <_dtoa_r+0xa10>
 800606a:	9b02      	ldr	r3, [sp, #8]
 800606c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006070:	9b00      	ldr	r3, [sp, #0]
 8006072:	f883 8000 	strb.w	r8, [r3]
 8006076:	e63f      	b.n	8005cf8 <_dtoa_r+0x698>
 8006078:	4628      	mov	r0, r5
 800607a:	e7bb      	b.n	8005ff4 <_dtoa_r+0x994>
 800607c:	2201      	movs	r2, #1
 800607e:	e7e1      	b.n	8006044 <_dtoa_r+0x9e4>
 8006080:	9b08      	ldr	r3, [sp, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	db04      	blt.n	8006090 <_dtoa_r+0xa30>
 8006086:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006088:	430b      	orrs	r3, r1
 800608a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800608c:	430b      	orrs	r3, r1
 800608e:	d120      	bne.n	80060d2 <_dtoa_r+0xa72>
 8006090:	2a00      	cmp	r2, #0
 8006092:	dded      	ble.n	8006070 <_dtoa_r+0xa10>
 8006094:	4649      	mov	r1, r9
 8006096:	2201      	movs	r2, #1
 8006098:	4658      	mov	r0, fp
 800609a:	f000 fafd 	bl	8006698 <__lshift>
 800609e:	4621      	mov	r1, r4
 80060a0:	4681      	mov	r9, r0
 80060a2:	f000 fb65 	bl	8006770 <__mcmp>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	dc03      	bgt.n	80060b2 <_dtoa_r+0xa52>
 80060aa:	d1e1      	bne.n	8006070 <_dtoa_r+0xa10>
 80060ac:	f018 0f01 	tst.w	r8, #1
 80060b0:	d0de      	beq.n	8006070 <_dtoa_r+0xa10>
 80060b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060b6:	d1d8      	bne.n	800606a <_dtoa_r+0xa0a>
 80060b8:	9a00      	ldr	r2, [sp, #0]
 80060ba:	2339      	movs	r3, #57	@ 0x39
 80060bc:	7013      	strb	r3, [r2, #0]
 80060be:	4633      	mov	r3, r6
 80060c0:	461e      	mov	r6, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060c8:	2a39      	cmp	r2, #57	@ 0x39
 80060ca:	d052      	beq.n	8006172 <_dtoa_r+0xb12>
 80060cc:	3201      	adds	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e612      	b.n	8005cf8 <_dtoa_r+0x698>
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	dd07      	ble.n	80060e6 <_dtoa_r+0xa86>
 80060d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060da:	d0ed      	beq.n	80060b8 <_dtoa_r+0xa58>
 80060dc:	9a00      	ldr	r2, [sp, #0]
 80060de:	f108 0301 	add.w	r3, r8, #1
 80060e2:	7013      	strb	r3, [r2, #0]
 80060e4:	e608      	b.n	8005cf8 <_dtoa_r+0x698>
 80060e6:	9b07      	ldr	r3, [sp, #28]
 80060e8:	9a07      	ldr	r2, [sp, #28]
 80060ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80060ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d028      	beq.n	8006146 <_dtoa_r+0xae6>
 80060f4:	4649      	mov	r1, r9
 80060f6:	2300      	movs	r3, #0
 80060f8:	220a      	movs	r2, #10
 80060fa:	4658      	mov	r0, fp
 80060fc:	f000 f920 	bl	8006340 <__multadd>
 8006100:	42af      	cmp	r7, r5
 8006102:	4681      	mov	r9, r0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	f04f 020a 	mov.w	r2, #10
 800610c:	4639      	mov	r1, r7
 800610e:	4658      	mov	r0, fp
 8006110:	d107      	bne.n	8006122 <_dtoa_r+0xac2>
 8006112:	f000 f915 	bl	8006340 <__multadd>
 8006116:	4607      	mov	r7, r0
 8006118:	4605      	mov	r5, r0
 800611a:	9b07      	ldr	r3, [sp, #28]
 800611c:	3301      	adds	r3, #1
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	e774      	b.n	800600c <_dtoa_r+0x9ac>
 8006122:	f000 f90d 	bl	8006340 <__multadd>
 8006126:	4629      	mov	r1, r5
 8006128:	4607      	mov	r7, r0
 800612a:	2300      	movs	r3, #0
 800612c:	220a      	movs	r2, #10
 800612e:	4658      	mov	r0, fp
 8006130:	f000 f906 	bl	8006340 <__multadd>
 8006134:	4605      	mov	r5, r0
 8006136:	e7f0      	b.n	800611a <_dtoa_r+0xaba>
 8006138:	9b00      	ldr	r3, [sp, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	bfcc      	ite	gt
 800613e:	461e      	movgt	r6, r3
 8006140:	2601      	movle	r6, #1
 8006142:	4456      	add	r6, sl
 8006144:	2700      	movs	r7, #0
 8006146:	4649      	mov	r1, r9
 8006148:	2201      	movs	r2, #1
 800614a:	4658      	mov	r0, fp
 800614c:	f000 faa4 	bl	8006698 <__lshift>
 8006150:	4621      	mov	r1, r4
 8006152:	4681      	mov	r9, r0
 8006154:	f000 fb0c 	bl	8006770 <__mcmp>
 8006158:	2800      	cmp	r0, #0
 800615a:	dcb0      	bgt.n	80060be <_dtoa_r+0xa5e>
 800615c:	d102      	bne.n	8006164 <_dtoa_r+0xb04>
 800615e:	f018 0f01 	tst.w	r8, #1
 8006162:	d1ac      	bne.n	80060be <_dtoa_r+0xa5e>
 8006164:	4633      	mov	r3, r6
 8006166:	461e      	mov	r6, r3
 8006168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800616c:	2a30      	cmp	r2, #48	@ 0x30
 800616e:	d0fa      	beq.n	8006166 <_dtoa_r+0xb06>
 8006170:	e5c2      	b.n	8005cf8 <_dtoa_r+0x698>
 8006172:	459a      	cmp	sl, r3
 8006174:	d1a4      	bne.n	80060c0 <_dtoa_r+0xa60>
 8006176:	9b04      	ldr	r3, [sp, #16]
 8006178:	3301      	adds	r3, #1
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	2331      	movs	r3, #49	@ 0x31
 800617e:	f88a 3000 	strb.w	r3, [sl]
 8006182:	e5b9      	b.n	8005cf8 <_dtoa_r+0x698>
 8006184:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006186:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061e4 <_dtoa_r+0xb84>
 800618a:	b11b      	cbz	r3, 8006194 <_dtoa_r+0xb34>
 800618c:	f10a 0308 	add.w	r3, sl, #8
 8006190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	4650      	mov	r0, sl
 8006196:	b019      	add	sp, #100	@ 0x64
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800619e:	2b01      	cmp	r3, #1
 80061a0:	f77f ae37 	ble.w	8005e12 <_dtoa_r+0x7b2>
 80061a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061a8:	2001      	movs	r0, #1
 80061aa:	e655      	b.n	8005e58 <_dtoa_r+0x7f8>
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f77f aed6 	ble.w	8005f60 <_dtoa_r+0x900>
 80061b4:	4656      	mov	r6, sl
 80061b6:	4621      	mov	r1, r4
 80061b8:	4648      	mov	r0, r9
 80061ba:	f7ff f9c8 	bl	800554e <quorem>
 80061be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061c2:	f806 8b01 	strb.w	r8, [r6], #1
 80061c6:	9b00      	ldr	r3, [sp, #0]
 80061c8:	eba6 020a 	sub.w	r2, r6, sl
 80061cc:	4293      	cmp	r3, r2
 80061ce:	ddb3      	ble.n	8006138 <_dtoa_r+0xad8>
 80061d0:	4649      	mov	r1, r9
 80061d2:	2300      	movs	r3, #0
 80061d4:	220a      	movs	r2, #10
 80061d6:	4658      	mov	r0, fp
 80061d8:	f000 f8b2 	bl	8006340 <__multadd>
 80061dc:	4681      	mov	r9, r0
 80061de:	e7ea      	b.n	80061b6 <_dtoa_r+0xb56>
 80061e0:	0800763c 	.word	0x0800763c
 80061e4:	080075c0 	.word	0x080075c0

080061e8 <_free_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4605      	mov	r5, r0
 80061ec:	2900      	cmp	r1, #0
 80061ee:	d041      	beq.n	8006274 <_free_r+0x8c>
 80061f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f4:	1f0c      	subs	r4, r1, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bfb8      	it	lt
 80061fa:	18e4      	addlt	r4, r4, r3
 80061fc:	f7fe fb7c 	bl	80048f8 <__malloc_lock>
 8006200:	4a1d      	ldr	r2, [pc, #116]	@ (8006278 <_free_r+0x90>)
 8006202:	6813      	ldr	r3, [r2, #0]
 8006204:	b933      	cbnz	r3, 8006214 <_free_r+0x2c>
 8006206:	6063      	str	r3, [r4, #4]
 8006208:	6014      	str	r4, [r2, #0]
 800620a:	4628      	mov	r0, r5
 800620c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006210:	f7fe bb78 	b.w	8004904 <__malloc_unlock>
 8006214:	42a3      	cmp	r3, r4
 8006216:	d908      	bls.n	800622a <_free_r+0x42>
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	1821      	adds	r1, r4, r0
 800621c:	428b      	cmp	r3, r1
 800621e:	bf01      	itttt	eq
 8006220:	6819      	ldreq	r1, [r3, #0]
 8006222:	685b      	ldreq	r3, [r3, #4]
 8006224:	1809      	addeq	r1, r1, r0
 8006226:	6021      	streq	r1, [r4, #0]
 8006228:	e7ed      	b.n	8006206 <_free_r+0x1e>
 800622a:	461a      	mov	r2, r3
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	b10b      	cbz	r3, 8006234 <_free_r+0x4c>
 8006230:	42a3      	cmp	r3, r4
 8006232:	d9fa      	bls.n	800622a <_free_r+0x42>
 8006234:	6811      	ldr	r1, [r2, #0]
 8006236:	1850      	adds	r0, r2, r1
 8006238:	42a0      	cmp	r0, r4
 800623a:	d10b      	bne.n	8006254 <_free_r+0x6c>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	4401      	add	r1, r0
 8006240:	1850      	adds	r0, r2, r1
 8006242:	4283      	cmp	r3, r0
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	d1e0      	bne.n	800620a <_free_r+0x22>
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	6053      	str	r3, [r2, #4]
 800624e:	4408      	add	r0, r1
 8006250:	6010      	str	r0, [r2, #0]
 8006252:	e7da      	b.n	800620a <_free_r+0x22>
 8006254:	d902      	bls.n	800625c <_free_r+0x74>
 8006256:	230c      	movs	r3, #12
 8006258:	602b      	str	r3, [r5, #0]
 800625a:	e7d6      	b.n	800620a <_free_r+0x22>
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	1821      	adds	r1, r4, r0
 8006260:	428b      	cmp	r3, r1
 8006262:	bf04      	itt	eq
 8006264:	6819      	ldreq	r1, [r3, #0]
 8006266:	685b      	ldreq	r3, [r3, #4]
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	bf04      	itt	eq
 800626c:	1809      	addeq	r1, r1, r0
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	6054      	str	r4, [r2, #4]
 8006272:	e7ca      	b.n	800620a <_free_r+0x22>
 8006274:	bd38      	pop	{r3, r4, r5, pc}
 8006276:	bf00      	nop
 8006278:	200003dc 	.word	0x200003dc

0800627c <_Balloc>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	69c6      	ldr	r6, [r0, #28]
 8006280:	4604      	mov	r4, r0
 8006282:	460d      	mov	r5, r1
 8006284:	b976      	cbnz	r6, 80062a4 <_Balloc+0x28>
 8006286:	2010      	movs	r0, #16
 8006288:	f7fe fa8c 	bl	80047a4 <malloc>
 800628c:	4602      	mov	r2, r0
 800628e:	61e0      	str	r0, [r4, #28]
 8006290:	b920      	cbnz	r0, 800629c <_Balloc+0x20>
 8006292:	4b18      	ldr	r3, [pc, #96]	@ (80062f4 <_Balloc+0x78>)
 8006294:	4818      	ldr	r0, [pc, #96]	@ (80062f8 <_Balloc+0x7c>)
 8006296:	216b      	movs	r1, #107	@ 0x6b
 8006298:	f000 ff74 	bl	8007184 <__assert_func>
 800629c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062a0:	6006      	str	r6, [r0, #0]
 80062a2:	60c6      	str	r6, [r0, #12]
 80062a4:	69e6      	ldr	r6, [r4, #28]
 80062a6:	68f3      	ldr	r3, [r6, #12]
 80062a8:	b183      	cbz	r3, 80062cc <_Balloc+0x50>
 80062aa:	69e3      	ldr	r3, [r4, #28]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062b2:	b9b8      	cbnz	r0, 80062e4 <_Balloc+0x68>
 80062b4:	2101      	movs	r1, #1
 80062b6:	fa01 f605 	lsl.w	r6, r1, r5
 80062ba:	1d72      	adds	r2, r6, #5
 80062bc:	0092      	lsls	r2, r2, #2
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 ff7e 	bl	80071c0 <_calloc_r>
 80062c4:	b160      	cbz	r0, 80062e0 <_Balloc+0x64>
 80062c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062ca:	e00e      	b.n	80062ea <_Balloc+0x6e>
 80062cc:	2221      	movs	r2, #33	@ 0x21
 80062ce:	2104      	movs	r1, #4
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 ff75 	bl	80071c0 <_calloc_r>
 80062d6:	69e3      	ldr	r3, [r4, #28]
 80062d8:	60f0      	str	r0, [r6, #12]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e4      	bne.n	80062aa <_Balloc+0x2e>
 80062e0:	2000      	movs	r0, #0
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	6802      	ldr	r2, [r0, #0]
 80062e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062ea:	2300      	movs	r3, #0
 80062ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062f0:	e7f7      	b.n	80062e2 <_Balloc+0x66>
 80062f2:	bf00      	nop
 80062f4:	080075cd 	.word	0x080075cd
 80062f8:	0800764d 	.word	0x0800764d

080062fc <_Bfree>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	69c6      	ldr	r6, [r0, #28]
 8006300:	4605      	mov	r5, r0
 8006302:	460c      	mov	r4, r1
 8006304:	b976      	cbnz	r6, 8006324 <_Bfree+0x28>
 8006306:	2010      	movs	r0, #16
 8006308:	f7fe fa4c 	bl	80047a4 <malloc>
 800630c:	4602      	mov	r2, r0
 800630e:	61e8      	str	r0, [r5, #28]
 8006310:	b920      	cbnz	r0, 800631c <_Bfree+0x20>
 8006312:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <_Bfree+0x3c>)
 8006314:	4809      	ldr	r0, [pc, #36]	@ (800633c <_Bfree+0x40>)
 8006316:	218f      	movs	r1, #143	@ 0x8f
 8006318:	f000 ff34 	bl	8007184 <__assert_func>
 800631c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006320:	6006      	str	r6, [r0, #0]
 8006322:	60c6      	str	r6, [r0, #12]
 8006324:	b13c      	cbz	r4, 8006336 <_Bfree+0x3a>
 8006326:	69eb      	ldr	r3, [r5, #28]
 8006328:	6862      	ldr	r2, [r4, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006330:	6021      	str	r1, [r4, #0]
 8006332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	080075cd 	.word	0x080075cd
 800633c:	0800764d 	.word	0x0800764d

08006340 <__multadd>:
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	690d      	ldr	r5, [r1, #16]
 8006346:	4607      	mov	r7, r0
 8006348:	460c      	mov	r4, r1
 800634a:	461e      	mov	r6, r3
 800634c:	f101 0c14 	add.w	ip, r1, #20
 8006350:	2000      	movs	r0, #0
 8006352:	f8dc 3000 	ldr.w	r3, [ip]
 8006356:	b299      	uxth	r1, r3
 8006358:	fb02 6101 	mla	r1, r2, r1, r6
 800635c:	0c1e      	lsrs	r6, r3, #16
 800635e:	0c0b      	lsrs	r3, r1, #16
 8006360:	fb02 3306 	mla	r3, r2, r6, r3
 8006364:	b289      	uxth	r1, r1
 8006366:	3001      	adds	r0, #1
 8006368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800636c:	4285      	cmp	r5, r0
 800636e:	f84c 1b04 	str.w	r1, [ip], #4
 8006372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006376:	dcec      	bgt.n	8006352 <__multadd+0x12>
 8006378:	b30e      	cbz	r6, 80063be <__multadd+0x7e>
 800637a:	68a3      	ldr	r3, [r4, #8]
 800637c:	42ab      	cmp	r3, r5
 800637e:	dc19      	bgt.n	80063b4 <__multadd+0x74>
 8006380:	6861      	ldr	r1, [r4, #4]
 8006382:	4638      	mov	r0, r7
 8006384:	3101      	adds	r1, #1
 8006386:	f7ff ff79 	bl	800627c <_Balloc>
 800638a:	4680      	mov	r8, r0
 800638c:	b928      	cbnz	r0, 800639a <__multadd+0x5a>
 800638e:	4602      	mov	r2, r0
 8006390:	4b0c      	ldr	r3, [pc, #48]	@ (80063c4 <__multadd+0x84>)
 8006392:	480d      	ldr	r0, [pc, #52]	@ (80063c8 <__multadd+0x88>)
 8006394:	21ba      	movs	r1, #186	@ 0xba
 8006396:	f000 fef5 	bl	8007184 <__assert_func>
 800639a:	6922      	ldr	r2, [r4, #16]
 800639c:	3202      	adds	r2, #2
 800639e:	f104 010c 	add.w	r1, r4, #12
 80063a2:	0092      	lsls	r2, r2, #2
 80063a4:	300c      	adds	r0, #12
 80063a6:	f000 fedf 	bl	8007168 <memcpy>
 80063aa:	4621      	mov	r1, r4
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff ffa5 	bl	80062fc <_Bfree>
 80063b2:	4644      	mov	r4, r8
 80063b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063b8:	3501      	adds	r5, #1
 80063ba:	615e      	str	r6, [r3, #20]
 80063bc:	6125      	str	r5, [r4, #16]
 80063be:	4620      	mov	r0, r4
 80063c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c4:	0800763c 	.word	0x0800763c
 80063c8:	0800764d 	.word	0x0800764d

080063cc <__hi0bits>:
 80063cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063d0:	4603      	mov	r3, r0
 80063d2:	bf36      	itet	cc
 80063d4:	0403      	lslcc	r3, r0, #16
 80063d6:	2000      	movcs	r0, #0
 80063d8:	2010      	movcc	r0, #16
 80063da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063de:	bf3c      	itt	cc
 80063e0:	021b      	lslcc	r3, r3, #8
 80063e2:	3008      	addcc	r0, #8
 80063e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063e8:	bf3c      	itt	cc
 80063ea:	011b      	lslcc	r3, r3, #4
 80063ec:	3004      	addcc	r0, #4
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f2:	bf3c      	itt	cc
 80063f4:	009b      	lslcc	r3, r3, #2
 80063f6:	3002      	addcc	r0, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	db05      	blt.n	8006408 <__hi0bits+0x3c>
 80063fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006400:	f100 0001 	add.w	r0, r0, #1
 8006404:	bf08      	it	eq
 8006406:	2020      	moveq	r0, #32
 8006408:	4770      	bx	lr

0800640a <__lo0bits>:
 800640a:	6803      	ldr	r3, [r0, #0]
 800640c:	4602      	mov	r2, r0
 800640e:	f013 0007 	ands.w	r0, r3, #7
 8006412:	d00b      	beq.n	800642c <__lo0bits+0x22>
 8006414:	07d9      	lsls	r1, r3, #31
 8006416:	d421      	bmi.n	800645c <__lo0bits+0x52>
 8006418:	0798      	lsls	r0, r3, #30
 800641a:	bf49      	itett	mi
 800641c:	085b      	lsrmi	r3, r3, #1
 800641e:	089b      	lsrpl	r3, r3, #2
 8006420:	2001      	movmi	r0, #1
 8006422:	6013      	strmi	r3, [r2, #0]
 8006424:	bf5c      	itt	pl
 8006426:	6013      	strpl	r3, [r2, #0]
 8006428:	2002      	movpl	r0, #2
 800642a:	4770      	bx	lr
 800642c:	b299      	uxth	r1, r3
 800642e:	b909      	cbnz	r1, 8006434 <__lo0bits+0x2a>
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	2010      	movs	r0, #16
 8006434:	b2d9      	uxtb	r1, r3
 8006436:	b909      	cbnz	r1, 800643c <__lo0bits+0x32>
 8006438:	3008      	adds	r0, #8
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	0719      	lsls	r1, r3, #28
 800643e:	bf04      	itt	eq
 8006440:	091b      	lsreq	r3, r3, #4
 8006442:	3004      	addeq	r0, #4
 8006444:	0799      	lsls	r1, r3, #30
 8006446:	bf04      	itt	eq
 8006448:	089b      	lsreq	r3, r3, #2
 800644a:	3002      	addeq	r0, #2
 800644c:	07d9      	lsls	r1, r3, #31
 800644e:	d403      	bmi.n	8006458 <__lo0bits+0x4e>
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	f100 0001 	add.w	r0, r0, #1
 8006456:	d003      	beq.n	8006460 <__lo0bits+0x56>
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	4770      	bx	lr
 800645c:	2000      	movs	r0, #0
 800645e:	4770      	bx	lr
 8006460:	2020      	movs	r0, #32
 8006462:	4770      	bx	lr

08006464 <__i2b>:
 8006464:	b510      	push	{r4, lr}
 8006466:	460c      	mov	r4, r1
 8006468:	2101      	movs	r1, #1
 800646a:	f7ff ff07 	bl	800627c <_Balloc>
 800646e:	4602      	mov	r2, r0
 8006470:	b928      	cbnz	r0, 800647e <__i2b+0x1a>
 8006472:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <__i2b+0x24>)
 8006474:	4805      	ldr	r0, [pc, #20]	@ (800648c <__i2b+0x28>)
 8006476:	f240 1145 	movw	r1, #325	@ 0x145
 800647a:	f000 fe83 	bl	8007184 <__assert_func>
 800647e:	2301      	movs	r3, #1
 8006480:	6144      	str	r4, [r0, #20]
 8006482:	6103      	str	r3, [r0, #16]
 8006484:	bd10      	pop	{r4, pc}
 8006486:	bf00      	nop
 8006488:	0800763c 	.word	0x0800763c
 800648c:	0800764d 	.word	0x0800764d

08006490 <__multiply>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	4614      	mov	r4, r2
 8006496:	690a      	ldr	r2, [r1, #16]
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	429a      	cmp	r2, r3
 800649c:	bfa8      	it	ge
 800649e:	4623      	movge	r3, r4
 80064a0:	460f      	mov	r7, r1
 80064a2:	bfa4      	itt	ge
 80064a4:	460c      	movge	r4, r1
 80064a6:	461f      	movge	r7, r3
 80064a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80064ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80064b0:	68a3      	ldr	r3, [r4, #8]
 80064b2:	6861      	ldr	r1, [r4, #4]
 80064b4:	eb0a 0609 	add.w	r6, sl, r9
 80064b8:	42b3      	cmp	r3, r6
 80064ba:	b085      	sub	sp, #20
 80064bc:	bfb8      	it	lt
 80064be:	3101      	addlt	r1, #1
 80064c0:	f7ff fedc 	bl	800627c <_Balloc>
 80064c4:	b930      	cbnz	r0, 80064d4 <__multiply+0x44>
 80064c6:	4602      	mov	r2, r0
 80064c8:	4b44      	ldr	r3, [pc, #272]	@ (80065dc <__multiply+0x14c>)
 80064ca:	4845      	ldr	r0, [pc, #276]	@ (80065e0 <__multiply+0x150>)
 80064cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064d0:	f000 fe58 	bl	8007184 <__assert_func>
 80064d4:	f100 0514 	add.w	r5, r0, #20
 80064d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064dc:	462b      	mov	r3, r5
 80064de:	2200      	movs	r2, #0
 80064e0:	4543      	cmp	r3, r8
 80064e2:	d321      	bcc.n	8006528 <__multiply+0x98>
 80064e4:	f107 0114 	add.w	r1, r7, #20
 80064e8:	f104 0214 	add.w	r2, r4, #20
 80064ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80064f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80064f4:	9302      	str	r3, [sp, #8]
 80064f6:	1b13      	subs	r3, r2, r4
 80064f8:	3b15      	subs	r3, #21
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	3304      	adds	r3, #4
 8006500:	f104 0715 	add.w	r7, r4, #21
 8006504:	42ba      	cmp	r2, r7
 8006506:	bf38      	it	cc
 8006508:	2304      	movcc	r3, #4
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	9b02      	ldr	r3, [sp, #8]
 800650e:	9103      	str	r1, [sp, #12]
 8006510:	428b      	cmp	r3, r1
 8006512:	d80c      	bhi.n	800652e <__multiply+0x9e>
 8006514:	2e00      	cmp	r6, #0
 8006516:	dd03      	ble.n	8006520 <__multiply+0x90>
 8006518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800651c:	2b00      	cmp	r3, #0
 800651e:	d05b      	beq.n	80065d8 <__multiply+0x148>
 8006520:	6106      	str	r6, [r0, #16]
 8006522:	b005      	add	sp, #20
 8006524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006528:	f843 2b04 	str.w	r2, [r3], #4
 800652c:	e7d8      	b.n	80064e0 <__multiply+0x50>
 800652e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006532:	f1ba 0f00 	cmp.w	sl, #0
 8006536:	d024      	beq.n	8006582 <__multiply+0xf2>
 8006538:	f104 0e14 	add.w	lr, r4, #20
 800653c:	46a9      	mov	r9, r5
 800653e:	f04f 0c00 	mov.w	ip, #0
 8006542:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006546:	f8d9 3000 	ldr.w	r3, [r9]
 800654a:	fa1f fb87 	uxth.w	fp, r7
 800654e:	b29b      	uxth	r3, r3
 8006550:	fb0a 330b 	mla	r3, sl, fp, r3
 8006554:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006558:	f8d9 7000 	ldr.w	r7, [r9]
 800655c:	4463      	add	r3, ip
 800655e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006562:	fb0a c70b 	mla	r7, sl, fp, ip
 8006566:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006570:	4572      	cmp	r2, lr
 8006572:	f849 3b04 	str.w	r3, [r9], #4
 8006576:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800657a:	d8e2      	bhi.n	8006542 <__multiply+0xb2>
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	f845 c003 	str.w	ip, [r5, r3]
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006588:	3104      	adds	r1, #4
 800658a:	f1b9 0f00 	cmp.w	r9, #0
 800658e:	d021      	beq.n	80065d4 <__multiply+0x144>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	f104 0c14 	add.w	ip, r4, #20
 8006596:	46ae      	mov	lr, r5
 8006598:	f04f 0a00 	mov.w	sl, #0
 800659c:	f8bc b000 	ldrh.w	fp, [ip]
 80065a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80065a4:	fb09 770b 	mla	r7, r9, fp, r7
 80065a8:	4457      	add	r7, sl
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80065b0:	f84e 3b04 	str.w	r3, [lr], #4
 80065b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065bc:	f8be 3000 	ldrh.w	r3, [lr]
 80065c0:	fb09 330a 	mla	r3, r9, sl, r3
 80065c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80065c8:	4562      	cmp	r2, ip
 80065ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065ce:	d8e5      	bhi.n	800659c <__multiply+0x10c>
 80065d0:	9f01      	ldr	r7, [sp, #4]
 80065d2:	51eb      	str	r3, [r5, r7]
 80065d4:	3504      	adds	r5, #4
 80065d6:	e799      	b.n	800650c <__multiply+0x7c>
 80065d8:	3e01      	subs	r6, #1
 80065da:	e79b      	b.n	8006514 <__multiply+0x84>
 80065dc:	0800763c 	.word	0x0800763c
 80065e0:	0800764d 	.word	0x0800764d

080065e4 <__pow5mult>:
 80065e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e8:	4615      	mov	r5, r2
 80065ea:	f012 0203 	ands.w	r2, r2, #3
 80065ee:	4607      	mov	r7, r0
 80065f0:	460e      	mov	r6, r1
 80065f2:	d007      	beq.n	8006604 <__pow5mult+0x20>
 80065f4:	4c25      	ldr	r4, [pc, #148]	@ (800668c <__pow5mult+0xa8>)
 80065f6:	3a01      	subs	r2, #1
 80065f8:	2300      	movs	r3, #0
 80065fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065fe:	f7ff fe9f 	bl	8006340 <__multadd>
 8006602:	4606      	mov	r6, r0
 8006604:	10ad      	asrs	r5, r5, #2
 8006606:	d03d      	beq.n	8006684 <__pow5mult+0xa0>
 8006608:	69fc      	ldr	r4, [r7, #28]
 800660a:	b97c      	cbnz	r4, 800662c <__pow5mult+0x48>
 800660c:	2010      	movs	r0, #16
 800660e:	f7fe f8c9 	bl	80047a4 <malloc>
 8006612:	4602      	mov	r2, r0
 8006614:	61f8      	str	r0, [r7, #28]
 8006616:	b928      	cbnz	r0, 8006624 <__pow5mult+0x40>
 8006618:	4b1d      	ldr	r3, [pc, #116]	@ (8006690 <__pow5mult+0xac>)
 800661a:	481e      	ldr	r0, [pc, #120]	@ (8006694 <__pow5mult+0xb0>)
 800661c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006620:	f000 fdb0 	bl	8007184 <__assert_func>
 8006624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006628:	6004      	str	r4, [r0, #0]
 800662a:	60c4      	str	r4, [r0, #12]
 800662c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006634:	b94c      	cbnz	r4, 800664a <__pow5mult+0x66>
 8006636:	f240 2171 	movw	r1, #625	@ 0x271
 800663a:	4638      	mov	r0, r7
 800663c:	f7ff ff12 	bl	8006464 <__i2b>
 8006640:	2300      	movs	r3, #0
 8006642:	f8c8 0008 	str.w	r0, [r8, #8]
 8006646:	4604      	mov	r4, r0
 8006648:	6003      	str	r3, [r0, #0]
 800664a:	f04f 0900 	mov.w	r9, #0
 800664e:	07eb      	lsls	r3, r5, #31
 8006650:	d50a      	bpl.n	8006668 <__pow5mult+0x84>
 8006652:	4631      	mov	r1, r6
 8006654:	4622      	mov	r2, r4
 8006656:	4638      	mov	r0, r7
 8006658:	f7ff ff1a 	bl	8006490 <__multiply>
 800665c:	4631      	mov	r1, r6
 800665e:	4680      	mov	r8, r0
 8006660:	4638      	mov	r0, r7
 8006662:	f7ff fe4b 	bl	80062fc <_Bfree>
 8006666:	4646      	mov	r6, r8
 8006668:	106d      	asrs	r5, r5, #1
 800666a:	d00b      	beq.n	8006684 <__pow5mult+0xa0>
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	b938      	cbnz	r0, 8006680 <__pow5mult+0x9c>
 8006670:	4622      	mov	r2, r4
 8006672:	4621      	mov	r1, r4
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff ff0b 	bl	8006490 <__multiply>
 800667a:	6020      	str	r0, [r4, #0]
 800667c:	f8c0 9000 	str.w	r9, [r0]
 8006680:	4604      	mov	r4, r0
 8006682:	e7e4      	b.n	800664e <__pow5mult+0x6a>
 8006684:	4630      	mov	r0, r6
 8006686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668a:	bf00      	nop
 800668c:	080076a8 	.word	0x080076a8
 8006690:	080075cd 	.word	0x080075cd
 8006694:	0800764d 	.word	0x0800764d

08006698 <__lshift>:
 8006698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800669c:	460c      	mov	r4, r1
 800669e:	6849      	ldr	r1, [r1, #4]
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	4607      	mov	r7, r0
 80066aa:	4691      	mov	r9, r2
 80066ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066b0:	f108 0601 	add.w	r6, r8, #1
 80066b4:	42b3      	cmp	r3, r6
 80066b6:	db0b      	blt.n	80066d0 <__lshift+0x38>
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7ff fddf 	bl	800627c <_Balloc>
 80066be:	4605      	mov	r5, r0
 80066c0:	b948      	cbnz	r0, 80066d6 <__lshift+0x3e>
 80066c2:	4602      	mov	r2, r0
 80066c4:	4b28      	ldr	r3, [pc, #160]	@ (8006768 <__lshift+0xd0>)
 80066c6:	4829      	ldr	r0, [pc, #164]	@ (800676c <__lshift+0xd4>)
 80066c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80066cc:	f000 fd5a 	bl	8007184 <__assert_func>
 80066d0:	3101      	adds	r1, #1
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	e7ee      	b.n	80066b4 <__lshift+0x1c>
 80066d6:	2300      	movs	r3, #0
 80066d8:	f100 0114 	add.w	r1, r0, #20
 80066dc:	f100 0210 	add.w	r2, r0, #16
 80066e0:	4618      	mov	r0, r3
 80066e2:	4553      	cmp	r3, sl
 80066e4:	db33      	blt.n	800674e <__lshift+0xb6>
 80066e6:	6920      	ldr	r0, [r4, #16]
 80066e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066ec:	f104 0314 	add.w	r3, r4, #20
 80066f0:	f019 091f 	ands.w	r9, r9, #31
 80066f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066fc:	d02b      	beq.n	8006756 <__lshift+0xbe>
 80066fe:	f1c9 0e20 	rsb	lr, r9, #32
 8006702:	468a      	mov	sl, r1
 8006704:	2200      	movs	r2, #0
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	fa00 f009 	lsl.w	r0, r0, r9
 800670c:	4310      	orrs	r0, r2
 800670e:	f84a 0b04 	str.w	r0, [sl], #4
 8006712:	f853 2b04 	ldr.w	r2, [r3], #4
 8006716:	459c      	cmp	ip, r3
 8006718:	fa22 f20e 	lsr.w	r2, r2, lr
 800671c:	d8f3      	bhi.n	8006706 <__lshift+0x6e>
 800671e:	ebac 0304 	sub.w	r3, ip, r4
 8006722:	3b15      	subs	r3, #21
 8006724:	f023 0303 	bic.w	r3, r3, #3
 8006728:	3304      	adds	r3, #4
 800672a:	f104 0015 	add.w	r0, r4, #21
 800672e:	4584      	cmp	ip, r0
 8006730:	bf38      	it	cc
 8006732:	2304      	movcc	r3, #4
 8006734:	50ca      	str	r2, [r1, r3]
 8006736:	b10a      	cbz	r2, 800673c <__lshift+0xa4>
 8006738:	f108 0602 	add.w	r6, r8, #2
 800673c:	3e01      	subs	r6, #1
 800673e:	4638      	mov	r0, r7
 8006740:	612e      	str	r6, [r5, #16]
 8006742:	4621      	mov	r1, r4
 8006744:	f7ff fdda 	bl	80062fc <_Bfree>
 8006748:	4628      	mov	r0, r5
 800674a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006752:	3301      	adds	r3, #1
 8006754:	e7c5      	b.n	80066e2 <__lshift+0x4a>
 8006756:	3904      	subs	r1, #4
 8006758:	f853 2b04 	ldr.w	r2, [r3], #4
 800675c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006760:	459c      	cmp	ip, r3
 8006762:	d8f9      	bhi.n	8006758 <__lshift+0xc0>
 8006764:	e7ea      	b.n	800673c <__lshift+0xa4>
 8006766:	bf00      	nop
 8006768:	0800763c 	.word	0x0800763c
 800676c:	0800764d 	.word	0x0800764d

08006770 <__mcmp>:
 8006770:	690a      	ldr	r2, [r1, #16]
 8006772:	4603      	mov	r3, r0
 8006774:	6900      	ldr	r0, [r0, #16]
 8006776:	1a80      	subs	r0, r0, r2
 8006778:	b530      	push	{r4, r5, lr}
 800677a:	d10e      	bne.n	800679a <__mcmp+0x2a>
 800677c:	3314      	adds	r3, #20
 800677e:	3114      	adds	r1, #20
 8006780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800678c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006790:	4295      	cmp	r5, r2
 8006792:	d003      	beq.n	800679c <__mcmp+0x2c>
 8006794:	d205      	bcs.n	80067a2 <__mcmp+0x32>
 8006796:	f04f 30ff 	mov.w	r0, #4294967295
 800679a:	bd30      	pop	{r4, r5, pc}
 800679c:	42a3      	cmp	r3, r4
 800679e:	d3f3      	bcc.n	8006788 <__mcmp+0x18>
 80067a0:	e7fb      	b.n	800679a <__mcmp+0x2a>
 80067a2:	2001      	movs	r0, #1
 80067a4:	e7f9      	b.n	800679a <__mcmp+0x2a>
	...

080067a8 <__mdiff>:
 80067a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	4689      	mov	r9, r1
 80067ae:	4606      	mov	r6, r0
 80067b0:	4611      	mov	r1, r2
 80067b2:	4648      	mov	r0, r9
 80067b4:	4614      	mov	r4, r2
 80067b6:	f7ff ffdb 	bl	8006770 <__mcmp>
 80067ba:	1e05      	subs	r5, r0, #0
 80067bc:	d112      	bne.n	80067e4 <__mdiff+0x3c>
 80067be:	4629      	mov	r1, r5
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7ff fd5b 	bl	800627c <_Balloc>
 80067c6:	4602      	mov	r2, r0
 80067c8:	b928      	cbnz	r0, 80067d6 <__mdiff+0x2e>
 80067ca:	4b3f      	ldr	r3, [pc, #252]	@ (80068c8 <__mdiff+0x120>)
 80067cc:	f240 2137 	movw	r1, #567	@ 0x237
 80067d0:	483e      	ldr	r0, [pc, #248]	@ (80068cc <__mdiff+0x124>)
 80067d2:	f000 fcd7 	bl	8007184 <__assert_func>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067dc:	4610      	mov	r0, r2
 80067de:	b003      	add	sp, #12
 80067e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e4:	bfbc      	itt	lt
 80067e6:	464b      	movlt	r3, r9
 80067e8:	46a1      	movlt	r9, r4
 80067ea:	4630      	mov	r0, r6
 80067ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067f0:	bfba      	itte	lt
 80067f2:	461c      	movlt	r4, r3
 80067f4:	2501      	movlt	r5, #1
 80067f6:	2500      	movge	r5, #0
 80067f8:	f7ff fd40 	bl	800627c <_Balloc>
 80067fc:	4602      	mov	r2, r0
 80067fe:	b918      	cbnz	r0, 8006808 <__mdiff+0x60>
 8006800:	4b31      	ldr	r3, [pc, #196]	@ (80068c8 <__mdiff+0x120>)
 8006802:	f240 2145 	movw	r1, #581	@ 0x245
 8006806:	e7e3      	b.n	80067d0 <__mdiff+0x28>
 8006808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800680c:	6926      	ldr	r6, [r4, #16]
 800680e:	60c5      	str	r5, [r0, #12]
 8006810:	f109 0310 	add.w	r3, r9, #16
 8006814:	f109 0514 	add.w	r5, r9, #20
 8006818:	f104 0e14 	add.w	lr, r4, #20
 800681c:	f100 0b14 	add.w	fp, r0, #20
 8006820:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006824:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	46d9      	mov	r9, fp
 800682c:	f04f 0c00 	mov.w	ip, #0
 8006830:	9b01      	ldr	r3, [sp, #4]
 8006832:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006836:	f853 af04 	ldr.w	sl, [r3, #4]!
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	fa1f f38a 	uxth.w	r3, sl
 8006840:	4619      	mov	r1, r3
 8006842:	b283      	uxth	r3, r0
 8006844:	1acb      	subs	r3, r1, r3
 8006846:	0c00      	lsrs	r0, r0, #16
 8006848:	4463      	add	r3, ip
 800684a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800684e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006858:	4576      	cmp	r6, lr
 800685a:	f849 3b04 	str.w	r3, [r9], #4
 800685e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006862:	d8e5      	bhi.n	8006830 <__mdiff+0x88>
 8006864:	1b33      	subs	r3, r6, r4
 8006866:	3b15      	subs	r3, #21
 8006868:	f023 0303 	bic.w	r3, r3, #3
 800686c:	3415      	adds	r4, #21
 800686e:	3304      	adds	r3, #4
 8006870:	42a6      	cmp	r6, r4
 8006872:	bf38      	it	cc
 8006874:	2304      	movcc	r3, #4
 8006876:	441d      	add	r5, r3
 8006878:	445b      	add	r3, fp
 800687a:	461e      	mov	r6, r3
 800687c:	462c      	mov	r4, r5
 800687e:	4544      	cmp	r4, r8
 8006880:	d30e      	bcc.n	80068a0 <__mdiff+0xf8>
 8006882:	f108 0103 	add.w	r1, r8, #3
 8006886:	1b49      	subs	r1, r1, r5
 8006888:	f021 0103 	bic.w	r1, r1, #3
 800688c:	3d03      	subs	r5, #3
 800688e:	45a8      	cmp	r8, r5
 8006890:	bf38      	it	cc
 8006892:	2100      	movcc	r1, #0
 8006894:	440b      	add	r3, r1
 8006896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800689a:	b191      	cbz	r1, 80068c2 <__mdiff+0x11a>
 800689c:	6117      	str	r7, [r2, #16]
 800689e:	e79d      	b.n	80067dc <__mdiff+0x34>
 80068a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80068a4:	46e6      	mov	lr, ip
 80068a6:	0c08      	lsrs	r0, r1, #16
 80068a8:	fa1c fc81 	uxtah	ip, ip, r1
 80068ac:	4471      	add	r1, lr
 80068ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80068b2:	b289      	uxth	r1, r1
 80068b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80068b8:	f846 1b04 	str.w	r1, [r6], #4
 80068bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068c0:	e7dd      	b.n	800687e <__mdiff+0xd6>
 80068c2:	3f01      	subs	r7, #1
 80068c4:	e7e7      	b.n	8006896 <__mdiff+0xee>
 80068c6:	bf00      	nop
 80068c8:	0800763c 	.word	0x0800763c
 80068cc:	0800764d 	.word	0x0800764d

080068d0 <__d2b>:
 80068d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068d4:	460f      	mov	r7, r1
 80068d6:	2101      	movs	r1, #1
 80068d8:	ec59 8b10 	vmov	r8, r9, d0
 80068dc:	4616      	mov	r6, r2
 80068de:	f7ff fccd 	bl	800627c <_Balloc>
 80068e2:	4604      	mov	r4, r0
 80068e4:	b930      	cbnz	r0, 80068f4 <__d2b+0x24>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b23      	ldr	r3, [pc, #140]	@ (8006978 <__d2b+0xa8>)
 80068ea:	4824      	ldr	r0, [pc, #144]	@ (800697c <__d2b+0xac>)
 80068ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80068f0:	f000 fc48 	bl	8007184 <__assert_func>
 80068f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068fc:	b10d      	cbz	r5, 8006902 <__d2b+0x32>
 80068fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	f1b8 0300 	subs.w	r3, r8, #0
 8006908:	d023      	beq.n	8006952 <__d2b+0x82>
 800690a:	4668      	mov	r0, sp
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	f7ff fd7c 	bl	800640a <__lo0bits>
 8006912:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006916:	b1d0      	cbz	r0, 800694e <__d2b+0x7e>
 8006918:	f1c0 0320 	rsb	r3, r0, #32
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	430b      	orrs	r3, r1
 8006922:	40c2      	lsrs	r2, r0
 8006924:	6163      	str	r3, [r4, #20]
 8006926:	9201      	str	r2, [sp, #4]
 8006928:	9b01      	ldr	r3, [sp, #4]
 800692a:	61a3      	str	r3, [r4, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	bf0c      	ite	eq
 8006930:	2201      	moveq	r2, #1
 8006932:	2202      	movne	r2, #2
 8006934:	6122      	str	r2, [r4, #16]
 8006936:	b1a5      	cbz	r5, 8006962 <__d2b+0x92>
 8006938:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800693c:	4405      	add	r5, r0
 800693e:	603d      	str	r5, [r7, #0]
 8006940:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006944:	6030      	str	r0, [r6, #0]
 8006946:	4620      	mov	r0, r4
 8006948:	b003      	add	sp, #12
 800694a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800694e:	6161      	str	r1, [r4, #20]
 8006950:	e7ea      	b.n	8006928 <__d2b+0x58>
 8006952:	a801      	add	r0, sp, #4
 8006954:	f7ff fd59 	bl	800640a <__lo0bits>
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	6163      	str	r3, [r4, #20]
 800695c:	3020      	adds	r0, #32
 800695e:	2201      	movs	r2, #1
 8006960:	e7e8      	b.n	8006934 <__d2b+0x64>
 8006962:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006966:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800696a:	6038      	str	r0, [r7, #0]
 800696c:	6918      	ldr	r0, [r3, #16]
 800696e:	f7ff fd2d 	bl	80063cc <__hi0bits>
 8006972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006976:	e7e5      	b.n	8006944 <__d2b+0x74>
 8006978:	0800763c 	.word	0x0800763c
 800697c:	0800764d 	.word	0x0800764d

08006980 <__ssputs_r>:
 8006980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006984:	688e      	ldr	r6, [r1, #8]
 8006986:	461f      	mov	r7, r3
 8006988:	42be      	cmp	r6, r7
 800698a:	680b      	ldr	r3, [r1, #0]
 800698c:	4682      	mov	sl, r0
 800698e:	460c      	mov	r4, r1
 8006990:	4690      	mov	r8, r2
 8006992:	d82d      	bhi.n	80069f0 <__ssputs_r+0x70>
 8006994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006998:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800699c:	d026      	beq.n	80069ec <__ssputs_r+0x6c>
 800699e:	6965      	ldr	r5, [r4, #20]
 80069a0:	6909      	ldr	r1, [r1, #16]
 80069a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069a6:	eba3 0901 	sub.w	r9, r3, r1
 80069aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069ae:	1c7b      	adds	r3, r7, #1
 80069b0:	444b      	add	r3, r9
 80069b2:	106d      	asrs	r5, r5, #1
 80069b4:	429d      	cmp	r5, r3
 80069b6:	bf38      	it	cc
 80069b8:	461d      	movcc	r5, r3
 80069ba:	0553      	lsls	r3, r2, #21
 80069bc:	d527      	bpl.n	8006a0e <__ssputs_r+0x8e>
 80069be:	4629      	mov	r1, r5
 80069c0:	f7fd ff1a 	bl	80047f8 <_malloc_r>
 80069c4:	4606      	mov	r6, r0
 80069c6:	b360      	cbz	r0, 8006a22 <__ssputs_r+0xa2>
 80069c8:	6921      	ldr	r1, [r4, #16]
 80069ca:	464a      	mov	r2, r9
 80069cc:	f000 fbcc 	bl	8007168 <memcpy>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	6126      	str	r6, [r4, #16]
 80069de:	6165      	str	r5, [r4, #20]
 80069e0:	444e      	add	r6, r9
 80069e2:	eba5 0509 	sub.w	r5, r5, r9
 80069e6:	6026      	str	r6, [r4, #0]
 80069e8:	60a5      	str	r5, [r4, #8]
 80069ea:	463e      	mov	r6, r7
 80069ec:	42be      	cmp	r6, r7
 80069ee:	d900      	bls.n	80069f2 <__ssputs_r+0x72>
 80069f0:	463e      	mov	r6, r7
 80069f2:	6820      	ldr	r0, [r4, #0]
 80069f4:	4632      	mov	r2, r6
 80069f6:	4641      	mov	r1, r8
 80069f8:	f000 fb9c 	bl	8007134 <memmove>
 80069fc:	68a3      	ldr	r3, [r4, #8]
 80069fe:	1b9b      	subs	r3, r3, r6
 8006a00:	60a3      	str	r3, [r4, #8]
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	4433      	add	r3, r6
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0e:	462a      	mov	r2, r5
 8006a10:	f000 fbfc 	bl	800720c <_realloc_r>
 8006a14:	4606      	mov	r6, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d1e0      	bne.n	80069dc <__ssputs_r+0x5c>
 8006a1a:	6921      	ldr	r1, [r4, #16]
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	f7ff fbe3 	bl	80061e8 <_free_r>
 8006a22:	230c      	movs	r3, #12
 8006a24:	f8ca 3000 	str.w	r3, [sl]
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	e7e9      	b.n	8006a0a <__ssputs_r+0x8a>
	...

08006a38 <_svfiprintf_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	4698      	mov	r8, r3
 8006a3e:	898b      	ldrh	r3, [r1, #12]
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	b09d      	sub	sp, #116	@ 0x74
 8006a44:	4607      	mov	r7, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	4614      	mov	r4, r2
 8006a4a:	d510      	bpl.n	8006a6e <_svfiprintf_r+0x36>
 8006a4c:	690b      	ldr	r3, [r1, #16]
 8006a4e:	b973      	cbnz	r3, 8006a6e <_svfiprintf_r+0x36>
 8006a50:	2140      	movs	r1, #64	@ 0x40
 8006a52:	f7fd fed1 	bl	80047f8 <_malloc_r>
 8006a56:	6028      	str	r0, [r5, #0]
 8006a58:	6128      	str	r0, [r5, #16]
 8006a5a:	b930      	cbnz	r0, 8006a6a <_svfiprintf_r+0x32>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	b01d      	add	sp, #116	@ 0x74
 8006a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6a:	2340      	movs	r3, #64	@ 0x40
 8006a6c:	616b      	str	r3, [r5, #20]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a72:	2320      	movs	r3, #32
 8006a74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a7c:	2330      	movs	r3, #48	@ 0x30
 8006a7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c1c <_svfiprintf_r+0x1e4>
 8006a82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a86:	f04f 0901 	mov.w	r9, #1
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	469a      	mov	sl, r3
 8006a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a92:	b10a      	cbz	r2, 8006a98 <_svfiprintf_r+0x60>
 8006a94:	2a25      	cmp	r2, #37	@ 0x25
 8006a96:	d1f9      	bne.n	8006a8c <_svfiprintf_r+0x54>
 8006a98:	ebba 0b04 	subs.w	fp, sl, r4
 8006a9c:	d00b      	beq.n	8006ab6 <_svfiprintf_r+0x7e>
 8006a9e:	465b      	mov	r3, fp
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	f7ff ff6b 	bl	8006980 <__ssputs_r>
 8006aaa:	3001      	adds	r0, #1
 8006aac:	f000 80a7 	beq.w	8006bfe <_svfiprintf_r+0x1c6>
 8006ab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ab2:	445a      	add	r2, fp
 8006ab4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 809f 	beq.w	8006bfe <_svfiprintf_r+0x1c6>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aca:	f10a 0a01 	add.w	sl, sl, #1
 8006ace:	9304      	str	r3, [sp, #16]
 8006ad0:	9307      	str	r3, [sp, #28]
 8006ad2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ad6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ad8:	4654      	mov	r4, sl
 8006ada:	2205      	movs	r2, #5
 8006adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae0:	484e      	ldr	r0, [pc, #312]	@ (8006c1c <_svfiprintf_r+0x1e4>)
 8006ae2:	f7f9 fba5 	bl	8000230 <memchr>
 8006ae6:	9a04      	ldr	r2, [sp, #16]
 8006ae8:	b9d8      	cbnz	r0, 8006b22 <_svfiprintf_r+0xea>
 8006aea:	06d0      	lsls	r0, r2, #27
 8006aec:	bf44      	itt	mi
 8006aee:	2320      	movmi	r3, #32
 8006af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006af4:	0711      	lsls	r1, r2, #28
 8006af6:	bf44      	itt	mi
 8006af8:	232b      	movmi	r3, #43	@ 0x2b
 8006afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006afe:	f89a 3000 	ldrb.w	r3, [sl]
 8006b02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b04:	d015      	beq.n	8006b32 <_svfiprintf_r+0xfa>
 8006b06:	9a07      	ldr	r2, [sp, #28]
 8006b08:	4654      	mov	r4, sl
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f04f 0c0a 	mov.w	ip, #10
 8006b10:	4621      	mov	r1, r4
 8006b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b16:	3b30      	subs	r3, #48	@ 0x30
 8006b18:	2b09      	cmp	r3, #9
 8006b1a:	d94b      	bls.n	8006bb4 <_svfiprintf_r+0x17c>
 8006b1c:	b1b0      	cbz	r0, 8006b4c <_svfiprintf_r+0x114>
 8006b1e:	9207      	str	r2, [sp, #28]
 8006b20:	e014      	b.n	8006b4c <_svfiprintf_r+0x114>
 8006b22:	eba0 0308 	sub.w	r3, r0, r8
 8006b26:	fa09 f303 	lsl.w	r3, r9, r3
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	46a2      	mov	sl, r4
 8006b30:	e7d2      	b.n	8006ad8 <_svfiprintf_r+0xa0>
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	1d19      	adds	r1, r3, #4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	9103      	str	r1, [sp, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bfbb      	ittet	lt
 8006b3e:	425b      	neglt	r3, r3
 8006b40:	f042 0202 	orrlt.w	r2, r2, #2
 8006b44:	9307      	strge	r3, [sp, #28]
 8006b46:	9307      	strlt	r3, [sp, #28]
 8006b48:	bfb8      	it	lt
 8006b4a:	9204      	strlt	r2, [sp, #16]
 8006b4c:	7823      	ldrb	r3, [r4, #0]
 8006b4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b50:	d10a      	bne.n	8006b68 <_svfiprintf_r+0x130>
 8006b52:	7863      	ldrb	r3, [r4, #1]
 8006b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b56:	d132      	bne.n	8006bbe <_svfiprintf_r+0x186>
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	9203      	str	r2, [sp, #12]
 8006b60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b64:	3402      	adds	r4, #2
 8006b66:	9305      	str	r3, [sp, #20]
 8006b68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c2c <_svfiprintf_r+0x1f4>
 8006b6c:	7821      	ldrb	r1, [r4, #0]
 8006b6e:	2203      	movs	r2, #3
 8006b70:	4650      	mov	r0, sl
 8006b72:	f7f9 fb5d 	bl	8000230 <memchr>
 8006b76:	b138      	cbz	r0, 8006b88 <_svfiprintf_r+0x150>
 8006b78:	9b04      	ldr	r3, [sp, #16]
 8006b7a:	eba0 000a 	sub.w	r0, r0, sl
 8006b7e:	2240      	movs	r2, #64	@ 0x40
 8006b80:	4082      	lsls	r2, r0
 8006b82:	4313      	orrs	r3, r2
 8006b84:	3401      	adds	r4, #1
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8c:	4824      	ldr	r0, [pc, #144]	@ (8006c20 <_svfiprintf_r+0x1e8>)
 8006b8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b92:	2206      	movs	r2, #6
 8006b94:	f7f9 fb4c 	bl	8000230 <memchr>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d036      	beq.n	8006c0a <_svfiprintf_r+0x1d2>
 8006b9c:	4b21      	ldr	r3, [pc, #132]	@ (8006c24 <_svfiprintf_r+0x1ec>)
 8006b9e:	bb1b      	cbnz	r3, 8006be8 <_svfiprintf_r+0x1b0>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	3307      	adds	r3, #7
 8006ba4:	f023 0307 	bic.w	r3, r3, #7
 8006ba8:	3308      	adds	r3, #8
 8006baa:	9303      	str	r3, [sp, #12]
 8006bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bae:	4433      	add	r3, r6
 8006bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bb2:	e76a      	b.n	8006a8a <_svfiprintf_r+0x52>
 8006bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb8:	460c      	mov	r4, r1
 8006bba:	2001      	movs	r0, #1
 8006bbc:	e7a8      	b.n	8006b10 <_svfiprintf_r+0xd8>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	3401      	adds	r4, #1
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	f04f 0c0a 	mov.w	ip, #10
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bd0:	3a30      	subs	r2, #48	@ 0x30
 8006bd2:	2a09      	cmp	r2, #9
 8006bd4:	d903      	bls.n	8006bde <_svfiprintf_r+0x1a6>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0c6      	beq.n	8006b68 <_svfiprintf_r+0x130>
 8006bda:	9105      	str	r1, [sp, #20]
 8006bdc:	e7c4      	b.n	8006b68 <_svfiprintf_r+0x130>
 8006bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8006be2:	4604      	mov	r4, r0
 8006be4:	2301      	movs	r3, #1
 8006be6:	e7f0      	b.n	8006bca <_svfiprintf_r+0x192>
 8006be8:	ab03      	add	r3, sp, #12
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	462a      	mov	r2, r5
 8006bee:	4b0e      	ldr	r3, [pc, #56]	@ (8006c28 <_svfiprintf_r+0x1f0>)
 8006bf0:	a904      	add	r1, sp, #16
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f7fd ff2c 	bl	8004a50 <_printf_float>
 8006bf8:	1c42      	adds	r2, r0, #1
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	d1d6      	bne.n	8006bac <_svfiprintf_r+0x174>
 8006bfe:	89ab      	ldrh	r3, [r5, #12]
 8006c00:	065b      	lsls	r3, r3, #25
 8006c02:	f53f af2d 	bmi.w	8006a60 <_svfiprintf_r+0x28>
 8006c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c08:	e72c      	b.n	8006a64 <_svfiprintf_r+0x2c>
 8006c0a:	ab03      	add	r3, sp, #12
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	462a      	mov	r2, r5
 8006c10:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <_svfiprintf_r+0x1f0>)
 8006c12:	a904      	add	r1, sp, #16
 8006c14:	4638      	mov	r0, r7
 8006c16:	f7fe f9b3 	bl	8004f80 <_printf_i>
 8006c1a:	e7ed      	b.n	8006bf8 <_svfiprintf_r+0x1c0>
 8006c1c:	080077a8 	.word	0x080077a8
 8006c20:	080077b2 	.word	0x080077b2
 8006c24:	08004a51 	.word	0x08004a51
 8006c28:	08006981 	.word	0x08006981
 8006c2c:	080077ae 	.word	0x080077ae

08006c30 <__sfputc_r>:
 8006c30:	6893      	ldr	r3, [r2, #8]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	b410      	push	{r4}
 8006c38:	6093      	str	r3, [r2, #8]
 8006c3a:	da08      	bge.n	8006c4e <__sfputc_r+0x1e>
 8006c3c:	6994      	ldr	r4, [r2, #24]
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	db01      	blt.n	8006c46 <__sfputc_r+0x16>
 8006c42:	290a      	cmp	r1, #10
 8006c44:	d103      	bne.n	8006c4e <__sfputc_r+0x1e>
 8006c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c4a:	f000 b9df 	b.w	800700c <__swbuf_r>
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	1c58      	adds	r0, r3, #1
 8006c52:	6010      	str	r0, [r2, #0]
 8006c54:	7019      	strb	r1, [r3, #0]
 8006c56:	4608      	mov	r0, r1
 8006c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <__sfputs_r>:
 8006c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c60:	4606      	mov	r6, r0
 8006c62:	460f      	mov	r7, r1
 8006c64:	4614      	mov	r4, r2
 8006c66:	18d5      	adds	r5, r2, r3
 8006c68:	42ac      	cmp	r4, r5
 8006c6a:	d101      	bne.n	8006c70 <__sfputs_r+0x12>
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e007      	b.n	8006c80 <__sfputs_r+0x22>
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	463a      	mov	r2, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ffda 	bl	8006c30 <__sfputc_r>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d1f3      	bne.n	8006c68 <__sfputs_r+0xa>
 8006c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c84 <_vfiprintf_r>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	460d      	mov	r5, r1
 8006c8a:	b09d      	sub	sp, #116	@ 0x74
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	4698      	mov	r8, r3
 8006c90:	4606      	mov	r6, r0
 8006c92:	b118      	cbz	r0, 8006c9c <_vfiprintf_r+0x18>
 8006c94:	6a03      	ldr	r3, [r0, #32]
 8006c96:	b90b      	cbnz	r3, 8006c9c <_vfiprintf_r+0x18>
 8006c98:	f7fe fb1e 	bl	80052d8 <__sinit>
 8006c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c9e:	07d9      	lsls	r1, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_vfiprintf_r+0x2a>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	059a      	lsls	r2, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_vfiprintf_r+0x2a>
 8006ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006caa:	f7fe fc4e 	bl	800554a <__retarget_lock_acquire_recursive>
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	071b      	lsls	r3, r3, #28
 8006cb2:	d501      	bpl.n	8006cb8 <_vfiprintf_r+0x34>
 8006cb4:	692b      	ldr	r3, [r5, #16]
 8006cb6:	b99b      	cbnz	r3, 8006ce0 <_vfiprintf_r+0x5c>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f000 f9e4 	bl	8007088 <__swsetup_r>
 8006cc0:	b170      	cbz	r0, 8006ce0 <_vfiprintf_r+0x5c>
 8006cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cc4:	07dc      	lsls	r4, r3, #31
 8006cc6:	d504      	bpl.n	8006cd2 <_vfiprintf_r+0x4e>
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	b01d      	add	sp, #116	@ 0x74
 8006cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	0598      	lsls	r0, r3, #22
 8006cd6:	d4f7      	bmi.n	8006cc8 <_vfiprintf_r+0x44>
 8006cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cda:	f7fe fc37 	bl	800554c <__retarget_lock_release_recursive>
 8006cde:	e7f3      	b.n	8006cc8 <_vfiprintf_r+0x44>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cee:	2330      	movs	r3, #48	@ 0x30
 8006cf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ea0 <_vfiprintf_r+0x21c>
 8006cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cf8:	f04f 0901 	mov.w	r9, #1
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	469a      	mov	sl, r3
 8006d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d04:	b10a      	cbz	r2, 8006d0a <_vfiprintf_r+0x86>
 8006d06:	2a25      	cmp	r2, #37	@ 0x25
 8006d08:	d1f9      	bne.n	8006cfe <_vfiprintf_r+0x7a>
 8006d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d0e:	d00b      	beq.n	8006d28 <_vfiprintf_r+0xa4>
 8006d10:	465b      	mov	r3, fp
 8006d12:	4622      	mov	r2, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff ffa1 	bl	8006c5e <__sfputs_r>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f000 80a7 	beq.w	8006e70 <_vfiprintf_r+0x1ec>
 8006d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d24:	445a      	add	r2, fp
 8006d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d28:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 809f 	beq.w	8006e70 <_vfiprintf_r+0x1ec>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d3c:	f10a 0a01 	add.w	sl, sl, #1
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	9307      	str	r3, [sp, #28]
 8006d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d4a:	4654      	mov	r4, sl
 8006d4c:	2205      	movs	r2, #5
 8006d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d52:	4853      	ldr	r0, [pc, #332]	@ (8006ea0 <_vfiprintf_r+0x21c>)
 8006d54:	f7f9 fa6c 	bl	8000230 <memchr>
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	b9d8      	cbnz	r0, 8006d94 <_vfiprintf_r+0x110>
 8006d5c:	06d1      	lsls	r1, r2, #27
 8006d5e:	bf44      	itt	mi
 8006d60:	2320      	movmi	r3, #32
 8006d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d66:	0713      	lsls	r3, r2, #28
 8006d68:	bf44      	itt	mi
 8006d6a:	232b      	movmi	r3, #43	@ 0x2b
 8006d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d70:	f89a 3000 	ldrb.w	r3, [sl]
 8006d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d76:	d015      	beq.n	8006da4 <_vfiprintf_r+0x120>
 8006d78:	9a07      	ldr	r2, [sp, #28]
 8006d7a:	4654      	mov	r4, sl
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	f04f 0c0a 	mov.w	ip, #10
 8006d82:	4621      	mov	r1, r4
 8006d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d88:	3b30      	subs	r3, #48	@ 0x30
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d94b      	bls.n	8006e26 <_vfiprintf_r+0x1a2>
 8006d8e:	b1b0      	cbz	r0, 8006dbe <_vfiprintf_r+0x13a>
 8006d90:	9207      	str	r2, [sp, #28]
 8006d92:	e014      	b.n	8006dbe <_vfiprintf_r+0x13a>
 8006d94:	eba0 0308 	sub.w	r3, r0, r8
 8006d98:	fa09 f303 	lsl.w	r3, r9, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	46a2      	mov	sl, r4
 8006da2:	e7d2      	b.n	8006d4a <_vfiprintf_r+0xc6>
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	1d19      	adds	r1, r3, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	9103      	str	r1, [sp, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bfbb      	ittet	lt
 8006db0:	425b      	neglt	r3, r3
 8006db2:	f042 0202 	orrlt.w	r2, r2, #2
 8006db6:	9307      	strge	r3, [sp, #28]
 8006db8:	9307      	strlt	r3, [sp, #28]
 8006dba:	bfb8      	it	lt
 8006dbc:	9204      	strlt	r2, [sp, #16]
 8006dbe:	7823      	ldrb	r3, [r4, #0]
 8006dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dc2:	d10a      	bne.n	8006dda <_vfiprintf_r+0x156>
 8006dc4:	7863      	ldrb	r3, [r4, #1]
 8006dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dc8:	d132      	bne.n	8006e30 <_vfiprintf_r+0x1ac>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	1d1a      	adds	r2, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	9203      	str	r2, [sp, #12]
 8006dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dd6:	3402      	adds	r4, #2
 8006dd8:	9305      	str	r3, [sp, #20]
 8006dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006eb0 <_vfiprintf_r+0x22c>
 8006dde:	7821      	ldrb	r1, [r4, #0]
 8006de0:	2203      	movs	r2, #3
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7f9 fa24 	bl	8000230 <memchr>
 8006de8:	b138      	cbz	r0, 8006dfa <_vfiprintf_r+0x176>
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	eba0 000a 	sub.w	r0, r0, sl
 8006df0:	2240      	movs	r2, #64	@ 0x40
 8006df2:	4082      	lsls	r2, r0
 8006df4:	4313      	orrs	r3, r2
 8006df6:	3401      	adds	r4, #1
 8006df8:	9304      	str	r3, [sp, #16]
 8006dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfe:	4829      	ldr	r0, [pc, #164]	@ (8006ea4 <_vfiprintf_r+0x220>)
 8006e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e04:	2206      	movs	r2, #6
 8006e06:	f7f9 fa13 	bl	8000230 <memchr>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d03f      	beq.n	8006e8e <_vfiprintf_r+0x20a>
 8006e0e:	4b26      	ldr	r3, [pc, #152]	@ (8006ea8 <_vfiprintf_r+0x224>)
 8006e10:	bb1b      	cbnz	r3, 8006e5a <_vfiprintf_r+0x1d6>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	3307      	adds	r3, #7
 8006e16:	f023 0307 	bic.w	r3, r3, #7
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	9303      	str	r3, [sp, #12]
 8006e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e20:	443b      	add	r3, r7
 8006e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e24:	e76a      	b.n	8006cfc <_vfiprintf_r+0x78>
 8006e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	e7a8      	b.n	8006d82 <_vfiprintf_r+0xfe>
 8006e30:	2300      	movs	r3, #0
 8006e32:	3401      	adds	r4, #1
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	4619      	mov	r1, r3
 8006e38:	f04f 0c0a 	mov.w	ip, #10
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e42:	3a30      	subs	r2, #48	@ 0x30
 8006e44:	2a09      	cmp	r2, #9
 8006e46:	d903      	bls.n	8006e50 <_vfiprintf_r+0x1cc>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0c6      	beq.n	8006dda <_vfiprintf_r+0x156>
 8006e4c:	9105      	str	r1, [sp, #20]
 8006e4e:	e7c4      	b.n	8006dda <_vfiprintf_r+0x156>
 8006e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e54:	4604      	mov	r4, r0
 8006e56:	2301      	movs	r3, #1
 8006e58:	e7f0      	b.n	8006e3c <_vfiprintf_r+0x1b8>
 8006e5a:	ab03      	add	r3, sp, #12
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	462a      	mov	r2, r5
 8006e60:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <_vfiprintf_r+0x228>)
 8006e62:	a904      	add	r1, sp, #16
 8006e64:	4630      	mov	r0, r6
 8006e66:	f7fd fdf3 	bl	8004a50 <_printf_float>
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	1c78      	adds	r0, r7, #1
 8006e6e:	d1d6      	bne.n	8006e1e <_vfiprintf_r+0x19a>
 8006e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e72:	07d9      	lsls	r1, r3, #31
 8006e74:	d405      	bmi.n	8006e82 <_vfiprintf_r+0x1fe>
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	059a      	lsls	r2, r3, #22
 8006e7a:	d402      	bmi.n	8006e82 <_vfiprintf_r+0x1fe>
 8006e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e7e:	f7fe fb65 	bl	800554c <__retarget_lock_release_recursive>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	065b      	lsls	r3, r3, #25
 8006e86:	f53f af1f 	bmi.w	8006cc8 <_vfiprintf_r+0x44>
 8006e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e8c:	e71e      	b.n	8006ccc <_vfiprintf_r+0x48>
 8006e8e:	ab03      	add	r3, sp, #12
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	462a      	mov	r2, r5
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <_vfiprintf_r+0x228>)
 8006e96:	a904      	add	r1, sp, #16
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f7fe f871 	bl	8004f80 <_printf_i>
 8006e9e:	e7e4      	b.n	8006e6a <_vfiprintf_r+0x1e6>
 8006ea0:	080077a8 	.word	0x080077a8
 8006ea4:	080077b2 	.word	0x080077b2
 8006ea8:	08004a51 	.word	0x08004a51
 8006eac:	08006c5f 	.word	0x08006c5f
 8006eb0:	080077ae 	.word	0x080077ae

08006eb4 <__sflush_r>:
 8006eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebc:	0716      	lsls	r6, r2, #28
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	d454      	bmi.n	8006f6e <__sflush_r+0xba>
 8006ec4:	684b      	ldr	r3, [r1, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	dc02      	bgt.n	8006ed0 <__sflush_r+0x1c>
 8006eca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dd48      	ble.n	8006f62 <__sflush_r+0xae>
 8006ed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	d045      	beq.n	8006f62 <__sflush_r+0xae>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006edc:	682f      	ldr	r7, [r5, #0]
 8006ede:	6a21      	ldr	r1, [r4, #32]
 8006ee0:	602b      	str	r3, [r5, #0]
 8006ee2:	d030      	beq.n	8006f46 <__sflush_r+0x92>
 8006ee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	0759      	lsls	r1, r3, #29
 8006eea:	d505      	bpl.n	8006ef8 <__sflush_r+0x44>
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ef2:	b10b      	cbz	r3, 8006ef8 <__sflush_r+0x44>
 8006ef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	2300      	movs	r3, #0
 8006efa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006efc:	6a21      	ldr	r1, [r4, #32]
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b0      	blx	r6
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	d106      	bne.n	8006f16 <__sflush_r+0x62>
 8006f08:	6829      	ldr	r1, [r5, #0]
 8006f0a:	291d      	cmp	r1, #29
 8006f0c:	d82b      	bhi.n	8006f66 <__sflush_r+0xb2>
 8006f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb8 <__sflush_r+0x104>)
 8006f10:	410a      	asrs	r2, r1
 8006f12:	07d6      	lsls	r6, r2, #31
 8006f14:	d427      	bmi.n	8006f66 <__sflush_r+0xb2>
 8006f16:	2200      	movs	r2, #0
 8006f18:	6062      	str	r2, [r4, #4]
 8006f1a:	04d9      	lsls	r1, r3, #19
 8006f1c:	6922      	ldr	r2, [r4, #16]
 8006f1e:	6022      	str	r2, [r4, #0]
 8006f20:	d504      	bpl.n	8006f2c <__sflush_r+0x78>
 8006f22:	1c42      	adds	r2, r0, #1
 8006f24:	d101      	bne.n	8006f2a <__sflush_r+0x76>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	b903      	cbnz	r3, 8006f2c <__sflush_r+0x78>
 8006f2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f2e:	602f      	str	r7, [r5, #0]
 8006f30:	b1b9      	cbz	r1, 8006f62 <__sflush_r+0xae>
 8006f32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f36:	4299      	cmp	r1, r3
 8006f38:	d002      	beq.n	8006f40 <__sflush_r+0x8c>
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f7ff f954 	bl	80061e8 <_free_r>
 8006f40:	2300      	movs	r3, #0
 8006f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f44:	e00d      	b.n	8006f62 <__sflush_r+0xae>
 8006f46:	2301      	movs	r3, #1
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b0      	blx	r6
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	1c50      	adds	r0, r2, #1
 8006f50:	d1c9      	bne.n	8006ee6 <__sflush_r+0x32>
 8006f52:	682b      	ldr	r3, [r5, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0c6      	beq.n	8006ee6 <__sflush_r+0x32>
 8006f58:	2b1d      	cmp	r3, #29
 8006f5a:	d001      	beq.n	8006f60 <__sflush_r+0xac>
 8006f5c:	2b16      	cmp	r3, #22
 8006f5e:	d11e      	bne.n	8006f9e <__sflush_r+0xea>
 8006f60:	602f      	str	r7, [r5, #0]
 8006f62:	2000      	movs	r0, #0
 8006f64:	e022      	b.n	8006fac <__sflush_r+0xf8>
 8006f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f6a:	b21b      	sxth	r3, r3
 8006f6c:	e01b      	b.n	8006fa6 <__sflush_r+0xf2>
 8006f6e:	690f      	ldr	r7, [r1, #16]
 8006f70:	2f00      	cmp	r7, #0
 8006f72:	d0f6      	beq.n	8006f62 <__sflush_r+0xae>
 8006f74:	0793      	lsls	r3, r2, #30
 8006f76:	680e      	ldr	r6, [r1, #0]
 8006f78:	bf08      	it	eq
 8006f7a:	694b      	ldreq	r3, [r1, #20]
 8006f7c:	600f      	str	r7, [r1, #0]
 8006f7e:	bf18      	it	ne
 8006f80:	2300      	movne	r3, #0
 8006f82:	eba6 0807 	sub.w	r8, r6, r7
 8006f86:	608b      	str	r3, [r1, #8]
 8006f88:	f1b8 0f00 	cmp.w	r8, #0
 8006f8c:	dde9      	ble.n	8006f62 <__sflush_r+0xae>
 8006f8e:	6a21      	ldr	r1, [r4, #32]
 8006f90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f92:	4643      	mov	r3, r8
 8006f94:	463a      	mov	r2, r7
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b0      	blx	r6
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	dc08      	bgt.n	8006fb0 <__sflush_r+0xfc>
 8006f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb0:	4407      	add	r7, r0
 8006fb2:	eba8 0800 	sub.w	r8, r8, r0
 8006fb6:	e7e7      	b.n	8006f88 <__sflush_r+0xd4>
 8006fb8:	dfbffffe 	.word	0xdfbffffe

08006fbc <_fflush_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	690b      	ldr	r3, [r1, #16]
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	b913      	cbnz	r3, 8006fcc <_fflush_r+0x10>
 8006fc6:	2500      	movs	r5, #0
 8006fc8:	4628      	mov	r0, r5
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	b118      	cbz	r0, 8006fd6 <_fflush_r+0x1a>
 8006fce:	6a03      	ldr	r3, [r0, #32]
 8006fd0:	b90b      	cbnz	r3, 8006fd6 <_fflush_r+0x1a>
 8006fd2:	f7fe f981 	bl	80052d8 <__sinit>
 8006fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f3      	beq.n	8006fc6 <_fflush_r+0xa>
 8006fde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fe0:	07d0      	lsls	r0, r2, #31
 8006fe2:	d404      	bmi.n	8006fee <_fflush_r+0x32>
 8006fe4:	0599      	lsls	r1, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_fflush_r+0x32>
 8006fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fea:	f7fe faae 	bl	800554a <__retarget_lock_acquire_recursive>
 8006fee:	4628      	mov	r0, r5
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f7ff ff5f 	bl	8006eb4 <__sflush_r>
 8006ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ff8:	07da      	lsls	r2, r3, #31
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	d4e4      	bmi.n	8006fc8 <_fflush_r+0xc>
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	059b      	lsls	r3, r3, #22
 8007002:	d4e1      	bmi.n	8006fc8 <_fflush_r+0xc>
 8007004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007006:	f7fe faa1 	bl	800554c <__retarget_lock_release_recursive>
 800700a:	e7dd      	b.n	8006fc8 <_fflush_r+0xc>

0800700c <__swbuf_r>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	460e      	mov	r6, r1
 8007010:	4614      	mov	r4, r2
 8007012:	4605      	mov	r5, r0
 8007014:	b118      	cbz	r0, 800701e <__swbuf_r+0x12>
 8007016:	6a03      	ldr	r3, [r0, #32]
 8007018:	b90b      	cbnz	r3, 800701e <__swbuf_r+0x12>
 800701a:	f7fe f95d 	bl	80052d8 <__sinit>
 800701e:	69a3      	ldr	r3, [r4, #24]
 8007020:	60a3      	str	r3, [r4, #8]
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	071a      	lsls	r2, r3, #28
 8007026:	d501      	bpl.n	800702c <__swbuf_r+0x20>
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	b943      	cbnz	r3, 800703e <__swbuf_r+0x32>
 800702c:	4621      	mov	r1, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f000 f82a 	bl	8007088 <__swsetup_r>
 8007034:	b118      	cbz	r0, 800703e <__swbuf_r+0x32>
 8007036:	f04f 37ff 	mov.w	r7, #4294967295
 800703a:	4638      	mov	r0, r7
 800703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	6922      	ldr	r2, [r4, #16]
 8007042:	1a98      	subs	r0, r3, r2
 8007044:	6963      	ldr	r3, [r4, #20]
 8007046:	b2f6      	uxtb	r6, r6
 8007048:	4283      	cmp	r3, r0
 800704a:	4637      	mov	r7, r6
 800704c:	dc05      	bgt.n	800705a <__swbuf_r+0x4e>
 800704e:	4621      	mov	r1, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f7ff ffb3 	bl	8006fbc <_fflush_r>
 8007056:	2800      	cmp	r0, #0
 8007058:	d1ed      	bne.n	8007036 <__swbuf_r+0x2a>
 800705a:	68a3      	ldr	r3, [r4, #8]
 800705c:	3b01      	subs	r3, #1
 800705e:	60a3      	str	r3, [r4, #8]
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	6022      	str	r2, [r4, #0]
 8007066:	701e      	strb	r6, [r3, #0]
 8007068:	6962      	ldr	r2, [r4, #20]
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	429a      	cmp	r2, r3
 800706e:	d004      	beq.n	800707a <__swbuf_r+0x6e>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	07db      	lsls	r3, r3, #31
 8007074:	d5e1      	bpl.n	800703a <__swbuf_r+0x2e>
 8007076:	2e0a      	cmp	r6, #10
 8007078:	d1df      	bne.n	800703a <__swbuf_r+0x2e>
 800707a:	4621      	mov	r1, r4
 800707c:	4628      	mov	r0, r5
 800707e:	f7ff ff9d 	bl	8006fbc <_fflush_r>
 8007082:	2800      	cmp	r0, #0
 8007084:	d0d9      	beq.n	800703a <__swbuf_r+0x2e>
 8007086:	e7d6      	b.n	8007036 <__swbuf_r+0x2a>

08007088 <__swsetup_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4b29      	ldr	r3, [pc, #164]	@ (8007130 <__swsetup_r+0xa8>)
 800708c:	4605      	mov	r5, r0
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	460c      	mov	r4, r1
 8007092:	b118      	cbz	r0, 800709c <__swsetup_r+0x14>
 8007094:	6a03      	ldr	r3, [r0, #32]
 8007096:	b90b      	cbnz	r3, 800709c <__swsetup_r+0x14>
 8007098:	f7fe f91e 	bl	80052d8 <__sinit>
 800709c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a0:	0719      	lsls	r1, r3, #28
 80070a2:	d422      	bmi.n	80070ea <__swsetup_r+0x62>
 80070a4:	06da      	lsls	r2, r3, #27
 80070a6:	d407      	bmi.n	80070b8 <__swsetup_r+0x30>
 80070a8:	2209      	movs	r2, #9
 80070aa:	602a      	str	r2, [r5, #0]
 80070ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	f04f 30ff 	mov.w	r0, #4294967295
 80070b6:	e033      	b.n	8007120 <__swsetup_r+0x98>
 80070b8:	0758      	lsls	r0, r3, #29
 80070ba:	d512      	bpl.n	80070e2 <__swsetup_r+0x5a>
 80070bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070be:	b141      	cbz	r1, 80070d2 <__swsetup_r+0x4a>
 80070c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070c4:	4299      	cmp	r1, r3
 80070c6:	d002      	beq.n	80070ce <__swsetup_r+0x46>
 80070c8:	4628      	mov	r0, r5
 80070ca:	f7ff f88d 	bl	80061e8 <_free_r>
 80070ce:	2300      	movs	r3, #0
 80070d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	2300      	movs	r3, #0
 80070dc:	6063      	str	r3, [r4, #4]
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f043 0308 	orr.w	r3, r3, #8
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	b94b      	cbnz	r3, 8007102 <__swsetup_r+0x7a>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070f8:	d003      	beq.n	8007102 <__swsetup_r+0x7a>
 80070fa:	4621      	mov	r1, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 f8f9 	bl	80072f4 <__smakebuf_r>
 8007102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007106:	f013 0201 	ands.w	r2, r3, #1
 800710a:	d00a      	beq.n	8007122 <__swsetup_r+0x9a>
 800710c:	2200      	movs	r2, #0
 800710e:	60a2      	str	r2, [r4, #8]
 8007110:	6962      	ldr	r2, [r4, #20]
 8007112:	4252      	negs	r2, r2
 8007114:	61a2      	str	r2, [r4, #24]
 8007116:	6922      	ldr	r2, [r4, #16]
 8007118:	b942      	cbnz	r2, 800712c <__swsetup_r+0xa4>
 800711a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800711e:	d1c5      	bne.n	80070ac <__swsetup_r+0x24>
 8007120:	bd38      	pop	{r3, r4, r5, pc}
 8007122:	0799      	lsls	r1, r3, #30
 8007124:	bf58      	it	pl
 8007126:	6962      	ldrpl	r2, [r4, #20]
 8007128:	60a2      	str	r2, [r4, #8]
 800712a:	e7f4      	b.n	8007116 <__swsetup_r+0x8e>
 800712c:	2000      	movs	r0, #0
 800712e:	e7f7      	b.n	8007120 <__swsetup_r+0x98>
 8007130:	20000030 	.word	0x20000030

08007134 <memmove>:
 8007134:	4288      	cmp	r0, r1
 8007136:	b510      	push	{r4, lr}
 8007138:	eb01 0402 	add.w	r4, r1, r2
 800713c:	d902      	bls.n	8007144 <memmove+0x10>
 800713e:	4284      	cmp	r4, r0
 8007140:	4623      	mov	r3, r4
 8007142:	d807      	bhi.n	8007154 <memmove+0x20>
 8007144:	1e43      	subs	r3, r0, #1
 8007146:	42a1      	cmp	r1, r4
 8007148:	d008      	beq.n	800715c <memmove+0x28>
 800714a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800714e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007152:	e7f8      	b.n	8007146 <memmove+0x12>
 8007154:	4402      	add	r2, r0
 8007156:	4601      	mov	r1, r0
 8007158:	428a      	cmp	r2, r1
 800715a:	d100      	bne.n	800715e <memmove+0x2a>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007166:	e7f7      	b.n	8007158 <memmove+0x24>

08007168 <memcpy>:
 8007168:	440a      	add	r2, r1
 800716a:	4291      	cmp	r1, r2
 800716c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007170:	d100      	bne.n	8007174 <memcpy+0xc>
 8007172:	4770      	bx	lr
 8007174:	b510      	push	{r4, lr}
 8007176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800717e:	4291      	cmp	r1, r2
 8007180:	d1f9      	bne.n	8007176 <memcpy+0xe>
 8007182:	bd10      	pop	{r4, pc}

08007184 <__assert_func>:
 8007184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007186:	4614      	mov	r4, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4b09      	ldr	r3, [pc, #36]	@ (80071b0 <__assert_func+0x2c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4605      	mov	r5, r0
 8007190:	68d8      	ldr	r0, [r3, #12]
 8007192:	b954      	cbnz	r4, 80071aa <__assert_func+0x26>
 8007194:	4b07      	ldr	r3, [pc, #28]	@ (80071b4 <__assert_func+0x30>)
 8007196:	461c      	mov	r4, r3
 8007198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800719c:	9100      	str	r1, [sp, #0]
 800719e:	462b      	mov	r3, r5
 80071a0:	4905      	ldr	r1, [pc, #20]	@ (80071b8 <__assert_func+0x34>)
 80071a2:	f000 f86f 	bl	8007284 <fiprintf>
 80071a6:	f000 f903 	bl	80073b0 <abort>
 80071aa:	4b04      	ldr	r3, [pc, #16]	@ (80071bc <__assert_func+0x38>)
 80071ac:	e7f4      	b.n	8007198 <__assert_func+0x14>
 80071ae:	bf00      	nop
 80071b0:	20000030 	.word	0x20000030
 80071b4:	080077fe 	.word	0x080077fe
 80071b8:	080077d0 	.word	0x080077d0
 80071bc:	080077c3 	.word	0x080077c3

080071c0 <_calloc_r>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	fba1 5402 	umull	r5, r4, r1, r2
 80071c6:	b93c      	cbnz	r4, 80071d8 <_calloc_r+0x18>
 80071c8:	4629      	mov	r1, r5
 80071ca:	f7fd fb15 	bl	80047f8 <_malloc_r>
 80071ce:	4606      	mov	r6, r0
 80071d0:	b928      	cbnz	r0, 80071de <_calloc_r+0x1e>
 80071d2:	2600      	movs	r6, #0
 80071d4:	4630      	mov	r0, r6
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	220c      	movs	r2, #12
 80071da:	6002      	str	r2, [r0, #0]
 80071dc:	e7f9      	b.n	80071d2 <_calloc_r+0x12>
 80071de:	462a      	mov	r2, r5
 80071e0:	4621      	mov	r1, r4
 80071e2:	f7fe f924 	bl	800542e <memset>
 80071e6:	e7f5      	b.n	80071d4 <_calloc_r+0x14>

080071e8 <__ascii_mbtowc>:
 80071e8:	b082      	sub	sp, #8
 80071ea:	b901      	cbnz	r1, 80071ee <__ascii_mbtowc+0x6>
 80071ec:	a901      	add	r1, sp, #4
 80071ee:	b142      	cbz	r2, 8007202 <__ascii_mbtowc+0x1a>
 80071f0:	b14b      	cbz	r3, 8007206 <__ascii_mbtowc+0x1e>
 80071f2:	7813      	ldrb	r3, [r2, #0]
 80071f4:	600b      	str	r3, [r1, #0]
 80071f6:	7812      	ldrb	r2, [r2, #0]
 80071f8:	1e10      	subs	r0, r2, #0
 80071fa:	bf18      	it	ne
 80071fc:	2001      	movne	r0, #1
 80071fe:	b002      	add	sp, #8
 8007200:	4770      	bx	lr
 8007202:	4610      	mov	r0, r2
 8007204:	e7fb      	b.n	80071fe <__ascii_mbtowc+0x16>
 8007206:	f06f 0001 	mvn.w	r0, #1
 800720a:	e7f8      	b.n	80071fe <__ascii_mbtowc+0x16>

0800720c <_realloc_r>:
 800720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007210:	4680      	mov	r8, r0
 8007212:	4615      	mov	r5, r2
 8007214:	460c      	mov	r4, r1
 8007216:	b921      	cbnz	r1, 8007222 <_realloc_r+0x16>
 8007218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	4611      	mov	r1, r2
 800721e:	f7fd baeb 	b.w	80047f8 <_malloc_r>
 8007222:	b92a      	cbnz	r2, 8007230 <_realloc_r+0x24>
 8007224:	f7fe ffe0 	bl	80061e8 <_free_r>
 8007228:	2400      	movs	r4, #0
 800722a:	4620      	mov	r0, r4
 800722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007230:	f000 f8c5 	bl	80073be <_malloc_usable_size_r>
 8007234:	4285      	cmp	r5, r0
 8007236:	4606      	mov	r6, r0
 8007238:	d802      	bhi.n	8007240 <_realloc_r+0x34>
 800723a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800723e:	d8f4      	bhi.n	800722a <_realloc_r+0x1e>
 8007240:	4629      	mov	r1, r5
 8007242:	4640      	mov	r0, r8
 8007244:	f7fd fad8 	bl	80047f8 <_malloc_r>
 8007248:	4607      	mov	r7, r0
 800724a:	2800      	cmp	r0, #0
 800724c:	d0ec      	beq.n	8007228 <_realloc_r+0x1c>
 800724e:	42b5      	cmp	r5, r6
 8007250:	462a      	mov	r2, r5
 8007252:	4621      	mov	r1, r4
 8007254:	bf28      	it	cs
 8007256:	4632      	movcs	r2, r6
 8007258:	f7ff ff86 	bl	8007168 <memcpy>
 800725c:	4621      	mov	r1, r4
 800725e:	4640      	mov	r0, r8
 8007260:	f7fe ffc2 	bl	80061e8 <_free_r>
 8007264:	463c      	mov	r4, r7
 8007266:	e7e0      	b.n	800722a <_realloc_r+0x1e>

08007268 <__ascii_wctomb>:
 8007268:	4603      	mov	r3, r0
 800726a:	4608      	mov	r0, r1
 800726c:	b141      	cbz	r1, 8007280 <__ascii_wctomb+0x18>
 800726e:	2aff      	cmp	r2, #255	@ 0xff
 8007270:	d904      	bls.n	800727c <__ascii_wctomb+0x14>
 8007272:	228a      	movs	r2, #138	@ 0x8a
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	f04f 30ff 	mov.w	r0, #4294967295
 800727a:	4770      	bx	lr
 800727c:	700a      	strb	r2, [r1, #0]
 800727e:	2001      	movs	r0, #1
 8007280:	4770      	bx	lr
	...

08007284 <fiprintf>:
 8007284:	b40e      	push	{r1, r2, r3}
 8007286:	b503      	push	{r0, r1, lr}
 8007288:	4601      	mov	r1, r0
 800728a:	ab03      	add	r3, sp, #12
 800728c:	4805      	ldr	r0, [pc, #20]	@ (80072a4 <fiprintf+0x20>)
 800728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007292:	6800      	ldr	r0, [r0, #0]
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	f7ff fcf5 	bl	8006c84 <_vfiprintf_r>
 800729a:	b002      	add	sp, #8
 800729c:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a0:	b003      	add	sp, #12
 80072a2:	4770      	bx	lr
 80072a4:	20000030 	.word	0x20000030

080072a8 <__swhatbuf_r>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	460c      	mov	r4, r1
 80072ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b0:	2900      	cmp	r1, #0
 80072b2:	b096      	sub	sp, #88	@ 0x58
 80072b4:	4615      	mov	r5, r2
 80072b6:	461e      	mov	r6, r3
 80072b8:	da0d      	bge.n	80072d6 <__swhatbuf_r+0x2e>
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072c0:	f04f 0100 	mov.w	r1, #0
 80072c4:	bf14      	ite	ne
 80072c6:	2340      	movne	r3, #64	@ 0x40
 80072c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072cc:	2000      	movs	r0, #0
 80072ce:	6031      	str	r1, [r6, #0]
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	b016      	add	sp, #88	@ 0x58
 80072d4:	bd70      	pop	{r4, r5, r6, pc}
 80072d6:	466a      	mov	r2, sp
 80072d8:	f000 f848 	bl	800736c <_fstat_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	dbec      	blt.n	80072ba <__swhatbuf_r+0x12>
 80072e0:	9901      	ldr	r1, [sp, #4]
 80072e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072ea:	4259      	negs	r1, r3
 80072ec:	4159      	adcs	r1, r3
 80072ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072f2:	e7eb      	b.n	80072cc <__swhatbuf_r+0x24>

080072f4 <__smakebuf_r>:
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072f8:	079d      	lsls	r5, r3, #30
 80072fa:	4606      	mov	r6, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	d507      	bpl.n	8007310 <__smakebuf_r+0x1c>
 8007300:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	6123      	str	r3, [r4, #16]
 8007308:	2301      	movs	r3, #1
 800730a:	6163      	str	r3, [r4, #20]
 800730c:	b003      	add	sp, #12
 800730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007310:	ab01      	add	r3, sp, #4
 8007312:	466a      	mov	r2, sp
 8007314:	f7ff ffc8 	bl	80072a8 <__swhatbuf_r>
 8007318:	9f00      	ldr	r7, [sp, #0]
 800731a:	4605      	mov	r5, r0
 800731c:	4639      	mov	r1, r7
 800731e:	4630      	mov	r0, r6
 8007320:	f7fd fa6a 	bl	80047f8 <_malloc_r>
 8007324:	b948      	cbnz	r0, 800733a <__smakebuf_r+0x46>
 8007326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732a:	059a      	lsls	r2, r3, #22
 800732c:	d4ee      	bmi.n	800730c <__smakebuf_r+0x18>
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	f043 0302 	orr.w	r3, r3, #2
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	e7e2      	b.n	8007300 <__smakebuf_r+0xc>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	6020      	str	r0, [r4, #0]
 800733e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800734a:	b15b      	cbz	r3, 8007364 <__smakebuf_r+0x70>
 800734c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007350:	4630      	mov	r0, r6
 8007352:	f000 f81d 	bl	8007390 <_isatty_r>
 8007356:	b128      	cbz	r0, 8007364 <__smakebuf_r+0x70>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	f023 0303 	bic.w	r3, r3, #3
 800735e:	f043 0301 	orr.w	r3, r3, #1
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	431d      	orrs	r5, r3
 8007368:	81a5      	strh	r5, [r4, #12]
 800736a:	e7cf      	b.n	800730c <__smakebuf_r+0x18>

0800736c <_fstat_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	@ (800738c <_fstat_r+0x20>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	4611      	mov	r1, r2
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	f7fa fc7f 	bl	8001c7c <_fstat>
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d102      	bne.n	8007388 <_fstat_r+0x1c>
 8007382:	682b      	ldr	r3, [r5, #0]
 8007384:	b103      	cbz	r3, 8007388 <_fstat_r+0x1c>
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	bd38      	pop	{r3, r4, r5, pc}
 800738a:	bf00      	nop
 800738c:	2000051c 	.word	0x2000051c

08007390 <_isatty_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d06      	ldr	r5, [pc, #24]	@ (80073ac <_isatty_r+0x1c>)
 8007394:	2300      	movs	r3, #0
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7fa fc7e 	bl	8001c9c <_isatty>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_isatty_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_isatty_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	2000051c 	.word	0x2000051c

080073b0 <abort>:
 80073b0:	b508      	push	{r3, lr}
 80073b2:	2006      	movs	r0, #6
 80073b4:	f000 f834 	bl	8007420 <raise>
 80073b8:	2001      	movs	r0, #1
 80073ba:	f7fa fc0f 	bl	8001bdc <_exit>

080073be <_malloc_usable_size_r>:
 80073be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c2:	1f18      	subs	r0, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	bfbc      	itt	lt
 80073c8:	580b      	ldrlt	r3, [r1, r0]
 80073ca:	18c0      	addlt	r0, r0, r3
 80073cc:	4770      	bx	lr

080073ce <_raise_r>:
 80073ce:	291f      	cmp	r1, #31
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4605      	mov	r5, r0
 80073d4:	460c      	mov	r4, r1
 80073d6:	d904      	bls.n	80073e2 <_raise_r+0x14>
 80073d8:	2316      	movs	r3, #22
 80073da:	6003      	str	r3, [r0, #0]
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	bd38      	pop	{r3, r4, r5, pc}
 80073e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073e4:	b112      	cbz	r2, 80073ec <_raise_r+0x1e>
 80073e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073ea:	b94b      	cbnz	r3, 8007400 <_raise_r+0x32>
 80073ec:	4628      	mov	r0, r5
 80073ee:	f000 f831 	bl	8007454 <_getpid_r>
 80073f2:	4622      	mov	r2, r4
 80073f4:	4601      	mov	r1, r0
 80073f6:	4628      	mov	r0, r5
 80073f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073fc:	f000 b818 	b.w	8007430 <_kill_r>
 8007400:	2b01      	cmp	r3, #1
 8007402:	d00a      	beq.n	800741a <_raise_r+0x4c>
 8007404:	1c59      	adds	r1, r3, #1
 8007406:	d103      	bne.n	8007410 <_raise_r+0x42>
 8007408:	2316      	movs	r3, #22
 800740a:	6003      	str	r3, [r0, #0]
 800740c:	2001      	movs	r0, #1
 800740e:	e7e7      	b.n	80073e0 <_raise_r+0x12>
 8007410:	2100      	movs	r1, #0
 8007412:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007416:	4620      	mov	r0, r4
 8007418:	4798      	blx	r3
 800741a:	2000      	movs	r0, #0
 800741c:	e7e0      	b.n	80073e0 <_raise_r+0x12>
	...

08007420 <raise>:
 8007420:	4b02      	ldr	r3, [pc, #8]	@ (800742c <raise+0xc>)
 8007422:	4601      	mov	r1, r0
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	f7ff bfd2 	b.w	80073ce <_raise_r>
 800742a:	bf00      	nop
 800742c:	20000030 	.word	0x20000030

08007430 <_kill_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d07      	ldr	r5, [pc, #28]	@ (8007450 <_kill_r+0x20>)
 8007434:	2300      	movs	r3, #0
 8007436:	4604      	mov	r4, r0
 8007438:	4608      	mov	r0, r1
 800743a:	4611      	mov	r1, r2
 800743c:	602b      	str	r3, [r5, #0]
 800743e:	f7fa fbbd 	bl	8001bbc <_kill>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	d102      	bne.n	800744c <_kill_r+0x1c>
 8007446:	682b      	ldr	r3, [r5, #0]
 8007448:	b103      	cbz	r3, 800744c <_kill_r+0x1c>
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	bd38      	pop	{r3, r4, r5, pc}
 800744e:	bf00      	nop
 8007450:	2000051c 	.word	0x2000051c

08007454 <_getpid_r>:
 8007454:	f7fa bbaa 	b.w	8001bac <_getpid>

08007458 <_init>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr

08007464 <_fini>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	bf00      	nop
 8007468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746a:	bc08      	pop	{r3}
 800746c:	469e      	mov	lr, r3
 800746e:	4770      	bx	lr
