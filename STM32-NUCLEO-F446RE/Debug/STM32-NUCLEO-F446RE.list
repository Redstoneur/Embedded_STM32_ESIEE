
STM32-NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007320  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080074f0  080074f0  000084f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007978  08007978  000091e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007980  08007980  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007980  08007980  00008980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007984  08007984  00008984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08007988  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001e4  08007b6c  000091e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08007b6c  0000951c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df2e  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206f  00000000  00000000  00017142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000191b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8d  00000000  00000000  00019f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bc8  00000000  00000000  0001a9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001034f  00000000  00000000  0003d58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2cfa  00000000  00000000  0004d8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001205d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004abc  00000000  00000000  0012061c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001250d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080074d8 	.word	0x080074d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080074d8 	.word	0x080074d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay (uint16_t delay)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <microDelay+0x30>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000f8a:	bf00      	nop
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <microDelay+0x30>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f9      	bcc.n	8000f8c <microDelay+0x14>
	  //printf("%d ticks \n",__HAL_TIM_GET_COUNTER(&htim1));
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000200 	.word	0x20000200

08000fac <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482d      	ldr	r0, [pc, #180]	@ (8001090 <DHT11_Start+0xe4>)
 8000fdc:	f001 f8c0 	bl	8002160 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe6:	482a      	ldr	r0, [pc, #168]	@ (8001090 <DHT11_Start+0xe4>)
 8000fe8:	f001 fa66 	bl	80024b8 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000fec:	2014      	movs	r0, #20
 8000fee:	f000 feef 	bl	8001dd0 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ff8:	4825      	ldr	r0, [pc, #148]	@ (8001090 <DHT11_Start+0xe4>)
 8000ffa:	f001 fa5d 	bl	80024b8 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000ffe:	201e      	movs	r0, #30
 8001000:	f7ff ffba 	bl	8000f78 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	481f      	ldr	r0, [pc, #124]	@ (8001090 <DHT11_Start+0xe4>)
 8001012:	f001 f8a5 	bl	8002160 <HAL_GPIO_Init>
  microDelay (40);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f7ff ffae 	bl	8000f78 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800101c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001020:	481b      	ldr	r0, [pc, #108]	@ (8001090 <DHT11_Start+0xe4>)
 8001022:	f001 fa31 	bl	8002488 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10c      	bne.n	8001046 <DHT11_Start+0x9a>
  {
    microDelay (80);
 800102c:	2050      	movs	r0, #80	@ 0x50
 800102e:	f7ff ffa3 	bl	8000f78 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001036:	4816      	ldr	r0, [pc, #88]	@ (8001090 <DHT11_Start+0xe4>)
 8001038:	f001 fa26 	bl	8002488 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <DHT11_Start+0x9a>
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001046:	f000 feb7 	bl	8001db8 <HAL_GetTick>
 800104a:	4603      	mov	r3, r0
 800104c:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <DHT11_Start+0xe8>)
 800104e:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001050:	f000 feb2 	bl	8001db8 <HAL_GetTick>
 8001054:	4603      	mov	r3, r0
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <DHT11_Start+0xec>)
 8001058:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800105a:	e004      	b.n	8001066 <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 800105c:	f000 feac 	bl	8001db8 <HAL_GetTick>
 8001060:	4603      	mov	r3, r0
 8001062:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <DHT11_Start+0xec>)
 8001064:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	4809      	ldr	r0, [pc, #36]	@ (8001090 <DHT11_Start+0xe4>)
 800106c:	f001 fa0c 	bl	8002488 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <DHT11_Start+0xd8>
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <DHT11_Start+0xe8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1c9a      	adds	r2, r3, #2
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <DHT11_Start+0xec>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8eb      	bhi.n	800105c <DHT11_Start+0xb0>
  }
  return Response;
 8001084:	7dfb      	ldrb	r3, [r7, #23]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020800 	.word	0x40020800
 8001094:	200002e0 	.word	0x200002e0
 8001098:	200002e4 	.word	0x200002e4

0800109c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	e066      	b.n	8001176 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 80010a8:	f000 fe86 	bl	8001db8 <HAL_GetTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a36      	ldr	r2, [pc, #216]	@ (8001188 <DHT11_Read+0xec>)
 80010b0:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010b2:	f000 fe81 	bl	8001db8 <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a34      	ldr	r2, [pc, #208]	@ (800118c <DHT11_Read+0xf0>)
 80010ba:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010bc:	e004      	b.n	80010c8 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80010be:	f000 fe7b 	bl	8001db8 <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a31      	ldr	r2, [pc, #196]	@ (800118c <DHT11_Read+0xf0>)
 80010c6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010cc:	4830      	ldr	r0, [pc, #192]	@ (8001190 <DHT11_Read+0xf4>)
 80010ce:	f001 f9db 	bl	8002488 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <DHT11_Read+0x4a>
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <DHT11_Read+0xec>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	1c9a      	adds	r2, r3, #2
 80010de:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <DHT11_Read+0xf0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d8eb      	bhi.n	80010be <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80010e6:	2028      	movs	r0, #40	@ 0x28
 80010e8:	f7ff ff46 	bl	8000f78 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80010ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f0:	4827      	ldr	r0, [pc, #156]	@ (8001190 <DHT11_Read+0xf4>)
 80010f2:	f001 f9c9 	bl	8002488 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10e      	bne.n	800111a <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2201      	movs	r2, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	b25b      	sxtb	r3, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	b25a      	sxtb	r2, r3
 800110e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001112:	4013      	ands	r3, r2
 8001114:	b25b      	sxtb	r3, r3
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	e00b      	b.n	8001132 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f1c3 0307 	rsb	r3, r3, #7
 8001120:	2201      	movs	r2, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	b25a      	sxtb	r2, r3
 8001128:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800112c:	4313      	orrs	r3, r2
 800112e:	b25b      	sxtb	r3, r3
 8001130:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001132:	f000 fe41 	bl	8001db8 <HAL_GetTick>
 8001136:	4603      	mov	r3, r0
 8001138:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <DHT11_Read+0xec>)
 800113a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800113c:	f000 fe3c 	bl	8001db8 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <DHT11_Read+0xf0>)
 8001144:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001146:	e004      	b.n	8001152 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001148:	f000 fe36 	bl	8001db8 <HAL_GetTick>
 800114c:	4603      	mov	r3, r0
 800114e:	4a0f      	ldr	r2, [pc, #60]	@ (800118c <DHT11_Read+0xf0>)
 8001150:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001152:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001156:	480e      	ldr	r0, [pc, #56]	@ (8001190 <DHT11_Read+0xf4>)
 8001158:	f001 f996 	bl	8002488 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <DHT11_Read+0xd4>
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <DHT11_Read+0xec>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1c9a      	adds	r2, r3, #2
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <DHT11_Read+0xf0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8eb      	bhi.n	8001148 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	3301      	adds	r3, #1
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b07      	cmp	r3, #7
 800117a:	d995      	bls.n	80010a8 <DHT11_Read+0xc>
    }
  }
  return b;
 800117c:	79bb      	ldrb	r3, [r7, #6]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200002e0 	.word	0x200002e0
 800118c:	200002e4 	.word	0x200002e4
 8001190:	40020800 	.word	0x40020800

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	ed2d 8b02 	vpush	{d8}
 800119a:	b091      	sub	sp, #68	@ 0x44
 800119c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f000 fda5 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f9ab 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f000 fab9 	bl	800171c <MX_GPIO_Init>
  MX_UART4_Init();
 80011aa:	f000 fa63 	bl	8001674 <MX_UART4_Init>
  MX_TIM1_Init();
 80011ae:	f000 fa11 	bl	80015d4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80011b2:	f000 fa89 	bl	80016c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80011b6:	48af      	ldr	r0, [pc, #700]	@ (8001474 <main+0x2e0>)
 80011b8:	f001 ff4a 	bl	8003050 <HAL_TIM_Base_Start>
  HAL_UART_Transmit(&huart2, "Start\n", 28, 1000u);
 80011bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c0:	221c      	movs	r2, #28
 80011c2:	49ad      	ldr	r1, [pc, #692]	@ (8001478 <main+0x2e4>)
 80011c4:	48ad      	ldr	r0, [pc, #692]	@ (800147c <main+0x2e8>)
 80011c6:	f002 fa85 	bl	80036d4 <HAL_UART_Transmit>

  UART_SendString("[DEBUG] STM32 USART6 Initialized!\n");
 80011ca:	48ad      	ldr	r0, [pc, #692]	@ (8001480 <main+0x2ec>)
 80011cc:	f000 fb22 	bl	8001814 <UART_SendString>
  HAL_UART_Receive_IT(&huart4, (uint8_t *) rx_buffer, sizeof(rx_buffer));
 80011d0:	2201      	movs	r2, #1
 80011d2:	49ac      	ldr	r1, [pc, #688]	@ (8001484 <main+0x2f0>)
 80011d4:	48ac      	ldr	r0, [pc, #688]	@ (8001488 <main+0x2f4>)
 80011d6:	f002 fb9f 	bl	8003918 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (DHT11_Start()) {
 80011da:	f7ff fee7 	bl	8000fac <DHT11_Start>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80e1 	beq.w	80013a8 <main+0x214>
          RHI = DHT11_Read(); // Relative humidity integral
 80011e6:	f7ff ff59 	bl	800109c <DHT11_Read>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4ba7      	ldr	r3, [pc, #668]	@ (800148c <main+0x2f8>)
 80011f0:	701a      	strb	r2, [r3, #0]
          RHD = DHT11_Read(); // Relative humidity decimal
 80011f2:	f7ff ff53 	bl	800109c <DHT11_Read>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4ba5      	ldr	r3, [pc, #660]	@ (8001490 <main+0x2fc>)
 80011fc:	701a      	strb	r2, [r3, #0]
          TCI = DHT11_Read(); // Celsius integral
 80011fe:	f7ff ff4d 	bl	800109c <DHT11_Read>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4ba3      	ldr	r3, [pc, #652]	@ (8001494 <main+0x300>)
 8001208:	701a      	strb	r2, [r3, #0]
          TCD = DHT11_Read(); // Celsius decimal
 800120a:	f7ff ff47 	bl	800109c <DHT11_Read>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4ba1      	ldr	r3, [pc, #644]	@ (8001498 <main+0x304>)
 8001214:	701a      	strb	r2, [r3, #0]
          SUM = DHT11_Read(); // Check sum
 8001216:	f7ff ff41 	bl	800109c <DHT11_Read>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b9f      	ldr	r3, [pc, #636]	@ (800149c <main+0x308>)
 8001220:	701a      	strb	r2, [r3, #0]
          if (RHI + RHD + TCI + TCD == SUM) {
 8001222:	4b9a      	ldr	r3, [pc, #616]	@ (800148c <main+0x2f8>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b99      	ldr	r3, [pc, #612]	@ (8001490 <main+0x2fc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4413      	add	r3, r2
 800122e:	4a99      	ldr	r2, [pc, #612]	@ (8001494 <main+0x300>)
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a98      	ldr	r2, [pc, #608]	@ (8001498 <main+0x304>)
 8001236:	7812      	ldrb	r2, [r2, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a98      	ldr	r2, [pc, #608]	@ (800149c <main+0x308>)
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	4293      	cmp	r3, r2
 8001240:	f040 80b2 	bne.w	80013a8 <main+0x214>
              // Can use RHI and TCI for any purposes if whole number only needed
              tCelsius = (float) TCI + (float) (TCD / 10.0);
 8001244:	4b93      	ldr	r3, [pc, #588]	@ (8001494 <main+0x300>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001250:	4b91      	ldr	r3, [pc, #580]	@ (8001498 <main+0x304>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f985 	bl	8000564 <__aeabi_i2d>
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b90      	ldr	r3, [pc, #576]	@ (80014a0 <main+0x30c>)
 8001260:	f7ff fb14 	bl	800088c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fcbc 	bl	8000be8 <__aeabi_d2f>
 8001270:	ee07 0a90 	vmov	s15, r0
 8001274:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001278:	4b8a      	ldr	r3, [pc, #552]	@ (80014a4 <main+0x310>)
 800127a:	edc3 7a00 	vstr	s15, [r3]
              tFahrenheit = tCelsius * 9 / 5 + 32;
 800127e:	4b89      	ldr	r3, [pc, #548]	@ (80014a4 <main+0x310>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001288:	ee27 7a87 	vmul.f32	s14, s15, s14
 800128c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80014a8 <main+0x314>
 8001298:	ee77 7a87 	vadd.f32	s15, s15, s14
 800129c:	4b83      	ldr	r3, [pc, #524]	@ (80014ac <main+0x318>)
 800129e:	edc3 7a00 	vstr	s15, [r3]
              RH = (float) RHI + (float) (RHD / 10.0);
 80012a2:	4b7a      	ldr	r3, [pc, #488]	@ (800148c <main+0x2f8>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80012ae:	4b78      	ldr	r3, [pc, #480]	@ (8001490 <main+0x2fc>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f956 	bl	8000564 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b78      	ldr	r3, [pc, #480]	@ (80014a0 <main+0x30c>)
 80012be:	f7ff fae5 	bl	800088c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc8d 	bl	8000be8 <__aeabi_d2f>
 80012ce:	ee07 0a90 	vmov	s15, r0
 80012d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012d6:	4b76      	ldr	r3, [pc, #472]	@ (80014b0 <main+0x31c>)
 80012d8:	edc3 7a00 	vstr	s15, [r3]
              // Can use tCelsius, tFahrenheit and RH for any purposes
              TFI = tFahrenheit;  // Fahrenheit integral
 80012dc:	4b73      	ldr	r3, [pc, #460]	@ (80014ac <main+0x318>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	edc7 7a03 	vstr	s15, [r7, #12]
 80012ea:	7b3b      	ldrb	r3, [r7, #12]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b71      	ldr	r3, [pc, #452]	@ (80014b4 <main+0x320>)
 80012f0:	701a      	strb	r2, [r3, #0]
              TFD = tFahrenheit * 10 - TFI * 10; // Fahrenheit decimal
 80012f2:	4b6e      	ldr	r3, [pc, #440]	@ (80014ac <main+0x318>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001300:	4b6c      	ldr	r3, [pc, #432]	@ (80014b4 <main+0x320>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001322:	7b3b      	ldrb	r3, [r7, #12]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b64      	ldr	r3, [pc, #400]	@ (80014b8 <main+0x324>)
 8001328:	701a      	strb	r2, [r3, #0]
              printf("%d.%d C   ", TCI, TCD);
 800132a:	4b5a      	ldr	r3, [pc, #360]	@ (8001494 <main+0x300>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4b59      	ldr	r3, [pc, #356]	@ (8001498 <main+0x304>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4861      	ldr	r0, [pc, #388]	@ (80014bc <main+0x328>)
 8001338:	f004 f844 	bl	80053c4 <iprintf>
              printf("%d.%d F   ", TFI, TFD);
 800133c:	4b5d      	ldr	r3, [pc, #372]	@ (80014b4 <main+0x320>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	4b5d      	ldr	r3, [pc, #372]	@ (80014b8 <main+0x324>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	485d      	ldr	r0, [pc, #372]	@ (80014c0 <main+0x32c>)
 800134a:	f004 f83b 	bl	80053c4 <iprintf>
              char *buf = (char *) malloc(sizeof(char) * 100);
 800134e:	2064      	movs	r0, #100	@ 0x64
 8001350:	f003 fa68 	bl	8004824 <malloc>
 8001354:	4603      	mov	r3, r0
 8001356:	617b      	str	r3, [r7, #20]
              sprintf(buf, "%d.%d C\n", TCI, TCD);
 8001358:	4b4e      	ldr	r3, [pc, #312]	@ (8001494 <main+0x300>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b4e      	ldr	r3, [pc, #312]	@ (8001498 <main+0x304>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4958      	ldr	r1, [pc, #352]	@ (80014c4 <main+0x330>)
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f004 f83f 	bl	80053e8 <siprintf>
              HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000u);
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7fe ffa0 	bl	80002b0 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001378:	6979      	ldr	r1, [r7, #20]
 800137a:	4840      	ldr	r0, [pc, #256]	@ (800147c <main+0x2e8>)
 800137c:	f002 f9aa 	bl	80036d4 <HAL_UART_Transmit>
              sprintf(buf, "%d.%d %%\n", RHI, RHD);
 8001380:	4b42      	ldr	r3, [pc, #264]	@ (800148c <main+0x2f8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b42      	ldr	r3, [pc, #264]	@ (8001490 <main+0x2fc>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	494f      	ldr	r1, [pc, #316]	@ (80014c8 <main+0x334>)
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f004 f82b 	bl	80053e8 <siprintf>
              HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000u);
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7fe ff8c 	bl	80002b0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a0:	6979      	ldr	r1, [r7, #20]
 80013a2:	4836      	ldr	r0, [pc, #216]	@ (800147c <main+0x2e8>)
 80013a4:	f002 f996 	bl	80036d4 <HAL_UART_Transmit>
              } else { UART_SendString("[DEBUG] Commande inconnue\n"); }
              memset(buffer, 0, sizeof(buffer));
          }
      }*/

      sprintf(
 80013a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001494 <main+0x300>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	469c      	mov	ip, r3
 80013ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001498 <main+0x304>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	469e      	mov	lr, r3
 80013b4:	4b35      	ldr	r3, [pc, #212]	@ (800148c <main+0x2f8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <main+0x2fc>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	4b42      	ldr	r3, [pc, #264]	@ (80014cc <main+0x338>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4a42      	ldr	r2, [pc, #264]	@ (80014d0 <main+0x33c>)
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4942      	ldr	r1, [pc, #264]	@ (80014d4 <main+0x340>)
 80013cc:	6809      	ldr	r1, [r1, #0]
              uart_buf,
              "{\"Temperature\":%d.%d,\"Humidity\":%d.%d,\"RGB\":{\"red\":%d,\"green\":%d,\"blue\":%d,\"state\":%s},\"Led\":%s,\"Buzzer\":%s,\"Button\":%s,\"TemperatureThreshold\":%d}\n",
              TCI, TCD, // Temperature
              RHI, RHD, // Humidity
              rgbr, rgbg, rgbb, // RGB color
              rgb ? "true" : "false", // RGB state
 80013ce:	4842      	ldr	r0, [pc, #264]	@ (80014d8 <main+0x344>)
 80013d0:	7800      	ldrb	r0, [r0, #0]
      sprintf(
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d001      	beq.n	80013da <main+0x246>
 80013d6:	4841      	ldr	r0, [pc, #260]	@ (80014dc <main+0x348>)
 80013d8:	e000      	b.n	80013dc <main+0x248>
 80013da:	4841      	ldr	r0, [pc, #260]	@ (80014e0 <main+0x34c>)
              led ? "true" : "false", // Led state
 80013dc:	4c41      	ldr	r4, [pc, #260]	@ (80014e4 <main+0x350>)
 80013de:	7824      	ldrb	r4, [r4, #0]
      sprintf(
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	d001      	beq.n	80013e8 <main+0x254>
 80013e4:	4c3d      	ldr	r4, [pc, #244]	@ (80014dc <main+0x348>)
 80013e6:	e000      	b.n	80013ea <main+0x256>
 80013e8:	4c3d      	ldr	r4, [pc, #244]	@ (80014e0 <main+0x34c>)
              buz ? "true" : "false", // Buzzer state
 80013ea:	4d3f      	ldr	r5, [pc, #252]	@ (80014e8 <main+0x354>)
 80013ec:	782d      	ldrb	r5, [r5, #0]
      sprintf(
 80013ee:	2d00      	cmp	r5, #0
 80013f0:	d001      	beq.n	80013f6 <main+0x262>
 80013f2:	4d3a      	ldr	r5, [pc, #232]	@ (80014dc <main+0x348>)
 80013f4:	e000      	b.n	80013f8 <main+0x264>
 80013f6:	4d3a      	ldr	r5, [pc, #232]	@ (80014e0 <main+0x34c>)
              but ? "true" : "false", // Button state
 80013f8:	4e3c      	ldr	r6, [pc, #240]	@ (80014ec <main+0x358>)
 80013fa:	7836      	ldrb	r6, [r6, #0]
      sprintf(
 80013fc:	2e00      	cmp	r6, #0
 80013fe:	d001      	beq.n	8001404 <main+0x270>
 8001400:	4e36      	ldr	r6, [pc, #216]	@ (80014dc <main+0x348>)
 8001402:	e000      	b.n	8001406 <main+0x272>
 8001404:	4e36      	ldr	r6, [pc, #216]	@ (80014e0 <main+0x34c>)
 8001406:	4b3a      	ldr	r3, [pc, #232]	@ (80014f0 <main+0x35c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	9309      	str	r3, [sp, #36]	@ 0x24
 800140c:	9608      	str	r6, [sp, #32]
 800140e:	9507      	str	r5, [sp, #28]
 8001410:	9406      	str	r4, [sp, #24]
 8001412:	9005      	str	r0, [sp, #20]
 8001414:	9104      	str	r1, [sp, #16]
 8001416:	9203      	str	r2, [sp, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4673      	mov	r3, lr
 8001426:	4662      	mov	r2, ip
 8001428:	4932      	ldr	r1, [pc, #200]	@ (80014f4 <main+0x360>)
 800142a:	4833      	ldr	r0, [pc, #204]	@ (80014f8 <main+0x364>)
 800142c:	f003 ffdc 	bl	80053e8 <siprintf>
              temp_threshold // Temperature threshold
      );
      UART_SendString(uart_buf);
 8001430:	4831      	ldr	r0, [pc, #196]	@ (80014f8 <main+0x364>)
 8001432:	f000 f9ef 	bl	8001814 <UART_SendString>

      HAL_Delay(2000);
 8001436:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800143a:	f000 fcc9 	bl	8001dd0 <HAL_Delay>

      if (HAL_UART_Receive(&huart4, (uint8_t *) rx_buffer, 1, 100) == HAL_OK) {
 800143e:	2364      	movs	r3, #100	@ 0x64
 8001440:	2201      	movs	r2, #1
 8001442:	4910      	ldr	r1, [pc, #64]	@ (8001484 <main+0x2f0>)
 8001444:	4810      	ldr	r0, [pc, #64]	@ (8001488 <main+0x2f4>)
 8001446:	f002 f9d0 	bl	80037ea <HAL_UART_Receive>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <main+0x2ca>
          HAL_UART_Transmit(&huart4, (uint8_t *) rx_buffer, 1, HAL_MAX_DELAY);
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	2201      	movs	r2, #1
 8001456:	490b      	ldr	r1, [pc, #44]	@ (8001484 <main+0x2f0>)
 8001458:	480b      	ldr	r0, [pc, #44]	@ (8001488 <main+0x2f4>)
 800145a:	f002 f93b 	bl	80036d4 <HAL_UART_Transmit>
      }

      Update_RGB_LED(rgbr, rgbg, rgbb, rgb);
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <main+0x338>)
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <main+0x33c>)
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <main+0x340>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <main+0x344>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f000 f9e7 	bl	8001840 <Update_RGB_LED>
      if (DHT11_Start()) {
 8001472:	e6b2      	b.n	80011da <main+0x46>
 8001474:	20000200 	.word	0x20000200
 8001478:	080074f0 	.word	0x080074f0
 800147c:	20000290 	.word	0x20000290
 8001480:	080074f8 	.word	0x080074f8
 8001484:	200002fc 	.word	0x200002fc
 8001488:	20000248 	.word	0x20000248
 800148c:	200002d8 	.word	0x200002d8
 8001490:	200002d9 	.word	0x200002d9
 8001494:	200002da 	.word	0x200002da
 8001498:	200002db 	.word	0x200002db
 800149c:	200002dc 	.word	0x200002dc
 80014a0:	40240000 	.word	0x40240000
 80014a4:	200002e8 	.word	0x200002e8
 80014a8:	42000000 	.word	0x42000000
 80014ac:	200002ec 	.word	0x200002ec
 80014b0:	200002f0 	.word	0x200002f0
 80014b4:	200002f4 	.word	0x200002f4
 80014b8:	200002f5 	.word	0x200002f5
 80014bc:	0800751c 	.word	0x0800751c
 80014c0:	08007528 	.word	0x08007528
 80014c4:	08007534 	.word	0x08007534
 80014c8:	08007540 	.word	0x08007540
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000004 	.word	0x20000004
 80014d4:	20000008 	.word	0x20000008
 80014d8:	200002f6 	.word	0x200002f6
 80014dc:	0800754c 	.word	0x0800754c
 80014e0:	08007554 	.word	0x08007554
 80014e4:	200002f7 	.word	0x200002f7
 80014e8:	200002f8 	.word	0x200002f8
 80014ec:	200002f9 	.word	0x200002f9
 80014f0:	2000000c 	.word	0x2000000c
 80014f4:	0800755c 	.word	0x0800755c
 80014f8:	20000300 	.word	0x20000300

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	@ 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2234      	movs	r2, #52	@ 0x34
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 ffcf 	bl	80054ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <SystemClock_Config+0xd0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a28      	ldr	r2, [pc, #160]	@ (80015cc <SystemClock_Config+0xd0>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001530:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <SystemClock_Config+0xd0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800153c:	2300      	movs	r3, #0
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <SystemClock_Config+0xd4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001548:	4a21      	ldr	r2, [pc, #132]	@ (80015d0 <SystemClock_Config+0xd4>)
 800154a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <SystemClock_Config+0xd4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	2302      	movs	r3, #2
 800155e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001564:	2310      	movs	r3, #16
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001568:	2302      	movs	r3, #2
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156c:	2300      	movs	r3, #0
 800156e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001570:	2308      	movs	r3, #8
 8001572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001574:	2348      	movs	r3, #72	@ 0x48
 8001576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001580:	2302      	movs	r3, #2
 8001582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fa73 	bl	8002a74 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001594:	f000 f99a 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	2102      	movs	r1, #2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 ff99 	bl	80024ec <HAL_RCC_ClockConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80015c0:	f000 f984 	bl	80018cc <Error_Handler>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3750      	adds	r7, #80	@ 0x50
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000

080015d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <MX_TIM1_Init+0x98>)
 80015f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001670 <MX_TIM1_Init+0x9c>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_TIM1_Init+0x98>)
 80015f8:	2247      	movs	r2, #71	@ 0x47
 80015fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <MX_TIM1_Init+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <MX_TIM1_Init+0x98>)
 8001604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001608:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <MX_TIM1_Init+0x98>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_TIM1_Init+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <MX_TIM1_Init+0x98>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800161c:	4813      	ldr	r0, [pc, #76]	@ (800166c <MX_TIM1_Init+0x98>)
 800161e:	f001 fcc7 	bl	8002fb0 <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001628:	f000 f950 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4619      	mov	r1, r3
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <MX_TIM1_Init+0x98>)
 800163a:	f001 fd71 	bl	8003120 <HAL_TIM_ConfigClockSource>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001644:	f000 f942 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_TIM1_Init+0x98>)
 8001656:	f001 ff71 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001660:	f000 f934 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000200 	.word	0x20000200
 8001670:	40010000 	.word	0x40010000

08001674 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_UART4_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <MX_UART4_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <MX_UART4_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_UART4_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_UART4_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_UART4_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_UART4_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <MX_UART4_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_UART4_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_UART4_Init+0x4c>)
 80016ac:	f001 ffc2 	bl	8003634 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80016b6:	f000 f909 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000248 	.word	0x20000248
 80016c4:	40004c00 	.word	0x40004c00

080016c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <MX_USART2_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 8001700:	f001 ff98 	bl	8003634 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f000 f8df 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000290 	.word	0x20000290
 8001718:	40004400 	.word	0x40004400

0800171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <MX_GPIO_Init+0xe8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a32      	ldr	r2, [pc, #200]	@ (8001804 <MX_GPIO_Init+0xe8>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b30      	ldr	r3, [pc, #192]	@ (8001804 <MX_GPIO_Init+0xe8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <MX_GPIO_Init+0xe8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a2b      	ldr	r2, [pc, #172]	@ (8001804 <MX_GPIO_Init+0xe8>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <MX_GPIO_Init+0xe8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b25      	ldr	r3, [pc, #148]	@ (8001804 <MX_GPIO_Init+0xe8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <MX_GPIO_Init+0xe8>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <MX_GPIO_Init+0xe8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGBBLUE_Pin|TEMP_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f241 4102 	movw	r1, #5122	@ 0x1402
 800178c:	481e      	ldr	r0, [pc, #120]	@ (8001808 <MX_GPIO_Init+0xec>)
 800178e:	f000 fe93 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGBRED_GPIO_Port, RGBRED_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2110      	movs	r1, #16
 8001796:	481d      	ldr	r0, [pc, #116]	@ (800180c <MX_GPIO_Init+0xf0>)
 8001798:	f000 fe8e 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGBGREEN_Pin|TEMP_SENSOR_Pin, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2121      	movs	r1, #33	@ 0x21
 80017a0:	481b      	ldr	r0, [pc, #108]	@ (8001810 <MX_GPIO_Init+0xf4>)
 80017a2:	f000 fe89 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGBBLUE_Pin TEMP_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = RGBBLUE_Pin|TEMP_Pin|BUZZER_Pin;
 80017a6:	f241 4302 	movw	r3, #5122	@ 0x1402
 80017aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	4812      	ldr	r0, [pc, #72]	@ (8001808 <MX_GPIO_Init+0xec>)
 80017c0:	f000 fcce 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGBRED_Pin */
  GPIO_InitStruct.Pin = RGBRED_Pin;
 80017c4:	2310      	movs	r3, #16
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RGBRED_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	480c      	ldr	r0, [pc, #48]	@ (800180c <MX_GPIO_Init+0xf0>)
 80017dc:	f000 fcc0 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGBGREEN_Pin TEMP_SENSOR_Pin */
  GPIO_InitStruct.Pin = RGBGREEN_Pin|TEMP_SENSOR_Pin;
 80017e0:	2321      	movs	r3, #33	@ 0x21
 80017e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	@ (8001810 <MX_GPIO_Init+0xf4>)
 80017f8:	f000 fcb2 	bl	8002160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40020800 	.word	0x40020800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400

08001814 <UART_SendString>:

/* USER CODE BEGIN 4 */

void UART_SendString(char *str) { HAL_UART_Transmit(&huart4, (uint8_t *) str, strlen(str), HAL_MAX_DELAY); }
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7fe fd47 	bl	80002b0 <strlen>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4803      	ldr	r0, [pc, #12]	@ (800183c <UART_SendString+0x28>)
 800182e:	f001 ff51 	bl	80036d4 <HAL_UART_Transmit>
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000248 	.word	0x20000248

08001840 <Update_RGB_LED>:
void Update_RGB_LED(int red, int green, int blue, bool state) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	70fb      	strb	r3, [r7, #3]
    if (state) {
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d021      	beq.n	8001898 <Update_RGB_LED+0x58>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, red > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	bfcc      	ite	gt
 800185a:	2301      	movgt	r3, #1
 800185c:	2300      	movle	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	2110      	movs	r1, #16
 8001864:	4816      	ldr	r0, [pc, #88]	@ (80018c0 <Update_RGB_LED+0x80>)
 8001866:	f000 fe27 	bl	80024b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, green > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	bfcc      	ite	gt
 8001870:	2301      	movgt	r3, #1
 8001872:	2300      	movle	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	2101      	movs	r1, #1
 800187a:	4812      	ldr	r0, [pc, #72]	@ (80018c4 <Update_RGB_LED+0x84>)
 800187c:	f000 fe1c 	bl	80024b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, blue > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	bfcc      	ite	gt
 8001886:	2301      	movgt	r3, #1
 8001888:	2300      	movle	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	2102      	movs	r1, #2
 8001890:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <Update_RGB_LED+0x88>)
 8001892:	f000 fe11 	bl	80024b8 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    }
}
 8001896:	e00e      	b.n	80018b6 <Update_RGB_LED+0x76>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2110      	movs	r1, #16
 800189c:	4808      	ldr	r0, [pc, #32]	@ (80018c0 <Update_RGB_LED+0x80>)
 800189e:	f000 fe0b 	bl	80024b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2101      	movs	r1, #1
 80018a6:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <Update_RGB_LED+0x84>)
 80018a8:	f000 fe06 	bl	80024b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2102      	movs	r1, #2
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <Update_RGB_LED+0x88>)
 80018b2:	f000 fe01 	bl	80024b8 <HAL_GPIO_WritePin>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020800 	.word	0x40020800

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <Error_Handler+0x8>

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001924 <HAL_MspInit+0x4c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	4a08      	ldr	r2, [pc, #32]	@ (8001924 <HAL_MspInit+0x4c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	@ 0x40
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_MspInit+0x4c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0b      	ldr	r2, [pc, #44]	@ (8001964 <HAL_TIM_Base_MspInit+0x3c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10d      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_TIM_Base_MspInit+0x40>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <HAL_TIM_Base_MspInit+0x40>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6453      	str	r3, [r2, #68]	@ 0x44
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <HAL_TIM_Base_MspInit+0x40>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40010000 	.word	0x40010000
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a36      	ldr	r2, [pc, #216]	@ (8001a64 <HAL_UART_MspInit+0xf8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d134      	bne.n	80019f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a34      	ldr	r2, [pc, #208]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 8001998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019c6:	2303      	movs	r3, #3
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019d6:	2308      	movs	r3, #8
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	4822      	ldr	r0, [pc, #136]	@ (8001a6c <HAL_UART_MspInit+0x100>)
 80019e2:	f000 fbbd 	bl	8002160 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2034      	movs	r0, #52	@ 0x34
 80019ec:	f000 faef 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019f0:	2034      	movs	r0, #52	@ 0x34
 80019f2:	f000 fb08 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f6:	e030      	b.n	8001a5a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12b      	bne.n	8001a5a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a10      	ldr	r2, [pc, #64]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <HAL_UART_MspInit+0xfc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a3a:	230c      	movs	r3, #12
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <HAL_UART_MspInit+0x100>)
 8001a56:	f000 fb83 	bl	8002160 <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	3730      	adds	r7, #48	@ 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40004c00 	.word	0x40004c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40004400 	.word	0x40004400

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <NMI_Handler+0x4>

08001a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f000 f961 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <UART4_IRQHandler+0x10>)
 8001ada:	f001 ff43 	bl	8003964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000248 	.word	0x20000248

08001ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_kill>:

int _kill(int pid, int sig)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b02:	f003 fd37 	bl	8005574 <__errno>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2216      	movs	r2, #22
 8001b0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_exit>:

void _exit (int status)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ffe7 	bl	8001af8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b2a:	bf00      	nop
 8001b2c:	e7fd      	b.n	8001b2a <_exit+0x12>

08001b2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e00a      	b.n	8001b56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b40:	f3af 8000 	nop.w
 8001b44:	4601      	mov	r1, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	60ba      	str	r2, [r7, #8]
 8001b4c:	b2ca      	uxtb	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	dbf0      	blt.n	8001b40 <_read+0x12>
  }

  return len;
 8001b5e:	687b      	ldr	r3, [r7, #4]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e009      	b.n	8001b8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	60ba      	str	r2, [r7, #8]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dbf1      	blt.n	8001b7a <_write+0x12>
  }
  return len;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_close>:

int _close(int file)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_isatty>:

int _isatty(int file)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f003 fc9c 	bl	8005574 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20020000 	.word	0x20020000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	200003c8 	.word	0x200003c8
 8001c70:	20000520 	.word	0x20000520

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c9c:	f7ff ffea 	bl	8001c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	@ (8001cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f003 fc5b 	bl	8005580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fa63 	bl	8001194 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001cdc:	08007988 	.word	0x08007988
  ldr r2, =_sbss
 8001ce0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ce4:	2000051c 	.word	0x2000051c

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f94f 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fdda 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f967 	bl	8002022 <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f92f 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	@ (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000010 	.word	0x20000010
 8001d88:	20000018 	.word	0x20000018
 8001d8c:	20000014 	.word	0x20000014

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000018 	.word	0x20000018
 8001db4:	200003cc 	.word	0x200003cc

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	200003cc 	.word	0x200003cc

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000018 	.word	0x20000018

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	@ (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	@ (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	@ (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	@ 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff8e 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff29 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff3e 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff8e 	bl	8001f0c <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5d 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff31 	bl	8001e7c <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa2 	bl	8001f74 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff feb6 	bl	8001db8 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d008      	beq.n	800206c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e052      	b.n	8002112 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0216 	bic.w	r2, r2, #22
 800207a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800208a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d103      	bne.n	800209c <HAL_DMA_Abort+0x62>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0208 	bic.w	r2, r2, #8
 80020aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020bc:	e013      	b.n	80020e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020be:	f7ff fe7b 	bl	8001db8 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d90c      	bls.n	80020e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2203      	movs	r2, #3
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e015      	b.n	8002112 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1e4      	bne.n	80020be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f8:	223f      	movs	r2, #63	@ 0x3f
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d004      	beq.n	8002138 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2280      	movs	r2, #128	@ 0x80
 8002132:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e00c      	b.n	8002152 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2205      	movs	r2, #5
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e165      	b.n	8002448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 8154 	bne.w	8002442 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d005      	beq.n	80021b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d130      	bne.n	8002214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0201 	and.w	r2, r3, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d017      	beq.n	8002250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d123      	bne.n	80022a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80ae 	beq.w	8002442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002460 <HAL_GPIO_Init+0x300>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002460 <HAL_GPIO_Init+0x300>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002460 <HAL_GPIO_Init+0x300>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002302:	4a58      	ldr	r2, [pc, #352]	@ (8002464 <HAL_GPIO_Init+0x304>)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4f      	ldr	r2, [pc, #316]	@ (8002468 <HAL_GPIO_Init+0x308>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d025      	beq.n	800237a <HAL_GPIO_Init+0x21a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4e      	ldr	r2, [pc, #312]	@ (800246c <HAL_GPIO_Init+0x30c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01f      	beq.n	8002376 <HAL_GPIO_Init+0x216>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4d      	ldr	r2, [pc, #308]	@ (8002470 <HAL_GPIO_Init+0x310>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d019      	beq.n	8002372 <HAL_GPIO_Init+0x212>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4c      	ldr	r2, [pc, #304]	@ (8002474 <HAL_GPIO_Init+0x314>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_GPIO_Init+0x20e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4b      	ldr	r2, [pc, #300]	@ (8002478 <HAL_GPIO_Init+0x318>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00d      	beq.n	800236a <HAL_GPIO_Init+0x20a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4a      	ldr	r2, [pc, #296]	@ (800247c <HAL_GPIO_Init+0x31c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d007      	beq.n	8002366 <HAL_GPIO_Init+0x206>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a49      	ldr	r2, [pc, #292]	@ (8002480 <HAL_GPIO_Init+0x320>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_GPIO_Init+0x202>
 800235e:	2306      	movs	r3, #6
 8002360:	e00c      	b.n	800237c <HAL_GPIO_Init+0x21c>
 8002362:	2307      	movs	r3, #7
 8002364:	e00a      	b.n	800237c <HAL_GPIO_Init+0x21c>
 8002366:	2305      	movs	r3, #5
 8002368:	e008      	b.n	800237c <HAL_GPIO_Init+0x21c>
 800236a:	2304      	movs	r3, #4
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x21c>
 800236e:	2303      	movs	r3, #3
 8002370:	e004      	b.n	800237c <HAL_GPIO_Init+0x21c>
 8002372:	2302      	movs	r3, #2
 8002374:	e002      	b.n	800237c <HAL_GPIO_Init+0x21c>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x21c>
 800237a:	2300      	movs	r3, #0
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f002 0203 	and.w	r2, r2, #3
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	4093      	lsls	r3, r2
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800238c:	4935      	ldr	r1, [pc, #212]	@ (8002464 <HAL_GPIO_Init+0x304>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239a:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <HAL_GPIO_Init+0x324>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023be:	4a31      	ldr	r2, [pc, #196]	@ (8002484 <HAL_GPIO_Init+0x324>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002484 <HAL_GPIO_Init+0x324>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e8:	4a26      	ldr	r2, [pc, #152]	@ (8002484 <HAL_GPIO_Init+0x324>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ee:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <HAL_GPIO_Init+0x324>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002412:	4a1c      	ldr	r2, [pc, #112]	@ (8002484 <HAL_GPIO_Init+0x324>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <HAL_GPIO_Init+0x324>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800243c:	4a11      	ldr	r2, [pc, #68]	@ (8002484 <HAL_GPIO_Init+0x324>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3301      	adds	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	f67f ae96 	bls.w	800217c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3724      	adds	r7, #36	@ 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40013800 	.word	0x40013800
 8002468:	40020000 	.word	0x40020000
 800246c:	40020400 	.word	0x40020400
 8002470:	40020800 	.word	0x40020800
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40021000 	.word	0x40021000
 800247c:	40021400 	.word	0x40021400
 8002480:	40021800 	.word	0x40021800
 8002484:	40013c00 	.word	0x40013c00

08002488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e001      	b.n	80024aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	619a      	str	r2, [r3, #24]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0cc      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b68      	ldr	r3, [pc, #416]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d90c      	bls.n	8002528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b65      	ldr	r3, [pc, #404]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b8      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b59      	ldr	r3, [pc, #356]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a58      	ldr	r2, [pc, #352]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800254a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a52      	ldr	r2, [pc, #328]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	494d      	ldr	r1, [pc, #308]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d044      	beq.n	800260c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d119      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b3f      	ldr	r3, [pc, #252]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b3b      	ldr	r3, [pc, #236]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e067      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4934      	ldr	r1, [pc, #208]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025dc:	f7ff fbec 	bl	8001db8 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7ff fbe8 	bl	8001db8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e04f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260c:	4b25      	ldr	r3, [pc, #148]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d20c      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e032      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4916      	ldr	r1, [pc, #88]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265e:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	490e      	ldr	r1, [pc, #56]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002672:	f000 f855 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490a      	ldr	r1, [pc, #40]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a09      	ldr	r2, [pc, #36]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800268e:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fb4c 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	080075f0 	.word	0x080075f0
 80026b0:	20000010 	.word	0x20000010
 80026b4:	20000014 	.word	0x20000014

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000010 	.word	0x20000010

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0a9b      	lsrs	r3, r3, #10
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08007600 	.word	0x08007600

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffdc 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	@ (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	08007600 	.word	0x08007600

08002720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002724:	b0a6      	sub	sp, #152	@ 0x98
 8002726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002746:	4bc8      	ldr	r3, [pc, #800]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b0c      	cmp	r3, #12
 8002750:	f200 817e 	bhi.w	8002a50 <HAL_RCC_GetSysClockFreq+0x330>
 8002754:	a201      	add	r2, pc, #4	@ (adr r2, 800275c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	08002791 	.word	0x08002791
 8002760:	08002a51 	.word	0x08002a51
 8002764:	08002a51 	.word	0x08002a51
 8002768:	08002a51 	.word	0x08002a51
 800276c:	08002799 	.word	0x08002799
 8002770:	08002a51 	.word	0x08002a51
 8002774:	08002a51 	.word	0x08002a51
 8002778:	08002a51 	.word	0x08002a51
 800277c:	080027a1 	.word	0x080027a1
 8002780:	08002a51 	.word	0x08002a51
 8002784:	08002a51 	.word	0x08002a51
 8002788:	08002a51 	.word	0x08002a51
 800278c:	0800290b 	.word	0x0800290b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4bb6      	ldr	r3, [pc, #728]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002796:	e15f      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002798:	4bb5      	ldr	r3, [pc, #724]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x350>)
 800279a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800279e:	e15b      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a0:	4bb1      	ldr	r3, [pc, #708]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ac:	4bae      	ldr	r3, [pc, #696]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d031      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b8:	4bab      	ldr	r3, [pc, #684]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	2200      	movs	r2, #0
 80027c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80027cc:	2300      	movs	r3, #0
 80027ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80027d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x350>)
 80027d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027d6:	462a      	mov	r2, r5
 80027d8:	fb03 f202 	mul.w	r2, r3, r2
 80027dc:	2300      	movs	r3, #0
 80027de:	4621      	mov	r1, r4
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	4aa2      	ldr	r2, [pc, #648]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x350>)
 80027e8:	4621      	mov	r1, r4
 80027ea:	fba1 1202 	umull	r1, r2, r1, r2
 80027ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027f0:	460a      	mov	r2, r1
 80027f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80027f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80027f6:	4413      	add	r3, r2
 80027f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fe:	2200      	movs	r2, #0
 8002800:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002802:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002804:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002808:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800280c:	f7fe fa3c 	bl	8000c88 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4613      	mov	r3, r2
 8002816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800281a:	e064      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281c:	4b92      	ldr	r3, [pc, #584]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	2200      	movs	r2, #0
 8002824:	653b      	str	r3, [r7, #80]	@ 0x50
 8002826:	657a      	str	r2, [r7, #84]	@ 0x54
 8002828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002830:	2300      	movs	r3, #0
 8002832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002834:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002838:	4622      	mov	r2, r4
 800283a:	462b      	mov	r3, r5
 800283c:	f04f 0000 	mov.w	r0, #0
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	0159      	lsls	r1, r3, #5
 8002846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800284a:	0150      	lsls	r0, r2, #5
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4621      	mov	r1, r4
 8002852:	1a51      	subs	r1, r2, r1
 8002854:	6139      	str	r1, [r7, #16]
 8002856:	4629      	mov	r1, r5
 8002858:	eb63 0301 	sbc.w	r3, r3, r1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800286a:	4659      	mov	r1, fp
 800286c:	018b      	lsls	r3, r1, #6
 800286e:	4651      	mov	r1, sl
 8002870:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002874:	4651      	mov	r1, sl
 8002876:	018a      	lsls	r2, r1, #6
 8002878:	4651      	mov	r1, sl
 800287a:	ebb2 0801 	subs.w	r8, r2, r1
 800287e:	4659      	mov	r1, fp
 8002880:	eb63 0901 	sbc.w	r9, r3, r1
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002890:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002894:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002898:	4690      	mov	r8, r2
 800289a:	4699      	mov	r9, r3
 800289c:	4623      	mov	r3, r4
 800289e:	eb18 0303 	adds.w	r3, r8, r3
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	462b      	mov	r3, r5
 80028a6:	eb49 0303 	adc.w	r3, r9, r3
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028b8:	4629      	mov	r1, r5
 80028ba:	028b      	lsls	r3, r1, #10
 80028bc:	4621      	mov	r1, r4
 80028be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c2:	4621      	mov	r1, r4
 80028c4:	028a      	lsls	r2, r1, #10
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ce:	2200      	movs	r2, #0
 80028d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80028d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80028d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028d8:	f7fe f9d6 	bl	8000c88 <__aeabi_uldivmod>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4613      	mov	r3, r2
 80028e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028e6:	4b60      	ldr	r3, [pc, #384]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0c1b      	lsrs	r3, r3, #16
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	3301      	adds	r3, #1
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80028f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002908:	e0a6      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800290a:	4b57      	ldr	r3, [pc, #348]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002916:	4b54      	ldr	r3, [pc, #336]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02a      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002922:	4b51      	ldr	r3, [pc, #324]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	099b      	lsrs	r3, r3, #6
 8002928:	2200      	movs	r2, #0
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800292c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002934:	2100      	movs	r1, #0
 8002936:	4b4e      	ldr	r3, [pc, #312]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x350>)
 8002938:	fb03 f201 	mul.w	r2, r3, r1
 800293c:	2300      	movs	r3, #0
 800293e:	fb00 f303 	mul.w	r3, r0, r3
 8002942:	4413      	add	r3, r2
 8002944:	4a4a      	ldr	r2, [pc, #296]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x350>)
 8002946:	fba0 1202 	umull	r1, r2, r0, r2
 800294a:	677a      	str	r2, [r7, #116]	@ 0x74
 800294c:	460a      	mov	r2, r1
 800294e:	673a      	str	r2, [r7, #112]	@ 0x70
 8002950:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002952:	4413      	add	r3, r2
 8002954:	677b      	str	r3, [r7, #116]	@ 0x74
 8002956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800295a:	2200      	movs	r2, #0
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
 800295e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002960:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002964:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002968:	f7fe f98e 	bl	8000c88 <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4613      	mov	r3, r2
 8002972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002976:	e05b      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002978:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	2200      	movs	r2, #0
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002994:	4642      	mov	r2, r8
 8002996:	464b      	mov	r3, r9
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0159      	lsls	r1, r3, #5
 80029a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a6:	0150      	lsls	r0, r2, #5
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4641      	mov	r1, r8
 80029ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80029b2:	4649      	mov	r1, r9
 80029b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029cc:	ebb2 040a 	subs.w	r4, r2, sl
 80029d0:	eb63 050b 	sbc.w	r5, r3, fp
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	00eb      	lsls	r3, r5, #3
 80029de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e2:	00e2      	lsls	r2, r4, #3
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	4643      	mov	r3, r8
 80029ea:	18e3      	adds	r3, r4, r3
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	464b      	mov	r3, r9
 80029f0:	eb45 0303 	adc.w	r3, r5, r3
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a02:	4629      	mov	r1, r5
 8002a04:	028b      	lsls	r3, r1, #10
 8002a06:	4621      	mov	r1, r4
 8002a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	028a      	lsls	r2, r1, #10
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a18:	2200      	movs	r2, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	61fa      	str	r2, [r7, #28]
 8002a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a22:	f7fe f931 	bl	8000c88 <__aeabi_uldivmod>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a30:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	0f1b      	lsrs	r3, r3, #28
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a4e:	e003      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3798      	adds	r7, #152	@ 0x98
 8002a60:	46bd      	mov	sp, r7
 8002a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	017d7840 	.word	0x017d7840

08002a74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e28d      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8083 	beq.w	8002b9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a94:	4b94      	ldr	r3, [pc, #592]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d019      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002aa0:	4b91      	ldr	r3, [pc, #580]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002aac:	4b8e      	ldr	r3, [pc, #568]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d112      	bne.n	8002aec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac6:	4b88      	ldr	r3, [pc, #544]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ad2:	d10b      	bne.n	8002aec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	4b84      	ldr	r3, [pc, #528]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d05b      	beq.n	8002b98 <HAL_RCC_OscConfig+0x124>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d157      	bne.n	8002b98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e25a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_OscConfig+0x90>
 8002af6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7b      	ldr	r2, [pc, #492]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xcc>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0xb4>
 8002b0e:	4b76      	ldr	r3, [pc, #472]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a75      	ldr	r2, [pc, #468]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b73      	ldr	r3, [pc, #460]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a72      	ldr	r2, [pc, #456]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xcc>
 8002b28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7ff f936 	bl	8001db8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7ff f932 	bl	8001db8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e21f      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b61      	ldr	r3, [pc, #388]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xdc>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7ff f922 	bl	8001db8 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7ff f91e 	bl	8001db8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	@ 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e20b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b57      	ldr	r3, [pc, #348]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x104>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06f      	beq.n	8002c86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ba6:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d017      	beq.n	8002be2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bb2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d105      	bne.n	8002bca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bca:	4b47      	ldr	r3, [pc, #284]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d11c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd6:	4b44      	ldr	r3, [pc, #272]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b41      	ldr	r3, [pc, #260]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x186>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1d3      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4937      	ldr	r1, [pc, #220]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e03a      	b.n	8002c86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b34      	ldr	r3, [pc, #208]	@ (8002cec <HAL_RCC_OscConfig+0x278>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7ff f8cb 	bl	8001db8 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7ff f8c7 	bl	8001db8 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1b4      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b28      	ldr	r3, [pc, #160]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4925      	ldr	r1, [pc, #148]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b24      	ldr	r3, [pc, #144]	@ (8002cec <HAL_RCC_OscConfig+0x278>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7ff f8aa 	bl	8001db8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c68:	f7ff f8a6 	bl	8001db8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e193      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d036      	beq.n	8002d00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d016      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <HAL_RCC_OscConfig+0x27c>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7ff f88a 	bl	8001db8 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7ff f886 	bl	8001db8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e173      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x234>
 8002cc6:	e01b      	b.n	8002d00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc8:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7ff f873 	bl	8001db8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	e00e      	b.n	8002cf4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd6:	f7ff f86f 	bl	8001db8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d907      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e15c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	42470000 	.word	0x42470000
 8002cf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	4b8a      	ldr	r3, [pc, #552]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ea      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8097 	beq.w	8002e3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d12:	4b83      	ldr	r3, [pc, #524]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	4b7f      	ldr	r3, [pc, #508]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	4a7e      	ldr	r2, [pc, #504]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b79      	ldr	r3, [pc, #484]	@ (8002f24 <HAL_RCC_OscConfig+0x4b0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d118      	bne.n	8002d7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4a:	4b76      	ldr	r3, [pc, #472]	@ (8002f24 <HAL_RCC_OscConfig+0x4b0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a75      	ldr	r2, [pc, #468]	@ (8002f24 <HAL_RCC_OscConfig+0x4b0>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7ff f82f 	bl	8001db8 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7ff f82b 	bl	8001db8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e118      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	4b6c      	ldr	r3, [pc, #432]	@ (8002f24 <HAL_RCC_OscConfig+0x4b0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x31e>
 8002d84:	4b66      	ldr	r3, [pc, #408]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a65      	ldr	r2, [pc, #404]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d90:	e01c      	b.n	8002dcc <HAL_RCC_OscConfig+0x358>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x340>
 8002d9a:	4b61      	ldr	r3, [pc, #388]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	4a60      	ldr	r2, [pc, #384]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da6:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a5d      	ldr	r2, [pc, #372]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0x358>
 8002db4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4a59      	ldr	r2, [pc, #356]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc0:	4b57      	ldr	r3, [pc, #348]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4a56      	ldr	r2, [pc, #344]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	f023 0304 	bic.w	r3, r3, #4
 8002dca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fff0 	bl	8001db8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe ffec 	bl	8001db8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0d7      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ee      	beq.n	8002ddc <HAL_RCC_OscConfig+0x368>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe ffda 	bl	8001db8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe ffd6 	bl	8001db8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0c1      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1e:	4b40      	ldr	r3, [pc, #256]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ee      	bne.n	8002e08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	4a3a      	ldr	r2, [pc, #232]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80ad 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e46:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d060      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d145      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b33      	ldr	r3, [pc, #204]	@ (8002f28 <HAL_RCC_OscConfig+0x4b4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe ffaa 	bl	8001db8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe ffa6 	bl	8001db8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e093      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	071b      	lsls	r3, r3, #28
 8002eb2:	491b      	ldr	r1, [pc, #108]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <HAL_RCC_OscConfig+0x4b4>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fe ff7b 	bl	8001db8 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe ff77 	bl	8001db8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e064      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x452>
 8002ee4:	e05c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_RCC_OscConfig+0x4b4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe ff64 	bl	8001db8 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe ff60 	bl	8001db8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04d      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x480>
 8002f12:	e045      	b.n	8002fa0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e040      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <HAL_RCC_OscConfig+0x538>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d030      	beq.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d129      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d122      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d119      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	3b01      	subs	r3, #1
 8002f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d10f      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e041      	b.n	8003046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fca6 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f000 f95e 	bl	80032b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d001      	beq.n	8003068 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e046      	b.n	80030f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <HAL_TIM_Base_Start+0xb4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_TIM_Base_Start+0x70>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003082:	d01d      	beq.n	80030c0 <HAL_TIM_Base_Start+0x70>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1f      	ldr	r2, [pc, #124]	@ (8003108 <HAL_TIM_Base_Start+0xb8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_TIM_Base_Start+0x70>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1e      	ldr	r2, [pc, #120]	@ (800310c <HAL_TIM_Base_Start+0xbc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_TIM_Base_Start+0x70>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <HAL_TIM_Base_Start+0xc0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_TIM_Base_Start+0x70>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_TIM_Base_Start+0xc4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_TIM_Base_Start+0x70>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	@ (8003118 <HAL_TIM_Base_Start+0xc8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_TIM_Base_Start+0x70>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	@ (800311c <HAL_TIM_Base_Start+0xcc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d111      	bne.n	80030e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d010      	beq.n	80030f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e2:	e007      	b.n	80030f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40010400 	.word	0x40010400
 8003118:	40014000 	.word	0x40014000
 800311c:	40001800 	.word	0x40001800

08003120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIM_ConfigClockSource+0x1c>
 8003138:	2302      	movs	r3, #2
 800313a:	e0b4      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x186>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003174:	d03e      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317a:	f200 8087 	bhi.w	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003182:	f000 8086 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x172>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318a:	d87f      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b70      	cmp	r3, #112	@ 0x70
 800318e:	d01a      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003190:	2b70      	cmp	r3, #112	@ 0x70
 8003192:	d87b      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b60      	cmp	r3, #96	@ 0x60
 8003196:	d050      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x11a>
 8003198:	2b60      	cmp	r3, #96	@ 0x60
 800319a:	d877      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b50      	cmp	r3, #80	@ 0x50
 800319e:	d03c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xfa>
 80031a0:	2b50      	cmp	r3, #80	@ 0x50
 80031a2:	d873      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b40      	cmp	r3, #64	@ 0x40
 80031a6:	d058      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x13a>
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d86f      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b30      	cmp	r3, #48	@ 0x30
 80031ae:	d064      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031b0:	2b30      	cmp	r3, #48	@ 0x30
 80031b2:	d86b      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d060      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d867      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d05c      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d05a      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031c4:	e062      	b.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031d6:	f000 f991 	bl	80034fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	609a      	str	r2, [r3, #8]
      break;
 80031f2:	e04f      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003204:	f000 f97a 	bl	80034fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003216:	609a      	str	r2, [r3, #8]
      break;
 8003218:	e03c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	461a      	mov	r2, r3
 8003228:	f000 f8ee 	bl	8003408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2150      	movs	r1, #80	@ 0x50
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f947 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003238:	e02c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003246:	461a      	mov	r2, r3
 8003248:	f000 f90d 	bl	8003466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2160      	movs	r1, #96	@ 0x60
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f937 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003258:	e01c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	461a      	mov	r2, r3
 8003268:	f000 f8ce 	bl	8003408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2140      	movs	r1, #64	@ 0x40
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f927 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003278:	e00c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f000 f91e 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 800328a:	e003      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
      break;
 8003290:	e000      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a46      	ldr	r2, [pc, #280]	@ (80033dc <TIM_Base_SetConfig+0x12c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ce:	d00f      	beq.n	80032f0 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a43      	ldr	r2, [pc, #268]	@ (80033e0 <TIM_Base_SetConfig+0x130>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00b      	beq.n	80032f0 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a42      	ldr	r2, [pc, #264]	@ (80033e4 <TIM_Base_SetConfig+0x134>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d007      	beq.n	80032f0 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a41      	ldr	r2, [pc, #260]	@ (80033e8 <TIM_Base_SetConfig+0x138>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a40      	ldr	r2, [pc, #256]	@ (80033ec <TIM_Base_SetConfig+0x13c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d108      	bne.n	8003302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a35      	ldr	r2, [pc, #212]	@ (80033dc <TIM_Base_SetConfig+0x12c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d02b      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003310:	d027      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a32      	ldr	r2, [pc, #200]	@ (80033e0 <TIM_Base_SetConfig+0x130>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d023      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a31      	ldr	r2, [pc, #196]	@ (80033e4 <TIM_Base_SetConfig+0x134>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01f      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a30      	ldr	r2, [pc, #192]	@ (80033e8 <TIM_Base_SetConfig+0x138>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01b      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2f      	ldr	r2, [pc, #188]	@ (80033ec <TIM_Base_SetConfig+0x13c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d017      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2e      	ldr	r2, [pc, #184]	@ (80033f0 <TIM_Base_SetConfig+0x140>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2d      	ldr	r2, [pc, #180]	@ (80033f4 <TIM_Base_SetConfig+0x144>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00f      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2c      	ldr	r2, [pc, #176]	@ (80033f8 <TIM_Base_SetConfig+0x148>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00b      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2b      	ldr	r2, [pc, #172]	@ (80033fc <TIM_Base_SetConfig+0x14c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2a      	ldr	r2, [pc, #168]	@ (8003400 <TIM_Base_SetConfig+0x150>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a29      	ldr	r2, [pc, #164]	@ (8003404 <TIM_Base_SetConfig+0x154>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d108      	bne.n	8003374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a10      	ldr	r2, [pc, #64]	@ (80033dc <TIM_Base_SetConfig+0x12c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0xf8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a12      	ldr	r2, [pc, #72]	@ (80033ec <TIM_Base_SetConfig+0x13c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d103      	bne.n	80033b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]
  }
}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000800 	.word	0x40000800
 80033e8:	40000c00 	.word	0x40000c00
 80033ec:	40010400 	.word	0x40010400
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800
 80033fc:	40001800 	.word	0x40001800
 8003400:	40001c00 	.word	0x40001c00
 8003404:	40002000 	.word	0x40002000

08003408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f023 030a 	bic.w	r3, r3, #10
 8003444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003466:	b480      	push	{r7}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f023 0210 	bic.w	r2, r3, #16
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	031b      	lsls	r3, r3, #12
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f043 0307 	orr.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	431a      	orrs	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e05a      	b.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a0:	d01d      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a18      	ldr	r2, [pc, #96]	@ (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a17      	ldr	r2, [pc, #92]	@ (800362c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10c      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40010400 	.word	0x40010400
 800362c:	40014000 	.word	0x40014000
 8003630:	40001800 	.word	0x40001800

08003634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e042      	b.n	80036cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe f986 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	@ 0x24
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fe5f 	bl	800433c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800368c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800369c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	@ 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d175      	bne.n	80037e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Transmit+0x2c>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e06e      	b.n	80037e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2221      	movs	r2, #33	@ 0x21
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003712:	f7fe fb51 	bl	8001db8 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372c:	d108      	bne.n	8003740 <HAL_UART_Transmit+0x6c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e003      	b.n	8003748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003748:	e02e      	b.n	80037a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2180      	movs	r1, #128	@ 0x80
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fbc1 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e03a      	b.n	80037e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	3302      	adds	r3, #2
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	e007      	b.n	800379a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	3301      	adds	r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1cb      	bne.n	800374a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2140      	movs	r1, #64	@ 0x40
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fb8d 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e006      	b.n	80037e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08a      	sub	sp, #40	@ 0x28
 80037ee:	af02      	add	r7, sp, #8
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b20      	cmp	r3, #32
 8003808:	f040 8081 	bne.w	800390e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_UART_Receive+0x2e>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e079      	b.n	8003910 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2222      	movs	r2, #34	@ 0x22
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003830:	f7fe fac2 	bl	8001db8 <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800384a:	d108      	bne.n	800385e <HAL_UART_Receive+0x74>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e003      	b.n	8003866 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003866:	e047      	b.n	80038f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2200      	movs	r2, #0
 8003870:	2120      	movs	r1, #32
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fb32 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e042      	b.n	8003910 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10c      	bne.n	80038aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389c:	b29a      	uxth	r2, r3
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3302      	adds	r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e01f      	b.n	80038ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	d007      	beq.n	80038c4 <HAL_UART_Receive+0xda>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <HAL_UART_Receive+0xe8>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e008      	b.n	80038e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3301      	adds	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1b2      	bne.n	8003868 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	d112      	bne.n	8003958 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_UART_Receive_IT+0x26>
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e00b      	b.n	800395a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	461a      	mov	r2, r3
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fb1d 	bl	8003f8e <UART_Start_Receive_IT>
 8003954:	4603      	mov	r3, r0
 8003956:	e000      	b.n	800395a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0ba      	sub	sp, #232	@ 0xe8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_UART_IRQHandler+0x66>
 80039b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fbfc 	bl	80041c0 <UART_Receive_IT>
      return;
 80039c8:	e25b      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80de 	beq.w	8003b90 <HAL_UART_IRQHandler+0x22c>
 80039d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80d1 	beq.w	8003b90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_UART_IRQHandler+0xae>
 80039fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_UART_IRQHandler+0xd2>
 8003a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_UART_IRQHandler+0xf6>
 8003a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d011      	beq.n	8003a8a <HAL_UART_IRQHandler+0x126>
 8003a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f043 0208 	orr.w	r2, r3, #8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 81f2 	beq.w	8003e78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x14e>
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb87 	bl	80041c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_UART_IRQHandler+0x17a>
 8003ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04f      	beq.n	8003b7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa8f 	bl	8004002 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d141      	bne.n	8003b76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1d9      	bne.n	8003af2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d44 <HAL_UART_IRQHandler+0x3e0>)
 8003b4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fae1 	bl	800211a <HAL_DMA_Abort_IT>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	e00e      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f99e 	bl	8003eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e00a      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f99a 	bl	8003eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e006      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f996 	bl	8003eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b8a:	e175      	b.n	8003e78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	bf00      	nop
    return;
 8003b8e:	e173      	b.n	8003e78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 814f 	bne.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8148 	beq.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8141 	beq.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd6:	2b40      	cmp	r3, #64	@ 0x40
 8003bd8:	f040 80b6 	bne.w	8003d48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8145 	beq.w	8003e7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	f080 813e 	bcs.w	8003e7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c12:	f000 8088 	beq.w	8003d26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1d9      	bne.n	8003c16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e1      	bne.n	8003c62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e3      	bne.n	8003c9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf6:	f023 0310 	bic.w	r3, r3, #16
 8003cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e3      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe f98a 	bl	800203a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f8c1 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d42:	e09b      	b.n	8003e7c <HAL_UART_IRQHandler+0x518>
 8003d44:	080040c9 	.word	0x080040c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 808e 	beq.w	8003e80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8089 	beq.w	8003e80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d92:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e3      	bne.n	8003d6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3314      	adds	r3, #20
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	623b      	str	r3, [r7, #32]
   return(result);
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dca:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e3      	bne.n	8003da6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0310 	bic.w	r3, r3, #16
 8003e02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e10:	61fa      	str	r2, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e3      	bne.n	8003dec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f847 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e36:	e023      	b.n	8003e80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_UART_IRQHandler+0x4f4>
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f94d 	bl	80040f0 <UART_Transmit_IT>
    return;
 8003e56:	e014      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <HAL_UART_IRQHandler+0x51e>
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f98d 	bl	8004190 <UART_EndTransmit_IT>
    return;
 8003e76:	e004      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e80:	bf00      	nop
  }
}
 8003e82:	37e8      	adds	r7, #232	@ 0xe8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eec:	e03b      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d037      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fd ff5f 	bl	8001db8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e03a      	b.n	8003f86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d023      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b80      	cmp	r3, #128	@ 0x80
 8003f22:	d020      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b40      	cmp	r3, #64	@ 0x40
 8003f28:	d01d      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d116      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f857 	bl	8004002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2208      	movs	r2, #8
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e00f      	b.n	8003f86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d0b4      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2222      	movs	r2, #34	@ 0x22
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0220 	orr.w	r2, r2, #32
 8003ff2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004002:	b480      	push	{r7}
 8004004:	b095      	sub	sp, #84	@ 0x54
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800402a:	643a      	str	r2, [r7, #64]	@ 0x40
 800402c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004030:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e5      	bne.n	800400a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	61fb      	str	r3, [r7, #28]
   return(result);
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800405e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	2b01      	cmp	r3, #1
 8004078:	d119      	bne.n	80040ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	60bb      	str	r3, [r7, #8]
   return(result);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f023 0310 	bic.w	r3, r3, #16
 8004090:	647b      	str	r3, [r7, #68]	@ 0x44
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800409a:	61ba      	str	r2, [r7, #24]
 800409c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6979      	ldr	r1, [r7, #20]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	613b      	str	r3, [r7, #16]
   return(result);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040bc:	bf00      	nop
 80040be:	3754      	adds	r7, #84	@ 0x54
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff fee4 	bl	8003eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b21      	cmp	r3, #33	@ 0x21
 8004102:	d13e      	bne.n	8004182 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410c:	d114      	bne.n	8004138 <UART_Transmit_IT+0x48>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d110      	bne.n	8004138 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]
 8004136:	e008      	b.n	800414a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	1c59      	adds	r1, r3, #1
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6211      	str	r1, [r2, #32]
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4619      	mov	r1, r3
 8004158:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800416c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800417c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fe69 	bl	8003e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	@ 0x30
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b22      	cmp	r3, #34	@ 0x22
 80041d2:	f040 80ae 	bne.w	8004332 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041de:	d117      	bne.n	8004210 <UART_Receive_IT+0x50>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d113      	bne.n	8004210 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fe:	b29a      	uxth	r2, r3
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	629a      	str	r2, [r3, #40]	@ 0x28
 800420e:	e026      	b.n	800425e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004216:	2300      	movs	r3, #0
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004222:	d007      	beq.n	8004234 <UART_Receive_IT+0x74>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <UART_Receive_IT+0x82>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e008      	b.n	8004254 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800424e:	b2da      	uxtb	r2, r3
 8004250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004252:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4619      	mov	r1, r3
 800426c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800426e:	2b00      	cmp	r3, #0
 8004270:	d15d      	bne.n	800432e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0220 	bic.w	r2, r2, #32
 8004280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004290:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d135      	bne.n	8004324 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	613b      	str	r3, [r7, #16]
   return(result);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f023 0310 	bic.w	r3, r3, #16
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042de:	623a      	str	r2, [r7, #32]
 80042e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	69f9      	ldr	r1, [r7, #28]
 80042e4:	6a3a      	ldr	r2, [r7, #32]
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d10a      	bne.n	8004316 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff fdd1 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
 8004322:	e002      	b.n	800432a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff fdb9 	bl	8003e9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e002      	b.n	8004334 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3730      	adds	r7, #48	@ 0x30
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b0c0      	sub	sp, #256	@ 0x100
 8004342:	af00      	add	r7, sp, #0
 8004344:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	68d9      	ldr	r1, [r3, #12]
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	ea40 0301 	orr.w	r3, r0, r1
 8004364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	431a      	orrs	r2, r3
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	431a      	orrs	r2, r3
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004394:	f021 010c 	bic.w	r1, r1, #12
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043a2:	430b      	orrs	r3, r1
 80043a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b6:	6999      	ldr	r1, [r3, #24]
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	ea40 0301 	orr.w	r3, r0, r1
 80043c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b8f      	ldr	r3, [pc, #572]	@ (8004608 <UART_SetConfig+0x2cc>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d005      	beq.n	80043dc <UART_SetConfig+0xa0>
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b8d      	ldr	r3, [pc, #564]	@ (800460c <UART_SetConfig+0x2d0>)
 80043d8:	429a      	cmp	r2, r3
 80043da:	d104      	bne.n	80043e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fe f98c 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 80043e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043e4:	e003      	b.n	80043ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e6:	f7fe f973 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80043ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f8:	f040 810c 	bne.w	8004614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004400:	2200      	movs	r2, #0
 8004402:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004406:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800440a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800440e:	4622      	mov	r2, r4
 8004410:	462b      	mov	r3, r5
 8004412:	1891      	adds	r1, r2, r2
 8004414:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004416:	415b      	adcs	r3, r3
 8004418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800441a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800441e:	4621      	mov	r1, r4
 8004420:	eb12 0801 	adds.w	r8, r2, r1
 8004424:	4629      	mov	r1, r5
 8004426:	eb43 0901 	adc.w	r9, r3, r1
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800443e:	4690      	mov	r8, r2
 8004440:	4699      	mov	r9, r3
 8004442:	4623      	mov	r3, r4
 8004444:	eb18 0303 	adds.w	r3, r8, r3
 8004448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800444c:	462b      	mov	r3, r5
 800444e:	eb49 0303 	adc.w	r3, r9, r3
 8004452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004462:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800446a:	460b      	mov	r3, r1
 800446c:	18db      	adds	r3, r3, r3
 800446e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004470:	4613      	mov	r3, r2
 8004472:	eb42 0303 	adc.w	r3, r2, r3
 8004476:	657b      	str	r3, [r7, #84]	@ 0x54
 8004478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800447c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004480:	f7fc fc02 	bl	8000c88 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4b61      	ldr	r3, [pc, #388]	@ (8004610 <UART_SetConfig+0x2d4>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011c      	lsls	r4, r3, #4
 8004492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800449c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044ac:	415b      	adcs	r3, r3
 80044ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044b4:	4641      	mov	r1, r8
 80044b6:	eb12 0a01 	adds.w	sl, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb43 0b01 	adc.w	fp, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d4:	4692      	mov	sl, r2
 80044d6:	469b      	mov	fp, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	eb1a 0303 	adds.w	r3, sl, r3
 80044de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044e2:	464b      	mov	r3, r9
 80044e4:	eb4b 0303 	adc.w	r3, fp, r3
 80044e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004500:	460b      	mov	r3, r1
 8004502:	18db      	adds	r3, r3, r3
 8004504:	643b      	str	r3, [r7, #64]	@ 0x40
 8004506:	4613      	mov	r3, r2
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	647b      	str	r3, [r7, #68]	@ 0x44
 800450e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004516:	f7fc fbb7 	bl	8000c88 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4611      	mov	r1, r2
 8004520:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <UART_SetConfig+0x2d4>)
 8004522:	fba3 2301 	umull	r2, r3, r3, r1
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2264      	movs	r2, #100	@ 0x64
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	1acb      	subs	r3, r1, r3
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <UART_SetConfig+0x2d4>)
 8004538:	fba3 2302 	umull	r2, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004544:	441c      	add	r4, r3
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004550:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	1891      	adds	r1, r2, r2
 800455e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004560:	415b      	adcs	r3, r3
 8004562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004568:	4641      	mov	r1, r8
 800456a:	1851      	adds	r1, r2, r1
 800456c:	6339      	str	r1, [r7, #48]	@ 0x30
 800456e:	4649      	mov	r1, r9
 8004570:	414b      	adcs	r3, r1
 8004572:	637b      	str	r3, [r7, #52]	@ 0x34
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004580:	4659      	mov	r1, fp
 8004582:	00cb      	lsls	r3, r1, #3
 8004584:	4651      	mov	r1, sl
 8004586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458a:	4651      	mov	r1, sl
 800458c:	00ca      	lsls	r2, r1, #3
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	4603      	mov	r3, r0
 8004594:	4642      	mov	r2, r8
 8004596:	189b      	adds	r3, r3, r2
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800459c:	464b      	mov	r3, r9
 800459e:	460a      	mov	r2, r1
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045bc:	460b      	mov	r3, r1
 80045be:	18db      	adds	r3, r3, r3
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c2:	4613      	mov	r3, r2
 80045c4:	eb42 0303 	adc.w	r3, r2, r3
 80045c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045d2:	f7fc fb59 	bl	8000c88 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <UART_SetConfig+0x2d4>)
 80045dc:	fba3 1302 	umull	r1, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2164      	movs	r1, #100	@ 0x64
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	3332      	adds	r3, #50	@ 0x32
 80045ee:	4a08      	ldr	r2, [pc, #32]	@ (8004610 <UART_SetConfig+0x2d4>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	f003 0207 	and.w	r2, r3, #7
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4422      	add	r2, r4
 8004602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004604:	e106      	b.n	8004814 <UART_SetConfig+0x4d8>
 8004606:	bf00      	nop
 8004608:	40011000 	.word	0x40011000
 800460c:	40011400 	.word	0x40011400
 8004610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004618:	2200      	movs	r2, #0
 800461a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800461e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004626:	4642      	mov	r2, r8
 8004628:	464b      	mov	r3, r9
 800462a:	1891      	adds	r1, r2, r2
 800462c:	6239      	str	r1, [r7, #32]
 800462e:	415b      	adcs	r3, r3
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
 8004632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004636:	4641      	mov	r1, r8
 8004638:	1854      	adds	r4, r2, r1
 800463a:	4649      	mov	r1, r9
 800463c:	eb43 0501 	adc.w	r5, r3, r1
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	00eb      	lsls	r3, r5, #3
 800464a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464e:	00e2      	lsls	r2, r4, #3
 8004650:	4614      	mov	r4, r2
 8004652:	461d      	mov	r5, r3
 8004654:	4643      	mov	r3, r8
 8004656:	18e3      	adds	r3, r4, r3
 8004658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800465c:	464b      	mov	r3, r9
 800465e:	eb45 0303 	adc.w	r3, r5, r3
 8004662:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004672:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004682:	4629      	mov	r1, r5
 8004684:	008b      	lsls	r3, r1, #2
 8004686:	4621      	mov	r1, r4
 8004688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800468c:	4621      	mov	r1, r4
 800468e:	008a      	lsls	r2, r1, #2
 8004690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004694:	f7fc faf8 	bl	8000c88 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4b60      	ldr	r3, [pc, #384]	@ (8004820 <UART_SetConfig+0x4e4>)
 800469e:	fba3 2302 	umull	r2, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	011c      	lsls	r4, r3, #4
 80046a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	61b9      	str	r1, [r7, #24]
 80046c0:	415b      	adcs	r3, r3
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c8:	4641      	mov	r1, r8
 80046ca:	1851      	adds	r1, r2, r1
 80046cc:	6139      	str	r1, [r7, #16]
 80046ce:	4649      	mov	r1, r9
 80046d0:	414b      	adcs	r3, r1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e0:	4659      	mov	r1, fp
 80046e2:	00cb      	lsls	r3, r1, #3
 80046e4:	4651      	mov	r1, sl
 80046e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ea:	4651      	mov	r1, sl
 80046ec:	00ca      	lsls	r2, r1, #3
 80046ee:	4610      	mov	r0, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	4642      	mov	r2, r8
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046fc:	464b      	mov	r3, r9
 80046fe:	460a      	mov	r2, r1
 8004700:	eb42 0303 	adc.w	r3, r2, r3
 8004704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004712:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004720:	4649      	mov	r1, r9
 8004722:	008b      	lsls	r3, r1, #2
 8004724:	4641      	mov	r1, r8
 8004726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472a:	4641      	mov	r1, r8
 800472c:	008a      	lsls	r2, r1, #2
 800472e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004732:	f7fc faa9 	bl	8000c88 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4611      	mov	r1, r2
 800473c:	4b38      	ldr	r3, [pc, #224]	@ (8004820 <UART_SetConfig+0x4e4>)
 800473e:	fba3 2301 	umull	r2, r3, r3, r1
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2264      	movs	r2, #100	@ 0x64
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	1acb      	subs	r3, r1, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	@ 0x32
 8004750:	4a33      	ldr	r2, [pc, #204]	@ (8004820 <UART_SetConfig+0x4e4>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800475c:	441c      	add	r4, r3
 800475e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004762:	2200      	movs	r2, #0
 8004764:	673b      	str	r3, [r7, #112]	@ 0x70
 8004766:	677a      	str	r2, [r7, #116]	@ 0x74
 8004768:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	1891      	adds	r1, r2, r2
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	415b      	adcs	r3, r3
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800477c:	4641      	mov	r1, r8
 800477e:	1851      	adds	r1, r2, r1
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	4649      	mov	r1, r9
 8004784:	414b      	adcs	r3, r1
 8004786:	607b      	str	r3, [r7, #4]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004794:	4659      	mov	r1, fp
 8004796:	00cb      	lsls	r3, r1, #3
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479e:	4651      	mov	r1, sl
 80047a0:	00ca      	lsls	r2, r1, #3
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	4642      	mov	r2, r8
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ae:	464b      	mov	r3, r9
 80047b0:	460a      	mov	r2, r1
 80047b2:	eb42 0303 	adc.w	r3, r2, r3
 80047b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047d0:	4649      	mov	r1, r9
 80047d2:	008b      	lsls	r3, r1, #2
 80047d4:	4641      	mov	r1, r8
 80047d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047da:	4641      	mov	r1, r8
 80047dc:	008a      	lsls	r2, r1, #2
 80047de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047e2:	f7fc fa51 	bl	8000c88 <__aeabi_uldivmod>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <UART_SetConfig+0x4e4>)
 80047ec:	fba3 1302 	umull	r1, r3, r3, r2
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	2164      	movs	r1, #100	@ 0x64
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	3332      	adds	r3, #50	@ 0x32
 80047fe:	4a08      	ldr	r2, [pc, #32]	@ (8004820 <UART_SetConfig+0x4e4>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	f003 020f 	and.w	r2, r3, #15
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4422      	add	r2, r4
 8004812:	609a      	str	r2, [r3, #8]
}
 8004814:	bf00      	nop
 8004816:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800481a:	46bd      	mov	sp, r7
 800481c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004820:	51eb851f 	.word	0x51eb851f

08004824 <malloc>:
 8004824:	4b02      	ldr	r3, [pc, #8]	@ (8004830 <malloc+0xc>)
 8004826:	4601      	mov	r1, r0
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	f000 b825 	b.w	8004878 <_malloc_r>
 800482e:	bf00      	nop
 8004830:	20000028 	.word	0x20000028

08004834 <sbrk_aligned>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	4e0f      	ldr	r6, [pc, #60]	@ (8004874 <sbrk_aligned+0x40>)
 8004838:	460c      	mov	r4, r1
 800483a:	6831      	ldr	r1, [r6, #0]
 800483c:	4605      	mov	r5, r0
 800483e:	b911      	cbnz	r1, 8004846 <sbrk_aligned+0x12>
 8004840:	f000 fe76 	bl	8005530 <_sbrk_r>
 8004844:	6030      	str	r0, [r6, #0]
 8004846:	4621      	mov	r1, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f000 fe71 	bl	8005530 <_sbrk_r>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d103      	bne.n	800485a <sbrk_aligned+0x26>
 8004852:	f04f 34ff 	mov.w	r4, #4294967295
 8004856:	4620      	mov	r0, r4
 8004858:	bd70      	pop	{r4, r5, r6, pc}
 800485a:	1cc4      	adds	r4, r0, #3
 800485c:	f024 0403 	bic.w	r4, r4, #3
 8004860:	42a0      	cmp	r0, r4
 8004862:	d0f8      	beq.n	8004856 <sbrk_aligned+0x22>
 8004864:	1a21      	subs	r1, r4, r0
 8004866:	4628      	mov	r0, r5
 8004868:	f000 fe62 	bl	8005530 <_sbrk_r>
 800486c:	3001      	adds	r0, #1
 800486e:	d1f2      	bne.n	8004856 <sbrk_aligned+0x22>
 8004870:	e7ef      	b.n	8004852 <sbrk_aligned+0x1e>
 8004872:	bf00      	nop
 8004874:	200003d0 	.word	0x200003d0

08004878 <_malloc_r>:
 8004878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800487c:	1ccd      	adds	r5, r1, #3
 800487e:	f025 0503 	bic.w	r5, r5, #3
 8004882:	3508      	adds	r5, #8
 8004884:	2d0c      	cmp	r5, #12
 8004886:	bf38      	it	cc
 8004888:	250c      	movcc	r5, #12
 800488a:	2d00      	cmp	r5, #0
 800488c:	4606      	mov	r6, r0
 800488e:	db01      	blt.n	8004894 <_malloc_r+0x1c>
 8004890:	42a9      	cmp	r1, r5
 8004892:	d904      	bls.n	800489e <_malloc_r+0x26>
 8004894:	230c      	movs	r3, #12
 8004896:	6033      	str	r3, [r6, #0]
 8004898:	2000      	movs	r0, #0
 800489a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800489e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004974 <_malloc_r+0xfc>
 80048a2:	f000 f869 	bl	8004978 <__malloc_lock>
 80048a6:	f8d8 3000 	ldr.w	r3, [r8]
 80048aa:	461c      	mov	r4, r3
 80048ac:	bb44      	cbnz	r4, 8004900 <_malloc_r+0x88>
 80048ae:	4629      	mov	r1, r5
 80048b0:	4630      	mov	r0, r6
 80048b2:	f7ff ffbf 	bl	8004834 <sbrk_aligned>
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	4604      	mov	r4, r0
 80048ba:	d158      	bne.n	800496e <_malloc_r+0xf6>
 80048bc:	f8d8 4000 	ldr.w	r4, [r8]
 80048c0:	4627      	mov	r7, r4
 80048c2:	2f00      	cmp	r7, #0
 80048c4:	d143      	bne.n	800494e <_malloc_r+0xd6>
 80048c6:	2c00      	cmp	r4, #0
 80048c8:	d04b      	beq.n	8004962 <_malloc_r+0xea>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	4639      	mov	r1, r7
 80048ce:	4630      	mov	r0, r6
 80048d0:	eb04 0903 	add.w	r9, r4, r3
 80048d4:	f000 fe2c 	bl	8005530 <_sbrk_r>
 80048d8:	4581      	cmp	r9, r0
 80048da:	d142      	bne.n	8004962 <_malloc_r+0xea>
 80048dc:	6821      	ldr	r1, [r4, #0]
 80048de:	1a6d      	subs	r5, r5, r1
 80048e0:	4629      	mov	r1, r5
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7ff ffa6 	bl	8004834 <sbrk_aligned>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d03a      	beq.n	8004962 <_malloc_r+0xea>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	442b      	add	r3, r5
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	f8d8 3000 	ldr.w	r3, [r8]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	bb62      	cbnz	r2, 8004954 <_malloc_r+0xdc>
 80048fa:	f8c8 7000 	str.w	r7, [r8]
 80048fe:	e00f      	b.n	8004920 <_malloc_r+0xa8>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	1b52      	subs	r2, r2, r5
 8004904:	d420      	bmi.n	8004948 <_malloc_r+0xd0>
 8004906:	2a0b      	cmp	r2, #11
 8004908:	d917      	bls.n	800493a <_malloc_r+0xc2>
 800490a:	1961      	adds	r1, r4, r5
 800490c:	42a3      	cmp	r3, r4
 800490e:	6025      	str	r5, [r4, #0]
 8004910:	bf18      	it	ne
 8004912:	6059      	strne	r1, [r3, #4]
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	bf08      	it	eq
 8004918:	f8c8 1000 	streq.w	r1, [r8]
 800491c:	5162      	str	r2, [r4, r5]
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	4630      	mov	r0, r6
 8004922:	f000 f82f 	bl	8004984 <__malloc_unlock>
 8004926:	f104 000b 	add.w	r0, r4, #11
 800492a:	1d23      	adds	r3, r4, #4
 800492c:	f020 0007 	bic.w	r0, r0, #7
 8004930:	1ac2      	subs	r2, r0, r3
 8004932:	bf1c      	itt	ne
 8004934:	1a1b      	subne	r3, r3, r0
 8004936:	50a3      	strne	r3, [r4, r2]
 8004938:	e7af      	b.n	800489a <_malloc_r+0x22>
 800493a:	6862      	ldr	r2, [r4, #4]
 800493c:	42a3      	cmp	r3, r4
 800493e:	bf0c      	ite	eq
 8004940:	f8c8 2000 	streq.w	r2, [r8]
 8004944:	605a      	strne	r2, [r3, #4]
 8004946:	e7eb      	b.n	8004920 <_malloc_r+0xa8>
 8004948:	4623      	mov	r3, r4
 800494a:	6864      	ldr	r4, [r4, #4]
 800494c:	e7ae      	b.n	80048ac <_malloc_r+0x34>
 800494e:	463c      	mov	r4, r7
 8004950:	687f      	ldr	r7, [r7, #4]
 8004952:	e7b6      	b.n	80048c2 <_malloc_r+0x4a>
 8004954:	461a      	mov	r2, r3
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	42a3      	cmp	r3, r4
 800495a:	d1fb      	bne.n	8004954 <_malloc_r+0xdc>
 800495c:	2300      	movs	r3, #0
 800495e:	6053      	str	r3, [r2, #4]
 8004960:	e7de      	b.n	8004920 <_malloc_r+0xa8>
 8004962:	230c      	movs	r3, #12
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	4630      	mov	r0, r6
 8004968:	f000 f80c 	bl	8004984 <__malloc_unlock>
 800496c:	e794      	b.n	8004898 <_malloc_r+0x20>
 800496e:	6005      	str	r5, [r0, #0]
 8004970:	e7d6      	b.n	8004920 <_malloc_r+0xa8>
 8004972:	bf00      	nop
 8004974:	200003d4 	.word	0x200003d4

08004978 <__malloc_lock>:
 8004978:	4801      	ldr	r0, [pc, #4]	@ (8004980 <__malloc_lock+0x8>)
 800497a:	f000 be26 	b.w	80055ca <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	20000518 	.word	0x20000518

08004984 <__malloc_unlock>:
 8004984:	4801      	ldr	r0, [pc, #4]	@ (800498c <__malloc_unlock+0x8>)
 8004986:	f000 be21 	b.w	80055cc <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	20000518 	.word	0x20000518

08004990 <__cvt>:
 8004990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	ec57 6b10 	vmov	r6, r7, d0
 8004998:	2f00      	cmp	r7, #0
 800499a:	460c      	mov	r4, r1
 800499c:	4619      	mov	r1, r3
 800499e:	463b      	mov	r3, r7
 80049a0:	bfbb      	ittet	lt
 80049a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80049a6:	461f      	movlt	r7, r3
 80049a8:	2300      	movge	r3, #0
 80049aa:	232d      	movlt	r3, #45	@ 0x2d
 80049ac:	700b      	strb	r3, [r1, #0]
 80049ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80049b4:	4691      	mov	r9, r2
 80049b6:	f023 0820 	bic.w	r8, r3, #32
 80049ba:	bfbc      	itt	lt
 80049bc:	4632      	movlt	r2, r6
 80049be:	4616      	movlt	r6, r2
 80049c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049c4:	d005      	beq.n	80049d2 <__cvt+0x42>
 80049c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049ca:	d100      	bne.n	80049ce <__cvt+0x3e>
 80049cc:	3401      	adds	r4, #1
 80049ce:	2102      	movs	r1, #2
 80049d0:	e000      	b.n	80049d4 <__cvt+0x44>
 80049d2:	2103      	movs	r1, #3
 80049d4:	ab03      	add	r3, sp, #12
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	ab02      	add	r3, sp, #8
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	ec47 6b10 	vmov	d0, r6, r7
 80049e0:	4653      	mov	r3, sl
 80049e2:	4622      	mov	r2, r4
 80049e4:	f000 fe7c 	bl	80056e0 <_dtoa_r>
 80049e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049ec:	4605      	mov	r5, r0
 80049ee:	d119      	bne.n	8004a24 <__cvt+0x94>
 80049f0:	f019 0f01 	tst.w	r9, #1
 80049f4:	d00e      	beq.n	8004a14 <__cvt+0x84>
 80049f6:	eb00 0904 	add.w	r9, r0, r4
 80049fa:	2200      	movs	r2, #0
 80049fc:	2300      	movs	r3, #0
 80049fe:	4630      	mov	r0, r6
 8004a00:	4639      	mov	r1, r7
 8004a02:	f7fc f881 	bl	8000b08 <__aeabi_dcmpeq>
 8004a06:	b108      	cbz	r0, 8004a0c <__cvt+0x7c>
 8004a08:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a0c:	2230      	movs	r2, #48	@ 0x30
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	454b      	cmp	r3, r9
 8004a12:	d31e      	bcc.n	8004a52 <__cvt+0xc2>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a18:	1b5b      	subs	r3, r3, r5
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	b004      	add	sp, #16
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a28:	eb00 0904 	add.w	r9, r0, r4
 8004a2c:	d1e5      	bne.n	80049fa <__cvt+0x6a>
 8004a2e:	7803      	ldrb	r3, [r0, #0]
 8004a30:	2b30      	cmp	r3, #48	@ 0x30
 8004a32:	d10a      	bne.n	8004a4a <__cvt+0xba>
 8004a34:	2200      	movs	r2, #0
 8004a36:	2300      	movs	r3, #0
 8004a38:	4630      	mov	r0, r6
 8004a3a:	4639      	mov	r1, r7
 8004a3c:	f7fc f864 	bl	8000b08 <__aeabi_dcmpeq>
 8004a40:	b918      	cbnz	r0, 8004a4a <__cvt+0xba>
 8004a42:	f1c4 0401 	rsb	r4, r4, #1
 8004a46:	f8ca 4000 	str.w	r4, [sl]
 8004a4a:	f8da 3000 	ldr.w	r3, [sl]
 8004a4e:	4499      	add	r9, r3
 8004a50:	e7d3      	b.n	80049fa <__cvt+0x6a>
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	9103      	str	r1, [sp, #12]
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	e7d9      	b.n	8004a0e <__cvt+0x7e>

08004a5a <__exponent>:
 8004a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	bfba      	itte	lt
 8004a60:	4249      	neglt	r1, r1
 8004a62:	232d      	movlt	r3, #45	@ 0x2d
 8004a64:	232b      	movge	r3, #43	@ 0x2b
 8004a66:	2909      	cmp	r1, #9
 8004a68:	7002      	strb	r2, [r0, #0]
 8004a6a:	7043      	strb	r3, [r0, #1]
 8004a6c:	dd29      	ble.n	8004ac2 <__exponent+0x68>
 8004a6e:	f10d 0307 	add.w	r3, sp, #7
 8004a72:	461d      	mov	r5, r3
 8004a74:	270a      	movs	r7, #10
 8004a76:	461a      	mov	r2, r3
 8004a78:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a7c:	fb07 1416 	mls	r4, r7, r6, r1
 8004a80:	3430      	adds	r4, #48	@ 0x30
 8004a82:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a86:	460c      	mov	r4, r1
 8004a88:	2c63      	cmp	r4, #99	@ 0x63
 8004a8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a8e:	4631      	mov	r1, r6
 8004a90:	dcf1      	bgt.n	8004a76 <__exponent+0x1c>
 8004a92:	3130      	adds	r1, #48	@ 0x30
 8004a94:	1e94      	subs	r4, r2, #2
 8004a96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a9a:	1c41      	adds	r1, r0, #1
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	42ab      	cmp	r3, r5
 8004aa0:	d30a      	bcc.n	8004ab8 <__exponent+0x5e>
 8004aa2:	f10d 0309 	add.w	r3, sp, #9
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	42ac      	cmp	r4, r5
 8004aaa:	bf88      	it	hi
 8004aac:	2300      	movhi	r3, #0
 8004aae:	3302      	adds	r3, #2
 8004ab0:	4403      	add	r3, r0
 8004ab2:	1a18      	subs	r0, r3, r0
 8004ab4:	b003      	add	sp, #12
 8004ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004abc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ac0:	e7ed      	b.n	8004a9e <__exponent+0x44>
 8004ac2:	2330      	movs	r3, #48	@ 0x30
 8004ac4:	3130      	adds	r1, #48	@ 0x30
 8004ac6:	7083      	strb	r3, [r0, #2]
 8004ac8:	70c1      	strb	r1, [r0, #3]
 8004aca:	1d03      	adds	r3, r0, #4
 8004acc:	e7f1      	b.n	8004ab2 <__exponent+0x58>
	...

08004ad0 <_printf_float>:
 8004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad4:	b08d      	sub	sp, #52	@ 0x34
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004adc:	4616      	mov	r6, r2
 8004ade:	461f      	mov	r7, r3
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	f000 fced 	bl	80054c0 <_localeconv_r>
 8004ae6:	6803      	ldr	r3, [r0, #0]
 8004ae8:	9304      	str	r3, [sp, #16]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fb fbe0 	bl	80002b0 <strlen>
 8004af0:	2300      	movs	r3, #0
 8004af2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004af4:	f8d8 3000 	ldr.w	r3, [r8]
 8004af8:	9005      	str	r0, [sp, #20]
 8004afa:	3307      	adds	r3, #7
 8004afc:	f023 0307 	bic.w	r3, r3, #7
 8004b00:	f103 0208 	add.w	r2, r3, #8
 8004b04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b08:	f8d4 b000 	ldr.w	fp, [r4]
 8004b0c:	f8c8 2000 	str.w	r2, [r8]
 8004b10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b18:	9307      	str	r3, [sp, #28]
 8004b1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b26:	4b9c      	ldr	r3, [pc, #624]	@ (8004d98 <_printf_float+0x2c8>)
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	f7fc f81e 	bl	8000b6c <__aeabi_dcmpun>
 8004b30:	bb70      	cbnz	r0, 8004b90 <_printf_float+0xc0>
 8004b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b36:	4b98      	ldr	r3, [pc, #608]	@ (8004d98 <_printf_float+0x2c8>)
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	f7fb fff8 	bl	8000b30 <__aeabi_dcmple>
 8004b40:	bb30      	cbnz	r0, 8004b90 <_printf_float+0xc0>
 8004b42:	2200      	movs	r2, #0
 8004b44:	2300      	movs	r3, #0
 8004b46:	4640      	mov	r0, r8
 8004b48:	4649      	mov	r1, r9
 8004b4a:	f7fb ffe7 	bl	8000b1c <__aeabi_dcmplt>
 8004b4e:	b110      	cbz	r0, 8004b56 <_printf_float+0x86>
 8004b50:	232d      	movs	r3, #45	@ 0x2d
 8004b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b56:	4a91      	ldr	r2, [pc, #580]	@ (8004d9c <_printf_float+0x2cc>)
 8004b58:	4b91      	ldr	r3, [pc, #580]	@ (8004da0 <_printf_float+0x2d0>)
 8004b5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b5e:	bf94      	ite	ls
 8004b60:	4690      	movls	r8, r2
 8004b62:	4698      	movhi	r8, r3
 8004b64:	2303      	movs	r3, #3
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	f02b 0304 	bic.w	r3, fp, #4
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	f04f 0900 	mov.w	r9, #0
 8004b72:	9700      	str	r7, [sp, #0]
 8004b74:	4633      	mov	r3, r6
 8004b76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 f9d2 	bl	8004f24 <_printf_common>
 8004b80:	3001      	adds	r0, #1
 8004b82:	f040 808d 	bne.w	8004ca0 <_printf_float+0x1d0>
 8004b86:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8a:	b00d      	add	sp, #52	@ 0x34
 8004b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b90:	4642      	mov	r2, r8
 8004b92:	464b      	mov	r3, r9
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fb ffe8 	bl	8000b6c <__aeabi_dcmpun>
 8004b9c:	b140      	cbz	r0, 8004bb0 <_printf_float+0xe0>
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bfbc      	itt	lt
 8004ba4:	232d      	movlt	r3, #45	@ 0x2d
 8004ba6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004baa:	4a7e      	ldr	r2, [pc, #504]	@ (8004da4 <_printf_float+0x2d4>)
 8004bac:	4b7e      	ldr	r3, [pc, #504]	@ (8004da8 <_printf_float+0x2d8>)
 8004bae:	e7d4      	b.n	8004b5a <_printf_float+0x8a>
 8004bb0:	6863      	ldr	r3, [r4, #4]
 8004bb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004bb6:	9206      	str	r2, [sp, #24]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	d13b      	bne.n	8004c34 <_printf_float+0x164>
 8004bbc:	2306      	movs	r3, #6
 8004bbe:	6063      	str	r3, [r4, #4]
 8004bc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	ab0a      	add	r3, sp, #40	@ 0x28
 8004bcc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004bd0:	ab09      	add	r3, sp, #36	@ 0x24
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	6861      	ldr	r1, [r4, #4]
 8004bd6:	ec49 8b10 	vmov	d0, r8, r9
 8004bda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7ff fed6 	bl	8004990 <__cvt>
 8004be4:	9b06      	ldr	r3, [sp, #24]
 8004be6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004be8:	2b47      	cmp	r3, #71	@ 0x47
 8004bea:	4680      	mov	r8, r0
 8004bec:	d129      	bne.n	8004c42 <_printf_float+0x172>
 8004bee:	1cc8      	adds	r0, r1, #3
 8004bf0:	db02      	blt.n	8004bf8 <_printf_float+0x128>
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	dd41      	ble.n	8004c7c <_printf_float+0x1ac>
 8004bf8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004bfc:	fa5f fa8a 	uxtb.w	sl, sl
 8004c00:	3901      	subs	r1, #1
 8004c02:	4652      	mov	r2, sl
 8004c04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c08:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c0a:	f7ff ff26 	bl	8004a5a <__exponent>
 8004c0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c10:	1813      	adds	r3, r2, r0
 8004c12:	2a01      	cmp	r2, #1
 8004c14:	4681      	mov	r9, r0
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	dc02      	bgt.n	8004c20 <_printf_float+0x150>
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	07d2      	lsls	r2, r2, #31
 8004c1e:	d501      	bpl.n	8004c24 <_printf_float+0x154>
 8004c20:	3301      	adds	r3, #1
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0a2      	beq.n	8004b72 <_printf_float+0xa2>
 8004c2c:	232d      	movs	r3, #45	@ 0x2d
 8004c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c32:	e79e      	b.n	8004b72 <_printf_float+0xa2>
 8004c34:	9a06      	ldr	r2, [sp, #24]
 8004c36:	2a47      	cmp	r2, #71	@ 0x47
 8004c38:	d1c2      	bne.n	8004bc0 <_printf_float+0xf0>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1c0      	bne.n	8004bc0 <_printf_float+0xf0>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e7bd      	b.n	8004bbe <_printf_float+0xee>
 8004c42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c46:	d9db      	bls.n	8004c00 <_printf_float+0x130>
 8004c48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c4c:	d118      	bne.n	8004c80 <_printf_float+0x1b0>
 8004c4e:	2900      	cmp	r1, #0
 8004c50:	6863      	ldr	r3, [r4, #4]
 8004c52:	dd0b      	ble.n	8004c6c <_printf_float+0x19c>
 8004c54:	6121      	str	r1, [r4, #16]
 8004c56:	b913      	cbnz	r3, 8004c5e <_printf_float+0x18e>
 8004c58:	6822      	ldr	r2, [r4, #0]
 8004c5a:	07d0      	lsls	r0, r2, #31
 8004c5c:	d502      	bpl.n	8004c64 <_printf_float+0x194>
 8004c5e:	3301      	adds	r3, #1
 8004c60:	440b      	add	r3, r1
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c66:	f04f 0900 	mov.w	r9, #0
 8004c6a:	e7db      	b.n	8004c24 <_printf_float+0x154>
 8004c6c:	b913      	cbnz	r3, 8004c74 <_printf_float+0x1a4>
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	07d2      	lsls	r2, r2, #31
 8004c72:	d501      	bpl.n	8004c78 <_printf_float+0x1a8>
 8004c74:	3302      	adds	r3, #2
 8004c76:	e7f4      	b.n	8004c62 <_printf_float+0x192>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e7f2      	b.n	8004c62 <_printf_float+0x192>
 8004c7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c82:	4299      	cmp	r1, r3
 8004c84:	db05      	blt.n	8004c92 <_printf_float+0x1c2>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	6121      	str	r1, [r4, #16]
 8004c8a:	07d8      	lsls	r0, r3, #31
 8004c8c:	d5ea      	bpl.n	8004c64 <_printf_float+0x194>
 8004c8e:	1c4b      	adds	r3, r1, #1
 8004c90:	e7e7      	b.n	8004c62 <_printf_float+0x192>
 8004c92:	2900      	cmp	r1, #0
 8004c94:	bfd4      	ite	le
 8004c96:	f1c1 0202 	rsble	r2, r1, #2
 8004c9a:	2201      	movgt	r2, #1
 8004c9c:	4413      	add	r3, r2
 8004c9e:	e7e0      	b.n	8004c62 <_printf_float+0x192>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	055a      	lsls	r2, r3, #21
 8004ca4:	d407      	bmi.n	8004cb6 <_printf_float+0x1e6>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	4642      	mov	r2, r8
 8004caa:	4631      	mov	r1, r6
 8004cac:	4628      	mov	r0, r5
 8004cae:	47b8      	blx	r7
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d12b      	bne.n	8004d0c <_printf_float+0x23c>
 8004cb4:	e767      	b.n	8004b86 <_printf_float+0xb6>
 8004cb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cba:	f240 80dd 	bls.w	8004e78 <_printf_float+0x3a8>
 8004cbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f7fb ff1f 	bl	8000b08 <__aeabi_dcmpeq>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d033      	beq.n	8004d36 <_printf_float+0x266>
 8004cce:	4a37      	ldr	r2, [pc, #220]	@ (8004dac <_printf_float+0x2dc>)
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f af54 	beq.w	8004b86 <_printf_float+0xb6>
 8004cde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004ce2:	4543      	cmp	r3, r8
 8004ce4:	db02      	blt.n	8004cec <_printf_float+0x21c>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	07d8      	lsls	r0, r3, #31
 8004cea:	d50f      	bpl.n	8004d0c <_printf_float+0x23c>
 8004cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f af45 	beq.w	8004b86 <_printf_float+0xb6>
 8004cfc:	f04f 0900 	mov.w	r9, #0
 8004d00:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d04:	f104 0a1a 	add.w	sl, r4, #26
 8004d08:	45c8      	cmp	r8, r9
 8004d0a:	dc09      	bgt.n	8004d20 <_printf_float+0x250>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	079b      	lsls	r3, r3, #30
 8004d10:	f100 8103 	bmi.w	8004f1a <_printf_float+0x44a>
 8004d14:	68e0      	ldr	r0, [r4, #12]
 8004d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d18:	4298      	cmp	r0, r3
 8004d1a:	bfb8      	it	lt
 8004d1c:	4618      	movlt	r0, r3
 8004d1e:	e734      	b.n	8004b8a <_printf_float+0xba>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4652      	mov	r2, sl
 8004d24:	4631      	mov	r1, r6
 8004d26:	4628      	mov	r0, r5
 8004d28:	47b8      	blx	r7
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f43f af2b 	beq.w	8004b86 <_printf_float+0xb6>
 8004d30:	f109 0901 	add.w	r9, r9, #1
 8004d34:	e7e8      	b.n	8004d08 <_printf_float+0x238>
 8004d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	dc39      	bgt.n	8004db0 <_printf_float+0x2e0>
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <_printf_float+0x2dc>)
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4631      	mov	r1, r6
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f af1d 	beq.w	8004b86 <_printf_float+0xb6>
 8004d4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d50:	ea59 0303 	orrs.w	r3, r9, r3
 8004d54:	d102      	bne.n	8004d5c <_printf_float+0x28c>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	07d9      	lsls	r1, r3, #31
 8004d5a:	d5d7      	bpl.n	8004d0c <_printf_float+0x23c>
 8004d5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f af0d 	beq.w	8004b86 <_printf_float+0xb6>
 8004d6c:	f04f 0a00 	mov.w	sl, #0
 8004d70:	f104 0b1a 	add.w	fp, r4, #26
 8004d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d76:	425b      	negs	r3, r3
 8004d78:	4553      	cmp	r3, sl
 8004d7a:	dc01      	bgt.n	8004d80 <_printf_float+0x2b0>
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	e793      	b.n	8004ca8 <_printf_float+0x1d8>
 8004d80:	2301      	movs	r3, #1
 8004d82:	465a      	mov	r2, fp
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f aefb 	beq.w	8004b86 <_printf_float+0xb6>
 8004d90:	f10a 0a01 	add.w	sl, sl, #1
 8004d94:	e7ee      	b.n	8004d74 <_printf_float+0x2a4>
 8004d96:	bf00      	nop
 8004d98:	7fefffff 	.word	0x7fefffff
 8004d9c:	08007608 	.word	0x08007608
 8004da0:	0800760c 	.word	0x0800760c
 8004da4:	08007610 	.word	0x08007610
 8004da8:	08007614 	.word	0x08007614
 8004dac:	08007618 	.word	0x08007618
 8004db0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004db2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004db6:	4553      	cmp	r3, sl
 8004db8:	bfa8      	it	ge
 8004dba:	4653      	movge	r3, sl
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	4699      	mov	r9, r3
 8004dc0:	dc36      	bgt.n	8004e30 <_printf_float+0x360>
 8004dc2:	f04f 0b00 	mov.w	fp, #0
 8004dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dca:	f104 021a 	add.w	r2, r4, #26
 8004dce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dd0:	9306      	str	r3, [sp, #24]
 8004dd2:	eba3 0309 	sub.w	r3, r3, r9
 8004dd6:	455b      	cmp	r3, fp
 8004dd8:	dc31      	bgt.n	8004e3e <_printf_float+0x36e>
 8004dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ddc:	459a      	cmp	sl, r3
 8004dde:	dc3a      	bgt.n	8004e56 <_printf_float+0x386>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07da      	lsls	r2, r3, #31
 8004de4:	d437      	bmi.n	8004e56 <_printf_float+0x386>
 8004de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de8:	ebaa 0903 	sub.w	r9, sl, r3
 8004dec:	9b06      	ldr	r3, [sp, #24]
 8004dee:	ebaa 0303 	sub.w	r3, sl, r3
 8004df2:	4599      	cmp	r9, r3
 8004df4:	bfa8      	it	ge
 8004df6:	4699      	movge	r9, r3
 8004df8:	f1b9 0f00 	cmp.w	r9, #0
 8004dfc:	dc33      	bgt.n	8004e66 <_printf_float+0x396>
 8004dfe:	f04f 0800 	mov.w	r8, #0
 8004e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e06:	f104 0b1a 	add.w	fp, r4, #26
 8004e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8004e10:	eba3 0309 	sub.w	r3, r3, r9
 8004e14:	4543      	cmp	r3, r8
 8004e16:	f77f af79 	ble.w	8004d0c <_printf_float+0x23c>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	465a      	mov	r2, fp
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	f43f aeae 	beq.w	8004b86 <_printf_float+0xb6>
 8004e2a:	f108 0801 	add.w	r8, r8, #1
 8004e2e:	e7ec      	b.n	8004e0a <_printf_float+0x33a>
 8004e30:	4642      	mov	r2, r8
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d1c2      	bne.n	8004dc2 <_printf_float+0x2f2>
 8004e3c:	e6a3      	b.n	8004b86 <_printf_float+0xb6>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	9206      	str	r2, [sp, #24]
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae9c 	beq.w	8004b86 <_printf_float+0xb6>
 8004e4e:	9a06      	ldr	r2, [sp, #24]
 8004e50:	f10b 0b01 	add.w	fp, fp, #1
 8004e54:	e7bb      	b.n	8004dce <_printf_float+0x2fe>
 8004e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	d1c0      	bne.n	8004de6 <_printf_float+0x316>
 8004e64:	e68f      	b.n	8004b86 <_printf_float+0xb6>
 8004e66:	9a06      	ldr	r2, [sp, #24]
 8004e68:	464b      	mov	r3, r9
 8004e6a:	4442      	add	r2, r8
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	d1c3      	bne.n	8004dfe <_printf_float+0x32e>
 8004e76:	e686      	b.n	8004b86 <_printf_float+0xb6>
 8004e78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e7c:	f1ba 0f01 	cmp.w	sl, #1
 8004e80:	dc01      	bgt.n	8004e86 <_printf_float+0x3b6>
 8004e82:	07db      	lsls	r3, r3, #31
 8004e84:	d536      	bpl.n	8004ef4 <_printf_float+0x424>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4642      	mov	r2, r8
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b8      	blx	r7
 8004e90:	3001      	adds	r0, #1
 8004e92:	f43f ae78 	beq.w	8004b86 <_printf_float+0xb6>
 8004e96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b8      	blx	r7
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	f43f ae70 	beq.w	8004b86 <_printf_float+0xb6>
 8004ea6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2300      	movs	r3, #0
 8004eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eb2:	f7fb fe29 	bl	8000b08 <__aeabi_dcmpeq>
 8004eb6:	b9c0      	cbnz	r0, 8004eea <_printf_float+0x41a>
 8004eb8:	4653      	mov	r3, sl
 8004eba:	f108 0201 	add.w	r2, r8, #1
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	47b8      	blx	r7
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d10c      	bne.n	8004ee2 <_printf_float+0x412>
 8004ec8:	e65d      	b.n	8004b86 <_printf_float+0xb6>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	465a      	mov	r2, fp
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	47b8      	blx	r7
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	f43f ae56 	beq.w	8004b86 <_printf_float+0xb6>
 8004eda:	f108 0801 	add.w	r8, r8, #1
 8004ede:	45d0      	cmp	r8, sl
 8004ee0:	dbf3      	blt.n	8004eca <_printf_float+0x3fa>
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ee8:	e6df      	b.n	8004caa <_printf_float+0x1da>
 8004eea:	f04f 0800 	mov.w	r8, #0
 8004eee:	f104 0b1a 	add.w	fp, r4, #26
 8004ef2:	e7f4      	b.n	8004ede <_printf_float+0x40e>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	e7e1      	b.n	8004ebe <_printf_float+0x3ee>
 8004efa:	2301      	movs	r3, #1
 8004efc:	464a      	mov	r2, r9
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	f43f ae3e 	beq.w	8004b86 <_printf_float+0xb6>
 8004f0a:	f108 0801 	add.w	r8, r8, #1
 8004f0e:	68e3      	ldr	r3, [r4, #12]
 8004f10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f12:	1a5b      	subs	r3, r3, r1
 8004f14:	4543      	cmp	r3, r8
 8004f16:	dcf0      	bgt.n	8004efa <_printf_float+0x42a>
 8004f18:	e6fc      	b.n	8004d14 <_printf_float+0x244>
 8004f1a:	f04f 0800 	mov.w	r8, #0
 8004f1e:	f104 0919 	add.w	r9, r4, #25
 8004f22:	e7f4      	b.n	8004f0e <_printf_float+0x43e>

08004f24 <_printf_common>:
 8004f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	4616      	mov	r6, r2
 8004f2a:	4698      	mov	r8, r3
 8004f2c:	688a      	ldr	r2, [r1, #8]
 8004f2e:	690b      	ldr	r3, [r1, #16]
 8004f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f34:	4293      	cmp	r3, r2
 8004f36:	bfb8      	it	lt
 8004f38:	4613      	movlt	r3, r2
 8004f3a:	6033      	str	r3, [r6, #0]
 8004f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f40:	4607      	mov	r7, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	b10a      	cbz	r2, 8004f4a <_printf_common+0x26>
 8004f46:	3301      	adds	r3, #1
 8004f48:	6033      	str	r3, [r6, #0]
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	0699      	lsls	r1, r3, #26
 8004f4e:	bf42      	ittt	mi
 8004f50:	6833      	ldrmi	r3, [r6, #0]
 8004f52:	3302      	addmi	r3, #2
 8004f54:	6033      	strmi	r3, [r6, #0]
 8004f56:	6825      	ldr	r5, [r4, #0]
 8004f58:	f015 0506 	ands.w	r5, r5, #6
 8004f5c:	d106      	bne.n	8004f6c <_printf_common+0x48>
 8004f5e:	f104 0a19 	add.w	sl, r4, #25
 8004f62:	68e3      	ldr	r3, [r4, #12]
 8004f64:	6832      	ldr	r2, [r6, #0]
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	42ab      	cmp	r3, r5
 8004f6a:	dc26      	bgt.n	8004fba <_printf_common+0x96>
 8004f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f70:	6822      	ldr	r2, [r4, #0]
 8004f72:	3b00      	subs	r3, #0
 8004f74:	bf18      	it	ne
 8004f76:	2301      	movne	r3, #1
 8004f78:	0692      	lsls	r2, r2, #26
 8004f7a:	d42b      	bmi.n	8004fd4 <_printf_common+0xb0>
 8004f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f80:	4641      	mov	r1, r8
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c8      	blx	r9
 8004f86:	3001      	adds	r0, #1
 8004f88:	d01e      	beq.n	8004fc8 <_printf_common+0xa4>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	6922      	ldr	r2, [r4, #16]
 8004f8e:	f003 0306 	and.w	r3, r3, #6
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	bf02      	ittt	eq
 8004f96:	68e5      	ldreq	r5, [r4, #12]
 8004f98:	6833      	ldreq	r3, [r6, #0]
 8004f9a:	1aed      	subeq	r5, r5, r3
 8004f9c:	68a3      	ldr	r3, [r4, #8]
 8004f9e:	bf0c      	ite	eq
 8004fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fa4:	2500      	movne	r5, #0
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	bfc4      	itt	gt
 8004faa:	1a9b      	subgt	r3, r3, r2
 8004fac:	18ed      	addgt	r5, r5, r3
 8004fae:	2600      	movs	r6, #0
 8004fb0:	341a      	adds	r4, #26
 8004fb2:	42b5      	cmp	r5, r6
 8004fb4:	d11a      	bne.n	8004fec <_printf_common+0xc8>
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	e008      	b.n	8004fcc <_printf_common+0xa8>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4652      	mov	r2, sl
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	47c8      	blx	r9
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d103      	bne.n	8004fd0 <_printf_common+0xac>
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd0:	3501      	adds	r5, #1
 8004fd2:	e7c6      	b.n	8004f62 <_printf_common+0x3e>
 8004fd4:	18e1      	adds	r1, r4, r3
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	2030      	movs	r0, #48	@ 0x30
 8004fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fde:	4422      	add	r2, r4
 8004fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fe8:	3302      	adds	r3, #2
 8004fea:	e7c7      	b.n	8004f7c <_printf_common+0x58>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4622      	mov	r2, r4
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	47c8      	blx	r9
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d0e6      	beq.n	8004fc8 <_printf_common+0xa4>
 8004ffa:	3601      	adds	r6, #1
 8004ffc:	e7d9      	b.n	8004fb2 <_printf_common+0x8e>
	...

08005000 <_printf_i>:
 8005000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	7e0f      	ldrb	r7, [r1, #24]
 8005006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005008:	2f78      	cmp	r7, #120	@ 0x78
 800500a:	4691      	mov	r9, r2
 800500c:	4680      	mov	r8, r0
 800500e:	460c      	mov	r4, r1
 8005010:	469a      	mov	sl, r3
 8005012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005016:	d807      	bhi.n	8005028 <_printf_i+0x28>
 8005018:	2f62      	cmp	r7, #98	@ 0x62
 800501a:	d80a      	bhi.n	8005032 <_printf_i+0x32>
 800501c:	2f00      	cmp	r7, #0
 800501e:	f000 80d2 	beq.w	80051c6 <_printf_i+0x1c6>
 8005022:	2f58      	cmp	r7, #88	@ 0x58
 8005024:	f000 80b9 	beq.w	800519a <_printf_i+0x19a>
 8005028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800502c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005030:	e03a      	b.n	80050a8 <_printf_i+0xa8>
 8005032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005036:	2b15      	cmp	r3, #21
 8005038:	d8f6      	bhi.n	8005028 <_printf_i+0x28>
 800503a:	a101      	add	r1, pc, #4	@ (adr r1, 8005040 <_printf_i+0x40>)
 800503c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005040:	08005099 	.word	0x08005099
 8005044:	080050ad 	.word	0x080050ad
 8005048:	08005029 	.word	0x08005029
 800504c:	08005029 	.word	0x08005029
 8005050:	08005029 	.word	0x08005029
 8005054:	08005029 	.word	0x08005029
 8005058:	080050ad 	.word	0x080050ad
 800505c:	08005029 	.word	0x08005029
 8005060:	08005029 	.word	0x08005029
 8005064:	08005029 	.word	0x08005029
 8005068:	08005029 	.word	0x08005029
 800506c:	080051ad 	.word	0x080051ad
 8005070:	080050d7 	.word	0x080050d7
 8005074:	08005167 	.word	0x08005167
 8005078:	08005029 	.word	0x08005029
 800507c:	08005029 	.word	0x08005029
 8005080:	080051cf 	.word	0x080051cf
 8005084:	08005029 	.word	0x08005029
 8005088:	080050d7 	.word	0x080050d7
 800508c:	08005029 	.word	0x08005029
 8005090:	08005029 	.word	0x08005029
 8005094:	0800516f 	.word	0x0800516f
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	1d1a      	adds	r2, r3, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6032      	str	r2, [r6, #0]
 80050a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050a8:	2301      	movs	r3, #1
 80050aa:	e09d      	b.n	80051e8 <_printf_i+0x1e8>
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	6820      	ldr	r0, [r4, #0]
 80050b0:	1d19      	adds	r1, r3, #4
 80050b2:	6031      	str	r1, [r6, #0]
 80050b4:	0606      	lsls	r6, r0, #24
 80050b6:	d501      	bpl.n	80050bc <_printf_i+0xbc>
 80050b8:	681d      	ldr	r5, [r3, #0]
 80050ba:	e003      	b.n	80050c4 <_printf_i+0xc4>
 80050bc:	0645      	lsls	r5, r0, #25
 80050be:	d5fb      	bpl.n	80050b8 <_printf_i+0xb8>
 80050c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050c4:	2d00      	cmp	r5, #0
 80050c6:	da03      	bge.n	80050d0 <_printf_i+0xd0>
 80050c8:	232d      	movs	r3, #45	@ 0x2d
 80050ca:	426d      	negs	r5, r5
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d0:	4859      	ldr	r0, [pc, #356]	@ (8005238 <_printf_i+0x238>)
 80050d2:	230a      	movs	r3, #10
 80050d4:	e011      	b.n	80050fa <_printf_i+0xfa>
 80050d6:	6821      	ldr	r1, [r4, #0]
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	0608      	lsls	r0, r1, #24
 80050dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80050e0:	d402      	bmi.n	80050e8 <_printf_i+0xe8>
 80050e2:	0649      	lsls	r1, r1, #25
 80050e4:	bf48      	it	mi
 80050e6:	b2ad      	uxthmi	r5, r5
 80050e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ea:	4853      	ldr	r0, [pc, #332]	@ (8005238 <_printf_i+0x238>)
 80050ec:	6033      	str	r3, [r6, #0]
 80050ee:	bf14      	ite	ne
 80050f0:	230a      	movne	r3, #10
 80050f2:	2308      	moveq	r3, #8
 80050f4:	2100      	movs	r1, #0
 80050f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050fa:	6866      	ldr	r6, [r4, #4]
 80050fc:	60a6      	str	r6, [r4, #8]
 80050fe:	2e00      	cmp	r6, #0
 8005100:	bfa2      	ittt	ge
 8005102:	6821      	ldrge	r1, [r4, #0]
 8005104:	f021 0104 	bicge.w	r1, r1, #4
 8005108:	6021      	strge	r1, [r4, #0]
 800510a:	b90d      	cbnz	r5, 8005110 <_printf_i+0x110>
 800510c:	2e00      	cmp	r6, #0
 800510e:	d04b      	beq.n	80051a8 <_printf_i+0x1a8>
 8005110:	4616      	mov	r6, r2
 8005112:	fbb5 f1f3 	udiv	r1, r5, r3
 8005116:	fb03 5711 	mls	r7, r3, r1, r5
 800511a:	5dc7      	ldrb	r7, [r0, r7]
 800511c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005120:	462f      	mov	r7, r5
 8005122:	42bb      	cmp	r3, r7
 8005124:	460d      	mov	r5, r1
 8005126:	d9f4      	bls.n	8005112 <_printf_i+0x112>
 8005128:	2b08      	cmp	r3, #8
 800512a:	d10b      	bne.n	8005144 <_printf_i+0x144>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	07df      	lsls	r7, r3, #31
 8005130:	d508      	bpl.n	8005144 <_printf_i+0x144>
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	6861      	ldr	r1, [r4, #4]
 8005136:	4299      	cmp	r1, r3
 8005138:	bfde      	ittt	le
 800513a:	2330      	movle	r3, #48	@ 0x30
 800513c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005144:	1b92      	subs	r2, r2, r6
 8005146:	6122      	str	r2, [r4, #16]
 8005148:	f8cd a000 	str.w	sl, [sp]
 800514c:	464b      	mov	r3, r9
 800514e:	aa03      	add	r2, sp, #12
 8005150:	4621      	mov	r1, r4
 8005152:	4640      	mov	r0, r8
 8005154:	f7ff fee6 	bl	8004f24 <_printf_common>
 8005158:	3001      	adds	r0, #1
 800515a:	d14a      	bne.n	80051f2 <_printf_i+0x1f2>
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	b004      	add	sp, #16
 8005162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	f043 0320 	orr.w	r3, r3, #32
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	4833      	ldr	r0, [pc, #204]	@ (800523c <_printf_i+0x23c>)
 8005170:	2778      	movs	r7, #120	@ 0x78
 8005172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	6831      	ldr	r1, [r6, #0]
 800517a:	061f      	lsls	r7, r3, #24
 800517c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005180:	d402      	bmi.n	8005188 <_printf_i+0x188>
 8005182:	065f      	lsls	r7, r3, #25
 8005184:	bf48      	it	mi
 8005186:	b2ad      	uxthmi	r5, r5
 8005188:	6031      	str	r1, [r6, #0]
 800518a:	07d9      	lsls	r1, r3, #31
 800518c:	bf44      	itt	mi
 800518e:	f043 0320 	orrmi.w	r3, r3, #32
 8005192:	6023      	strmi	r3, [r4, #0]
 8005194:	b11d      	cbz	r5, 800519e <_printf_i+0x19e>
 8005196:	2310      	movs	r3, #16
 8005198:	e7ac      	b.n	80050f4 <_printf_i+0xf4>
 800519a:	4827      	ldr	r0, [pc, #156]	@ (8005238 <_printf_i+0x238>)
 800519c:	e7e9      	b.n	8005172 <_printf_i+0x172>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	f023 0320 	bic.w	r3, r3, #32
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	e7f6      	b.n	8005196 <_printf_i+0x196>
 80051a8:	4616      	mov	r6, r2
 80051aa:	e7bd      	b.n	8005128 <_printf_i+0x128>
 80051ac:	6833      	ldr	r3, [r6, #0]
 80051ae:	6825      	ldr	r5, [r4, #0]
 80051b0:	6961      	ldr	r1, [r4, #20]
 80051b2:	1d18      	adds	r0, r3, #4
 80051b4:	6030      	str	r0, [r6, #0]
 80051b6:	062e      	lsls	r6, r5, #24
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	d501      	bpl.n	80051c0 <_printf_i+0x1c0>
 80051bc:	6019      	str	r1, [r3, #0]
 80051be:	e002      	b.n	80051c6 <_printf_i+0x1c6>
 80051c0:	0668      	lsls	r0, r5, #25
 80051c2:	d5fb      	bpl.n	80051bc <_printf_i+0x1bc>
 80051c4:	8019      	strh	r1, [r3, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	6123      	str	r3, [r4, #16]
 80051ca:	4616      	mov	r6, r2
 80051cc:	e7bc      	b.n	8005148 <_printf_i+0x148>
 80051ce:	6833      	ldr	r3, [r6, #0]
 80051d0:	1d1a      	adds	r2, r3, #4
 80051d2:	6032      	str	r2, [r6, #0]
 80051d4:	681e      	ldr	r6, [r3, #0]
 80051d6:	6862      	ldr	r2, [r4, #4]
 80051d8:	2100      	movs	r1, #0
 80051da:	4630      	mov	r0, r6
 80051dc:	f7fb f818 	bl	8000210 <memchr>
 80051e0:	b108      	cbz	r0, 80051e6 <_printf_i+0x1e6>
 80051e2:	1b80      	subs	r0, r0, r6
 80051e4:	6060      	str	r0, [r4, #4]
 80051e6:	6863      	ldr	r3, [r4, #4]
 80051e8:	6123      	str	r3, [r4, #16]
 80051ea:	2300      	movs	r3, #0
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051f0:	e7aa      	b.n	8005148 <_printf_i+0x148>
 80051f2:	6923      	ldr	r3, [r4, #16]
 80051f4:	4632      	mov	r2, r6
 80051f6:	4649      	mov	r1, r9
 80051f8:	4640      	mov	r0, r8
 80051fa:	47d0      	blx	sl
 80051fc:	3001      	adds	r0, #1
 80051fe:	d0ad      	beq.n	800515c <_printf_i+0x15c>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	079b      	lsls	r3, r3, #30
 8005204:	d413      	bmi.n	800522e <_printf_i+0x22e>
 8005206:	68e0      	ldr	r0, [r4, #12]
 8005208:	9b03      	ldr	r3, [sp, #12]
 800520a:	4298      	cmp	r0, r3
 800520c:	bfb8      	it	lt
 800520e:	4618      	movlt	r0, r3
 8005210:	e7a6      	b.n	8005160 <_printf_i+0x160>
 8005212:	2301      	movs	r3, #1
 8005214:	4632      	mov	r2, r6
 8005216:	4649      	mov	r1, r9
 8005218:	4640      	mov	r0, r8
 800521a:	47d0      	blx	sl
 800521c:	3001      	adds	r0, #1
 800521e:	d09d      	beq.n	800515c <_printf_i+0x15c>
 8005220:	3501      	adds	r5, #1
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	9903      	ldr	r1, [sp, #12]
 8005226:	1a5b      	subs	r3, r3, r1
 8005228:	42ab      	cmp	r3, r5
 800522a:	dcf2      	bgt.n	8005212 <_printf_i+0x212>
 800522c:	e7eb      	b.n	8005206 <_printf_i+0x206>
 800522e:	2500      	movs	r5, #0
 8005230:	f104 0619 	add.w	r6, r4, #25
 8005234:	e7f5      	b.n	8005222 <_printf_i+0x222>
 8005236:	bf00      	nop
 8005238:	0800761a 	.word	0x0800761a
 800523c:	0800762b 	.word	0x0800762b

08005240 <std>:
 8005240:	2300      	movs	r3, #0
 8005242:	b510      	push	{r4, lr}
 8005244:	4604      	mov	r4, r0
 8005246:	e9c0 3300 	strd	r3, r3, [r0]
 800524a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800524e:	6083      	str	r3, [r0, #8]
 8005250:	8181      	strh	r1, [r0, #12]
 8005252:	6643      	str	r3, [r0, #100]	@ 0x64
 8005254:	81c2      	strh	r2, [r0, #14]
 8005256:	6183      	str	r3, [r0, #24]
 8005258:	4619      	mov	r1, r3
 800525a:	2208      	movs	r2, #8
 800525c:	305c      	adds	r0, #92	@ 0x5c
 800525e:	f000 f926 	bl	80054ae <memset>
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <std+0x58>)
 8005264:	6263      	str	r3, [r4, #36]	@ 0x24
 8005266:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <std+0x5c>)
 8005268:	62a3      	str	r3, [r4, #40]	@ 0x28
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <std+0x60>)
 800526c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800526e:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <std+0x64>)
 8005270:	6323      	str	r3, [r4, #48]	@ 0x30
 8005272:	4b0d      	ldr	r3, [pc, #52]	@ (80052a8 <std+0x68>)
 8005274:	6224      	str	r4, [r4, #32]
 8005276:	429c      	cmp	r4, r3
 8005278:	d006      	beq.n	8005288 <std+0x48>
 800527a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800527e:	4294      	cmp	r4, r2
 8005280:	d002      	beq.n	8005288 <std+0x48>
 8005282:	33d0      	adds	r3, #208	@ 0xd0
 8005284:	429c      	cmp	r4, r3
 8005286:	d105      	bne.n	8005294 <std+0x54>
 8005288:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005290:	f000 b99a 	b.w	80055c8 <__retarget_lock_init_recursive>
 8005294:	bd10      	pop	{r4, pc}
 8005296:	bf00      	nop
 8005298:	08005429 	.word	0x08005429
 800529c:	0800544b 	.word	0x0800544b
 80052a0:	08005483 	.word	0x08005483
 80052a4:	080054a7 	.word	0x080054a7
 80052a8:	200003d8 	.word	0x200003d8

080052ac <stdio_exit_handler>:
 80052ac:	4a02      	ldr	r2, [pc, #8]	@ (80052b8 <stdio_exit_handler+0xc>)
 80052ae:	4903      	ldr	r1, [pc, #12]	@ (80052bc <stdio_exit_handler+0x10>)
 80052b0:	4803      	ldr	r0, [pc, #12]	@ (80052c0 <stdio_exit_handler+0x14>)
 80052b2:	f000 b869 	b.w	8005388 <_fwalk_sglue>
 80052b6:	bf00      	nop
 80052b8:	2000001c 	.word	0x2000001c
 80052bc:	0800703d 	.word	0x0800703d
 80052c0:	2000002c 	.word	0x2000002c

080052c4 <cleanup_stdio>:
 80052c4:	6841      	ldr	r1, [r0, #4]
 80052c6:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <cleanup_stdio+0x34>)
 80052c8:	4299      	cmp	r1, r3
 80052ca:	b510      	push	{r4, lr}
 80052cc:	4604      	mov	r4, r0
 80052ce:	d001      	beq.n	80052d4 <cleanup_stdio+0x10>
 80052d0:	f001 feb4 	bl	800703c <_fflush_r>
 80052d4:	68a1      	ldr	r1, [r4, #8]
 80052d6:	4b09      	ldr	r3, [pc, #36]	@ (80052fc <cleanup_stdio+0x38>)
 80052d8:	4299      	cmp	r1, r3
 80052da:	d002      	beq.n	80052e2 <cleanup_stdio+0x1e>
 80052dc:	4620      	mov	r0, r4
 80052de:	f001 fead 	bl	800703c <_fflush_r>
 80052e2:	68e1      	ldr	r1, [r4, #12]
 80052e4:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <cleanup_stdio+0x3c>)
 80052e6:	4299      	cmp	r1, r3
 80052e8:	d004      	beq.n	80052f4 <cleanup_stdio+0x30>
 80052ea:	4620      	mov	r0, r4
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f0:	f001 bea4 	b.w	800703c <_fflush_r>
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	bf00      	nop
 80052f8:	200003d8 	.word	0x200003d8
 80052fc:	20000440 	.word	0x20000440
 8005300:	200004a8 	.word	0x200004a8

08005304 <global_stdio_init.part.0>:
 8005304:	b510      	push	{r4, lr}
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <global_stdio_init.part.0+0x30>)
 8005308:	4c0b      	ldr	r4, [pc, #44]	@ (8005338 <global_stdio_init.part.0+0x34>)
 800530a:	4a0c      	ldr	r2, [pc, #48]	@ (800533c <global_stdio_init.part.0+0x38>)
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	4620      	mov	r0, r4
 8005310:	2200      	movs	r2, #0
 8005312:	2104      	movs	r1, #4
 8005314:	f7ff ff94 	bl	8005240 <std>
 8005318:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800531c:	2201      	movs	r2, #1
 800531e:	2109      	movs	r1, #9
 8005320:	f7ff ff8e 	bl	8005240 <std>
 8005324:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005328:	2202      	movs	r2, #2
 800532a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532e:	2112      	movs	r1, #18
 8005330:	f7ff bf86 	b.w	8005240 <std>
 8005334:	20000510 	.word	0x20000510
 8005338:	200003d8 	.word	0x200003d8
 800533c:	080052ad 	.word	0x080052ad

08005340 <__sfp_lock_acquire>:
 8005340:	4801      	ldr	r0, [pc, #4]	@ (8005348 <__sfp_lock_acquire+0x8>)
 8005342:	f000 b942 	b.w	80055ca <__retarget_lock_acquire_recursive>
 8005346:	bf00      	nop
 8005348:	20000519 	.word	0x20000519

0800534c <__sfp_lock_release>:
 800534c:	4801      	ldr	r0, [pc, #4]	@ (8005354 <__sfp_lock_release+0x8>)
 800534e:	f000 b93d 	b.w	80055cc <__retarget_lock_release_recursive>
 8005352:	bf00      	nop
 8005354:	20000519 	.word	0x20000519

08005358 <__sinit>:
 8005358:	b510      	push	{r4, lr}
 800535a:	4604      	mov	r4, r0
 800535c:	f7ff fff0 	bl	8005340 <__sfp_lock_acquire>
 8005360:	6a23      	ldr	r3, [r4, #32]
 8005362:	b11b      	cbz	r3, 800536c <__sinit+0x14>
 8005364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005368:	f7ff bff0 	b.w	800534c <__sfp_lock_release>
 800536c:	4b04      	ldr	r3, [pc, #16]	@ (8005380 <__sinit+0x28>)
 800536e:	6223      	str	r3, [r4, #32]
 8005370:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <__sinit+0x2c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f5      	bne.n	8005364 <__sinit+0xc>
 8005378:	f7ff ffc4 	bl	8005304 <global_stdio_init.part.0>
 800537c:	e7f2      	b.n	8005364 <__sinit+0xc>
 800537e:	bf00      	nop
 8005380:	080052c5 	.word	0x080052c5
 8005384:	20000510 	.word	0x20000510

08005388 <_fwalk_sglue>:
 8005388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800538c:	4607      	mov	r7, r0
 800538e:	4688      	mov	r8, r1
 8005390:	4614      	mov	r4, r2
 8005392:	2600      	movs	r6, #0
 8005394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005398:	f1b9 0901 	subs.w	r9, r9, #1
 800539c:	d505      	bpl.n	80053aa <_fwalk_sglue+0x22>
 800539e:	6824      	ldr	r4, [r4, #0]
 80053a0:	2c00      	cmp	r4, #0
 80053a2:	d1f7      	bne.n	8005394 <_fwalk_sglue+0xc>
 80053a4:	4630      	mov	r0, r6
 80053a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053aa:	89ab      	ldrh	r3, [r5, #12]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d907      	bls.n	80053c0 <_fwalk_sglue+0x38>
 80053b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053b4:	3301      	adds	r3, #1
 80053b6:	d003      	beq.n	80053c0 <_fwalk_sglue+0x38>
 80053b8:	4629      	mov	r1, r5
 80053ba:	4638      	mov	r0, r7
 80053bc:	47c0      	blx	r8
 80053be:	4306      	orrs	r6, r0
 80053c0:	3568      	adds	r5, #104	@ 0x68
 80053c2:	e7e9      	b.n	8005398 <_fwalk_sglue+0x10>

080053c4 <iprintf>:
 80053c4:	b40f      	push	{r0, r1, r2, r3}
 80053c6:	b507      	push	{r0, r1, r2, lr}
 80053c8:	4906      	ldr	r1, [pc, #24]	@ (80053e4 <iprintf+0x20>)
 80053ca:	ab04      	add	r3, sp, #16
 80053cc:	6808      	ldr	r0, [r1, #0]
 80053ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80053d2:	6881      	ldr	r1, [r0, #8]
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	f001 fc95 	bl	8006d04 <_vfiprintf_r>
 80053da:	b003      	add	sp, #12
 80053dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e0:	b004      	add	sp, #16
 80053e2:	4770      	bx	lr
 80053e4:	20000028 	.word	0x20000028

080053e8 <siprintf>:
 80053e8:	b40e      	push	{r1, r2, r3}
 80053ea:	b500      	push	{lr}
 80053ec:	b09c      	sub	sp, #112	@ 0x70
 80053ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80053f0:	9002      	str	r0, [sp, #8]
 80053f2:	9006      	str	r0, [sp, #24]
 80053f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053f8:	4809      	ldr	r0, [pc, #36]	@ (8005420 <siprintf+0x38>)
 80053fa:	9107      	str	r1, [sp, #28]
 80053fc:	9104      	str	r1, [sp, #16]
 80053fe:	4909      	ldr	r1, [pc, #36]	@ (8005424 <siprintf+0x3c>)
 8005400:	f853 2b04 	ldr.w	r2, [r3], #4
 8005404:	9105      	str	r1, [sp, #20]
 8005406:	6800      	ldr	r0, [r0, #0]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	a902      	add	r1, sp, #8
 800540c:	f001 fb54 	bl	8006ab8 <_svfiprintf_r>
 8005410:	9b02      	ldr	r3, [sp, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	b01c      	add	sp, #112	@ 0x70
 8005418:	f85d eb04 	ldr.w	lr, [sp], #4
 800541c:	b003      	add	sp, #12
 800541e:	4770      	bx	lr
 8005420:	20000028 	.word	0x20000028
 8005424:	ffff0208 	.word	0xffff0208

08005428 <__sread>:
 8005428:	b510      	push	{r4, lr}
 800542a:	460c      	mov	r4, r1
 800542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005430:	f000 f86c 	bl	800550c <_read_r>
 8005434:	2800      	cmp	r0, #0
 8005436:	bfab      	itete	ge
 8005438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800543a:	89a3      	ldrhlt	r3, [r4, #12]
 800543c:	181b      	addge	r3, r3, r0
 800543e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005442:	bfac      	ite	ge
 8005444:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005446:	81a3      	strhlt	r3, [r4, #12]
 8005448:	bd10      	pop	{r4, pc}

0800544a <__swrite>:
 800544a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544e:	461f      	mov	r7, r3
 8005450:	898b      	ldrh	r3, [r1, #12]
 8005452:	05db      	lsls	r3, r3, #23
 8005454:	4605      	mov	r5, r0
 8005456:	460c      	mov	r4, r1
 8005458:	4616      	mov	r6, r2
 800545a:	d505      	bpl.n	8005468 <__swrite+0x1e>
 800545c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005460:	2302      	movs	r3, #2
 8005462:	2200      	movs	r2, #0
 8005464:	f000 f840 	bl	80054e8 <_lseek_r>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800546e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	4632      	mov	r2, r6
 8005476:	463b      	mov	r3, r7
 8005478:	4628      	mov	r0, r5
 800547a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	f000 b867 	b.w	8005550 <_write_r>

08005482 <__sseek>:
 8005482:	b510      	push	{r4, lr}
 8005484:	460c      	mov	r4, r1
 8005486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548a:	f000 f82d 	bl	80054e8 <_lseek_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	bf15      	itete	ne
 8005494:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800549a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800549e:	81a3      	strheq	r3, [r4, #12]
 80054a0:	bf18      	it	ne
 80054a2:	81a3      	strhne	r3, [r4, #12]
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <__sclose>:
 80054a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054aa:	f000 b80d 	b.w	80054c8 <_close_r>

080054ae <memset>:
 80054ae:	4402      	add	r2, r0
 80054b0:	4603      	mov	r3, r0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d100      	bne.n	80054b8 <memset+0xa>
 80054b6:	4770      	bx	lr
 80054b8:	f803 1b01 	strb.w	r1, [r3], #1
 80054bc:	e7f9      	b.n	80054b2 <memset+0x4>
	...

080054c0 <_localeconv_r>:
 80054c0:	4800      	ldr	r0, [pc, #0]	@ (80054c4 <_localeconv_r+0x4>)
 80054c2:	4770      	bx	lr
 80054c4:	20000168 	.word	0x20000168

080054c8 <_close_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d06      	ldr	r5, [pc, #24]	@ (80054e4 <_close_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fc fb64 	bl	8001ba0 <_close>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_close_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_close_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20000514 	.word	0x20000514

080054e8 <_lseek_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	@ (8005508 <_lseek_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fc fb79 	bl	8001bee <_lseek>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_lseek_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_lseek_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	20000514 	.word	0x20000514

0800550c <_read_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	@ (800552c <_read_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fc fb07 	bl	8001b2e <_read>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_read_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_read_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20000514 	.word	0x20000514

08005530 <_sbrk_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d06      	ldr	r5, [pc, #24]	@ (800554c <_sbrk_r+0x1c>)
 8005534:	2300      	movs	r3, #0
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	f7fc fb64 	bl	8001c08 <_sbrk>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_sbrk_r+0x1a>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_sbrk_r+0x1a>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	20000514 	.word	0x20000514

08005550 <_write_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d07      	ldr	r5, [pc, #28]	@ (8005570 <_write_r+0x20>)
 8005554:	4604      	mov	r4, r0
 8005556:	4608      	mov	r0, r1
 8005558:	4611      	mov	r1, r2
 800555a:	2200      	movs	r2, #0
 800555c:	602a      	str	r2, [r5, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	f7fc fb02 	bl	8001b68 <_write>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_write_r+0x1e>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_write_r+0x1e>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	20000514 	.word	0x20000514

08005574 <__errno>:
 8005574:	4b01      	ldr	r3, [pc, #4]	@ (800557c <__errno+0x8>)
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000028 	.word	0x20000028

08005580 <__libc_init_array>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	4d0d      	ldr	r5, [pc, #52]	@ (80055b8 <__libc_init_array+0x38>)
 8005584:	4c0d      	ldr	r4, [pc, #52]	@ (80055bc <__libc_init_array+0x3c>)
 8005586:	1b64      	subs	r4, r4, r5
 8005588:	10a4      	asrs	r4, r4, #2
 800558a:	2600      	movs	r6, #0
 800558c:	42a6      	cmp	r6, r4
 800558e:	d109      	bne.n	80055a4 <__libc_init_array+0x24>
 8005590:	4d0b      	ldr	r5, [pc, #44]	@ (80055c0 <__libc_init_array+0x40>)
 8005592:	4c0c      	ldr	r4, [pc, #48]	@ (80055c4 <__libc_init_array+0x44>)
 8005594:	f001 ffa0 	bl	80074d8 <_init>
 8005598:	1b64      	subs	r4, r4, r5
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	2600      	movs	r6, #0
 800559e:	42a6      	cmp	r6, r4
 80055a0:	d105      	bne.n	80055ae <__libc_init_array+0x2e>
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a8:	4798      	blx	r3
 80055aa:	3601      	adds	r6, #1
 80055ac:	e7ee      	b.n	800558c <__libc_init_array+0xc>
 80055ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b2:	4798      	blx	r3
 80055b4:	3601      	adds	r6, #1
 80055b6:	e7f2      	b.n	800559e <__libc_init_array+0x1e>
 80055b8:	08007980 	.word	0x08007980
 80055bc:	08007980 	.word	0x08007980
 80055c0:	08007980 	.word	0x08007980
 80055c4:	08007984 	.word	0x08007984

080055c8 <__retarget_lock_init_recursive>:
 80055c8:	4770      	bx	lr

080055ca <__retarget_lock_acquire_recursive>:
 80055ca:	4770      	bx	lr

080055cc <__retarget_lock_release_recursive>:
 80055cc:	4770      	bx	lr

080055ce <quorem>:
 80055ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d2:	6903      	ldr	r3, [r0, #16]
 80055d4:	690c      	ldr	r4, [r1, #16]
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	4607      	mov	r7, r0
 80055da:	db7e      	blt.n	80056da <quorem+0x10c>
 80055dc:	3c01      	subs	r4, #1
 80055de:	f101 0814 	add.w	r8, r1, #20
 80055e2:	00a3      	lsls	r3, r4, #2
 80055e4:	f100 0514 	add.w	r5, r0, #20
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f8:	3301      	adds	r3, #1
 80055fa:	429a      	cmp	r2, r3
 80055fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005600:	fbb2 f6f3 	udiv	r6, r2, r3
 8005604:	d32e      	bcc.n	8005664 <quorem+0x96>
 8005606:	f04f 0a00 	mov.w	sl, #0
 800560a:	46c4      	mov	ip, r8
 800560c:	46ae      	mov	lr, r5
 800560e:	46d3      	mov	fp, sl
 8005610:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005614:	b298      	uxth	r0, r3
 8005616:	fb06 a000 	mla	r0, r6, r0, sl
 800561a:	0c02      	lsrs	r2, r0, #16
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	fb06 2303 	mla	r3, r6, r3, r2
 8005622:	f8de 2000 	ldr.w	r2, [lr]
 8005626:	b280      	uxth	r0, r0
 8005628:	b292      	uxth	r2, r2
 800562a:	1a12      	subs	r2, r2, r0
 800562c:	445a      	add	r2, fp
 800562e:	f8de 0000 	ldr.w	r0, [lr]
 8005632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005636:	b29b      	uxth	r3, r3
 8005638:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800563c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005640:	b292      	uxth	r2, r2
 8005642:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005646:	45e1      	cmp	r9, ip
 8005648:	f84e 2b04 	str.w	r2, [lr], #4
 800564c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005650:	d2de      	bcs.n	8005610 <quorem+0x42>
 8005652:	9b00      	ldr	r3, [sp, #0]
 8005654:	58eb      	ldr	r3, [r5, r3]
 8005656:	b92b      	cbnz	r3, 8005664 <quorem+0x96>
 8005658:	9b01      	ldr	r3, [sp, #4]
 800565a:	3b04      	subs	r3, #4
 800565c:	429d      	cmp	r5, r3
 800565e:	461a      	mov	r2, r3
 8005660:	d32f      	bcc.n	80056c2 <quorem+0xf4>
 8005662:	613c      	str	r4, [r7, #16]
 8005664:	4638      	mov	r0, r7
 8005666:	f001 f8c3 	bl	80067f0 <__mcmp>
 800566a:	2800      	cmp	r0, #0
 800566c:	db25      	blt.n	80056ba <quorem+0xec>
 800566e:	4629      	mov	r1, r5
 8005670:	2000      	movs	r0, #0
 8005672:	f858 2b04 	ldr.w	r2, [r8], #4
 8005676:	f8d1 c000 	ldr.w	ip, [r1]
 800567a:	fa1f fe82 	uxth.w	lr, r2
 800567e:	fa1f f38c 	uxth.w	r3, ip
 8005682:	eba3 030e 	sub.w	r3, r3, lr
 8005686:	4403      	add	r3, r0
 8005688:	0c12      	lsrs	r2, r2, #16
 800568a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800568e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005692:	b29b      	uxth	r3, r3
 8005694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005698:	45c1      	cmp	r9, r8
 800569a:	f841 3b04 	str.w	r3, [r1], #4
 800569e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056a2:	d2e6      	bcs.n	8005672 <quorem+0xa4>
 80056a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ac:	b922      	cbnz	r2, 80056b8 <quorem+0xea>
 80056ae:	3b04      	subs	r3, #4
 80056b0:	429d      	cmp	r5, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	d30b      	bcc.n	80056ce <quorem+0x100>
 80056b6:	613c      	str	r4, [r7, #16]
 80056b8:	3601      	adds	r6, #1
 80056ba:	4630      	mov	r0, r6
 80056bc:	b003      	add	sp, #12
 80056be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	3b04      	subs	r3, #4
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	d1cb      	bne.n	8005662 <quorem+0x94>
 80056ca:	3c01      	subs	r4, #1
 80056cc:	e7c6      	b.n	800565c <quorem+0x8e>
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d1ef      	bne.n	80056b6 <quorem+0xe8>
 80056d6:	3c01      	subs	r4, #1
 80056d8:	e7ea      	b.n	80056b0 <quorem+0xe2>
 80056da:	2000      	movs	r0, #0
 80056dc:	e7ee      	b.n	80056bc <quorem+0xee>
	...

080056e0 <_dtoa_r>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	69c7      	ldr	r7, [r0, #28]
 80056e6:	b099      	sub	sp, #100	@ 0x64
 80056e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056ec:	ec55 4b10 	vmov	r4, r5, d0
 80056f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80056f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80056f4:	4683      	mov	fp, r0
 80056f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80056f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056fa:	b97f      	cbnz	r7, 800571c <_dtoa_r+0x3c>
 80056fc:	2010      	movs	r0, #16
 80056fe:	f7ff f891 	bl	8004824 <malloc>
 8005702:	4602      	mov	r2, r0
 8005704:	f8cb 001c 	str.w	r0, [fp, #28]
 8005708:	b920      	cbnz	r0, 8005714 <_dtoa_r+0x34>
 800570a:	4ba7      	ldr	r3, [pc, #668]	@ (80059a8 <_dtoa_r+0x2c8>)
 800570c:	21ef      	movs	r1, #239	@ 0xef
 800570e:	48a7      	ldr	r0, [pc, #668]	@ (80059ac <_dtoa_r+0x2cc>)
 8005710:	f001 fd78 	bl	8007204 <__assert_func>
 8005714:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005718:	6007      	str	r7, [r0, #0]
 800571a:	60c7      	str	r7, [r0, #12]
 800571c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005720:	6819      	ldr	r1, [r3, #0]
 8005722:	b159      	cbz	r1, 800573c <_dtoa_r+0x5c>
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	604a      	str	r2, [r1, #4]
 8005728:	2301      	movs	r3, #1
 800572a:	4093      	lsls	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
 800572e:	4658      	mov	r0, fp
 8005730:	f000 fe24 	bl	800637c <_Bfree>
 8005734:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	1e2b      	subs	r3, r5, #0
 800573e:	bfb9      	ittee	lt
 8005740:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005744:	9303      	strlt	r3, [sp, #12]
 8005746:	2300      	movge	r3, #0
 8005748:	6033      	strge	r3, [r6, #0]
 800574a:	9f03      	ldr	r7, [sp, #12]
 800574c:	4b98      	ldr	r3, [pc, #608]	@ (80059b0 <_dtoa_r+0x2d0>)
 800574e:	bfbc      	itt	lt
 8005750:	2201      	movlt	r2, #1
 8005752:	6032      	strlt	r2, [r6, #0]
 8005754:	43bb      	bics	r3, r7
 8005756:	d112      	bne.n	800577e <_dtoa_r+0x9e>
 8005758:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800575a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005764:	4323      	orrs	r3, r4
 8005766:	f000 854d 	beq.w	8006204 <_dtoa_r+0xb24>
 800576a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800576c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80059c4 <_dtoa_r+0x2e4>
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 854f 	beq.w	8006214 <_dtoa_r+0xb34>
 8005776:	f10a 0303 	add.w	r3, sl, #3
 800577a:	f000 bd49 	b.w	8006210 <_dtoa_r+0xb30>
 800577e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	ec51 0b17 	vmov	r0, r1, d7
 8005788:	2300      	movs	r3, #0
 800578a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800578e:	f7fb f9bb 	bl	8000b08 <__aeabi_dcmpeq>
 8005792:	4680      	mov	r8, r0
 8005794:	b158      	cbz	r0, 80057ae <_dtoa_r+0xce>
 8005796:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005798:	2301      	movs	r3, #1
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800579e:	b113      	cbz	r3, 80057a6 <_dtoa_r+0xc6>
 80057a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80057a2:	4b84      	ldr	r3, [pc, #528]	@ (80059b4 <_dtoa_r+0x2d4>)
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80059c8 <_dtoa_r+0x2e8>
 80057aa:	f000 bd33 	b.w	8006214 <_dtoa_r+0xb34>
 80057ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80057b2:	aa16      	add	r2, sp, #88	@ 0x58
 80057b4:	a917      	add	r1, sp, #92	@ 0x5c
 80057b6:	4658      	mov	r0, fp
 80057b8:	f001 f8ca 	bl	8006950 <__d2b>
 80057bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80057c0:	4681      	mov	r9, r0
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	d077      	beq.n	80058b6 <_dtoa_r+0x1d6>
 80057c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80057cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057e0:	4619      	mov	r1, r3
 80057e2:	2200      	movs	r2, #0
 80057e4:	4b74      	ldr	r3, [pc, #464]	@ (80059b8 <_dtoa_r+0x2d8>)
 80057e6:	f7fa fd6f 	bl	80002c8 <__aeabi_dsub>
 80057ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005990 <_dtoa_r+0x2b0>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f7fa ff22 	bl	8000638 <__aeabi_dmul>
 80057f4:	a368      	add	r3, pc, #416	@ (adr r3, 8005998 <_dtoa_r+0x2b8>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fd67 	bl	80002cc <__adddf3>
 80057fe:	4604      	mov	r4, r0
 8005800:	4630      	mov	r0, r6
 8005802:	460d      	mov	r5, r1
 8005804:	f7fa feae 	bl	8000564 <__aeabi_i2d>
 8005808:	a365      	add	r3, pc, #404	@ (adr r3, 80059a0 <_dtoa_r+0x2c0>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fa ff13 	bl	8000638 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fa fd57 	bl	80002cc <__adddf3>
 800581e:	4604      	mov	r4, r0
 8005820:	460d      	mov	r5, r1
 8005822:	f7fb f9b9 	bl	8000b98 <__aeabi_d2iz>
 8005826:	2200      	movs	r2, #0
 8005828:	4607      	mov	r7, r0
 800582a:	2300      	movs	r3, #0
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fb f974 	bl	8000b1c <__aeabi_dcmplt>
 8005834:	b140      	cbz	r0, 8005848 <_dtoa_r+0x168>
 8005836:	4638      	mov	r0, r7
 8005838:	f7fa fe94 	bl	8000564 <__aeabi_i2d>
 800583c:	4622      	mov	r2, r4
 800583e:	462b      	mov	r3, r5
 8005840:	f7fb f962 	bl	8000b08 <__aeabi_dcmpeq>
 8005844:	b900      	cbnz	r0, 8005848 <_dtoa_r+0x168>
 8005846:	3f01      	subs	r7, #1
 8005848:	2f16      	cmp	r7, #22
 800584a:	d851      	bhi.n	80058f0 <_dtoa_r+0x210>
 800584c:	4b5b      	ldr	r3, [pc, #364]	@ (80059bc <_dtoa_r+0x2dc>)
 800584e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800585a:	f7fb f95f 	bl	8000b1c <__aeabi_dcmplt>
 800585e:	2800      	cmp	r0, #0
 8005860:	d048      	beq.n	80058f4 <_dtoa_r+0x214>
 8005862:	3f01      	subs	r7, #1
 8005864:	2300      	movs	r3, #0
 8005866:	9312      	str	r3, [sp, #72]	@ 0x48
 8005868:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800586a:	1b9b      	subs	r3, r3, r6
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	bf44      	itt	mi
 8005870:	f1c3 0801 	rsbmi	r8, r3, #1
 8005874:	2300      	movmi	r3, #0
 8005876:	9208      	str	r2, [sp, #32]
 8005878:	bf54      	ite	pl
 800587a:	f04f 0800 	movpl.w	r8, #0
 800587e:	9308      	strmi	r3, [sp, #32]
 8005880:	2f00      	cmp	r7, #0
 8005882:	db39      	blt.n	80058f8 <_dtoa_r+0x218>
 8005884:	9b08      	ldr	r3, [sp, #32]
 8005886:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005888:	443b      	add	r3, r7
 800588a:	9308      	str	r3, [sp, #32]
 800588c:	2300      	movs	r3, #0
 800588e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005892:	2b09      	cmp	r3, #9
 8005894:	d864      	bhi.n	8005960 <_dtoa_r+0x280>
 8005896:	2b05      	cmp	r3, #5
 8005898:	bfc4      	itt	gt
 800589a:	3b04      	subgt	r3, #4
 800589c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800589e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a0:	f1a3 0302 	sub.w	r3, r3, #2
 80058a4:	bfcc      	ite	gt
 80058a6:	2400      	movgt	r4, #0
 80058a8:	2401      	movle	r4, #1
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d863      	bhi.n	8005976 <_dtoa_r+0x296>
 80058ae:	e8df f003 	tbb	[pc, r3]
 80058b2:	372a      	.short	0x372a
 80058b4:	5535      	.short	0x5535
 80058b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80058ba:	441e      	add	r6, r3
 80058bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	bfc1      	itttt	gt
 80058c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058c8:	409f      	lslgt	r7, r3
 80058ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058d2:	bfd6      	itet	le
 80058d4:	f1c3 0320 	rsble	r3, r3, #32
 80058d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80058dc:	fa04 f003 	lslle.w	r0, r4, r3
 80058e0:	f7fa fe30 	bl	8000544 <__aeabi_ui2d>
 80058e4:	2201      	movs	r2, #1
 80058e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058ea:	3e01      	subs	r6, #1
 80058ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80058ee:	e777      	b.n	80057e0 <_dtoa_r+0x100>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e7b8      	b.n	8005866 <_dtoa_r+0x186>
 80058f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80058f6:	e7b7      	b.n	8005868 <_dtoa_r+0x188>
 80058f8:	427b      	negs	r3, r7
 80058fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80058fc:	2300      	movs	r3, #0
 80058fe:	eba8 0807 	sub.w	r8, r8, r7
 8005902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005904:	e7c4      	b.n	8005890 <_dtoa_r+0x1b0>
 8005906:	2300      	movs	r3, #0
 8005908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800590a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800590c:	2b00      	cmp	r3, #0
 800590e:	dc35      	bgt.n	800597c <_dtoa_r+0x29c>
 8005910:	2301      	movs	r3, #1
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	461a      	mov	r2, r3
 8005918:	920e      	str	r2, [sp, #56]	@ 0x38
 800591a:	e00b      	b.n	8005934 <_dtoa_r+0x254>
 800591c:	2301      	movs	r3, #1
 800591e:	e7f3      	b.n	8005908 <_dtoa_r+0x228>
 8005920:	2300      	movs	r3, #0
 8005922:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	bfb8      	it	lt
 8005932:	2301      	movlt	r3, #1
 8005934:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005938:	2100      	movs	r1, #0
 800593a:	2204      	movs	r2, #4
 800593c:	f102 0514 	add.w	r5, r2, #20
 8005940:	429d      	cmp	r5, r3
 8005942:	d91f      	bls.n	8005984 <_dtoa_r+0x2a4>
 8005944:	6041      	str	r1, [r0, #4]
 8005946:	4658      	mov	r0, fp
 8005948:	f000 fcd8 	bl	80062fc <_Balloc>
 800594c:	4682      	mov	sl, r0
 800594e:	2800      	cmp	r0, #0
 8005950:	d13c      	bne.n	80059cc <_dtoa_r+0x2ec>
 8005952:	4b1b      	ldr	r3, [pc, #108]	@ (80059c0 <_dtoa_r+0x2e0>)
 8005954:	4602      	mov	r2, r0
 8005956:	f240 11af 	movw	r1, #431	@ 0x1af
 800595a:	e6d8      	b.n	800570e <_dtoa_r+0x2e>
 800595c:	2301      	movs	r3, #1
 800595e:	e7e0      	b.n	8005922 <_dtoa_r+0x242>
 8005960:	2401      	movs	r4, #1
 8005962:	2300      	movs	r3, #0
 8005964:	9309      	str	r3, [sp, #36]	@ 0x24
 8005966:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005968:	f04f 33ff 	mov.w	r3, #4294967295
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	9307      	str	r3, [sp, #28]
 8005970:	2200      	movs	r2, #0
 8005972:	2312      	movs	r3, #18
 8005974:	e7d0      	b.n	8005918 <_dtoa_r+0x238>
 8005976:	2301      	movs	r3, #1
 8005978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800597a:	e7f5      	b.n	8005968 <_dtoa_r+0x288>
 800597c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	9307      	str	r3, [sp, #28]
 8005982:	e7d7      	b.n	8005934 <_dtoa_r+0x254>
 8005984:	3101      	adds	r1, #1
 8005986:	0052      	lsls	r2, r2, #1
 8005988:	e7d8      	b.n	800593c <_dtoa_r+0x25c>
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w
 8005990:	636f4361 	.word	0x636f4361
 8005994:	3fd287a7 	.word	0x3fd287a7
 8005998:	8b60c8b3 	.word	0x8b60c8b3
 800599c:	3fc68a28 	.word	0x3fc68a28
 80059a0:	509f79fb 	.word	0x509f79fb
 80059a4:	3fd34413 	.word	0x3fd34413
 80059a8:	08007649 	.word	0x08007649
 80059ac:	08007660 	.word	0x08007660
 80059b0:	7ff00000 	.word	0x7ff00000
 80059b4:	08007619 	.word	0x08007619
 80059b8:	3ff80000 	.word	0x3ff80000
 80059bc:	08007758 	.word	0x08007758
 80059c0:	080076b8 	.word	0x080076b8
 80059c4:	08007645 	.word	0x08007645
 80059c8:	08007618 	.word	0x08007618
 80059cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059d0:	6018      	str	r0, [r3, #0]
 80059d2:	9b07      	ldr	r3, [sp, #28]
 80059d4:	2b0e      	cmp	r3, #14
 80059d6:	f200 80a4 	bhi.w	8005b22 <_dtoa_r+0x442>
 80059da:	2c00      	cmp	r4, #0
 80059dc:	f000 80a1 	beq.w	8005b22 <_dtoa_r+0x442>
 80059e0:	2f00      	cmp	r7, #0
 80059e2:	dd33      	ble.n	8005a4c <_dtoa_r+0x36c>
 80059e4:	4bad      	ldr	r3, [pc, #692]	@ (8005c9c <_dtoa_r+0x5bc>)
 80059e6:	f007 020f 	and.w	r2, r7, #15
 80059ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ee:	ed93 7b00 	vldr	d7, [r3]
 80059f2:	05f8      	lsls	r0, r7, #23
 80059f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059fc:	d516      	bpl.n	8005a2c <_dtoa_r+0x34c>
 80059fe:	4ba8      	ldr	r3, [pc, #672]	@ (8005ca0 <_dtoa_r+0x5c0>)
 8005a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a08:	f7fa ff40 	bl	800088c <__aeabi_ddiv>
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	f004 040f 	and.w	r4, r4, #15
 8005a14:	2603      	movs	r6, #3
 8005a16:	4da2      	ldr	r5, [pc, #648]	@ (8005ca0 <_dtoa_r+0x5c0>)
 8005a18:	b954      	cbnz	r4, 8005a30 <_dtoa_r+0x350>
 8005a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a22:	f7fa ff33 	bl	800088c <__aeabi_ddiv>
 8005a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a2a:	e028      	b.n	8005a7e <_dtoa_r+0x39e>
 8005a2c:	2602      	movs	r6, #2
 8005a2e:	e7f2      	b.n	8005a16 <_dtoa_r+0x336>
 8005a30:	07e1      	lsls	r1, r4, #31
 8005a32:	d508      	bpl.n	8005a46 <_dtoa_r+0x366>
 8005a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a3c:	f7fa fdfc 	bl	8000638 <__aeabi_dmul>
 8005a40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a44:	3601      	adds	r6, #1
 8005a46:	1064      	asrs	r4, r4, #1
 8005a48:	3508      	adds	r5, #8
 8005a4a:	e7e5      	b.n	8005a18 <_dtoa_r+0x338>
 8005a4c:	f000 80d2 	beq.w	8005bf4 <_dtoa_r+0x514>
 8005a50:	427c      	negs	r4, r7
 8005a52:	4b92      	ldr	r3, [pc, #584]	@ (8005c9c <_dtoa_r+0x5bc>)
 8005a54:	4d92      	ldr	r5, [pc, #584]	@ (8005ca0 <_dtoa_r+0x5c0>)
 8005a56:	f004 020f 	and.w	r2, r4, #15
 8005a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a66:	f7fa fde7 	bl	8000638 <__aeabi_dmul>
 8005a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a6e:	1124      	asrs	r4, r4, #4
 8005a70:	2300      	movs	r3, #0
 8005a72:	2602      	movs	r6, #2
 8005a74:	2c00      	cmp	r4, #0
 8005a76:	f040 80b2 	bne.w	8005bde <_dtoa_r+0x4fe>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1d3      	bne.n	8005a26 <_dtoa_r+0x346>
 8005a7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80b7 	beq.w	8005bf8 <_dtoa_r+0x518>
 8005a8a:	4b86      	ldr	r3, [pc, #536]	@ (8005ca4 <_dtoa_r+0x5c4>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fb f843 	bl	8000b1c <__aeabi_dcmplt>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f000 80ae 	beq.w	8005bf8 <_dtoa_r+0x518>
 8005a9c:	9b07      	ldr	r3, [sp, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 80aa 	beq.w	8005bf8 <_dtoa_r+0x518>
 8005aa4:	9b00      	ldr	r3, [sp, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	dd37      	ble.n	8005b1a <_dtoa_r+0x43a>
 8005aaa:	1e7b      	subs	r3, r7, #1
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4b7d      	ldr	r3, [pc, #500]	@ (8005ca8 <_dtoa_r+0x5c8>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fa fdbf 	bl	8000638 <__aeabi_dmul>
 8005aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005abe:	9c00      	ldr	r4, [sp, #0]
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7fa fd4e 	bl	8000564 <__aeabi_i2d>
 8005ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005acc:	f7fa fdb4 	bl	8000638 <__aeabi_dmul>
 8005ad0:	4b76      	ldr	r3, [pc, #472]	@ (8005cac <_dtoa_r+0x5cc>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f7fa fbfa 	bl	80002cc <__adddf3>
 8005ad8:	4605      	mov	r5, r0
 8005ada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ade:	2c00      	cmp	r4, #0
 8005ae0:	f040 808d 	bne.w	8005bfe <_dtoa_r+0x51e>
 8005ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ae8:	4b71      	ldr	r3, [pc, #452]	@ (8005cb0 <_dtoa_r+0x5d0>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	f7fa fbec 	bl	80002c8 <__aeabi_dsub>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005af8:	462a      	mov	r2, r5
 8005afa:	4633      	mov	r3, r6
 8005afc:	f7fb f82c 	bl	8000b58 <__aeabi_dcmpgt>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	f040 828b 	bne.w	800601c <_dtoa_r+0x93c>
 8005b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b0a:	462a      	mov	r2, r5
 8005b0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b10:	f7fb f804 	bl	8000b1c <__aeabi_dcmplt>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f040 8128 	bne.w	8005d6a <_dtoa_r+0x68a>
 8005b1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f2c0 815a 	blt.w	8005dde <_dtoa_r+0x6fe>
 8005b2a:	2f0e      	cmp	r7, #14
 8005b2c:	f300 8157 	bgt.w	8005dde <_dtoa_r+0x6fe>
 8005b30:	4b5a      	ldr	r3, [pc, #360]	@ (8005c9c <_dtoa_r+0x5bc>)
 8005b32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b36:	ed93 7b00 	vldr	d7, [r3]
 8005b3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	ed8d 7b00 	vstr	d7, [sp]
 8005b42:	da03      	bge.n	8005b4c <_dtoa_r+0x46c>
 8005b44:	9b07      	ldr	r3, [sp, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f340 8101 	ble.w	8005d4e <_dtoa_r+0x66e>
 8005b4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b50:	4656      	mov	r6, sl
 8005b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa fe97 	bl	800088c <__aeabi_ddiv>
 8005b5e:	f7fb f81b 	bl	8000b98 <__aeabi_d2iz>
 8005b62:	4680      	mov	r8, r0
 8005b64:	f7fa fcfe 	bl	8000564 <__aeabi_i2d>
 8005b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b6c:	f7fa fd64 	bl	8000638 <__aeabi_dmul>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4620      	mov	r0, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b7c:	f7fa fba4 	bl	80002c8 <__aeabi_dsub>
 8005b80:	f806 4b01 	strb.w	r4, [r6], #1
 8005b84:	9d07      	ldr	r5, [sp, #28]
 8005b86:	eba6 040a 	sub.w	r4, r6, sl
 8005b8a:	42a5      	cmp	r5, r4
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	f040 8117 	bne.w	8005dc2 <_dtoa_r+0x6e2>
 8005b94:	f7fa fb9a 	bl	80002cc <__adddf3>
 8005b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	f7fa ffda 	bl	8000b58 <__aeabi_dcmpgt>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f040 80f9 	bne.w	8005d9c <_dtoa_r+0x6bc>
 8005baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	f7fa ffa9 	bl	8000b08 <__aeabi_dcmpeq>
 8005bb6:	b118      	cbz	r0, 8005bc0 <_dtoa_r+0x4e0>
 8005bb8:	f018 0f01 	tst.w	r8, #1
 8005bbc:	f040 80ee 	bne.w	8005d9c <_dtoa_r+0x6bc>
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4658      	mov	r0, fp
 8005bc4:	f000 fbda 	bl	800637c <_Bfree>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	7033      	strb	r3, [r6, #0]
 8005bcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005bce:	3701      	adds	r7, #1
 8005bd0:	601f      	str	r7, [r3, #0]
 8005bd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 831d 	beq.w	8006214 <_dtoa_r+0xb34>
 8005bda:	601e      	str	r6, [r3, #0]
 8005bdc:	e31a      	b.n	8006214 <_dtoa_r+0xb34>
 8005bde:	07e2      	lsls	r2, r4, #31
 8005be0:	d505      	bpl.n	8005bee <_dtoa_r+0x50e>
 8005be2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005be6:	f7fa fd27 	bl	8000638 <__aeabi_dmul>
 8005bea:	3601      	adds	r6, #1
 8005bec:	2301      	movs	r3, #1
 8005bee:	1064      	asrs	r4, r4, #1
 8005bf0:	3508      	adds	r5, #8
 8005bf2:	e73f      	b.n	8005a74 <_dtoa_r+0x394>
 8005bf4:	2602      	movs	r6, #2
 8005bf6:	e742      	b.n	8005a7e <_dtoa_r+0x39e>
 8005bf8:	9c07      	ldr	r4, [sp, #28]
 8005bfa:	9704      	str	r7, [sp, #16]
 8005bfc:	e761      	b.n	8005ac2 <_dtoa_r+0x3e2>
 8005bfe:	4b27      	ldr	r3, [pc, #156]	@ (8005c9c <_dtoa_r+0x5bc>)
 8005c00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c0a:	4454      	add	r4, sl
 8005c0c:	2900      	cmp	r1, #0
 8005c0e:	d053      	beq.n	8005cb8 <_dtoa_r+0x5d8>
 8005c10:	4928      	ldr	r1, [pc, #160]	@ (8005cb4 <_dtoa_r+0x5d4>)
 8005c12:	2000      	movs	r0, #0
 8005c14:	f7fa fe3a 	bl	800088c <__aeabi_ddiv>
 8005c18:	4633      	mov	r3, r6
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	f7fa fb54 	bl	80002c8 <__aeabi_dsub>
 8005c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c24:	4656      	mov	r6, sl
 8005c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2a:	f7fa ffb5 	bl	8000b98 <__aeabi_d2iz>
 8005c2e:	4605      	mov	r5, r0
 8005c30:	f7fa fc98 	bl	8000564 <__aeabi_i2d>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c3c:	f7fa fb44 	bl	80002c8 <__aeabi_dsub>
 8005c40:	3530      	adds	r5, #48	@ 0x30
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c4a:	f806 5b01 	strb.w	r5, [r6], #1
 8005c4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c52:	f7fa ff63 	bl	8000b1c <__aeabi_dcmplt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d171      	bne.n	8005d3e <_dtoa_r+0x65e>
 8005c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c5e:	4911      	ldr	r1, [pc, #68]	@ (8005ca4 <_dtoa_r+0x5c4>)
 8005c60:	2000      	movs	r0, #0
 8005c62:	f7fa fb31 	bl	80002c8 <__aeabi_dsub>
 8005c66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c6a:	f7fa ff57 	bl	8000b1c <__aeabi_dcmplt>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f040 8095 	bne.w	8005d9e <_dtoa_r+0x6be>
 8005c74:	42a6      	cmp	r6, r4
 8005c76:	f43f af50 	beq.w	8005b1a <_dtoa_r+0x43a>
 8005c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <_dtoa_r+0x5c8>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	f7fa fcd9 	bl	8000638 <__aeabi_dmul>
 8005c86:	4b08      	ldr	r3, [pc, #32]	@ (8005ca8 <_dtoa_r+0x5c8>)
 8005c88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c92:	f7fa fcd1 	bl	8000638 <__aeabi_dmul>
 8005c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9a:	e7c4      	b.n	8005c26 <_dtoa_r+0x546>
 8005c9c:	08007758 	.word	0x08007758
 8005ca0:	08007730 	.word	0x08007730
 8005ca4:	3ff00000 	.word	0x3ff00000
 8005ca8:	40240000 	.word	0x40240000
 8005cac:	401c0000 	.word	0x401c0000
 8005cb0:	40140000 	.word	0x40140000
 8005cb4:	3fe00000 	.word	0x3fe00000
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f7fa fcbc 	bl	8000638 <__aeabi_dmul>
 8005cc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cc4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005cc6:	4656      	mov	r6, sl
 8005cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ccc:	f7fa ff64 	bl	8000b98 <__aeabi_d2iz>
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	f7fa fc47 	bl	8000564 <__aeabi_i2d>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cde:	f7fa faf3 	bl	80002c8 <__aeabi_dsub>
 8005ce2:	3530      	adds	r5, #48	@ 0x30
 8005ce4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	42a6      	cmp	r6, r4
 8005cee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	d124      	bne.n	8005d42 <_dtoa_r+0x662>
 8005cf8:	4bac      	ldr	r3, [pc, #688]	@ (8005fac <_dtoa_r+0x8cc>)
 8005cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cfe:	f7fa fae5 	bl	80002cc <__adddf3>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0a:	f7fa ff25 	bl	8000b58 <__aeabi_dcmpgt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d145      	bne.n	8005d9e <_dtoa_r+0x6be>
 8005d12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d16:	49a5      	ldr	r1, [pc, #660]	@ (8005fac <_dtoa_r+0x8cc>)
 8005d18:	2000      	movs	r0, #0
 8005d1a:	f7fa fad5 	bl	80002c8 <__aeabi_dsub>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d26:	f7fa fef9 	bl	8000b1c <__aeabi_dcmplt>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	f43f aef5 	beq.w	8005b1a <_dtoa_r+0x43a>
 8005d30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005d32:	1e73      	subs	r3, r6, #1
 8005d34:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d3a:	2b30      	cmp	r3, #48	@ 0x30
 8005d3c:	d0f8      	beq.n	8005d30 <_dtoa_r+0x650>
 8005d3e:	9f04      	ldr	r7, [sp, #16]
 8005d40:	e73e      	b.n	8005bc0 <_dtoa_r+0x4e0>
 8005d42:	4b9b      	ldr	r3, [pc, #620]	@ (8005fb0 <_dtoa_r+0x8d0>)
 8005d44:	f7fa fc78 	bl	8000638 <__aeabi_dmul>
 8005d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d4c:	e7bc      	b.n	8005cc8 <_dtoa_r+0x5e8>
 8005d4e:	d10c      	bne.n	8005d6a <_dtoa_r+0x68a>
 8005d50:	4b98      	ldr	r3, [pc, #608]	@ (8005fb4 <_dtoa_r+0x8d4>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d58:	f7fa fc6e 	bl	8000638 <__aeabi_dmul>
 8005d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d60:	f7fa fef0 	bl	8000b44 <__aeabi_dcmpge>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	f000 8157 	beq.w	8006018 <_dtoa_r+0x938>
 8005d6a:	2400      	movs	r4, #0
 8005d6c:	4625      	mov	r5, r4
 8005d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d70:	43db      	mvns	r3, r3
 8005d72:	9304      	str	r3, [sp, #16]
 8005d74:	4656      	mov	r6, sl
 8005d76:	2700      	movs	r7, #0
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f000 fafe 	bl	800637c <_Bfree>
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	d0dc      	beq.n	8005d3e <_dtoa_r+0x65e>
 8005d84:	b12f      	cbz	r7, 8005d92 <_dtoa_r+0x6b2>
 8005d86:	42af      	cmp	r7, r5
 8005d88:	d003      	beq.n	8005d92 <_dtoa_r+0x6b2>
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4658      	mov	r0, fp
 8005d8e:	f000 faf5 	bl	800637c <_Bfree>
 8005d92:	4629      	mov	r1, r5
 8005d94:	4658      	mov	r0, fp
 8005d96:	f000 faf1 	bl	800637c <_Bfree>
 8005d9a:	e7d0      	b.n	8005d3e <_dtoa_r+0x65e>
 8005d9c:	9704      	str	r7, [sp, #16]
 8005d9e:	4633      	mov	r3, r6
 8005da0:	461e      	mov	r6, r3
 8005da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005da6:	2a39      	cmp	r2, #57	@ 0x39
 8005da8:	d107      	bne.n	8005dba <_dtoa_r+0x6da>
 8005daa:	459a      	cmp	sl, r3
 8005dac:	d1f8      	bne.n	8005da0 <_dtoa_r+0x6c0>
 8005dae:	9a04      	ldr	r2, [sp, #16]
 8005db0:	3201      	adds	r2, #1
 8005db2:	9204      	str	r2, [sp, #16]
 8005db4:	2230      	movs	r2, #48	@ 0x30
 8005db6:	f88a 2000 	strb.w	r2, [sl]
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	3201      	adds	r2, #1
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e7bd      	b.n	8005d3e <_dtoa_r+0x65e>
 8005dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fb0 <_dtoa_r+0x8d0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f7fa fc37 	bl	8000638 <__aeabi_dmul>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4604      	mov	r4, r0
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	f7fa fe99 	bl	8000b08 <__aeabi_dcmpeq>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f43f aebb 	beq.w	8005b52 <_dtoa_r+0x472>
 8005ddc:	e6f0      	b.n	8005bc0 <_dtoa_r+0x4e0>
 8005dde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	f000 80db 	beq.w	8005f9c <_dtoa_r+0x8bc>
 8005de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005de8:	2a01      	cmp	r2, #1
 8005dea:	f300 80bf 	bgt.w	8005f6c <_dtoa_r+0x88c>
 8005dee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	f000 80b7 	beq.w	8005f64 <_dtoa_r+0x884>
 8005df6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005dfc:	4646      	mov	r6, r8
 8005dfe:	9a08      	ldr	r2, [sp, #32]
 8005e00:	2101      	movs	r1, #1
 8005e02:	441a      	add	r2, r3
 8005e04:	4658      	mov	r0, fp
 8005e06:	4498      	add	r8, r3
 8005e08:	9208      	str	r2, [sp, #32]
 8005e0a:	f000 fb6b 	bl	80064e4 <__i2b>
 8005e0e:	4605      	mov	r5, r0
 8005e10:	b15e      	cbz	r6, 8005e2a <_dtoa_r+0x74a>
 8005e12:	9b08      	ldr	r3, [sp, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dd08      	ble.n	8005e2a <_dtoa_r+0x74a>
 8005e18:	42b3      	cmp	r3, r6
 8005e1a:	9a08      	ldr	r2, [sp, #32]
 8005e1c:	bfa8      	it	ge
 8005e1e:	4633      	movge	r3, r6
 8005e20:	eba8 0803 	sub.w	r8, r8, r3
 8005e24:	1af6      	subs	r6, r6, r3
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	9308      	str	r3, [sp, #32]
 8005e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e2c:	b1f3      	cbz	r3, 8005e6c <_dtoa_r+0x78c>
 8005e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80b7 	beq.w	8005fa4 <_dtoa_r+0x8c4>
 8005e36:	b18c      	cbz	r4, 8005e5c <_dtoa_r+0x77c>
 8005e38:	4629      	mov	r1, r5
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	4658      	mov	r0, fp
 8005e3e:	f000 fc11 	bl	8006664 <__pow5mult>
 8005e42:	464a      	mov	r2, r9
 8005e44:	4601      	mov	r1, r0
 8005e46:	4605      	mov	r5, r0
 8005e48:	4658      	mov	r0, fp
 8005e4a:	f000 fb61 	bl	8006510 <__multiply>
 8005e4e:	4649      	mov	r1, r9
 8005e50:	9004      	str	r0, [sp, #16]
 8005e52:	4658      	mov	r0, fp
 8005e54:	f000 fa92 	bl	800637c <_Bfree>
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	4699      	mov	r9, r3
 8005e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e5e:	1b1a      	subs	r2, r3, r4
 8005e60:	d004      	beq.n	8005e6c <_dtoa_r+0x78c>
 8005e62:	4649      	mov	r1, r9
 8005e64:	4658      	mov	r0, fp
 8005e66:	f000 fbfd 	bl	8006664 <__pow5mult>
 8005e6a:	4681      	mov	r9, r0
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	4658      	mov	r0, fp
 8005e70:	f000 fb38 	bl	80064e4 <__i2b>
 8005e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e76:	4604      	mov	r4, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 81cf 	beq.w	800621c <_dtoa_r+0xb3c>
 8005e7e:	461a      	mov	r2, r3
 8005e80:	4601      	mov	r1, r0
 8005e82:	4658      	mov	r0, fp
 8005e84:	f000 fbee 	bl	8006664 <__pow5mult>
 8005e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	f300 8095 	bgt.w	8005fbc <_dtoa_r+0x8dc>
 8005e92:	9b02      	ldr	r3, [sp, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 8087 	bne.w	8005fa8 <_dtoa_r+0x8c8>
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 8089 	bne.w	8005fb8 <_dtoa_r+0x8d8>
 8005ea6:	9b03      	ldr	r3, [sp, #12]
 8005ea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eac:	0d1b      	lsrs	r3, r3, #20
 8005eae:	051b      	lsls	r3, r3, #20
 8005eb0:	b12b      	cbz	r3, 8005ebe <_dtoa_r+0x7de>
 8005eb2:	9b08      	ldr	r3, [sp, #32]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	9308      	str	r3, [sp, #32]
 8005eb8:	f108 0801 	add.w	r8, r8, #1
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 81b0 	beq.w	8006228 <_dtoa_r+0xb48>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ece:	6918      	ldr	r0, [r3, #16]
 8005ed0:	f000 fabc 	bl	800644c <__hi0bits>
 8005ed4:	f1c0 0020 	rsb	r0, r0, #32
 8005ed8:	9b08      	ldr	r3, [sp, #32]
 8005eda:	4418      	add	r0, r3
 8005edc:	f010 001f 	ands.w	r0, r0, #31
 8005ee0:	d077      	beq.n	8005fd2 <_dtoa_r+0x8f2>
 8005ee2:	f1c0 0320 	rsb	r3, r0, #32
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	dd6b      	ble.n	8005fc2 <_dtoa_r+0x8e2>
 8005eea:	9b08      	ldr	r3, [sp, #32]
 8005eec:	f1c0 001c 	rsb	r0, r0, #28
 8005ef0:	4403      	add	r3, r0
 8005ef2:	4480      	add	r8, r0
 8005ef4:	4406      	add	r6, r0
 8005ef6:	9308      	str	r3, [sp, #32]
 8005ef8:	f1b8 0f00 	cmp.w	r8, #0
 8005efc:	dd05      	ble.n	8005f0a <_dtoa_r+0x82a>
 8005efe:	4649      	mov	r1, r9
 8005f00:	4642      	mov	r2, r8
 8005f02:	4658      	mov	r0, fp
 8005f04:	f000 fc08 	bl	8006718 <__lshift>
 8005f08:	4681      	mov	r9, r0
 8005f0a:	9b08      	ldr	r3, [sp, #32]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dd05      	ble.n	8005f1c <_dtoa_r+0x83c>
 8005f10:	4621      	mov	r1, r4
 8005f12:	461a      	mov	r2, r3
 8005f14:	4658      	mov	r0, fp
 8005f16:	f000 fbff 	bl	8006718 <__lshift>
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d059      	beq.n	8005fd6 <_dtoa_r+0x8f6>
 8005f22:	4621      	mov	r1, r4
 8005f24:	4648      	mov	r0, r9
 8005f26:	f000 fc63 	bl	80067f0 <__mcmp>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	da53      	bge.n	8005fd6 <_dtoa_r+0x8f6>
 8005f2e:	1e7b      	subs	r3, r7, #1
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	4649      	mov	r1, r9
 8005f34:	2300      	movs	r3, #0
 8005f36:	220a      	movs	r2, #10
 8005f38:	4658      	mov	r0, fp
 8005f3a:	f000 fa41 	bl	80063c0 <__multadd>
 8005f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f40:	4681      	mov	r9, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8172 	beq.w	800622c <_dtoa_r+0xb4c>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	220a      	movs	r2, #10
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f000 fa36 	bl	80063c0 <__multadd>
 8005f54:	9b00      	ldr	r3, [sp, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	4605      	mov	r5, r0
 8005f5a:	dc67      	bgt.n	800602c <_dtoa_r+0x94c>
 8005f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	dc41      	bgt.n	8005fe6 <_dtoa_r+0x906>
 8005f62:	e063      	b.n	800602c <_dtoa_r+0x94c>
 8005f64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f6a:	e746      	b.n	8005dfa <_dtoa_r+0x71a>
 8005f6c:	9b07      	ldr	r3, [sp, #28]
 8005f6e:	1e5c      	subs	r4, r3, #1
 8005f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	bfbf      	itttt	lt
 8005f76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f7c:	1ae3      	sublt	r3, r4, r3
 8005f7e:	bfb4      	ite	lt
 8005f80:	18d2      	addlt	r2, r2, r3
 8005f82:	1b1c      	subge	r4, r3, r4
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	bfbc      	itt	lt
 8005f88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f8a:	2400      	movlt	r4, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfb5      	itete	lt
 8005f90:	eba8 0603 	sublt.w	r6, r8, r3
 8005f94:	9b07      	ldrge	r3, [sp, #28]
 8005f96:	2300      	movlt	r3, #0
 8005f98:	4646      	movge	r6, r8
 8005f9a:	e730      	b.n	8005dfe <_dtoa_r+0x71e>
 8005f9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005fa0:	4646      	mov	r6, r8
 8005fa2:	e735      	b.n	8005e10 <_dtoa_r+0x730>
 8005fa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fa6:	e75c      	b.n	8005e62 <_dtoa_r+0x782>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e788      	b.n	8005ebe <_dtoa_r+0x7de>
 8005fac:	3fe00000 	.word	0x3fe00000
 8005fb0:	40240000 	.word	0x40240000
 8005fb4:	40140000 	.word	0x40140000
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	e780      	b.n	8005ebe <_dtoa_r+0x7de>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fc0:	e782      	b.n	8005ec8 <_dtoa_r+0x7e8>
 8005fc2:	d099      	beq.n	8005ef8 <_dtoa_r+0x818>
 8005fc4:	9a08      	ldr	r2, [sp, #32]
 8005fc6:	331c      	adds	r3, #28
 8005fc8:	441a      	add	r2, r3
 8005fca:	4498      	add	r8, r3
 8005fcc:	441e      	add	r6, r3
 8005fce:	9208      	str	r2, [sp, #32]
 8005fd0:	e792      	b.n	8005ef8 <_dtoa_r+0x818>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	e7f6      	b.n	8005fc4 <_dtoa_r+0x8e4>
 8005fd6:	9b07      	ldr	r3, [sp, #28]
 8005fd8:	9704      	str	r7, [sp, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	dc20      	bgt.n	8006020 <_dtoa_r+0x940>
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	dd1e      	ble.n	8006024 <_dtoa_r+0x944>
 8005fe6:	9b00      	ldr	r3, [sp, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f47f aec0 	bne.w	8005d6e <_dtoa_r+0x68e>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	2205      	movs	r2, #5
 8005ff2:	4658      	mov	r0, fp
 8005ff4:	f000 f9e4 	bl	80063c0 <__multadd>
 8005ff8:	4601      	mov	r1, r0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4648      	mov	r0, r9
 8005ffe:	f000 fbf7 	bl	80067f0 <__mcmp>
 8006002:	2800      	cmp	r0, #0
 8006004:	f77f aeb3 	ble.w	8005d6e <_dtoa_r+0x68e>
 8006008:	4656      	mov	r6, sl
 800600a:	2331      	movs	r3, #49	@ 0x31
 800600c:	f806 3b01 	strb.w	r3, [r6], #1
 8006010:	9b04      	ldr	r3, [sp, #16]
 8006012:	3301      	adds	r3, #1
 8006014:	9304      	str	r3, [sp, #16]
 8006016:	e6ae      	b.n	8005d76 <_dtoa_r+0x696>
 8006018:	9c07      	ldr	r4, [sp, #28]
 800601a:	9704      	str	r7, [sp, #16]
 800601c:	4625      	mov	r5, r4
 800601e:	e7f3      	b.n	8006008 <_dtoa_r+0x928>
 8006020:	9b07      	ldr	r3, [sp, #28]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8104 	beq.w	8006234 <_dtoa_r+0xb54>
 800602c:	2e00      	cmp	r6, #0
 800602e:	dd05      	ble.n	800603c <_dtoa_r+0x95c>
 8006030:	4629      	mov	r1, r5
 8006032:	4632      	mov	r2, r6
 8006034:	4658      	mov	r0, fp
 8006036:	f000 fb6f 	bl	8006718 <__lshift>
 800603a:	4605      	mov	r5, r0
 800603c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d05a      	beq.n	80060f8 <_dtoa_r+0xa18>
 8006042:	6869      	ldr	r1, [r5, #4]
 8006044:	4658      	mov	r0, fp
 8006046:	f000 f959 	bl	80062fc <_Balloc>
 800604a:	4606      	mov	r6, r0
 800604c:	b928      	cbnz	r0, 800605a <_dtoa_r+0x97a>
 800604e:	4b84      	ldr	r3, [pc, #528]	@ (8006260 <_dtoa_r+0xb80>)
 8006050:	4602      	mov	r2, r0
 8006052:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006056:	f7ff bb5a 	b.w	800570e <_dtoa_r+0x2e>
 800605a:	692a      	ldr	r2, [r5, #16]
 800605c:	3202      	adds	r2, #2
 800605e:	0092      	lsls	r2, r2, #2
 8006060:	f105 010c 	add.w	r1, r5, #12
 8006064:	300c      	adds	r0, #12
 8006066:	f001 f8bf 	bl	80071e8 <memcpy>
 800606a:	2201      	movs	r2, #1
 800606c:	4631      	mov	r1, r6
 800606e:	4658      	mov	r0, fp
 8006070:	f000 fb52 	bl	8006718 <__lshift>
 8006074:	f10a 0301 	add.w	r3, sl, #1
 8006078:	9307      	str	r3, [sp, #28]
 800607a:	9b00      	ldr	r3, [sp, #0]
 800607c:	4453      	add	r3, sl
 800607e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	462f      	mov	r7, r5
 8006088:	930a      	str	r3, [sp, #40]	@ 0x28
 800608a:	4605      	mov	r5, r0
 800608c:	9b07      	ldr	r3, [sp, #28]
 800608e:	4621      	mov	r1, r4
 8006090:	3b01      	subs	r3, #1
 8006092:	4648      	mov	r0, r9
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	f7ff fa9a 	bl	80055ce <quorem>
 800609a:	4639      	mov	r1, r7
 800609c:	9002      	str	r0, [sp, #8]
 800609e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80060a2:	4648      	mov	r0, r9
 80060a4:	f000 fba4 	bl	80067f0 <__mcmp>
 80060a8:	462a      	mov	r2, r5
 80060aa:	9008      	str	r0, [sp, #32]
 80060ac:	4621      	mov	r1, r4
 80060ae:	4658      	mov	r0, fp
 80060b0:	f000 fbba 	bl	8006828 <__mdiff>
 80060b4:	68c2      	ldr	r2, [r0, #12]
 80060b6:	4606      	mov	r6, r0
 80060b8:	bb02      	cbnz	r2, 80060fc <_dtoa_r+0xa1c>
 80060ba:	4601      	mov	r1, r0
 80060bc:	4648      	mov	r0, r9
 80060be:	f000 fb97 	bl	80067f0 <__mcmp>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4631      	mov	r1, r6
 80060c6:	4658      	mov	r0, fp
 80060c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80060ca:	f000 f957 	bl	800637c <_Bfree>
 80060ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060d2:	9e07      	ldr	r6, [sp, #28]
 80060d4:	ea43 0102 	orr.w	r1, r3, r2
 80060d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060da:	4319      	orrs	r1, r3
 80060dc:	d110      	bne.n	8006100 <_dtoa_r+0xa20>
 80060de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060e2:	d029      	beq.n	8006138 <_dtoa_r+0xa58>
 80060e4:	9b08      	ldr	r3, [sp, #32]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dd02      	ble.n	80060f0 <_dtoa_r+0xa10>
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80060f0:	9b00      	ldr	r3, [sp, #0]
 80060f2:	f883 8000 	strb.w	r8, [r3]
 80060f6:	e63f      	b.n	8005d78 <_dtoa_r+0x698>
 80060f8:	4628      	mov	r0, r5
 80060fa:	e7bb      	b.n	8006074 <_dtoa_r+0x994>
 80060fc:	2201      	movs	r2, #1
 80060fe:	e7e1      	b.n	80060c4 <_dtoa_r+0x9e4>
 8006100:	9b08      	ldr	r3, [sp, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	db04      	blt.n	8006110 <_dtoa_r+0xa30>
 8006106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006108:	430b      	orrs	r3, r1
 800610a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800610c:	430b      	orrs	r3, r1
 800610e:	d120      	bne.n	8006152 <_dtoa_r+0xa72>
 8006110:	2a00      	cmp	r2, #0
 8006112:	dded      	ble.n	80060f0 <_dtoa_r+0xa10>
 8006114:	4649      	mov	r1, r9
 8006116:	2201      	movs	r2, #1
 8006118:	4658      	mov	r0, fp
 800611a:	f000 fafd 	bl	8006718 <__lshift>
 800611e:	4621      	mov	r1, r4
 8006120:	4681      	mov	r9, r0
 8006122:	f000 fb65 	bl	80067f0 <__mcmp>
 8006126:	2800      	cmp	r0, #0
 8006128:	dc03      	bgt.n	8006132 <_dtoa_r+0xa52>
 800612a:	d1e1      	bne.n	80060f0 <_dtoa_r+0xa10>
 800612c:	f018 0f01 	tst.w	r8, #1
 8006130:	d0de      	beq.n	80060f0 <_dtoa_r+0xa10>
 8006132:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006136:	d1d8      	bne.n	80060ea <_dtoa_r+0xa0a>
 8006138:	9a00      	ldr	r2, [sp, #0]
 800613a:	2339      	movs	r3, #57	@ 0x39
 800613c:	7013      	strb	r3, [r2, #0]
 800613e:	4633      	mov	r3, r6
 8006140:	461e      	mov	r6, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006148:	2a39      	cmp	r2, #57	@ 0x39
 800614a:	d052      	beq.n	80061f2 <_dtoa_r+0xb12>
 800614c:	3201      	adds	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	e612      	b.n	8005d78 <_dtoa_r+0x698>
 8006152:	2a00      	cmp	r2, #0
 8006154:	dd07      	ble.n	8006166 <_dtoa_r+0xa86>
 8006156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800615a:	d0ed      	beq.n	8006138 <_dtoa_r+0xa58>
 800615c:	9a00      	ldr	r2, [sp, #0]
 800615e:	f108 0301 	add.w	r3, r8, #1
 8006162:	7013      	strb	r3, [r2, #0]
 8006164:	e608      	b.n	8005d78 <_dtoa_r+0x698>
 8006166:	9b07      	ldr	r3, [sp, #28]
 8006168:	9a07      	ldr	r2, [sp, #28]
 800616a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800616e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006170:	4293      	cmp	r3, r2
 8006172:	d028      	beq.n	80061c6 <_dtoa_r+0xae6>
 8006174:	4649      	mov	r1, r9
 8006176:	2300      	movs	r3, #0
 8006178:	220a      	movs	r2, #10
 800617a:	4658      	mov	r0, fp
 800617c:	f000 f920 	bl	80063c0 <__multadd>
 8006180:	42af      	cmp	r7, r5
 8006182:	4681      	mov	r9, r0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	f04f 020a 	mov.w	r2, #10
 800618c:	4639      	mov	r1, r7
 800618e:	4658      	mov	r0, fp
 8006190:	d107      	bne.n	80061a2 <_dtoa_r+0xac2>
 8006192:	f000 f915 	bl	80063c0 <__multadd>
 8006196:	4607      	mov	r7, r0
 8006198:	4605      	mov	r5, r0
 800619a:	9b07      	ldr	r3, [sp, #28]
 800619c:	3301      	adds	r3, #1
 800619e:	9307      	str	r3, [sp, #28]
 80061a0:	e774      	b.n	800608c <_dtoa_r+0x9ac>
 80061a2:	f000 f90d 	bl	80063c0 <__multadd>
 80061a6:	4629      	mov	r1, r5
 80061a8:	4607      	mov	r7, r0
 80061aa:	2300      	movs	r3, #0
 80061ac:	220a      	movs	r2, #10
 80061ae:	4658      	mov	r0, fp
 80061b0:	f000 f906 	bl	80063c0 <__multadd>
 80061b4:	4605      	mov	r5, r0
 80061b6:	e7f0      	b.n	800619a <_dtoa_r+0xaba>
 80061b8:	9b00      	ldr	r3, [sp, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bfcc      	ite	gt
 80061be:	461e      	movgt	r6, r3
 80061c0:	2601      	movle	r6, #1
 80061c2:	4456      	add	r6, sl
 80061c4:	2700      	movs	r7, #0
 80061c6:	4649      	mov	r1, r9
 80061c8:	2201      	movs	r2, #1
 80061ca:	4658      	mov	r0, fp
 80061cc:	f000 faa4 	bl	8006718 <__lshift>
 80061d0:	4621      	mov	r1, r4
 80061d2:	4681      	mov	r9, r0
 80061d4:	f000 fb0c 	bl	80067f0 <__mcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	dcb0      	bgt.n	800613e <_dtoa_r+0xa5e>
 80061dc:	d102      	bne.n	80061e4 <_dtoa_r+0xb04>
 80061de:	f018 0f01 	tst.w	r8, #1
 80061e2:	d1ac      	bne.n	800613e <_dtoa_r+0xa5e>
 80061e4:	4633      	mov	r3, r6
 80061e6:	461e      	mov	r6, r3
 80061e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ec:	2a30      	cmp	r2, #48	@ 0x30
 80061ee:	d0fa      	beq.n	80061e6 <_dtoa_r+0xb06>
 80061f0:	e5c2      	b.n	8005d78 <_dtoa_r+0x698>
 80061f2:	459a      	cmp	sl, r3
 80061f4:	d1a4      	bne.n	8006140 <_dtoa_r+0xa60>
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	3301      	adds	r3, #1
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	2331      	movs	r3, #49	@ 0x31
 80061fe:	f88a 3000 	strb.w	r3, [sl]
 8006202:	e5b9      	b.n	8005d78 <_dtoa_r+0x698>
 8006204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006206:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006264 <_dtoa_r+0xb84>
 800620a:	b11b      	cbz	r3, 8006214 <_dtoa_r+0xb34>
 800620c:	f10a 0308 	add.w	r3, sl, #8
 8006210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	4650      	mov	r0, sl
 8006216:	b019      	add	sp, #100	@ 0x64
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800621e:	2b01      	cmp	r3, #1
 8006220:	f77f ae37 	ble.w	8005e92 <_dtoa_r+0x7b2>
 8006224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006226:	930a      	str	r3, [sp, #40]	@ 0x28
 8006228:	2001      	movs	r0, #1
 800622a:	e655      	b.n	8005ed8 <_dtoa_r+0x7f8>
 800622c:	9b00      	ldr	r3, [sp, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f77f aed6 	ble.w	8005fe0 <_dtoa_r+0x900>
 8006234:	4656      	mov	r6, sl
 8006236:	4621      	mov	r1, r4
 8006238:	4648      	mov	r0, r9
 800623a:	f7ff f9c8 	bl	80055ce <quorem>
 800623e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006242:	f806 8b01 	strb.w	r8, [r6], #1
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	eba6 020a 	sub.w	r2, r6, sl
 800624c:	4293      	cmp	r3, r2
 800624e:	ddb3      	ble.n	80061b8 <_dtoa_r+0xad8>
 8006250:	4649      	mov	r1, r9
 8006252:	2300      	movs	r3, #0
 8006254:	220a      	movs	r2, #10
 8006256:	4658      	mov	r0, fp
 8006258:	f000 f8b2 	bl	80063c0 <__multadd>
 800625c:	4681      	mov	r9, r0
 800625e:	e7ea      	b.n	8006236 <_dtoa_r+0xb56>
 8006260:	080076b8 	.word	0x080076b8
 8006264:	0800763c 	.word	0x0800763c

08006268 <_free_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4605      	mov	r5, r0
 800626c:	2900      	cmp	r1, #0
 800626e:	d041      	beq.n	80062f4 <_free_r+0x8c>
 8006270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006274:	1f0c      	subs	r4, r1, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfb8      	it	lt
 800627a:	18e4      	addlt	r4, r4, r3
 800627c:	f7fe fb7c 	bl	8004978 <__malloc_lock>
 8006280:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <_free_r+0x90>)
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	b933      	cbnz	r3, 8006294 <_free_r+0x2c>
 8006286:	6063      	str	r3, [r4, #4]
 8006288:	6014      	str	r4, [r2, #0]
 800628a:	4628      	mov	r0, r5
 800628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006290:	f7fe bb78 	b.w	8004984 <__malloc_unlock>
 8006294:	42a3      	cmp	r3, r4
 8006296:	d908      	bls.n	80062aa <_free_r+0x42>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	1821      	adds	r1, r4, r0
 800629c:	428b      	cmp	r3, r1
 800629e:	bf01      	itttt	eq
 80062a0:	6819      	ldreq	r1, [r3, #0]
 80062a2:	685b      	ldreq	r3, [r3, #4]
 80062a4:	1809      	addeq	r1, r1, r0
 80062a6:	6021      	streq	r1, [r4, #0]
 80062a8:	e7ed      	b.n	8006286 <_free_r+0x1e>
 80062aa:	461a      	mov	r2, r3
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	b10b      	cbz	r3, 80062b4 <_free_r+0x4c>
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d9fa      	bls.n	80062aa <_free_r+0x42>
 80062b4:	6811      	ldr	r1, [r2, #0]
 80062b6:	1850      	adds	r0, r2, r1
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d10b      	bne.n	80062d4 <_free_r+0x6c>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	4401      	add	r1, r0
 80062c0:	1850      	adds	r0, r2, r1
 80062c2:	4283      	cmp	r3, r0
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	d1e0      	bne.n	800628a <_free_r+0x22>
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	6053      	str	r3, [r2, #4]
 80062ce:	4408      	add	r0, r1
 80062d0:	6010      	str	r0, [r2, #0]
 80062d2:	e7da      	b.n	800628a <_free_r+0x22>
 80062d4:	d902      	bls.n	80062dc <_free_r+0x74>
 80062d6:	230c      	movs	r3, #12
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	e7d6      	b.n	800628a <_free_r+0x22>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	1821      	adds	r1, r4, r0
 80062e0:	428b      	cmp	r3, r1
 80062e2:	bf04      	itt	eq
 80062e4:	6819      	ldreq	r1, [r3, #0]
 80062e6:	685b      	ldreq	r3, [r3, #4]
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	bf04      	itt	eq
 80062ec:	1809      	addeq	r1, r1, r0
 80062ee:	6021      	streq	r1, [r4, #0]
 80062f0:	6054      	str	r4, [r2, #4]
 80062f2:	e7ca      	b.n	800628a <_free_r+0x22>
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	200003d4 	.word	0x200003d4

080062fc <_Balloc>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	69c6      	ldr	r6, [r0, #28]
 8006300:	4604      	mov	r4, r0
 8006302:	460d      	mov	r5, r1
 8006304:	b976      	cbnz	r6, 8006324 <_Balloc+0x28>
 8006306:	2010      	movs	r0, #16
 8006308:	f7fe fa8c 	bl	8004824 <malloc>
 800630c:	4602      	mov	r2, r0
 800630e:	61e0      	str	r0, [r4, #28]
 8006310:	b920      	cbnz	r0, 800631c <_Balloc+0x20>
 8006312:	4b18      	ldr	r3, [pc, #96]	@ (8006374 <_Balloc+0x78>)
 8006314:	4818      	ldr	r0, [pc, #96]	@ (8006378 <_Balloc+0x7c>)
 8006316:	216b      	movs	r1, #107	@ 0x6b
 8006318:	f000 ff74 	bl	8007204 <__assert_func>
 800631c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006320:	6006      	str	r6, [r0, #0]
 8006322:	60c6      	str	r6, [r0, #12]
 8006324:	69e6      	ldr	r6, [r4, #28]
 8006326:	68f3      	ldr	r3, [r6, #12]
 8006328:	b183      	cbz	r3, 800634c <_Balloc+0x50>
 800632a:	69e3      	ldr	r3, [r4, #28]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006332:	b9b8      	cbnz	r0, 8006364 <_Balloc+0x68>
 8006334:	2101      	movs	r1, #1
 8006336:	fa01 f605 	lsl.w	r6, r1, r5
 800633a:	1d72      	adds	r2, r6, #5
 800633c:	0092      	lsls	r2, r2, #2
 800633e:	4620      	mov	r0, r4
 8006340:	f000 ff7e 	bl	8007240 <_calloc_r>
 8006344:	b160      	cbz	r0, 8006360 <_Balloc+0x64>
 8006346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800634a:	e00e      	b.n	800636a <_Balloc+0x6e>
 800634c:	2221      	movs	r2, #33	@ 0x21
 800634e:	2104      	movs	r1, #4
 8006350:	4620      	mov	r0, r4
 8006352:	f000 ff75 	bl	8007240 <_calloc_r>
 8006356:	69e3      	ldr	r3, [r4, #28]
 8006358:	60f0      	str	r0, [r6, #12]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e4      	bne.n	800632a <_Balloc+0x2e>
 8006360:	2000      	movs	r0, #0
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	6802      	ldr	r2, [r0, #0]
 8006366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800636a:	2300      	movs	r3, #0
 800636c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006370:	e7f7      	b.n	8006362 <_Balloc+0x66>
 8006372:	bf00      	nop
 8006374:	08007649 	.word	0x08007649
 8006378:	080076c9 	.word	0x080076c9

0800637c <_Bfree>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	69c6      	ldr	r6, [r0, #28]
 8006380:	4605      	mov	r5, r0
 8006382:	460c      	mov	r4, r1
 8006384:	b976      	cbnz	r6, 80063a4 <_Bfree+0x28>
 8006386:	2010      	movs	r0, #16
 8006388:	f7fe fa4c 	bl	8004824 <malloc>
 800638c:	4602      	mov	r2, r0
 800638e:	61e8      	str	r0, [r5, #28]
 8006390:	b920      	cbnz	r0, 800639c <_Bfree+0x20>
 8006392:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <_Bfree+0x3c>)
 8006394:	4809      	ldr	r0, [pc, #36]	@ (80063bc <_Bfree+0x40>)
 8006396:	218f      	movs	r1, #143	@ 0x8f
 8006398:	f000 ff34 	bl	8007204 <__assert_func>
 800639c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a0:	6006      	str	r6, [r0, #0]
 80063a2:	60c6      	str	r6, [r0, #12]
 80063a4:	b13c      	cbz	r4, 80063b6 <_Bfree+0x3a>
 80063a6:	69eb      	ldr	r3, [r5, #28]
 80063a8:	6862      	ldr	r2, [r4, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063b0:	6021      	str	r1, [r4, #0]
 80063b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	08007649 	.word	0x08007649
 80063bc:	080076c9 	.word	0x080076c9

080063c0 <__multadd>:
 80063c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c4:	690d      	ldr	r5, [r1, #16]
 80063c6:	4607      	mov	r7, r0
 80063c8:	460c      	mov	r4, r1
 80063ca:	461e      	mov	r6, r3
 80063cc:	f101 0c14 	add.w	ip, r1, #20
 80063d0:	2000      	movs	r0, #0
 80063d2:	f8dc 3000 	ldr.w	r3, [ip]
 80063d6:	b299      	uxth	r1, r3
 80063d8:	fb02 6101 	mla	r1, r2, r1, r6
 80063dc:	0c1e      	lsrs	r6, r3, #16
 80063de:	0c0b      	lsrs	r3, r1, #16
 80063e0:	fb02 3306 	mla	r3, r2, r6, r3
 80063e4:	b289      	uxth	r1, r1
 80063e6:	3001      	adds	r0, #1
 80063e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063ec:	4285      	cmp	r5, r0
 80063ee:	f84c 1b04 	str.w	r1, [ip], #4
 80063f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063f6:	dcec      	bgt.n	80063d2 <__multadd+0x12>
 80063f8:	b30e      	cbz	r6, 800643e <__multadd+0x7e>
 80063fa:	68a3      	ldr	r3, [r4, #8]
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dc19      	bgt.n	8006434 <__multadd+0x74>
 8006400:	6861      	ldr	r1, [r4, #4]
 8006402:	4638      	mov	r0, r7
 8006404:	3101      	adds	r1, #1
 8006406:	f7ff ff79 	bl	80062fc <_Balloc>
 800640a:	4680      	mov	r8, r0
 800640c:	b928      	cbnz	r0, 800641a <__multadd+0x5a>
 800640e:	4602      	mov	r2, r0
 8006410:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <__multadd+0x84>)
 8006412:	480d      	ldr	r0, [pc, #52]	@ (8006448 <__multadd+0x88>)
 8006414:	21ba      	movs	r1, #186	@ 0xba
 8006416:	f000 fef5 	bl	8007204 <__assert_func>
 800641a:	6922      	ldr	r2, [r4, #16]
 800641c:	3202      	adds	r2, #2
 800641e:	f104 010c 	add.w	r1, r4, #12
 8006422:	0092      	lsls	r2, r2, #2
 8006424:	300c      	adds	r0, #12
 8006426:	f000 fedf 	bl	80071e8 <memcpy>
 800642a:	4621      	mov	r1, r4
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff ffa5 	bl	800637c <_Bfree>
 8006432:	4644      	mov	r4, r8
 8006434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006438:	3501      	adds	r5, #1
 800643a:	615e      	str	r6, [r3, #20]
 800643c:	6125      	str	r5, [r4, #16]
 800643e:	4620      	mov	r0, r4
 8006440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006444:	080076b8 	.word	0x080076b8
 8006448:	080076c9 	.word	0x080076c9

0800644c <__hi0bits>:
 800644c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006450:	4603      	mov	r3, r0
 8006452:	bf36      	itet	cc
 8006454:	0403      	lslcc	r3, r0, #16
 8006456:	2000      	movcs	r0, #0
 8006458:	2010      	movcc	r0, #16
 800645a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800645e:	bf3c      	itt	cc
 8006460:	021b      	lslcc	r3, r3, #8
 8006462:	3008      	addcc	r0, #8
 8006464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006468:	bf3c      	itt	cc
 800646a:	011b      	lslcc	r3, r3, #4
 800646c:	3004      	addcc	r0, #4
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006472:	bf3c      	itt	cc
 8006474:	009b      	lslcc	r3, r3, #2
 8006476:	3002      	addcc	r0, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	db05      	blt.n	8006488 <__hi0bits+0x3c>
 800647c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006480:	f100 0001 	add.w	r0, r0, #1
 8006484:	bf08      	it	eq
 8006486:	2020      	moveq	r0, #32
 8006488:	4770      	bx	lr

0800648a <__lo0bits>:
 800648a:	6803      	ldr	r3, [r0, #0]
 800648c:	4602      	mov	r2, r0
 800648e:	f013 0007 	ands.w	r0, r3, #7
 8006492:	d00b      	beq.n	80064ac <__lo0bits+0x22>
 8006494:	07d9      	lsls	r1, r3, #31
 8006496:	d421      	bmi.n	80064dc <__lo0bits+0x52>
 8006498:	0798      	lsls	r0, r3, #30
 800649a:	bf49      	itett	mi
 800649c:	085b      	lsrmi	r3, r3, #1
 800649e:	089b      	lsrpl	r3, r3, #2
 80064a0:	2001      	movmi	r0, #1
 80064a2:	6013      	strmi	r3, [r2, #0]
 80064a4:	bf5c      	itt	pl
 80064a6:	6013      	strpl	r3, [r2, #0]
 80064a8:	2002      	movpl	r0, #2
 80064aa:	4770      	bx	lr
 80064ac:	b299      	uxth	r1, r3
 80064ae:	b909      	cbnz	r1, 80064b4 <__lo0bits+0x2a>
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	2010      	movs	r0, #16
 80064b4:	b2d9      	uxtb	r1, r3
 80064b6:	b909      	cbnz	r1, 80064bc <__lo0bits+0x32>
 80064b8:	3008      	adds	r0, #8
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	0719      	lsls	r1, r3, #28
 80064be:	bf04      	itt	eq
 80064c0:	091b      	lsreq	r3, r3, #4
 80064c2:	3004      	addeq	r0, #4
 80064c4:	0799      	lsls	r1, r3, #30
 80064c6:	bf04      	itt	eq
 80064c8:	089b      	lsreq	r3, r3, #2
 80064ca:	3002      	addeq	r0, #2
 80064cc:	07d9      	lsls	r1, r3, #31
 80064ce:	d403      	bmi.n	80064d8 <__lo0bits+0x4e>
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	f100 0001 	add.w	r0, r0, #1
 80064d6:	d003      	beq.n	80064e0 <__lo0bits+0x56>
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4770      	bx	lr
 80064dc:	2000      	movs	r0, #0
 80064de:	4770      	bx	lr
 80064e0:	2020      	movs	r0, #32
 80064e2:	4770      	bx	lr

080064e4 <__i2b>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	460c      	mov	r4, r1
 80064e8:	2101      	movs	r1, #1
 80064ea:	f7ff ff07 	bl	80062fc <_Balloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	b928      	cbnz	r0, 80064fe <__i2b+0x1a>
 80064f2:	4b05      	ldr	r3, [pc, #20]	@ (8006508 <__i2b+0x24>)
 80064f4:	4805      	ldr	r0, [pc, #20]	@ (800650c <__i2b+0x28>)
 80064f6:	f240 1145 	movw	r1, #325	@ 0x145
 80064fa:	f000 fe83 	bl	8007204 <__assert_func>
 80064fe:	2301      	movs	r3, #1
 8006500:	6144      	str	r4, [r0, #20]
 8006502:	6103      	str	r3, [r0, #16]
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	080076b8 	.word	0x080076b8
 800650c:	080076c9 	.word	0x080076c9

08006510 <__multiply>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	4614      	mov	r4, r2
 8006516:	690a      	ldr	r2, [r1, #16]
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	429a      	cmp	r2, r3
 800651c:	bfa8      	it	ge
 800651e:	4623      	movge	r3, r4
 8006520:	460f      	mov	r7, r1
 8006522:	bfa4      	itt	ge
 8006524:	460c      	movge	r4, r1
 8006526:	461f      	movge	r7, r3
 8006528:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800652c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006530:	68a3      	ldr	r3, [r4, #8]
 8006532:	6861      	ldr	r1, [r4, #4]
 8006534:	eb0a 0609 	add.w	r6, sl, r9
 8006538:	42b3      	cmp	r3, r6
 800653a:	b085      	sub	sp, #20
 800653c:	bfb8      	it	lt
 800653e:	3101      	addlt	r1, #1
 8006540:	f7ff fedc 	bl	80062fc <_Balloc>
 8006544:	b930      	cbnz	r0, 8006554 <__multiply+0x44>
 8006546:	4602      	mov	r2, r0
 8006548:	4b44      	ldr	r3, [pc, #272]	@ (800665c <__multiply+0x14c>)
 800654a:	4845      	ldr	r0, [pc, #276]	@ (8006660 <__multiply+0x150>)
 800654c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006550:	f000 fe58 	bl	8007204 <__assert_func>
 8006554:	f100 0514 	add.w	r5, r0, #20
 8006558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800655c:	462b      	mov	r3, r5
 800655e:	2200      	movs	r2, #0
 8006560:	4543      	cmp	r3, r8
 8006562:	d321      	bcc.n	80065a8 <__multiply+0x98>
 8006564:	f107 0114 	add.w	r1, r7, #20
 8006568:	f104 0214 	add.w	r2, r4, #20
 800656c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006570:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006574:	9302      	str	r3, [sp, #8]
 8006576:	1b13      	subs	r3, r2, r4
 8006578:	3b15      	subs	r3, #21
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	3304      	adds	r3, #4
 8006580:	f104 0715 	add.w	r7, r4, #21
 8006584:	42ba      	cmp	r2, r7
 8006586:	bf38      	it	cc
 8006588:	2304      	movcc	r3, #4
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	9b02      	ldr	r3, [sp, #8]
 800658e:	9103      	str	r1, [sp, #12]
 8006590:	428b      	cmp	r3, r1
 8006592:	d80c      	bhi.n	80065ae <__multiply+0x9e>
 8006594:	2e00      	cmp	r6, #0
 8006596:	dd03      	ble.n	80065a0 <__multiply+0x90>
 8006598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800659c:	2b00      	cmp	r3, #0
 800659e:	d05b      	beq.n	8006658 <__multiply+0x148>
 80065a0:	6106      	str	r6, [r0, #16]
 80065a2:	b005      	add	sp, #20
 80065a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a8:	f843 2b04 	str.w	r2, [r3], #4
 80065ac:	e7d8      	b.n	8006560 <__multiply+0x50>
 80065ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80065b2:	f1ba 0f00 	cmp.w	sl, #0
 80065b6:	d024      	beq.n	8006602 <__multiply+0xf2>
 80065b8:	f104 0e14 	add.w	lr, r4, #20
 80065bc:	46a9      	mov	r9, r5
 80065be:	f04f 0c00 	mov.w	ip, #0
 80065c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80065c6:	f8d9 3000 	ldr.w	r3, [r9]
 80065ca:	fa1f fb87 	uxth.w	fp, r7
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80065d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80065d8:	f8d9 7000 	ldr.w	r7, [r9]
 80065dc:	4463      	add	r3, ip
 80065de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80065e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80065e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80065f0:	4572      	cmp	r2, lr
 80065f2:	f849 3b04 	str.w	r3, [r9], #4
 80065f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80065fa:	d8e2      	bhi.n	80065c2 <__multiply+0xb2>
 80065fc:	9b01      	ldr	r3, [sp, #4]
 80065fe:	f845 c003 	str.w	ip, [r5, r3]
 8006602:	9b03      	ldr	r3, [sp, #12]
 8006604:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006608:	3104      	adds	r1, #4
 800660a:	f1b9 0f00 	cmp.w	r9, #0
 800660e:	d021      	beq.n	8006654 <__multiply+0x144>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	f104 0c14 	add.w	ip, r4, #20
 8006616:	46ae      	mov	lr, r5
 8006618:	f04f 0a00 	mov.w	sl, #0
 800661c:	f8bc b000 	ldrh.w	fp, [ip]
 8006620:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006624:	fb09 770b 	mla	r7, r9, fp, r7
 8006628:	4457      	add	r7, sl
 800662a:	b29b      	uxth	r3, r3
 800662c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006630:	f84e 3b04 	str.w	r3, [lr], #4
 8006634:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800663c:	f8be 3000 	ldrh.w	r3, [lr]
 8006640:	fb09 330a 	mla	r3, r9, sl, r3
 8006644:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006648:	4562      	cmp	r2, ip
 800664a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800664e:	d8e5      	bhi.n	800661c <__multiply+0x10c>
 8006650:	9f01      	ldr	r7, [sp, #4]
 8006652:	51eb      	str	r3, [r5, r7]
 8006654:	3504      	adds	r5, #4
 8006656:	e799      	b.n	800658c <__multiply+0x7c>
 8006658:	3e01      	subs	r6, #1
 800665a:	e79b      	b.n	8006594 <__multiply+0x84>
 800665c:	080076b8 	.word	0x080076b8
 8006660:	080076c9 	.word	0x080076c9

08006664 <__pow5mult>:
 8006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006668:	4615      	mov	r5, r2
 800666a:	f012 0203 	ands.w	r2, r2, #3
 800666e:	4607      	mov	r7, r0
 8006670:	460e      	mov	r6, r1
 8006672:	d007      	beq.n	8006684 <__pow5mult+0x20>
 8006674:	4c25      	ldr	r4, [pc, #148]	@ (800670c <__pow5mult+0xa8>)
 8006676:	3a01      	subs	r2, #1
 8006678:	2300      	movs	r3, #0
 800667a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800667e:	f7ff fe9f 	bl	80063c0 <__multadd>
 8006682:	4606      	mov	r6, r0
 8006684:	10ad      	asrs	r5, r5, #2
 8006686:	d03d      	beq.n	8006704 <__pow5mult+0xa0>
 8006688:	69fc      	ldr	r4, [r7, #28]
 800668a:	b97c      	cbnz	r4, 80066ac <__pow5mult+0x48>
 800668c:	2010      	movs	r0, #16
 800668e:	f7fe f8c9 	bl	8004824 <malloc>
 8006692:	4602      	mov	r2, r0
 8006694:	61f8      	str	r0, [r7, #28]
 8006696:	b928      	cbnz	r0, 80066a4 <__pow5mult+0x40>
 8006698:	4b1d      	ldr	r3, [pc, #116]	@ (8006710 <__pow5mult+0xac>)
 800669a:	481e      	ldr	r0, [pc, #120]	@ (8006714 <__pow5mult+0xb0>)
 800669c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80066a0:	f000 fdb0 	bl	8007204 <__assert_func>
 80066a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066a8:	6004      	str	r4, [r0, #0]
 80066aa:	60c4      	str	r4, [r0, #12]
 80066ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80066b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066b4:	b94c      	cbnz	r4, 80066ca <__pow5mult+0x66>
 80066b6:	f240 2171 	movw	r1, #625	@ 0x271
 80066ba:	4638      	mov	r0, r7
 80066bc:	f7ff ff12 	bl	80064e4 <__i2b>
 80066c0:	2300      	movs	r3, #0
 80066c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80066c6:	4604      	mov	r4, r0
 80066c8:	6003      	str	r3, [r0, #0]
 80066ca:	f04f 0900 	mov.w	r9, #0
 80066ce:	07eb      	lsls	r3, r5, #31
 80066d0:	d50a      	bpl.n	80066e8 <__pow5mult+0x84>
 80066d2:	4631      	mov	r1, r6
 80066d4:	4622      	mov	r2, r4
 80066d6:	4638      	mov	r0, r7
 80066d8:	f7ff ff1a 	bl	8006510 <__multiply>
 80066dc:	4631      	mov	r1, r6
 80066de:	4680      	mov	r8, r0
 80066e0:	4638      	mov	r0, r7
 80066e2:	f7ff fe4b 	bl	800637c <_Bfree>
 80066e6:	4646      	mov	r6, r8
 80066e8:	106d      	asrs	r5, r5, #1
 80066ea:	d00b      	beq.n	8006704 <__pow5mult+0xa0>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	b938      	cbnz	r0, 8006700 <__pow5mult+0x9c>
 80066f0:	4622      	mov	r2, r4
 80066f2:	4621      	mov	r1, r4
 80066f4:	4638      	mov	r0, r7
 80066f6:	f7ff ff0b 	bl	8006510 <__multiply>
 80066fa:	6020      	str	r0, [r4, #0]
 80066fc:	f8c0 9000 	str.w	r9, [r0]
 8006700:	4604      	mov	r4, r0
 8006702:	e7e4      	b.n	80066ce <__pow5mult+0x6a>
 8006704:	4630      	mov	r0, r6
 8006706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670a:	bf00      	nop
 800670c:	08007724 	.word	0x08007724
 8006710:	08007649 	.word	0x08007649
 8006714:	080076c9 	.word	0x080076c9

08006718 <__lshift>:
 8006718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	460c      	mov	r4, r1
 800671e:	6849      	ldr	r1, [r1, #4]
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	4607      	mov	r7, r0
 800672a:	4691      	mov	r9, r2
 800672c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006730:	f108 0601 	add.w	r6, r8, #1
 8006734:	42b3      	cmp	r3, r6
 8006736:	db0b      	blt.n	8006750 <__lshift+0x38>
 8006738:	4638      	mov	r0, r7
 800673a:	f7ff fddf 	bl	80062fc <_Balloc>
 800673e:	4605      	mov	r5, r0
 8006740:	b948      	cbnz	r0, 8006756 <__lshift+0x3e>
 8006742:	4602      	mov	r2, r0
 8006744:	4b28      	ldr	r3, [pc, #160]	@ (80067e8 <__lshift+0xd0>)
 8006746:	4829      	ldr	r0, [pc, #164]	@ (80067ec <__lshift+0xd4>)
 8006748:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800674c:	f000 fd5a 	bl	8007204 <__assert_func>
 8006750:	3101      	adds	r1, #1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	e7ee      	b.n	8006734 <__lshift+0x1c>
 8006756:	2300      	movs	r3, #0
 8006758:	f100 0114 	add.w	r1, r0, #20
 800675c:	f100 0210 	add.w	r2, r0, #16
 8006760:	4618      	mov	r0, r3
 8006762:	4553      	cmp	r3, sl
 8006764:	db33      	blt.n	80067ce <__lshift+0xb6>
 8006766:	6920      	ldr	r0, [r4, #16]
 8006768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800676c:	f104 0314 	add.w	r3, r4, #20
 8006770:	f019 091f 	ands.w	r9, r9, #31
 8006774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800677c:	d02b      	beq.n	80067d6 <__lshift+0xbe>
 800677e:	f1c9 0e20 	rsb	lr, r9, #32
 8006782:	468a      	mov	sl, r1
 8006784:	2200      	movs	r2, #0
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	fa00 f009 	lsl.w	r0, r0, r9
 800678c:	4310      	orrs	r0, r2
 800678e:	f84a 0b04 	str.w	r0, [sl], #4
 8006792:	f853 2b04 	ldr.w	r2, [r3], #4
 8006796:	459c      	cmp	ip, r3
 8006798:	fa22 f20e 	lsr.w	r2, r2, lr
 800679c:	d8f3      	bhi.n	8006786 <__lshift+0x6e>
 800679e:	ebac 0304 	sub.w	r3, ip, r4
 80067a2:	3b15      	subs	r3, #21
 80067a4:	f023 0303 	bic.w	r3, r3, #3
 80067a8:	3304      	adds	r3, #4
 80067aa:	f104 0015 	add.w	r0, r4, #21
 80067ae:	4584      	cmp	ip, r0
 80067b0:	bf38      	it	cc
 80067b2:	2304      	movcc	r3, #4
 80067b4:	50ca      	str	r2, [r1, r3]
 80067b6:	b10a      	cbz	r2, 80067bc <__lshift+0xa4>
 80067b8:	f108 0602 	add.w	r6, r8, #2
 80067bc:	3e01      	subs	r6, #1
 80067be:	4638      	mov	r0, r7
 80067c0:	612e      	str	r6, [r5, #16]
 80067c2:	4621      	mov	r1, r4
 80067c4:	f7ff fdda 	bl	800637c <_Bfree>
 80067c8:	4628      	mov	r0, r5
 80067ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80067d2:	3301      	adds	r3, #1
 80067d4:	e7c5      	b.n	8006762 <__lshift+0x4a>
 80067d6:	3904      	subs	r1, #4
 80067d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80067e0:	459c      	cmp	ip, r3
 80067e2:	d8f9      	bhi.n	80067d8 <__lshift+0xc0>
 80067e4:	e7ea      	b.n	80067bc <__lshift+0xa4>
 80067e6:	bf00      	nop
 80067e8:	080076b8 	.word	0x080076b8
 80067ec:	080076c9 	.word	0x080076c9

080067f0 <__mcmp>:
 80067f0:	690a      	ldr	r2, [r1, #16]
 80067f2:	4603      	mov	r3, r0
 80067f4:	6900      	ldr	r0, [r0, #16]
 80067f6:	1a80      	subs	r0, r0, r2
 80067f8:	b530      	push	{r4, r5, lr}
 80067fa:	d10e      	bne.n	800681a <__mcmp+0x2a>
 80067fc:	3314      	adds	r3, #20
 80067fe:	3114      	adds	r1, #20
 8006800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800680c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006810:	4295      	cmp	r5, r2
 8006812:	d003      	beq.n	800681c <__mcmp+0x2c>
 8006814:	d205      	bcs.n	8006822 <__mcmp+0x32>
 8006816:	f04f 30ff 	mov.w	r0, #4294967295
 800681a:	bd30      	pop	{r4, r5, pc}
 800681c:	42a3      	cmp	r3, r4
 800681e:	d3f3      	bcc.n	8006808 <__mcmp+0x18>
 8006820:	e7fb      	b.n	800681a <__mcmp+0x2a>
 8006822:	2001      	movs	r0, #1
 8006824:	e7f9      	b.n	800681a <__mcmp+0x2a>
	...

08006828 <__mdiff>:
 8006828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	4689      	mov	r9, r1
 800682e:	4606      	mov	r6, r0
 8006830:	4611      	mov	r1, r2
 8006832:	4648      	mov	r0, r9
 8006834:	4614      	mov	r4, r2
 8006836:	f7ff ffdb 	bl	80067f0 <__mcmp>
 800683a:	1e05      	subs	r5, r0, #0
 800683c:	d112      	bne.n	8006864 <__mdiff+0x3c>
 800683e:	4629      	mov	r1, r5
 8006840:	4630      	mov	r0, r6
 8006842:	f7ff fd5b 	bl	80062fc <_Balloc>
 8006846:	4602      	mov	r2, r0
 8006848:	b928      	cbnz	r0, 8006856 <__mdiff+0x2e>
 800684a:	4b3f      	ldr	r3, [pc, #252]	@ (8006948 <__mdiff+0x120>)
 800684c:	f240 2137 	movw	r1, #567	@ 0x237
 8006850:	483e      	ldr	r0, [pc, #248]	@ (800694c <__mdiff+0x124>)
 8006852:	f000 fcd7 	bl	8007204 <__assert_func>
 8006856:	2301      	movs	r3, #1
 8006858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800685c:	4610      	mov	r0, r2
 800685e:	b003      	add	sp, #12
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	bfbc      	itt	lt
 8006866:	464b      	movlt	r3, r9
 8006868:	46a1      	movlt	r9, r4
 800686a:	4630      	mov	r0, r6
 800686c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006870:	bfba      	itte	lt
 8006872:	461c      	movlt	r4, r3
 8006874:	2501      	movlt	r5, #1
 8006876:	2500      	movge	r5, #0
 8006878:	f7ff fd40 	bl	80062fc <_Balloc>
 800687c:	4602      	mov	r2, r0
 800687e:	b918      	cbnz	r0, 8006888 <__mdiff+0x60>
 8006880:	4b31      	ldr	r3, [pc, #196]	@ (8006948 <__mdiff+0x120>)
 8006882:	f240 2145 	movw	r1, #581	@ 0x245
 8006886:	e7e3      	b.n	8006850 <__mdiff+0x28>
 8006888:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800688c:	6926      	ldr	r6, [r4, #16]
 800688e:	60c5      	str	r5, [r0, #12]
 8006890:	f109 0310 	add.w	r3, r9, #16
 8006894:	f109 0514 	add.w	r5, r9, #20
 8006898:	f104 0e14 	add.w	lr, r4, #20
 800689c:	f100 0b14 	add.w	fp, r0, #20
 80068a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80068a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	46d9      	mov	r9, fp
 80068ac:	f04f 0c00 	mov.w	ip, #0
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80068b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	fa1f f38a 	uxth.w	r3, sl
 80068c0:	4619      	mov	r1, r3
 80068c2:	b283      	uxth	r3, r0
 80068c4:	1acb      	subs	r3, r1, r3
 80068c6:	0c00      	lsrs	r0, r0, #16
 80068c8:	4463      	add	r3, ip
 80068ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80068ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80068d8:	4576      	cmp	r6, lr
 80068da:	f849 3b04 	str.w	r3, [r9], #4
 80068de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068e2:	d8e5      	bhi.n	80068b0 <__mdiff+0x88>
 80068e4:	1b33      	subs	r3, r6, r4
 80068e6:	3b15      	subs	r3, #21
 80068e8:	f023 0303 	bic.w	r3, r3, #3
 80068ec:	3415      	adds	r4, #21
 80068ee:	3304      	adds	r3, #4
 80068f0:	42a6      	cmp	r6, r4
 80068f2:	bf38      	it	cc
 80068f4:	2304      	movcc	r3, #4
 80068f6:	441d      	add	r5, r3
 80068f8:	445b      	add	r3, fp
 80068fa:	461e      	mov	r6, r3
 80068fc:	462c      	mov	r4, r5
 80068fe:	4544      	cmp	r4, r8
 8006900:	d30e      	bcc.n	8006920 <__mdiff+0xf8>
 8006902:	f108 0103 	add.w	r1, r8, #3
 8006906:	1b49      	subs	r1, r1, r5
 8006908:	f021 0103 	bic.w	r1, r1, #3
 800690c:	3d03      	subs	r5, #3
 800690e:	45a8      	cmp	r8, r5
 8006910:	bf38      	it	cc
 8006912:	2100      	movcc	r1, #0
 8006914:	440b      	add	r3, r1
 8006916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800691a:	b191      	cbz	r1, 8006942 <__mdiff+0x11a>
 800691c:	6117      	str	r7, [r2, #16]
 800691e:	e79d      	b.n	800685c <__mdiff+0x34>
 8006920:	f854 1b04 	ldr.w	r1, [r4], #4
 8006924:	46e6      	mov	lr, ip
 8006926:	0c08      	lsrs	r0, r1, #16
 8006928:	fa1c fc81 	uxtah	ip, ip, r1
 800692c:	4471      	add	r1, lr
 800692e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006932:	b289      	uxth	r1, r1
 8006934:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006938:	f846 1b04 	str.w	r1, [r6], #4
 800693c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006940:	e7dd      	b.n	80068fe <__mdiff+0xd6>
 8006942:	3f01      	subs	r7, #1
 8006944:	e7e7      	b.n	8006916 <__mdiff+0xee>
 8006946:	bf00      	nop
 8006948:	080076b8 	.word	0x080076b8
 800694c:	080076c9 	.word	0x080076c9

08006950 <__d2b>:
 8006950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006954:	460f      	mov	r7, r1
 8006956:	2101      	movs	r1, #1
 8006958:	ec59 8b10 	vmov	r8, r9, d0
 800695c:	4616      	mov	r6, r2
 800695e:	f7ff fccd 	bl	80062fc <_Balloc>
 8006962:	4604      	mov	r4, r0
 8006964:	b930      	cbnz	r0, 8006974 <__d2b+0x24>
 8006966:	4602      	mov	r2, r0
 8006968:	4b23      	ldr	r3, [pc, #140]	@ (80069f8 <__d2b+0xa8>)
 800696a:	4824      	ldr	r0, [pc, #144]	@ (80069fc <__d2b+0xac>)
 800696c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006970:	f000 fc48 	bl	8007204 <__assert_func>
 8006974:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800697c:	b10d      	cbz	r5, 8006982 <__d2b+0x32>
 800697e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	f1b8 0300 	subs.w	r3, r8, #0
 8006988:	d023      	beq.n	80069d2 <__d2b+0x82>
 800698a:	4668      	mov	r0, sp
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	f7ff fd7c 	bl	800648a <__lo0bits>
 8006992:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006996:	b1d0      	cbz	r0, 80069ce <__d2b+0x7e>
 8006998:	f1c0 0320 	rsb	r3, r0, #32
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	430b      	orrs	r3, r1
 80069a2:	40c2      	lsrs	r2, r0
 80069a4:	6163      	str	r3, [r4, #20]
 80069a6:	9201      	str	r2, [sp, #4]
 80069a8:	9b01      	ldr	r3, [sp, #4]
 80069aa:	61a3      	str	r3, [r4, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bf0c      	ite	eq
 80069b0:	2201      	moveq	r2, #1
 80069b2:	2202      	movne	r2, #2
 80069b4:	6122      	str	r2, [r4, #16]
 80069b6:	b1a5      	cbz	r5, 80069e2 <__d2b+0x92>
 80069b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80069bc:	4405      	add	r5, r0
 80069be:	603d      	str	r5, [r7, #0]
 80069c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80069c4:	6030      	str	r0, [r6, #0]
 80069c6:	4620      	mov	r0, r4
 80069c8:	b003      	add	sp, #12
 80069ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069ce:	6161      	str	r1, [r4, #20]
 80069d0:	e7ea      	b.n	80069a8 <__d2b+0x58>
 80069d2:	a801      	add	r0, sp, #4
 80069d4:	f7ff fd59 	bl	800648a <__lo0bits>
 80069d8:	9b01      	ldr	r3, [sp, #4]
 80069da:	6163      	str	r3, [r4, #20]
 80069dc:	3020      	adds	r0, #32
 80069de:	2201      	movs	r2, #1
 80069e0:	e7e8      	b.n	80069b4 <__d2b+0x64>
 80069e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80069ea:	6038      	str	r0, [r7, #0]
 80069ec:	6918      	ldr	r0, [r3, #16]
 80069ee:	f7ff fd2d 	bl	800644c <__hi0bits>
 80069f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069f6:	e7e5      	b.n	80069c4 <__d2b+0x74>
 80069f8:	080076b8 	.word	0x080076b8
 80069fc:	080076c9 	.word	0x080076c9

08006a00 <__ssputs_r>:
 8006a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	688e      	ldr	r6, [r1, #8]
 8006a06:	461f      	mov	r7, r3
 8006a08:	42be      	cmp	r6, r7
 8006a0a:	680b      	ldr	r3, [r1, #0]
 8006a0c:	4682      	mov	sl, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	4690      	mov	r8, r2
 8006a12:	d82d      	bhi.n	8006a70 <__ssputs_r+0x70>
 8006a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a1c:	d026      	beq.n	8006a6c <__ssputs_r+0x6c>
 8006a1e:	6965      	ldr	r5, [r4, #20]
 8006a20:	6909      	ldr	r1, [r1, #16]
 8006a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a26:	eba3 0901 	sub.w	r9, r3, r1
 8006a2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a2e:	1c7b      	adds	r3, r7, #1
 8006a30:	444b      	add	r3, r9
 8006a32:	106d      	asrs	r5, r5, #1
 8006a34:	429d      	cmp	r5, r3
 8006a36:	bf38      	it	cc
 8006a38:	461d      	movcc	r5, r3
 8006a3a:	0553      	lsls	r3, r2, #21
 8006a3c:	d527      	bpl.n	8006a8e <__ssputs_r+0x8e>
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7fd ff1a 	bl	8004878 <_malloc_r>
 8006a44:	4606      	mov	r6, r0
 8006a46:	b360      	cbz	r0, 8006aa2 <__ssputs_r+0xa2>
 8006a48:	6921      	ldr	r1, [r4, #16]
 8006a4a:	464a      	mov	r2, r9
 8006a4c:	f000 fbcc 	bl	80071e8 <memcpy>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	6126      	str	r6, [r4, #16]
 8006a5e:	6165      	str	r5, [r4, #20]
 8006a60:	444e      	add	r6, r9
 8006a62:	eba5 0509 	sub.w	r5, r5, r9
 8006a66:	6026      	str	r6, [r4, #0]
 8006a68:	60a5      	str	r5, [r4, #8]
 8006a6a:	463e      	mov	r6, r7
 8006a6c:	42be      	cmp	r6, r7
 8006a6e:	d900      	bls.n	8006a72 <__ssputs_r+0x72>
 8006a70:	463e      	mov	r6, r7
 8006a72:	6820      	ldr	r0, [r4, #0]
 8006a74:	4632      	mov	r2, r6
 8006a76:	4641      	mov	r1, r8
 8006a78:	f000 fb9c 	bl	80071b4 <memmove>
 8006a7c:	68a3      	ldr	r3, [r4, #8]
 8006a7e:	1b9b      	subs	r3, r3, r6
 8006a80:	60a3      	str	r3, [r4, #8]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	4433      	add	r3, r6
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8e:	462a      	mov	r2, r5
 8006a90:	f000 fbfc 	bl	800728c <_realloc_r>
 8006a94:	4606      	mov	r6, r0
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d1e0      	bne.n	8006a5c <__ssputs_r+0x5c>
 8006a9a:	6921      	ldr	r1, [r4, #16]
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	f7ff fbe3 	bl	8006268 <_free_r>
 8006aa2:	230c      	movs	r3, #12
 8006aa4:	f8ca 3000 	str.w	r3, [sl]
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e7e9      	b.n	8006a8a <__ssputs_r+0x8a>
	...

08006ab8 <_svfiprintf_r>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	4698      	mov	r8, r3
 8006abe:	898b      	ldrh	r3, [r1, #12]
 8006ac0:	061b      	lsls	r3, r3, #24
 8006ac2:	b09d      	sub	sp, #116	@ 0x74
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	4614      	mov	r4, r2
 8006aca:	d510      	bpl.n	8006aee <_svfiprintf_r+0x36>
 8006acc:	690b      	ldr	r3, [r1, #16]
 8006ace:	b973      	cbnz	r3, 8006aee <_svfiprintf_r+0x36>
 8006ad0:	2140      	movs	r1, #64	@ 0x40
 8006ad2:	f7fd fed1 	bl	8004878 <_malloc_r>
 8006ad6:	6028      	str	r0, [r5, #0]
 8006ad8:	6128      	str	r0, [r5, #16]
 8006ada:	b930      	cbnz	r0, 8006aea <_svfiprintf_r+0x32>
 8006adc:	230c      	movs	r3, #12
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	b01d      	add	sp, #116	@ 0x74
 8006ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aea:	2340      	movs	r3, #64	@ 0x40
 8006aec:	616b      	str	r3, [r5, #20]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006af2:	2320      	movs	r3, #32
 8006af4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006afc:	2330      	movs	r3, #48	@ 0x30
 8006afe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c9c <_svfiprintf_r+0x1e4>
 8006b02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b06:	f04f 0901 	mov.w	r9, #1
 8006b0a:	4623      	mov	r3, r4
 8006b0c:	469a      	mov	sl, r3
 8006b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b12:	b10a      	cbz	r2, 8006b18 <_svfiprintf_r+0x60>
 8006b14:	2a25      	cmp	r2, #37	@ 0x25
 8006b16:	d1f9      	bne.n	8006b0c <_svfiprintf_r+0x54>
 8006b18:	ebba 0b04 	subs.w	fp, sl, r4
 8006b1c:	d00b      	beq.n	8006b36 <_svfiprintf_r+0x7e>
 8006b1e:	465b      	mov	r3, fp
 8006b20:	4622      	mov	r2, r4
 8006b22:	4629      	mov	r1, r5
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff ff6b 	bl	8006a00 <__ssputs_r>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	f000 80a7 	beq.w	8006c7e <_svfiprintf_r+0x1c6>
 8006b30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b32:	445a      	add	r2, fp
 8006b34:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b36:	f89a 3000 	ldrb.w	r3, [sl]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 809f 	beq.w	8006c7e <_svfiprintf_r+0x1c6>
 8006b40:	2300      	movs	r3, #0
 8006b42:	f04f 32ff 	mov.w	r2, #4294967295
 8006b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b4a:	f10a 0a01 	add.w	sl, sl, #1
 8006b4e:	9304      	str	r3, [sp, #16]
 8006b50:	9307      	str	r3, [sp, #28]
 8006b52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b56:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b58:	4654      	mov	r4, sl
 8006b5a:	2205      	movs	r2, #5
 8006b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b60:	484e      	ldr	r0, [pc, #312]	@ (8006c9c <_svfiprintf_r+0x1e4>)
 8006b62:	f7f9 fb55 	bl	8000210 <memchr>
 8006b66:	9a04      	ldr	r2, [sp, #16]
 8006b68:	b9d8      	cbnz	r0, 8006ba2 <_svfiprintf_r+0xea>
 8006b6a:	06d0      	lsls	r0, r2, #27
 8006b6c:	bf44      	itt	mi
 8006b6e:	2320      	movmi	r3, #32
 8006b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b74:	0711      	lsls	r1, r2, #28
 8006b76:	bf44      	itt	mi
 8006b78:	232b      	movmi	r3, #43	@ 0x2b
 8006b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b84:	d015      	beq.n	8006bb2 <_svfiprintf_r+0xfa>
 8006b86:	9a07      	ldr	r2, [sp, #28]
 8006b88:	4654      	mov	r4, sl
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	f04f 0c0a 	mov.w	ip, #10
 8006b90:	4621      	mov	r1, r4
 8006b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b96:	3b30      	subs	r3, #48	@ 0x30
 8006b98:	2b09      	cmp	r3, #9
 8006b9a:	d94b      	bls.n	8006c34 <_svfiprintf_r+0x17c>
 8006b9c:	b1b0      	cbz	r0, 8006bcc <_svfiprintf_r+0x114>
 8006b9e:	9207      	str	r2, [sp, #28]
 8006ba0:	e014      	b.n	8006bcc <_svfiprintf_r+0x114>
 8006ba2:	eba0 0308 	sub.w	r3, r0, r8
 8006ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8006baa:	4313      	orrs	r3, r2
 8006bac:	9304      	str	r3, [sp, #16]
 8006bae:	46a2      	mov	sl, r4
 8006bb0:	e7d2      	b.n	8006b58 <_svfiprintf_r+0xa0>
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	1d19      	adds	r1, r3, #4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	9103      	str	r1, [sp, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfbb      	ittet	lt
 8006bbe:	425b      	neglt	r3, r3
 8006bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc4:	9307      	strge	r3, [sp, #28]
 8006bc6:	9307      	strlt	r3, [sp, #28]
 8006bc8:	bfb8      	it	lt
 8006bca:	9204      	strlt	r2, [sp, #16]
 8006bcc:	7823      	ldrb	r3, [r4, #0]
 8006bce:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bd0:	d10a      	bne.n	8006be8 <_svfiprintf_r+0x130>
 8006bd2:	7863      	ldrb	r3, [r4, #1]
 8006bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bd6:	d132      	bne.n	8006c3e <_svfiprintf_r+0x186>
 8006bd8:	9b03      	ldr	r3, [sp, #12]
 8006bda:	1d1a      	adds	r2, r3, #4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	9203      	str	r2, [sp, #12]
 8006be0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006be4:	3402      	adds	r4, #2
 8006be6:	9305      	str	r3, [sp, #20]
 8006be8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006cac <_svfiprintf_r+0x1f4>
 8006bec:	7821      	ldrb	r1, [r4, #0]
 8006bee:	2203      	movs	r2, #3
 8006bf0:	4650      	mov	r0, sl
 8006bf2:	f7f9 fb0d 	bl	8000210 <memchr>
 8006bf6:	b138      	cbz	r0, 8006c08 <_svfiprintf_r+0x150>
 8006bf8:	9b04      	ldr	r3, [sp, #16]
 8006bfa:	eba0 000a 	sub.w	r0, r0, sl
 8006bfe:	2240      	movs	r2, #64	@ 0x40
 8006c00:	4082      	lsls	r2, r0
 8006c02:	4313      	orrs	r3, r2
 8006c04:	3401      	adds	r4, #1
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0c:	4824      	ldr	r0, [pc, #144]	@ (8006ca0 <_svfiprintf_r+0x1e8>)
 8006c0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c12:	2206      	movs	r2, #6
 8006c14:	f7f9 fafc 	bl	8000210 <memchr>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d036      	beq.n	8006c8a <_svfiprintf_r+0x1d2>
 8006c1c:	4b21      	ldr	r3, [pc, #132]	@ (8006ca4 <_svfiprintf_r+0x1ec>)
 8006c1e:	bb1b      	cbnz	r3, 8006c68 <_svfiprintf_r+0x1b0>
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	3307      	adds	r3, #7
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	3308      	adds	r3, #8
 8006c2a:	9303      	str	r3, [sp, #12]
 8006c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c2e:	4433      	add	r3, r6
 8006c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c32:	e76a      	b.n	8006b0a <_svfiprintf_r+0x52>
 8006c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c38:	460c      	mov	r4, r1
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	e7a8      	b.n	8006b90 <_svfiprintf_r+0xd8>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	3401      	adds	r4, #1
 8006c42:	9305      	str	r3, [sp, #20]
 8006c44:	4619      	mov	r1, r3
 8006c46:	f04f 0c0a 	mov.w	ip, #10
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c50:	3a30      	subs	r2, #48	@ 0x30
 8006c52:	2a09      	cmp	r2, #9
 8006c54:	d903      	bls.n	8006c5e <_svfiprintf_r+0x1a6>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0c6      	beq.n	8006be8 <_svfiprintf_r+0x130>
 8006c5a:	9105      	str	r1, [sp, #20]
 8006c5c:	e7c4      	b.n	8006be8 <_svfiprintf_r+0x130>
 8006c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c62:	4604      	mov	r4, r0
 8006c64:	2301      	movs	r3, #1
 8006c66:	e7f0      	b.n	8006c4a <_svfiprintf_r+0x192>
 8006c68:	ab03      	add	r3, sp, #12
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca8 <_svfiprintf_r+0x1f0>)
 8006c70:	a904      	add	r1, sp, #16
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7fd ff2c 	bl	8004ad0 <_printf_float>
 8006c78:	1c42      	adds	r2, r0, #1
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	d1d6      	bne.n	8006c2c <_svfiprintf_r+0x174>
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	065b      	lsls	r3, r3, #25
 8006c82:	f53f af2d 	bmi.w	8006ae0 <_svfiprintf_r+0x28>
 8006c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c88:	e72c      	b.n	8006ae4 <_svfiprintf_r+0x2c>
 8006c8a:	ab03      	add	r3, sp, #12
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	462a      	mov	r2, r5
 8006c90:	4b05      	ldr	r3, [pc, #20]	@ (8006ca8 <_svfiprintf_r+0x1f0>)
 8006c92:	a904      	add	r1, sp, #16
 8006c94:	4638      	mov	r0, r7
 8006c96:	f7fe f9b3 	bl	8005000 <_printf_i>
 8006c9a:	e7ed      	b.n	8006c78 <_svfiprintf_r+0x1c0>
 8006c9c:	08007820 	.word	0x08007820
 8006ca0:	0800782a 	.word	0x0800782a
 8006ca4:	08004ad1 	.word	0x08004ad1
 8006ca8:	08006a01 	.word	0x08006a01
 8006cac:	08007826 	.word	0x08007826

08006cb0 <__sfputc_r>:
 8006cb0:	6893      	ldr	r3, [r2, #8]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	b410      	push	{r4}
 8006cb8:	6093      	str	r3, [r2, #8]
 8006cba:	da08      	bge.n	8006cce <__sfputc_r+0x1e>
 8006cbc:	6994      	ldr	r4, [r2, #24]
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	db01      	blt.n	8006cc6 <__sfputc_r+0x16>
 8006cc2:	290a      	cmp	r1, #10
 8006cc4:	d103      	bne.n	8006cce <__sfputc_r+0x1e>
 8006cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cca:	f000 b9df 	b.w	800708c <__swbuf_r>
 8006cce:	6813      	ldr	r3, [r2, #0]
 8006cd0:	1c58      	adds	r0, r3, #1
 8006cd2:	6010      	str	r0, [r2, #0]
 8006cd4:	7019      	strb	r1, [r3, #0]
 8006cd6:	4608      	mov	r0, r1
 8006cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <__sfputs_r>:
 8006cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	460f      	mov	r7, r1
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	18d5      	adds	r5, r2, r3
 8006ce8:	42ac      	cmp	r4, r5
 8006cea:	d101      	bne.n	8006cf0 <__sfputs_r+0x12>
 8006cec:	2000      	movs	r0, #0
 8006cee:	e007      	b.n	8006d00 <__sfputs_r+0x22>
 8006cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf4:	463a      	mov	r2, r7
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ffda 	bl	8006cb0 <__sfputc_r>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d1f3      	bne.n	8006ce8 <__sfputs_r+0xa>
 8006d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d04 <_vfiprintf_r>:
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	460d      	mov	r5, r1
 8006d0a:	b09d      	sub	sp, #116	@ 0x74
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	4698      	mov	r8, r3
 8006d10:	4606      	mov	r6, r0
 8006d12:	b118      	cbz	r0, 8006d1c <_vfiprintf_r+0x18>
 8006d14:	6a03      	ldr	r3, [r0, #32]
 8006d16:	b90b      	cbnz	r3, 8006d1c <_vfiprintf_r+0x18>
 8006d18:	f7fe fb1e 	bl	8005358 <__sinit>
 8006d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d1e:	07d9      	lsls	r1, r3, #31
 8006d20:	d405      	bmi.n	8006d2e <_vfiprintf_r+0x2a>
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	059a      	lsls	r2, r3, #22
 8006d26:	d402      	bmi.n	8006d2e <_vfiprintf_r+0x2a>
 8006d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d2a:	f7fe fc4e 	bl	80055ca <__retarget_lock_acquire_recursive>
 8006d2e:	89ab      	ldrh	r3, [r5, #12]
 8006d30:	071b      	lsls	r3, r3, #28
 8006d32:	d501      	bpl.n	8006d38 <_vfiprintf_r+0x34>
 8006d34:	692b      	ldr	r3, [r5, #16]
 8006d36:	b99b      	cbnz	r3, 8006d60 <_vfiprintf_r+0x5c>
 8006d38:	4629      	mov	r1, r5
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 f9e4 	bl	8007108 <__swsetup_r>
 8006d40:	b170      	cbz	r0, 8006d60 <_vfiprintf_r+0x5c>
 8006d42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d44:	07dc      	lsls	r4, r3, #31
 8006d46:	d504      	bpl.n	8006d52 <_vfiprintf_r+0x4e>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	b01d      	add	sp, #116	@ 0x74
 8006d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d52:	89ab      	ldrh	r3, [r5, #12]
 8006d54:	0598      	lsls	r0, r3, #22
 8006d56:	d4f7      	bmi.n	8006d48 <_vfiprintf_r+0x44>
 8006d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d5a:	f7fe fc37 	bl	80055cc <__retarget_lock_release_recursive>
 8006d5e:	e7f3      	b.n	8006d48 <_vfiprintf_r+0x44>
 8006d60:	2300      	movs	r3, #0
 8006d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d64:	2320      	movs	r3, #32
 8006d66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d6e:	2330      	movs	r3, #48	@ 0x30
 8006d70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f20 <_vfiprintf_r+0x21c>
 8006d74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d78:	f04f 0901 	mov.w	r9, #1
 8006d7c:	4623      	mov	r3, r4
 8006d7e:	469a      	mov	sl, r3
 8006d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d84:	b10a      	cbz	r2, 8006d8a <_vfiprintf_r+0x86>
 8006d86:	2a25      	cmp	r2, #37	@ 0x25
 8006d88:	d1f9      	bne.n	8006d7e <_vfiprintf_r+0x7a>
 8006d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d8e:	d00b      	beq.n	8006da8 <_vfiprintf_r+0xa4>
 8006d90:	465b      	mov	r3, fp
 8006d92:	4622      	mov	r2, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff ffa1 	bl	8006cde <__sfputs_r>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f000 80a7 	beq.w	8006ef0 <_vfiprintf_r+0x1ec>
 8006da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006da4:	445a      	add	r2, fp
 8006da6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006da8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 809f 	beq.w	8006ef0 <_vfiprintf_r+0x1ec>
 8006db2:	2300      	movs	r3, #0
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dbc:	f10a 0a01 	add.w	sl, sl, #1
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	9307      	str	r3, [sp, #28]
 8006dc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dca:	4654      	mov	r4, sl
 8006dcc:	2205      	movs	r2, #5
 8006dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd2:	4853      	ldr	r0, [pc, #332]	@ (8006f20 <_vfiprintf_r+0x21c>)
 8006dd4:	f7f9 fa1c 	bl	8000210 <memchr>
 8006dd8:	9a04      	ldr	r2, [sp, #16]
 8006dda:	b9d8      	cbnz	r0, 8006e14 <_vfiprintf_r+0x110>
 8006ddc:	06d1      	lsls	r1, r2, #27
 8006dde:	bf44      	itt	mi
 8006de0:	2320      	movmi	r3, #32
 8006de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006de6:	0713      	lsls	r3, r2, #28
 8006de8:	bf44      	itt	mi
 8006dea:	232b      	movmi	r3, #43	@ 0x2b
 8006dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006df0:	f89a 3000 	ldrb.w	r3, [sl]
 8006df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006df6:	d015      	beq.n	8006e24 <_vfiprintf_r+0x120>
 8006df8:	9a07      	ldr	r2, [sp, #28]
 8006dfa:	4654      	mov	r4, sl
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f04f 0c0a 	mov.w	ip, #10
 8006e02:	4621      	mov	r1, r4
 8006e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e08:	3b30      	subs	r3, #48	@ 0x30
 8006e0a:	2b09      	cmp	r3, #9
 8006e0c:	d94b      	bls.n	8006ea6 <_vfiprintf_r+0x1a2>
 8006e0e:	b1b0      	cbz	r0, 8006e3e <_vfiprintf_r+0x13a>
 8006e10:	9207      	str	r2, [sp, #28]
 8006e12:	e014      	b.n	8006e3e <_vfiprintf_r+0x13a>
 8006e14:	eba0 0308 	sub.w	r3, r0, r8
 8006e18:	fa09 f303 	lsl.w	r3, r9, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	46a2      	mov	sl, r4
 8006e22:	e7d2      	b.n	8006dca <_vfiprintf_r+0xc6>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	1d19      	adds	r1, r3, #4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	9103      	str	r1, [sp, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bfbb      	ittet	lt
 8006e30:	425b      	neglt	r3, r3
 8006e32:	f042 0202 	orrlt.w	r2, r2, #2
 8006e36:	9307      	strge	r3, [sp, #28]
 8006e38:	9307      	strlt	r3, [sp, #28]
 8006e3a:	bfb8      	it	lt
 8006e3c:	9204      	strlt	r2, [sp, #16]
 8006e3e:	7823      	ldrb	r3, [r4, #0]
 8006e40:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e42:	d10a      	bne.n	8006e5a <_vfiprintf_r+0x156>
 8006e44:	7863      	ldrb	r3, [r4, #1]
 8006e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e48:	d132      	bne.n	8006eb0 <_vfiprintf_r+0x1ac>
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	1d1a      	adds	r2, r3, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	9203      	str	r2, [sp, #12]
 8006e52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e56:	3402      	adds	r4, #2
 8006e58:	9305      	str	r3, [sp, #20]
 8006e5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f30 <_vfiprintf_r+0x22c>
 8006e5e:	7821      	ldrb	r1, [r4, #0]
 8006e60:	2203      	movs	r2, #3
 8006e62:	4650      	mov	r0, sl
 8006e64:	f7f9 f9d4 	bl	8000210 <memchr>
 8006e68:	b138      	cbz	r0, 8006e7a <_vfiprintf_r+0x176>
 8006e6a:	9b04      	ldr	r3, [sp, #16]
 8006e6c:	eba0 000a 	sub.w	r0, r0, sl
 8006e70:	2240      	movs	r2, #64	@ 0x40
 8006e72:	4082      	lsls	r2, r0
 8006e74:	4313      	orrs	r3, r2
 8006e76:	3401      	adds	r4, #1
 8006e78:	9304      	str	r3, [sp, #16]
 8006e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e7e:	4829      	ldr	r0, [pc, #164]	@ (8006f24 <_vfiprintf_r+0x220>)
 8006e80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e84:	2206      	movs	r2, #6
 8006e86:	f7f9 f9c3 	bl	8000210 <memchr>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d03f      	beq.n	8006f0e <_vfiprintf_r+0x20a>
 8006e8e:	4b26      	ldr	r3, [pc, #152]	@ (8006f28 <_vfiprintf_r+0x224>)
 8006e90:	bb1b      	cbnz	r3, 8006eda <_vfiprintf_r+0x1d6>
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	3307      	adds	r3, #7
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	9303      	str	r3, [sp, #12]
 8006e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea0:	443b      	add	r3, r7
 8006ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ea4:	e76a      	b.n	8006d7c <_vfiprintf_r+0x78>
 8006ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eaa:	460c      	mov	r4, r1
 8006eac:	2001      	movs	r0, #1
 8006eae:	e7a8      	b.n	8006e02 <_vfiprintf_r+0xfe>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	3401      	adds	r4, #1
 8006eb4:	9305      	str	r3, [sp, #20]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	f04f 0c0a 	mov.w	ip, #10
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ec2:	3a30      	subs	r2, #48	@ 0x30
 8006ec4:	2a09      	cmp	r2, #9
 8006ec6:	d903      	bls.n	8006ed0 <_vfiprintf_r+0x1cc>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0c6      	beq.n	8006e5a <_vfiprintf_r+0x156>
 8006ecc:	9105      	str	r1, [sp, #20]
 8006ece:	e7c4      	b.n	8006e5a <_vfiprintf_r+0x156>
 8006ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e7f0      	b.n	8006ebc <_vfiprintf_r+0x1b8>
 8006eda:	ab03      	add	r3, sp, #12
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	462a      	mov	r2, r5
 8006ee0:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <_vfiprintf_r+0x228>)
 8006ee2:	a904      	add	r1, sp, #16
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7fd fdf3 	bl	8004ad0 <_printf_float>
 8006eea:	4607      	mov	r7, r0
 8006eec:	1c78      	adds	r0, r7, #1
 8006eee:	d1d6      	bne.n	8006e9e <_vfiprintf_r+0x19a>
 8006ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ef2:	07d9      	lsls	r1, r3, #31
 8006ef4:	d405      	bmi.n	8006f02 <_vfiprintf_r+0x1fe>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	059a      	lsls	r2, r3, #22
 8006efa:	d402      	bmi.n	8006f02 <_vfiprintf_r+0x1fe>
 8006efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006efe:	f7fe fb65 	bl	80055cc <__retarget_lock_release_recursive>
 8006f02:	89ab      	ldrh	r3, [r5, #12]
 8006f04:	065b      	lsls	r3, r3, #25
 8006f06:	f53f af1f 	bmi.w	8006d48 <_vfiprintf_r+0x44>
 8006f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f0c:	e71e      	b.n	8006d4c <_vfiprintf_r+0x48>
 8006f0e:	ab03      	add	r3, sp, #12
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	462a      	mov	r2, r5
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <_vfiprintf_r+0x228>)
 8006f16:	a904      	add	r1, sp, #16
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f7fe f871 	bl	8005000 <_printf_i>
 8006f1e:	e7e4      	b.n	8006eea <_vfiprintf_r+0x1e6>
 8006f20:	08007820 	.word	0x08007820
 8006f24:	0800782a 	.word	0x0800782a
 8006f28:	08004ad1 	.word	0x08004ad1
 8006f2c:	08006cdf 	.word	0x08006cdf
 8006f30:	08007826 	.word	0x08007826

08006f34 <__sflush_r>:
 8006f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3c:	0716      	lsls	r6, r2, #28
 8006f3e:	4605      	mov	r5, r0
 8006f40:	460c      	mov	r4, r1
 8006f42:	d454      	bmi.n	8006fee <__sflush_r+0xba>
 8006f44:	684b      	ldr	r3, [r1, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dc02      	bgt.n	8006f50 <__sflush_r+0x1c>
 8006f4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dd48      	ble.n	8006fe2 <__sflush_r+0xae>
 8006f50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	d045      	beq.n	8006fe2 <__sflush_r+0xae>
 8006f56:	2300      	movs	r3, #0
 8006f58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f5c:	682f      	ldr	r7, [r5, #0]
 8006f5e:	6a21      	ldr	r1, [r4, #32]
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	d030      	beq.n	8006fc6 <__sflush_r+0x92>
 8006f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	0759      	lsls	r1, r3, #29
 8006f6a:	d505      	bpl.n	8006f78 <__sflush_r+0x44>
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f72:	b10b      	cbz	r3, 8006f78 <__sflush_r+0x44>
 8006f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f7c:	6a21      	ldr	r1, [r4, #32]
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b0      	blx	r6
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	d106      	bne.n	8006f96 <__sflush_r+0x62>
 8006f88:	6829      	ldr	r1, [r5, #0]
 8006f8a:	291d      	cmp	r1, #29
 8006f8c:	d82b      	bhi.n	8006fe6 <__sflush_r+0xb2>
 8006f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007038 <__sflush_r+0x104>)
 8006f90:	410a      	asrs	r2, r1
 8006f92:	07d6      	lsls	r6, r2, #31
 8006f94:	d427      	bmi.n	8006fe6 <__sflush_r+0xb2>
 8006f96:	2200      	movs	r2, #0
 8006f98:	6062      	str	r2, [r4, #4]
 8006f9a:	04d9      	lsls	r1, r3, #19
 8006f9c:	6922      	ldr	r2, [r4, #16]
 8006f9e:	6022      	str	r2, [r4, #0]
 8006fa0:	d504      	bpl.n	8006fac <__sflush_r+0x78>
 8006fa2:	1c42      	adds	r2, r0, #1
 8006fa4:	d101      	bne.n	8006faa <__sflush_r+0x76>
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	b903      	cbnz	r3, 8006fac <__sflush_r+0x78>
 8006faa:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fae:	602f      	str	r7, [r5, #0]
 8006fb0:	b1b9      	cbz	r1, 8006fe2 <__sflush_r+0xae>
 8006fb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	d002      	beq.n	8006fc0 <__sflush_r+0x8c>
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7ff f954 	bl	8006268 <_free_r>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fc4:	e00d      	b.n	8006fe2 <__sflush_r+0xae>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b0      	blx	r6
 8006fcc:	4602      	mov	r2, r0
 8006fce:	1c50      	adds	r0, r2, #1
 8006fd0:	d1c9      	bne.n	8006f66 <__sflush_r+0x32>
 8006fd2:	682b      	ldr	r3, [r5, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c6      	beq.n	8006f66 <__sflush_r+0x32>
 8006fd8:	2b1d      	cmp	r3, #29
 8006fda:	d001      	beq.n	8006fe0 <__sflush_r+0xac>
 8006fdc:	2b16      	cmp	r3, #22
 8006fde:	d11e      	bne.n	800701e <__sflush_r+0xea>
 8006fe0:	602f      	str	r7, [r5, #0]
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e022      	b.n	800702c <__sflush_r+0xf8>
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fea:	b21b      	sxth	r3, r3
 8006fec:	e01b      	b.n	8007026 <__sflush_r+0xf2>
 8006fee:	690f      	ldr	r7, [r1, #16]
 8006ff0:	2f00      	cmp	r7, #0
 8006ff2:	d0f6      	beq.n	8006fe2 <__sflush_r+0xae>
 8006ff4:	0793      	lsls	r3, r2, #30
 8006ff6:	680e      	ldr	r6, [r1, #0]
 8006ff8:	bf08      	it	eq
 8006ffa:	694b      	ldreq	r3, [r1, #20]
 8006ffc:	600f      	str	r7, [r1, #0]
 8006ffe:	bf18      	it	ne
 8007000:	2300      	movne	r3, #0
 8007002:	eba6 0807 	sub.w	r8, r6, r7
 8007006:	608b      	str	r3, [r1, #8]
 8007008:	f1b8 0f00 	cmp.w	r8, #0
 800700c:	dde9      	ble.n	8006fe2 <__sflush_r+0xae>
 800700e:	6a21      	ldr	r1, [r4, #32]
 8007010:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007012:	4643      	mov	r3, r8
 8007014:	463a      	mov	r2, r7
 8007016:	4628      	mov	r0, r5
 8007018:	47b0      	blx	r6
 800701a:	2800      	cmp	r0, #0
 800701c:	dc08      	bgt.n	8007030 <__sflush_r+0xfc>
 800701e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007030:	4407      	add	r7, r0
 8007032:	eba8 0800 	sub.w	r8, r8, r0
 8007036:	e7e7      	b.n	8007008 <__sflush_r+0xd4>
 8007038:	dfbffffe 	.word	0xdfbffffe

0800703c <_fflush_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	690b      	ldr	r3, [r1, #16]
 8007040:	4605      	mov	r5, r0
 8007042:	460c      	mov	r4, r1
 8007044:	b913      	cbnz	r3, 800704c <_fflush_r+0x10>
 8007046:	2500      	movs	r5, #0
 8007048:	4628      	mov	r0, r5
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	b118      	cbz	r0, 8007056 <_fflush_r+0x1a>
 800704e:	6a03      	ldr	r3, [r0, #32]
 8007050:	b90b      	cbnz	r3, 8007056 <_fflush_r+0x1a>
 8007052:	f7fe f981 	bl	8005358 <__sinit>
 8007056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f3      	beq.n	8007046 <_fflush_r+0xa>
 800705e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007060:	07d0      	lsls	r0, r2, #31
 8007062:	d404      	bmi.n	800706e <_fflush_r+0x32>
 8007064:	0599      	lsls	r1, r3, #22
 8007066:	d402      	bmi.n	800706e <_fflush_r+0x32>
 8007068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800706a:	f7fe faae 	bl	80055ca <__retarget_lock_acquire_recursive>
 800706e:	4628      	mov	r0, r5
 8007070:	4621      	mov	r1, r4
 8007072:	f7ff ff5f 	bl	8006f34 <__sflush_r>
 8007076:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007078:	07da      	lsls	r2, r3, #31
 800707a:	4605      	mov	r5, r0
 800707c:	d4e4      	bmi.n	8007048 <_fflush_r+0xc>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	059b      	lsls	r3, r3, #22
 8007082:	d4e1      	bmi.n	8007048 <_fflush_r+0xc>
 8007084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007086:	f7fe faa1 	bl	80055cc <__retarget_lock_release_recursive>
 800708a:	e7dd      	b.n	8007048 <_fflush_r+0xc>

0800708c <__swbuf_r>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	460e      	mov	r6, r1
 8007090:	4614      	mov	r4, r2
 8007092:	4605      	mov	r5, r0
 8007094:	b118      	cbz	r0, 800709e <__swbuf_r+0x12>
 8007096:	6a03      	ldr	r3, [r0, #32]
 8007098:	b90b      	cbnz	r3, 800709e <__swbuf_r+0x12>
 800709a:	f7fe f95d 	bl	8005358 <__sinit>
 800709e:	69a3      	ldr	r3, [r4, #24]
 80070a0:	60a3      	str	r3, [r4, #8]
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	071a      	lsls	r2, r3, #28
 80070a6:	d501      	bpl.n	80070ac <__swbuf_r+0x20>
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	b943      	cbnz	r3, 80070be <__swbuf_r+0x32>
 80070ac:	4621      	mov	r1, r4
 80070ae:	4628      	mov	r0, r5
 80070b0:	f000 f82a 	bl	8007108 <__swsetup_r>
 80070b4:	b118      	cbz	r0, 80070be <__swbuf_r+0x32>
 80070b6:	f04f 37ff 	mov.w	r7, #4294967295
 80070ba:	4638      	mov	r0, r7
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	6922      	ldr	r2, [r4, #16]
 80070c2:	1a98      	subs	r0, r3, r2
 80070c4:	6963      	ldr	r3, [r4, #20]
 80070c6:	b2f6      	uxtb	r6, r6
 80070c8:	4283      	cmp	r3, r0
 80070ca:	4637      	mov	r7, r6
 80070cc:	dc05      	bgt.n	80070da <__swbuf_r+0x4e>
 80070ce:	4621      	mov	r1, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f7ff ffb3 	bl	800703c <_fflush_r>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d1ed      	bne.n	80070b6 <__swbuf_r+0x2a>
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	3b01      	subs	r3, #1
 80070de:	60a3      	str	r3, [r4, #8]
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	701e      	strb	r6, [r3, #0]
 80070e8:	6962      	ldr	r2, [r4, #20]
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d004      	beq.n	80070fa <__swbuf_r+0x6e>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	07db      	lsls	r3, r3, #31
 80070f4:	d5e1      	bpl.n	80070ba <__swbuf_r+0x2e>
 80070f6:	2e0a      	cmp	r6, #10
 80070f8:	d1df      	bne.n	80070ba <__swbuf_r+0x2e>
 80070fa:	4621      	mov	r1, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f7ff ff9d 	bl	800703c <_fflush_r>
 8007102:	2800      	cmp	r0, #0
 8007104:	d0d9      	beq.n	80070ba <__swbuf_r+0x2e>
 8007106:	e7d6      	b.n	80070b6 <__swbuf_r+0x2a>

08007108 <__swsetup_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4b29      	ldr	r3, [pc, #164]	@ (80071b0 <__swsetup_r+0xa8>)
 800710c:	4605      	mov	r5, r0
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	460c      	mov	r4, r1
 8007112:	b118      	cbz	r0, 800711c <__swsetup_r+0x14>
 8007114:	6a03      	ldr	r3, [r0, #32]
 8007116:	b90b      	cbnz	r3, 800711c <__swsetup_r+0x14>
 8007118:	f7fe f91e 	bl	8005358 <__sinit>
 800711c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007120:	0719      	lsls	r1, r3, #28
 8007122:	d422      	bmi.n	800716a <__swsetup_r+0x62>
 8007124:	06da      	lsls	r2, r3, #27
 8007126:	d407      	bmi.n	8007138 <__swsetup_r+0x30>
 8007128:	2209      	movs	r2, #9
 800712a:	602a      	str	r2, [r5, #0]
 800712c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	e033      	b.n	80071a0 <__swsetup_r+0x98>
 8007138:	0758      	lsls	r0, r3, #29
 800713a:	d512      	bpl.n	8007162 <__swsetup_r+0x5a>
 800713c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800713e:	b141      	cbz	r1, 8007152 <__swsetup_r+0x4a>
 8007140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007144:	4299      	cmp	r1, r3
 8007146:	d002      	beq.n	800714e <__swsetup_r+0x46>
 8007148:	4628      	mov	r0, r5
 800714a:	f7ff f88d 	bl	8006268 <_free_r>
 800714e:	2300      	movs	r3, #0
 8007150:	6363      	str	r3, [r4, #52]	@ 0x34
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	2300      	movs	r3, #0
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f043 0308 	orr.w	r3, r3, #8
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	b94b      	cbnz	r3, 8007182 <__swsetup_r+0x7a>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007178:	d003      	beq.n	8007182 <__swsetup_r+0x7a>
 800717a:	4621      	mov	r1, r4
 800717c:	4628      	mov	r0, r5
 800717e:	f000 f8f9 	bl	8007374 <__smakebuf_r>
 8007182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007186:	f013 0201 	ands.w	r2, r3, #1
 800718a:	d00a      	beq.n	80071a2 <__swsetup_r+0x9a>
 800718c:	2200      	movs	r2, #0
 800718e:	60a2      	str	r2, [r4, #8]
 8007190:	6962      	ldr	r2, [r4, #20]
 8007192:	4252      	negs	r2, r2
 8007194:	61a2      	str	r2, [r4, #24]
 8007196:	6922      	ldr	r2, [r4, #16]
 8007198:	b942      	cbnz	r2, 80071ac <__swsetup_r+0xa4>
 800719a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800719e:	d1c5      	bne.n	800712c <__swsetup_r+0x24>
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	0799      	lsls	r1, r3, #30
 80071a4:	bf58      	it	pl
 80071a6:	6962      	ldrpl	r2, [r4, #20]
 80071a8:	60a2      	str	r2, [r4, #8]
 80071aa:	e7f4      	b.n	8007196 <__swsetup_r+0x8e>
 80071ac:	2000      	movs	r0, #0
 80071ae:	e7f7      	b.n	80071a0 <__swsetup_r+0x98>
 80071b0:	20000028 	.word	0x20000028

080071b4 <memmove>:
 80071b4:	4288      	cmp	r0, r1
 80071b6:	b510      	push	{r4, lr}
 80071b8:	eb01 0402 	add.w	r4, r1, r2
 80071bc:	d902      	bls.n	80071c4 <memmove+0x10>
 80071be:	4284      	cmp	r4, r0
 80071c0:	4623      	mov	r3, r4
 80071c2:	d807      	bhi.n	80071d4 <memmove+0x20>
 80071c4:	1e43      	subs	r3, r0, #1
 80071c6:	42a1      	cmp	r1, r4
 80071c8:	d008      	beq.n	80071dc <memmove+0x28>
 80071ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071d2:	e7f8      	b.n	80071c6 <memmove+0x12>
 80071d4:	4402      	add	r2, r0
 80071d6:	4601      	mov	r1, r0
 80071d8:	428a      	cmp	r2, r1
 80071da:	d100      	bne.n	80071de <memmove+0x2a>
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071e6:	e7f7      	b.n	80071d8 <memmove+0x24>

080071e8 <memcpy>:
 80071e8:	440a      	add	r2, r1
 80071ea:	4291      	cmp	r1, r2
 80071ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80071f0:	d100      	bne.n	80071f4 <memcpy+0xc>
 80071f2:	4770      	bx	lr
 80071f4:	b510      	push	{r4, lr}
 80071f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071fe:	4291      	cmp	r1, r2
 8007200:	d1f9      	bne.n	80071f6 <memcpy+0xe>
 8007202:	bd10      	pop	{r4, pc}

08007204 <__assert_func>:
 8007204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007206:	4614      	mov	r4, r2
 8007208:	461a      	mov	r2, r3
 800720a:	4b09      	ldr	r3, [pc, #36]	@ (8007230 <__assert_func+0x2c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4605      	mov	r5, r0
 8007210:	68d8      	ldr	r0, [r3, #12]
 8007212:	b954      	cbnz	r4, 800722a <__assert_func+0x26>
 8007214:	4b07      	ldr	r3, [pc, #28]	@ (8007234 <__assert_func+0x30>)
 8007216:	461c      	mov	r4, r3
 8007218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800721c:	9100      	str	r1, [sp, #0]
 800721e:	462b      	mov	r3, r5
 8007220:	4905      	ldr	r1, [pc, #20]	@ (8007238 <__assert_func+0x34>)
 8007222:	f000 f86f 	bl	8007304 <fiprintf>
 8007226:	f000 f903 	bl	8007430 <abort>
 800722a:	4b04      	ldr	r3, [pc, #16]	@ (800723c <__assert_func+0x38>)
 800722c:	e7f4      	b.n	8007218 <__assert_func+0x14>
 800722e:	bf00      	nop
 8007230:	20000028 	.word	0x20000028
 8007234:	08007876 	.word	0x08007876
 8007238:	08007848 	.word	0x08007848
 800723c:	0800783b 	.word	0x0800783b

08007240 <_calloc_r>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	fba1 5402 	umull	r5, r4, r1, r2
 8007246:	b93c      	cbnz	r4, 8007258 <_calloc_r+0x18>
 8007248:	4629      	mov	r1, r5
 800724a:	f7fd fb15 	bl	8004878 <_malloc_r>
 800724e:	4606      	mov	r6, r0
 8007250:	b928      	cbnz	r0, 800725e <_calloc_r+0x1e>
 8007252:	2600      	movs	r6, #0
 8007254:	4630      	mov	r0, r6
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	220c      	movs	r2, #12
 800725a:	6002      	str	r2, [r0, #0]
 800725c:	e7f9      	b.n	8007252 <_calloc_r+0x12>
 800725e:	462a      	mov	r2, r5
 8007260:	4621      	mov	r1, r4
 8007262:	f7fe f924 	bl	80054ae <memset>
 8007266:	e7f5      	b.n	8007254 <_calloc_r+0x14>

08007268 <__ascii_mbtowc>:
 8007268:	b082      	sub	sp, #8
 800726a:	b901      	cbnz	r1, 800726e <__ascii_mbtowc+0x6>
 800726c:	a901      	add	r1, sp, #4
 800726e:	b142      	cbz	r2, 8007282 <__ascii_mbtowc+0x1a>
 8007270:	b14b      	cbz	r3, 8007286 <__ascii_mbtowc+0x1e>
 8007272:	7813      	ldrb	r3, [r2, #0]
 8007274:	600b      	str	r3, [r1, #0]
 8007276:	7812      	ldrb	r2, [r2, #0]
 8007278:	1e10      	subs	r0, r2, #0
 800727a:	bf18      	it	ne
 800727c:	2001      	movne	r0, #1
 800727e:	b002      	add	sp, #8
 8007280:	4770      	bx	lr
 8007282:	4610      	mov	r0, r2
 8007284:	e7fb      	b.n	800727e <__ascii_mbtowc+0x16>
 8007286:	f06f 0001 	mvn.w	r0, #1
 800728a:	e7f8      	b.n	800727e <__ascii_mbtowc+0x16>

0800728c <_realloc_r>:
 800728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007290:	4680      	mov	r8, r0
 8007292:	4615      	mov	r5, r2
 8007294:	460c      	mov	r4, r1
 8007296:	b921      	cbnz	r1, 80072a2 <_realloc_r+0x16>
 8007298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	4611      	mov	r1, r2
 800729e:	f7fd baeb 	b.w	8004878 <_malloc_r>
 80072a2:	b92a      	cbnz	r2, 80072b0 <_realloc_r+0x24>
 80072a4:	f7fe ffe0 	bl	8006268 <_free_r>
 80072a8:	2400      	movs	r4, #0
 80072aa:	4620      	mov	r0, r4
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b0:	f000 f8c5 	bl	800743e <_malloc_usable_size_r>
 80072b4:	4285      	cmp	r5, r0
 80072b6:	4606      	mov	r6, r0
 80072b8:	d802      	bhi.n	80072c0 <_realloc_r+0x34>
 80072ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80072be:	d8f4      	bhi.n	80072aa <_realloc_r+0x1e>
 80072c0:	4629      	mov	r1, r5
 80072c2:	4640      	mov	r0, r8
 80072c4:	f7fd fad8 	bl	8004878 <_malloc_r>
 80072c8:	4607      	mov	r7, r0
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d0ec      	beq.n	80072a8 <_realloc_r+0x1c>
 80072ce:	42b5      	cmp	r5, r6
 80072d0:	462a      	mov	r2, r5
 80072d2:	4621      	mov	r1, r4
 80072d4:	bf28      	it	cs
 80072d6:	4632      	movcs	r2, r6
 80072d8:	f7ff ff86 	bl	80071e8 <memcpy>
 80072dc:	4621      	mov	r1, r4
 80072de:	4640      	mov	r0, r8
 80072e0:	f7fe ffc2 	bl	8006268 <_free_r>
 80072e4:	463c      	mov	r4, r7
 80072e6:	e7e0      	b.n	80072aa <_realloc_r+0x1e>

080072e8 <__ascii_wctomb>:
 80072e8:	4603      	mov	r3, r0
 80072ea:	4608      	mov	r0, r1
 80072ec:	b141      	cbz	r1, 8007300 <__ascii_wctomb+0x18>
 80072ee:	2aff      	cmp	r2, #255	@ 0xff
 80072f0:	d904      	bls.n	80072fc <__ascii_wctomb+0x14>
 80072f2:	228a      	movs	r2, #138	@ 0x8a
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295
 80072fa:	4770      	bx	lr
 80072fc:	700a      	strb	r2, [r1, #0]
 80072fe:	2001      	movs	r0, #1
 8007300:	4770      	bx	lr
	...

08007304 <fiprintf>:
 8007304:	b40e      	push	{r1, r2, r3}
 8007306:	b503      	push	{r0, r1, lr}
 8007308:	4601      	mov	r1, r0
 800730a:	ab03      	add	r3, sp, #12
 800730c:	4805      	ldr	r0, [pc, #20]	@ (8007324 <fiprintf+0x20>)
 800730e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007312:	6800      	ldr	r0, [r0, #0]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	f7ff fcf5 	bl	8006d04 <_vfiprintf_r>
 800731a:	b002      	add	sp, #8
 800731c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007320:	b003      	add	sp, #12
 8007322:	4770      	bx	lr
 8007324:	20000028 	.word	0x20000028

08007328 <__swhatbuf_r>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	460c      	mov	r4, r1
 800732c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007330:	2900      	cmp	r1, #0
 8007332:	b096      	sub	sp, #88	@ 0x58
 8007334:	4615      	mov	r5, r2
 8007336:	461e      	mov	r6, r3
 8007338:	da0d      	bge.n	8007356 <__swhatbuf_r+0x2e>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007340:	f04f 0100 	mov.w	r1, #0
 8007344:	bf14      	ite	ne
 8007346:	2340      	movne	r3, #64	@ 0x40
 8007348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800734c:	2000      	movs	r0, #0
 800734e:	6031      	str	r1, [r6, #0]
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	b016      	add	sp, #88	@ 0x58
 8007354:	bd70      	pop	{r4, r5, r6, pc}
 8007356:	466a      	mov	r2, sp
 8007358:	f000 f848 	bl	80073ec <_fstat_r>
 800735c:	2800      	cmp	r0, #0
 800735e:	dbec      	blt.n	800733a <__swhatbuf_r+0x12>
 8007360:	9901      	ldr	r1, [sp, #4]
 8007362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800736a:	4259      	negs	r1, r3
 800736c:	4159      	adcs	r1, r3
 800736e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007372:	e7eb      	b.n	800734c <__swhatbuf_r+0x24>

08007374 <__smakebuf_r>:
 8007374:	898b      	ldrh	r3, [r1, #12]
 8007376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007378:	079d      	lsls	r5, r3, #30
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	d507      	bpl.n	8007390 <__smakebuf_r+0x1c>
 8007380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2301      	movs	r3, #1
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	b003      	add	sp, #12
 800738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007390:	ab01      	add	r3, sp, #4
 8007392:	466a      	mov	r2, sp
 8007394:	f7ff ffc8 	bl	8007328 <__swhatbuf_r>
 8007398:	9f00      	ldr	r7, [sp, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	4639      	mov	r1, r7
 800739e:	4630      	mov	r0, r6
 80073a0:	f7fd fa6a 	bl	8004878 <_malloc_r>
 80073a4:	b948      	cbnz	r0, 80073ba <__smakebuf_r+0x46>
 80073a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073aa:	059a      	lsls	r2, r3, #22
 80073ac:	d4ee      	bmi.n	800738c <__smakebuf_r+0x18>
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	f043 0302 	orr.w	r3, r3, #2
 80073b6:	81a3      	strh	r3, [r4, #12]
 80073b8:	e7e2      	b.n	8007380 <__smakebuf_r+0xc>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	6020      	str	r0, [r4, #0]
 80073be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073ca:	b15b      	cbz	r3, 80073e4 <__smakebuf_r+0x70>
 80073cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d0:	4630      	mov	r0, r6
 80073d2:	f000 f81d 	bl	8007410 <_isatty_r>
 80073d6:	b128      	cbz	r0, 80073e4 <__smakebuf_r+0x70>
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	f023 0303 	bic.w	r3, r3, #3
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	431d      	orrs	r5, r3
 80073e8:	81a5      	strh	r5, [r4, #12]
 80073ea:	e7cf      	b.n	800738c <__smakebuf_r+0x18>

080073ec <_fstat_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d07      	ldr	r5, [pc, #28]	@ (800740c <_fstat_r+0x20>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	f7fa fbdd 	bl	8001bb8 <_fstat>
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	d102      	bne.n	8007408 <_fstat_r+0x1c>
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	b103      	cbz	r3, 8007408 <_fstat_r+0x1c>
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	bd38      	pop	{r3, r4, r5, pc}
 800740a:	bf00      	nop
 800740c:	20000514 	.word	0x20000514

08007410 <_isatty_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d06      	ldr	r5, [pc, #24]	@ (800742c <_isatty_r+0x1c>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fa fbdc 	bl	8001bd8 <_isatty>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_isatty_r+0x1a>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_isatty_r+0x1a>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	20000514 	.word	0x20000514

08007430 <abort>:
 8007430:	b508      	push	{r3, lr}
 8007432:	2006      	movs	r0, #6
 8007434:	f000 f834 	bl	80074a0 <raise>
 8007438:	2001      	movs	r0, #1
 800743a:	f7fa fb6d 	bl	8001b18 <_exit>

0800743e <_malloc_usable_size_r>:
 800743e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007442:	1f18      	subs	r0, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	bfbc      	itt	lt
 8007448:	580b      	ldrlt	r3, [r1, r0]
 800744a:	18c0      	addlt	r0, r0, r3
 800744c:	4770      	bx	lr

0800744e <_raise_r>:
 800744e:	291f      	cmp	r1, #31
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4605      	mov	r5, r0
 8007454:	460c      	mov	r4, r1
 8007456:	d904      	bls.n	8007462 <_raise_r+0x14>
 8007458:	2316      	movs	r3, #22
 800745a:	6003      	str	r3, [r0, #0]
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	bd38      	pop	{r3, r4, r5, pc}
 8007462:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007464:	b112      	cbz	r2, 800746c <_raise_r+0x1e>
 8007466:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800746a:	b94b      	cbnz	r3, 8007480 <_raise_r+0x32>
 800746c:	4628      	mov	r0, r5
 800746e:	f000 f831 	bl	80074d4 <_getpid_r>
 8007472:	4622      	mov	r2, r4
 8007474:	4601      	mov	r1, r0
 8007476:	4628      	mov	r0, r5
 8007478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800747c:	f000 b818 	b.w	80074b0 <_kill_r>
 8007480:	2b01      	cmp	r3, #1
 8007482:	d00a      	beq.n	800749a <_raise_r+0x4c>
 8007484:	1c59      	adds	r1, r3, #1
 8007486:	d103      	bne.n	8007490 <_raise_r+0x42>
 8007488:	2316      	movs	r3, #22
 800748a:	6003      	str	r3, [r0, #0]
 800748c:	2001      	movs	r0, #1
 800748e:	e7e7      	b.n	8007460 <_raise_r+0x12>
 8007490:	2100      	movs	r1, #0
 8007492:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007496:	4620      	mov	r0, r4
 8007498:	4798      	blx	r3
 800749a:	2000      	movs	r0, #0
 800749c:	e7e0      	b.n	8007460 <_raise_r+0x12>
	...

080074a0 <raise>:
 80074a0:	4b02      	ldr	r3, [pc, #8]	@ (80074ac <raise+0xc>)
 80074a2:	4601      	mov	r1, r0
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	f7ff bfd2 	b.w	800744e <_raise_r>
 80074aa:	bf00      	nop
 80074ac:	20000028 	.word	0x20000028

080074b0 <_kill_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	@ (80074d0 <_kill_r+0x20>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	f7fa fb1b 	bl	8001af8 <_kill>
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	d102      	bne.n	80074cc <_kill_r+0x1c>
 80074c6:	682b      	ldr	r3, [r5, #0]
 80074c8:	b103      	cbz	r3, 80074cc <_kill_r+0x1c>
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	bf00      	nop
 80074d0:	20000514 	.word	0x20000514

080074d4 <_getpid_r>:
 80074d4:	f7fa bb08 	b.w	8001ae8 <_getpid>

080074d8 <_init>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr

080074e4 <_fini>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	bf00      	nop
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr
