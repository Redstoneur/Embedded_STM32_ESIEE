
STM32-NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  080076c8  080076c8  000086c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c1c  08007c1c  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007c1c  08007c1c  00008c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c24  08007c24  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c24  08007c24  00008c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c28  08007c28  00008c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007c2c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001d4  08007e00  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08007e00  00009458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098d9  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af5  00000000  00000000  00012add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  000145d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000634  00000000  00000000  00014e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dae  00000000  00000000  00015434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae7f  00000000  00000000  000371e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca4ae  00000000  00000000  00042061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c50f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  0010c554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0010fa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076b0 	.word	0x080076b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080076b0 	.word	0x080076b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <HAL_UART_RxCpltCallback>:
static void MX_UART4_Init(void);
void UART_SendString(char *str);

volatile uint8_t rx_flag = 0;
char rx_buffer[50];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <HAL_UART_RxCpltCallback+0x2c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d107      	bne.n	8000f9a <HAL_UART_RxCpltCallback+0x22>
        rx_flag = 1;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <HAL_UART_RxCpltCallback+0x30>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart4, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8000f90:	2232      	movs	r2, #50	@ 0x32
 8000f92:	4906      	ldr	r1, [pc, #24]	@ (8000fac <HAL_UART_RxCpltCallback+0x34>)
 8000f94:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <HAL_UART_RxCpltCallback+0x38>)
 8000f96:	f002 f8fb 	bl	8003190 <HAL_UART_Receive_IT>
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40004c00 	.word	0x40004c00
 8000fa8:	2000024c 	.word	0x2000024c
 8000fac:	20000250 	.word	0x20000250
 8000fb0:	200001f0 	.word	0x200001f0

08000fb4 <microDelay>:
float RH = 0;
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];
void microDelay (uint16_t delay)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
  __HAL_DMA_SET_COUNTER(&htim1, 0);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <microDelay+0x30>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  while (__HAL_DMA_GET_COUNTER(&htim1) < delay);
 8000fc6:	bf00      	nop
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <microDelay+0x30>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3f9      	bcc.n	8000fc8 <microDelay+0x14>
	  //printf("%d ticks \n",__HAL_TIM_GET_COUNTER(&htim1));
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000284 	.word	0x20000284

08000fe8 <DHT11_Start>:
uint8_t DHT11_Start (void){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = TEMP_SENSOR_Pin;
 8001000:	2320      	movs	r3, #32
 8001002:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TEMP_SENSOR_GPIO_Port, &GPIO_InitStructPrivate); // set the pin as output
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	482a      	ldr	r0, [pc, #168]	@ (80010c0 <DHT11_Start+0xd8>)
 8001016:	f001 f821 	bl	800205c <HAL_GPIO_Init>
  HAL_GPIO_WritePin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin, 0);   // pull the pin low
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	4828      	ldr	r0, [pc, #160]	@ (80010c0 <DHT11_Start+0xd8>)
 8001020:	f001 f9c8 	bl	80023b4 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001024:	2014      	movs	r0, #20
 8001026:	f000 fe51 	bl	8001ccc <HAL_Delay>
  HAL_GPIO_WritePin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin, 1);   // pull the pin high
 800102a:	2201      	movs	r2, #1
 800102c:	2120      	movs	r1, #32
 800102e:	4824      	ldr	r0, [pc, #144]	@ (80010c0 <DHT11_Start+0xd8>)
 8001030:	f001 f9c0 	bl	80023b4 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001034:	201e      	movs	r0, #30
 8001036:	f7ff ffbd 	bl	8000fb4 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TEMP_SENSOR_GPIO_Port, &GPIO_InitStructPrivate); // set the pin as input
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	481e      	ldr	r0, [pc, #120]	@ (80010c0 <DHT11_Start+0xd8>)
 8001048:	f001 f808 	bl	800205c <HAL_GPIO_Init>
  microDelay (40);
 800104c:	2028      	movs	r0, #40	@ 0x28
 800104e:	f7ff ffb1 	bl	8000fb4 <microDelay>
  if (!(HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin)))
 8001052:	2120      	movs	r1, #32
 8001054:	481a      	ldr	r0, [pc, #104]	@ (80010c0 <DHT11_Start+0xd8>)
 8001056:	f001 f995 	bl	8002384 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10b      	bne.n	8001078 <DHT11_Start+0x90>
  {
    microDelay (80);
 8001060:	2050      	movs	r0, #80	@ 0x50
 8001062:	f7ff ffa7 	bl	8000fb4 <microDelay>
    if ((HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin))) Response = 1;
 8001066:	2120      	movs	r1, #32
 8001068:	4815      	ldr	r0, [pc, #84]	@ (80010c0 <DHT11_Start+0xd8>)
 800106a:	f001 f98b 	bl	8002384 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <DHT11_Start+0x90>
 8001074:	2301      	movs	r3, #1
 8001076:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001078:	f000 fe1c 	bl	8001cb4 <HAL_GetTick>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <DHT11_Start+0xdc>)
 8001080:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001082:	f000 fe17 	bl	8001cb4 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <DHT11_Start+0xe0>)
 800108a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin)) && pMillis + 2 > cMillis)
 800108c:	e004      	b.n	8001098 <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 800108e:	f000 fe11 	bl	8001cb4 <HAL_GetTick>
 8001092:	4603      	mov	r3, r0
 8001094:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <DHT11_Start+0xe0>)
 8001096:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin)) && pMillis + 2 > cMillis)
 8001098:	2120      	movs	r1, #32
 800109a:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <DHT11_Start+0xd8>)
 800109c:	f001 f972 	bl	8002384 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <DHT11_Start+0xcc>
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <DHT11_Start+0xdc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	1c9a      	adds	r2, r3, #2
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <DHT11_Start+0xe0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8ec      	bhi.n	800108e <DHT11_Start+0xa6>
  }
  return Response;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020000 	.word	0x40020000
 80010c4:	200002ec 	.word	0x200002ec
 80010c8:	200002f0 	.word	0x200002f0

080010cc <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	e063      	b.n	80011a0 <DHT11_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 80010d8:	f000 fdec 	bl	8001cb4 <HAL_GetTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a34      	ldr	r2, [pc, #208]	@ (80011b0 <DHT11_Read+0xe4>)
 80010e0:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010e2:	f000 fde7 	bl	8001cb4 <HAL_GetTick>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a32      	ldr	r2, [pc, #200]	@ (80011b4 <DHT11_Read+0xe8>)
 80010ea:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin)) && pMillis + 2 > cMillis)
 80010ec:	e004      	b.n	80010f8 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80010ee:	f000 fde1 	bl	8001cb4 <HAL_GetTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a2f      	ldr	r2, [pc, #188]	@ (80011b4 <DHT11_Read+0xe8>)
 80010f6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin)) && pMillis + 2 > cMillis)
 80010f8:	2120      	movs	r1, #32
 80010fa:	482f      	ldr	r0, [pc, #188]	@ (80011b8 <DHT11_Read+0xec>)
 80010fc:	f001 f942 	bl	8002384 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <DHT11_Read+0x48>
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <DHT11_Read+0xe4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1c9a      	adds	r2, r3, #2
 800110c:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <DHT11_Read+0xe8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8ec      	bhi.n	80010ee <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8001114:	2028      	movs	r0, #40	@ 0x28
 8001116:	f7ff ff4d 	bl	8000fb4 <microDelay>
    if (!(HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin)))   // if the pin is low
 800111a:	2120      	movs	r1, #32
 800111c:	4826      	ldr	r0, [pc, #152]	@ (80011b8 <DHT11_Read+0xec>)
 800111e:	f001 f931 	bl	8002384 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10e      	bne.n	8001146 <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2201      	movs	r2, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	b25b      	sxtb	r3, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	b25a      	sxtb	r2, r3
 800113a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800113e:	4013      	ands	r3, r2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	71bb      	strb	r3, [r7, #6]
 8001144:	e00b      	b.n	800115e <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f1c3 0307 	rsb	r3, r3, #7
 800114c:	2201      	movs	r2, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	b25a      	sxtb	r2, r3
 8001154:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001158:	4313      	orrs	r3, r2
 800115a:	b25b      	sxtb	r3, r3
 800115c:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800115e:	f000 fda9 	bl	8001cb4 <HAL_GetTick>
 8001162:	4603      	mov	r3, r0
 8001164:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <DHT11_Read+0xe4>)
 8001166:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001168:	f000 fda4 	bl	8001cb4 <HAL_GetTick>
 800116c:	4603      	mov	r3, r0
 800116e:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <DHT11_Read+0xe8>)
 8001170:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin)) && pMillis + 2 > cMillis)
 8001172:	e004      	b.n	800117e <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001174:	f000 fd9e 	bl	8001cb4 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <DHT11_Read+0xe8>)
 800117c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin)) && pMillis + 2 > cMillis)
 800117e:	2120      	movs	r1, #32
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <DHT11_Read+0xec>)
 8001182:	f001 f8ff 	bl	8002384 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <DHT11_Read+0xce>
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <DHT11_Read+0xe4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	1c9a      	adds	r2, r3, #2
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <DHT11_Read+0xe8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d8ec      	bhi.n	8001174 <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	3301      	adds	r3, #1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d998      	bls.n	80010d8 <DHT11_Read+0xc>
    }
  }
  return b;
 80011a6:	79bb      	ldrb	r3, [r7, #6]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200002ec 	.word	0x200002ec
 80011b4:	200002f0 	.word	0x200002f0
 80011b8:	40020000 	.word	0x40020000

080011bc <main>:


int main(void)
{
 80011bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c0:	ed2d 8b02 	vpush	{d8}
 80011c4:	b0f7      	sub	sp, #476	@ 0x1dc
 80011c6:	af0a      	add	r7, sp, #40	@ 0x28
  HAL_Init();
 80011c8:	f000 fd0e 	bl	8001be8 <HAL_Init>

  SystemClock_Config();
 80011cc:	f000 fa3a 	bl	8001644 <SystemClock_Config>

  MX_GPIO_Init();
 80011d0:	f000 fac2 	bl	8001758 <MX_GPIO_Init>
  MX_UART4_Init();
 80011d4:	f000 fa96 	bl	8001704 <MX_UART4_Init>

  UART_SendString("[DEBUG] STM32 USART6 Initialized!\n");
 80011d8:	48b3      	ldr	r0, [pc, #716]	@ (80014a8 <main+0x2ec>)
 80011da:	f000 fb35 	bl	8001848 <UART_SendString>

  char rx_buffer[1],uart_buf[120],error_buf[50];

  float RH2=0.0, Temp2=0.0;
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  int rgbr2=255,rgbg2=255,rgbb2=255;
 80011ee:	23ff      	movs	r3, #255	@ 0xff
 80011f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80011f4:	23ff      	movs	r3, #255	@ 0xff
 80011f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80011fa:	23ff      	movs	r3, #255	@ 0xff
 80011fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  bool rgb2=false,led2=false,buz2=false,but2=false;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
 8001206:	2300      	movs	r3, #0
 8001208:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 800120c:	2300      	movs	r3, #0
 800120e:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8001212:	2300      	movs	r3, #0
 8001214:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4

  HAL_UART_Receive_IT(&huart4, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001218:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800121c:	2201      	movs	r2, #1
 800121e:	4619      	mov	r1, r3
 8001220:	48a2      	ldr	r0, [pc, #648]	@ (80014ac <main+0x2f0>)
 8001222:	f001 ffb5 	bl	8003190 <HAL_UART_Receive_IT>

  while (1){

    if(DHT11_Start()){
 8001226:	f7ff fedf 	bl	8000fe8 <DHT11_Start>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80bc 	beq.w	80013aa <main+0x1ee>
	  RHI = DHT11_Read();
 8001232:	f7ff ff4b 	bl	80010cc <DHT11_Read>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b9d      	ldr	r3, [pc, #628]	@ (80014b0 <main+0x2f4>)
 800123c:	701a      	strb	r2, [r3, #0]
	  RHD = DHT11_Read();
 800123e:	f7ff ff45 	bl	80010cc <DHT11_Read>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b9b      	ldr	r3, [pc, #620]	@ (80014b4 <main+0x2f8>)
 8001248:	701a      	strb	r2, [r3, #0]
	  TCI = DHT11_Read();
 800124a:	f7ff ff3f 	bl	80010cc <DHT11_Read>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b99      	ldr	r3, [pc, #612]	@ (80014b8 <main+0x2fc>)
 8001254:	701a      	strb	r2, [r3, #0]
	  TCD = DHT11_Read();
 8001256:	f7ff ff39 	bl	80010cc <DHT11_Read>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b97      	ldr	r3, [pc, #604]	@ (80014bc <main+0x300>)
 8001260:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 8001262:	f7ff ff33 	bl	80010cc <DHT11_Read>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b95      	ldr	r3, [pc, #596]	@ (80014c0 <main+0x304>)
 800126c:	701a      	strb	r2, [r3, #0]
	  if (RHI + RHD + TCI + TCD == SUM){
 800126e:	4b90      	ldr	r3, [pc, #576]	@ (80014b0 <main+0x2f4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b8f      	ldr	r3, [pc, #572]	@ (80014b4 <main+0x2f8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4413      	add	r3, r2
 800127a:	4a8f      	ldr	r2, [pc, #572]	@ (80014b8 <main+0x2fc>)
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a8e      	ldr	r2, [pc, #568]	@ (80014bc <main+0x300>)
 8001282:	7812      	ldrb	r2, [r2, #0]
 8001284:	4413      	add	r3, r2
 8001286:	4a8e      	ldr	r2, [pc, #568]	@ (80014c0 <main+0x304>)
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	4293      	cmp	r3, r2
 800128c:	f040 808d 	bne.w	80013aa <main+0x1ee>
	  	tCelsius = (float)TCI + (float)(TCD/10.0);
 8001290:	4b89      	ldr	r3, [pc, #548]	@ (80014b8 <main+0x2fc>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800129c:	4b87      	ldr	r3, [pc, #540]	@ (80014bc <main+0x300>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f95f 	bl	8000564 <__aeabi_i2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b86      	ldr	r3, [pc, #536]	@ (80014c4 <main+0x308>)
 80012ac:	f7ff faee 	bl	800088c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc96 	bl	8000be8 <__aeabi_d2f>
 80012bc:	ee07 0a90 	vmov	s15, r0
 80012c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012c4:	4b80      	ldr	r3, [pc, #512]	@ (80014c8 <main+0x30c>)
 80012c6:	edc3 7a00 	vstr	s15, [r3]
	  	Temp2=tCelsius;
 80012ca:	4b7f      	ldr	r3, [pc, #508]	@ (80014c8 <main+0x30c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	  	RH = (float)RHI + (float)(RHD/10.0);
 80012d2:	4b77      	ldr	r3, [pc, #476]	@ (80014b0 <main+0x2f4>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80012de:	4b75      	ldr	r3, [pc, #468]	@ (80014b4 <main+0x2f8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f93e 	bl	8000564 <__aeabi_i2d>
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b75      	ldr	r3, [pc, #468]	@ (80014c4 <main+0x308>)
 80012ee:	f7ff facd 	bl	800088c <__aeabi_ddiv>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fc75 	bl	8000be8 <__aeabi_d2f>
 80012fe:	ee07 0a90 	vmov	s15, r0
 8001302:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001306:	4b71      	ldr	r3, [pc, #452]	@ (80014cc <main+0x310>)
 8001308:	edc3 7a00 	vstr	s15, [r3]
	  	RH2=RH;
 800130c:	4b6f      	ldr	r3, [pc, #444]	@ (80014cc <main+0x310>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

	  	tFahrenheit = tCelsius * 9/5 + 32;
 8001314:	4b6c      	ldr	r3, [pc, #432]	@ (80014c8 <main+0x30c>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800131e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001322:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80014d0 <main+0x314>
 800132e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001332:	4b68      	ldr	r3, [pc, #416]	@ (80014d4 <main+0x318>)
 8001334:	edc3 7a00 	vstr	s15, [r3]
        TFI = tFahrenheit;
 8001338:	4b66      	ldr	r3, [pc, #408]	@ (80014d4 <main+0x318>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001342:	edc7 7a01 	vstr	s15, [r7, #4]
 8001346:	793b      	ldrb	r3, [r7, #4]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b63      	ldr	r3, [pc, #396]	@ (80014d8 <main+0x31c>)
 800134c:	701a      	strb	r2, [r3, #0]
	  	TFD = tFahrenheit*10-TFI*10;
 800134e:	4b61      	ldr	r3, [pc, #388]	@ (80014d4 <main+0x318>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001358:	ee27 7a87 	vmul.f32	s14, s15, s14
 800135c:	4b5e      	ldr	r3, [pc, #376]	@ (80014d8 <main+0x31c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800137a:	edc7 7a01 	vstr	s15, [r7, #4]
 800137e:	793b      	ldrb	r3, [r7, #4]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <main+0x320>)
 8001384:	701a      	strb	r2, [r3, #0]
	  	printf("%d.%d C   ", TCI, TCD);
 8001386:	4b4c      	ldr	r3, [pc, #304]	@ (80014b8 <main+0x2fc>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	4b4b      	ldr	r3, [pc, #300]	@ (80014bc <main+0x300>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4853      	ldr	r0, [pc, #332]	@ (80014e0 <main+0x324>)
 8001394:	f003 fb92 	bl	8004abc <iprintf>
	  	printf("%d.%d F   ", TFI, TFD);
 8001398:	4b4f      	ldr	r3, [pc, #316]	@ (80014d8 <main+0x31c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	4b4f      	ldr	r3, [pc, #316]	@ (80014dc <main+0x320>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	484f      	ldr	r0, [pc, #316]	@ (80014e4 <main+0x328>)
 80013a6:	f003 fb89 	bl	8004abc <iprintf>
	  }
	}

    uint8_t buffer[200];
    HAL_UART_Receive(&huart4, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80013aa:	f107 0108 	add.w	r1, r7, #8
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	22c8      	movs	r2, #200	@ 0xc8
 80013b4:	483d      	ldr	r0, [pc, #244]	@ (80014ac <main+0x2f0>)
 80013b6:	f001 fe54 	bl	8003062 <HAL_UART_Receive>
    sprintf(
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff76 	bl	80002b0 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f107 0208 	add.w	r2, r7, #8
 80013ca:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80013ce:	4946      	ldr	r1, [pc, #280]	@ (80014e8 <main+0x32c>)
 80013d0:	f003 fb86 	bl	8004ae0 <siprintf>
      uart_buf,
      "recue:%s %d\n",
      buffer,strlen(buffer)
    );
    UART_SendString(uart_buf);
 80013d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fa35 	bl	8001848 <UART_SendString>

	if (strlen(buffer) > 0) {
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80a1 	beq.w	800152c <main+0x370>
		if (strncmp(buffer, "[LED#SWITCH:true]", 6) == 0) {led2 = true;UART_SendString("LED activée\n");}
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2206      	movs	r2, #6
 80013f0:	493e      	ldr	r1, [pc, #248]	@ (80014ec <main+0x330>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fc0b 	bl	8004c0e <strncmp>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <main+0x250>
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8001404:	483a      	ldr	r0, [pc, #232]	@ (80014f0 <main+0x334>)
 8001406:	f000 fa1f 	bl	8001848 <UART_SendString>
 800140a:	e088      	b.n	800151e <main+0x362>
		else if (strncmp(buffer, "[LED#SWITCH:false]", 7) == 0) {led2 = false;UART_SendString("LED désactivée\n");}
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2207      	movs	r2, #7
 8001412:	4938      	ldr	r1, [pc, #224]	@ (80014f4 <main+0x338>)
 8001414:	4618      	mov	r0, r3
 8001416:	f003 fbfa 	bl	8004c0e <strncmp>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <main+0x272>
 8001420:	2300      	movs	r3, #0
 8001422:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8001426:	4834      	ldr	r0, [pc, #208]	@ (80014f8 <main+0x33c>)
 8001428:	f000 fa0e 	bl	8001848 <UART_SendString>
 800142c:	e077      	b.n	800151e <main+0x362>
		else if (strncmp(buffer, "BUZZER ON", 9) == 0) {buz2 = true;UART_SendString("Buzzer activé\n");}
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2209      	movs	r2, #9
 8001434:	4931      	ldr	r1, [pc, #196]	@ (80014fc <main+0x340>)
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fbe9 	bl	8004c0e <strncmp>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <main+0x294>
 8001442:	2301      	movs	r3, #1
 8001444:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8001448:	482d      	ldr	r0, [pc, #180]	@ (8001500 <main+0x344>)
 800144a:	f000 f9fd 	bl	8001848 <UART_SendString>
 800144e:	e066      	b.n	800151e <main+0x362>
		else if (strncmp(buffer, "BUZZER OFF", 10) == 0) {buz2 = false;UART_SendString("Buzzer désactivé\n");}
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	220a      	movs	r2, #10
 8001456:	492b      	ldr	r1, [pc, #172]	@ (8001504 <main+0x348>)
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fbd8 	bl	8004c0e <strncmp>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <main+0x2b6>
 8001464:	2300      	movs	r3, #0
 8001466:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 800146a:	4827      	ldr	r0, [pc, #156]	@ (8001508 <main+0x34c>)
 800146c:	f000 f9ec 	bl	8001848 <UART_SendString>
 8001470:	e055      	b.n	800151e <main+0x362>
		else if (strncmp(buffer, "RGB ", 4) == 0) {
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	2204      	movs	r2, #4
 8001478:	4924      	ldr	r1, [pc, #144]	@ (800150c <main+0x350>)
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fbc7 	bl	8004c0e <strncmp>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d148      	bne.n	8001518 <main+0x35c>
		  sscanf(buffer, "RGB R%d G%d B%d", &rgbr2, &rgbg2, &rgbb2);
 8001486:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 800148a:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 800148e:	f107 0008 	add.w	r0, r7, #8
 8001492:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	460b      	mov	r3, r1
 800149a:	491d      	ldr	r1, [pc, #116]	@ (8001510 <main+0x354>)
 800149c:	f003 fb40 	bl	8004b20 <siscanf>
		  UART_SendString("Couleur RGB mise à jour\n");
 80014a0:	481c      	ldr	r0, [pc, #112]	@ (8001514 <main+0x358>)
 80014a2:	f000 f9d1 	bl	8001848 <UART_SendString>
 80014a6:	e03a      	b.n	800151e <main+0x362>
 80014a8:	080076c8 	.word	0x080076c8
 80014ac:	200001f0 	.word	0x200001f0
 80014b0:	200002e4 	.word	0x200002e4
 80014b4:	200002e5 	.word	0x200002e5
 80014b8:	200002e6 	.word	0x200002e6
 80014bc:	200002e7 	.word	0x200002e7
 80014c0:	200002e8 	.word	0x200002e8
 80014c4:	40240000 	.word	0x40240000
 80014c8:	200002f4 	.word	0x200002f4
 80014cc:	200002fc 	.word	0x200002fc
 80014d0:	42000000 	.word	0x42000000
 80014d4:	200002f8 	.word	0x200002f8
 80014d8:	20000300 	.word	0x20000300
 80014dc:	20000301 	.word	0x20000301
 80014e0:	080076ec 	.word	0x080076ec
 80014e4:	080076f8 	.word	0x080076f8
 80014e8:	08007704 	.word	0x08007704
 80014ec:	08007714 	.word	0x08007714
 80014f0:	08007728 	.word	0x08007728
 80014f4:	08007738 	.word	0x08007738
 80014f8:	0800774c 	.word	0x0800774c
 80014fc:	08007760 	.word	0x08007760
 8001500:	0800776c 	.word	0x0800776c
 8001504:	0800777c 	.word	0x0800777c
 8001508:	08007788 	.word	0x08007788
 800150c:	0800779c 	.word	0x0800779c
 8001510:	080077a4 	.word	0x080077a4
 8001514:	080077b4 	.word	0x080077b4
		}
		else {
		  UART_SendString("Commande inconnue\n");
 8001518:	4845      	ldr	r0, [pc, #276]	@ (8001630 <main+0x474>)
 800151a:	f000 f995 	bl	8001848 <UART_SendString>
		}
		memset(buffer, 0, sizeof(buffer));
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	22c8      	movs	r2, #200	@ 0xc8
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fb69 	bl	8004bfe <memset>
	}

    float RH=RH2, Temp=Temp2;
 800152c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001530:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001534:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001538:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    int rgbr=rgbr2,rgbg=rgbg2,rgbb=rgbb2;
 800153c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001540:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001548:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800154c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001550:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    bool rgb=rgb2,led=led2,buz=buz2,but=but2;
 8001554:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8001558:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 800155c:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8001560:	f887 318e 	strb.w	r3, [r7, #398]	@ 0x18e
 8001564:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8001568:	f887 318d 	strb.w	r3, [r7, #397]	@ 0x18d
 800156c:	f897 31a4 	ldrb.w	r3, [r7, #420]	@ 0x1a4
 8001570:	f887 318c 	strb.w	r3, [r7, #396]	@ 0x18c

    sprintf(
 8001574:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8001578:	f7ff f806 	bl	8000588 <__aeabi_f2d>
 800157c:	4604      	mov	r4, r0
 800157e:	460d      	mov	r5, r1
 8001580:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8001584:	f7ff f800 	bl	8000588 <__aeabi_f2d>
 8001588:	4680      	mov	r8, r0
 800158a:	4689      	mov	r9, r1
 800158c:	f897 118f 	ldrb.w	r1, [r7, #399]	@ 0x18f
 8001590:	2900      	cmp	r1, #0
 8001592:	d001      	beq.n	8001598 <main+0x3dc>
 8001594:	4927      	ldr	r1, [pc, #156]	@ (8001634 <main+0x478>)
 8001596:	e000      	b.n	800159a <main+0x3de>
 8001598:	4927      	ldr	r1, [pc, #156]	@ (8001638 <main+0x47c>)
 800159a:	f897 018e 	ldrb.w	r0, [r7, #398]	@ 0x18e
 800159e:	2800      	cmp	r0, #0
 80015a0:	d001      	beq.n	80015a6 <main+0x3ea>
 80015a2:	4824      	ldr	r0, [pc, #144]	@ (8001634 <main+0x478>)
 80015a4:	e000      	b.n	80015a8 <main+0x3ec>
 80015a6:	4824      	ldr	r0, [pc, #144]	@ (8001638 <main+0x47c>)
 80015a8:	f897 618d 	ldrb.w	r6, [r7, #397]	@ 0x18d
 80015ac:	2e00      	cmp	r6, #0
 80015ae:	d001      	beq.n	80015b4 <main+0x3f8>
 80015b0:	4e20      	ldr	r6, [pc, #128]	@ (8001634 <main+0x478>)
 80015b2:	e000      	b.n	80015b6 <main+0x3fa>
 80015b4:	4e20      	ldr	r6, [pc, #128]	@ (8001638 <main+0x47c>)
 80015b6:	f897 c18c 	ldrb.w	ip, [r7, #396]	@ 0x18c
 80015ba:	f1bc 0f00 	cmp.w	ip, #0
 80015be:	d001      	beq.n	80015c4 <main+0x408>
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <main+0x478>)
 80015c2:	e000      	b.n	80015c6 <main+0x40a>
 80015c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <main+0x47c>)
 80015c6:	f507 7c88 	add.w	ip, r7, #272	@ 0x110
 80015ca:	9308      	str	r3, [sp, #32]
 80015cc:	9607      	str	r6, [sp, #28]
 80015ce:	9006      	str	r0, [sp, #24]
 80015d0:	9105      	str	r1, [sp, #20]
 80015d2:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 80015d6:	9104      	str	r1, [sp, #16]
 80015d8:	f8d7 1194 	ldr.w	r1, [r7, #404]	@ 0x194
 80015dc:	9103      	str	r1, [sp, #12]
 80015de:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 80015e2:	9102      	str	r1, [sp, #8]
 80015e4:	e9cd 8900 	strd	r8, r9, [sp]
 80015e8:	4622      	mov	r2, r4
 80015ea:	462b      	mov	r3, r5
 80015ec:	4913      	ldr	r1, [pc, #76]	@ (800163c <main+0x480>)
 80015ee:	4660      	mov	r0, ip
 80015f0:	f003 fa76 	bl	8004ae0 <siprintf>
      uart_buf,
      "{\"Temperature\":%.2f,\"Humidity\":%.2f,\"RGB\":{\"red\":%d,\"green\":%d,\"blue\":%d,\"state\":%s},\"Led\":%s,\"Buzzer\":%s,\"Button\":%s}\n",
      Temp, RH, rgbr, rgbg, rgbb, rgb? "true" : "false", led? "true" : "false", buz? "true" : "false", but? "true" : "false"
    );
    UART_SendString(uart_buf);
 80015f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f925 	bl	8001848 <UART_SendString>

	HAL_Delay(2000);
 80015fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001602:	f000 fb63 	bl	8001ccc <HAL_Delay>

    if (HAL_UART_Receive(&huart4, (uint8_t*)rx_buffer, 1, 100) == HAL_OK){
 8001606:	f507 71c4 	add.w	r1, r7, #392	@ 0x188
 800160a:	2364      	movs	r3, #100	@ 0x64
 800160c:	2201      	movs	r2, #1
 800160e:	480c      	ldr	r0, [pc, #48]	@ (8001640 <main+0x484>)
 8001610:	f001 fd27 	bl	8003062 <HAL_UART_Receive>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f ae05 	bne.w	8001226 <main+0x6a>
    	HAL_UART_Transmit(&huart4, (uint8_t*)rx_buffer, 1, HAL_MAX_DELAY);
 800161c:	f507 71c4 	add.w	r1, r7, #392	@ 0x188
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	2201      	movs	r2, #1
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <main+0x484>)
 8001628:	f001 fc90 	bl	8002f4c <HAL_UART_Transmit>
  while (1){
 800162c:	e5fb      	b.n	8001226 <main+0x6a>
 800162e:	bf00      	nop
 8001630:	080077d0 	.word	0x080077d0
 8001634:	080077e4 	.word	0x080077e4
 8001638:	080077ec 	.word	0x080077ec
 800163c:	080077f4 	.word	0x080077f4
 8001640:	200001f0 	.word	0x200001f0

08001644 <SystemClock_Config>:
    }

  }
}
void SystemClock_Config(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	@ 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	2234      	movs	r2, #52	@ 0x34
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fad3 	bl	8004bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <SystemClock_Config+0xb8>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <SystemClock_Config+0xb8>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <SystemClock_Config+0xb8>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001684:	2300      	movs	r3, #0
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <SystemClock_Config+0xbc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001690:	4a1b      	ldr	r2, [pc, #108]	@ (8001700 <SystemClock_Config+0xbc>)
 8001692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <SystemClock_Config+0xbc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ac:	2310      	movs	r3, #16
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){Error_Handler();}
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 f959 	bl	8002970 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x84>
 80016c4:	f000 f8d6 	bl	8001874 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80016c8:	230f      	movs	r3, #15
 80016ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK){Error_Handler();}
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fe80 	bl	80023e8 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0xae>
 80016ee:	f000 f8c1 	bl	8001874 <Error_Handler>
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	@ 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_UART4_Init>:

static void MX_UART4_Init(void){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_UART4_Init+0x4c>)
 800170a:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_UART4_Init+0x50>)
 800170c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <MX_UART4_Init+0x4c>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <MX_UART4_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <MX_UART4_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <MX_UART4_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <MX_UART4_Init+0x4c>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <MX_UART4_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <MX_UART4_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK){Error_Handler();}
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_UART4_Init+0x4c>)
 800173c:	f001 fbb6 	bl	8002eac <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_UART4_Init+0x46>
 8001746:	f000 f895 	bl	8001874 <Error_Handler>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001f0 	.word	0x200001f0
 8001754:	40004c00 	.word	0x40004c00

08001758 <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b34      	ldr	r3, [pc, #208]	@ (8001834 <MX_GPIO_Init+0xdc>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a33      	ldr	r2, [pc, #204]	@ (8001834 <MX_GPIO_Init+0xdc>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b31      	ldr	r3, [pc, #196]	@ (8001834 <MX_GPIO_Init+0xdc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  //__HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <MX_GPIO_Init+0xdc>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a2c      	ldr	r2, [pc, #176]	@ (8001834 <MX_GPIO_Init+0xdc>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <MX_GPIO_Init+0xdc>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <MX_GPIO_Init+0xdc>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a25      	ldr	r2, [pc, #148]	@ (8001834 <MX_GPIO_Init+0xdc>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <MX_GPIO_Init+0xdc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2108      	movs	r1, #8
 80017b6:	4820      	ldr	r0, [pc, #128]	@ (8001838 <MX_GPIO_Init+0xe0>)
 80017b8:	f000 fdfc 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017c4:	2203      	movs	r2, #3
 80017c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	491b      	ldr	r1, [pc, #108]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017d0:	481b      	ldr	r0, [pc, #108]	@ (8001840 <MX_GPIO_Init+0xe8>)
 80017d2:	f000 fc43 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017d8:	2210      	movs	r2, #16
 80017da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017de:	2203      	movs	r2, #3
 80017e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	4914      	ldr	r1, [pc, #80]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017ea:	4816      	ldr	r0, [pc, #88]	@ (8001844 <MX_GPIO_Init+0xec>)
 80017ec:	f000 fc36 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017f8:	2203      	movs	r2, #3
 80017fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_GPIO_Init+0xe4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	490e      	ldr	r1, [pc, #56]	@ (800183c <MX_GPIO_Init+0xe4>)
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <MX_GPIO_Init+0xe0>)
 8001806:	f000 fc29 	bl	800205c <HAL_GPIO_Init>
  //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  //GPIO_InitStruct.Pull = GPIO_NOPULL;
  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = TEMP_SENSOR_Pin;
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_GPIO_Init+0xe4>)
 800180c:	2220      	movs	r2, #32
 800180e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <MX_GPIO_Init+0xe4>)
 8001812:	2201      	movs	r2, #1
 8001814:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_GPIO_Init+0xe4>)
 8001818:	2201      	movs	r2, #1
 800181a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <MX_GPIO_Init+0xe4>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEMP_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001822:	4906      	ldr	r1, [pc, #24]	@ (800183c <MX_GPIO_Init+0xe4>)
 8001824:	4807      	ldr	r0, [pc, #28]	@ (8001844 <MX_GPIO_Init+0xec>)
 8001826:	f000 fc19 	bl	800205c <HAL_GPIO_Init>

}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400
 800183c:	20000238 	.word	0x20000238
 8001840:	40020800 	.word	0x40020800
 8001844:	40020000 	.word	0x40020000

08001848 <UART_SendString>:

void UART_SendString(char *str){HAL_UART_Transmit(&huart4, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);}
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7fe fd2d 	bl	80002b0 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b29a      	uxth	r2, r3
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4803      	ldr	r0, [pc, #12]	@ (8001870 <UART_SendString+0x28>)
 8001862:	f001 fb73 	bl	8002f4c <HAL_UART_Transmit>
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001f0 	.word	0x200001f0

08001874 <Error_Handler>:

void Error_Handler(void){__disable_irq();while(1){}}
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <Error_Handler+0x8>

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <HAL_MspInit+0x4c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a0f      	ldr	r2, [pc, #60]	@ (80018cc <HAL_MspInit+0x4c>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_MspInit+0x4c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <HAL_MspInit+0x4c>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	@ 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001964 <HAL_UART_MspInit+0x94>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d133      	bne.n	800195a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <HAL_UART_MspInit+0x98>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_UART_MspInit+0x98>)
 80018fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_UART_MspInit+0x98>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_UART_MspInit+0x98>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <HAL_UART_MspInit+0x98>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_UART_MspInit+0x98>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800192a:	2303      	movs	r3, #3
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800193a:	2308      	movs	r3, #8
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4809      	ldr	r0, [pc, #36]	@ (800196c <HAL_UART_MspInit+0x9c>)
 8001946:	f000 fb89 	bl	800205c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2034      	movs	r0, #52	@ 0x34
 8001950:	f000 fabb 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001954:	2034      	movs	r0, #52	@ 0x34
 8001956:	f000 fad4 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40004c00 	.word	0x40004c00
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <NMI_Handler+0x4>

08001978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <MemManage_Handler+0x4>

08001988 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <UsageFault_Handler+0x4>

08001998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c6:	f000 f961 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <UART4_IRQHandler+0x10>)
 80019d6:	f001 fc01 	bl	80031dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200001f0 	.word	0x200001f0

080019e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_kill>:

int _kill(int pid, int sig)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fe:	f003 f963 	bl	8004cc8 <__errno>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2216      	movs	r2, #22
 8001a06:	601a      	str	r2, [r3, #0]
  return -1;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_exit>:

void _exit (int status)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ffe7 	bl	80019f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a26:	bf00      	nop
 8001a28:	e7fd      	b.n	8001a26 <_exit+0x12>

08001a2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e00a      	b.n	8001a52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3c:	f3af 8000 	nop.w
 8001a40:	4601      	mov	r1, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	60ba      	str	r2, [r7, #8]
 8001a48:	b2ca      	uxtb	r2, r1
 8001a4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dbf0      	blt.n	8001a3c <_read+0x12>
  }

  return len;
 8001a5a:	687b      	ldr	r3, [r7, #4]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e009      	b.n	8001a8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	60ba      	str	r2, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dbf1      	blt.n	8001a76 <_write+0x12>
  }
  return len;
 8001a92:	687b      	ldr	r3, [r7, #4]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_close>:

int _close(int file)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_isatty>:

int _isatty(int file)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001adc:	2301      	movs	r3, #1
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f003 f8c8 	bl	8004cc8 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20020000 	.word	0x20020000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20000304 	.word	0x20000304
 8001b6c:	20000458 	.word	0x20000458

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b98:	f7ff ffea 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f003 f887 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff faf9 	bl	80011bc <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bd8:	08007c2c 	.word	0x08007c2c
  ldr r2, =_sbss
 8001bdc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001be0:	20000458 	.word	0x20000458

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f94f 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	200f      	movs	r0, #15
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fe30 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f967 	bl	8001f1e <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f92f 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	@ (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20000308 	.word	0x20000308

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000308 	.word	0x20000308

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db0b      	blt.n	8001da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4907      	ldr	r1, [pc, #28]	@ (8001db0 <__NVIC_EnableIRQ+0x38>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	@ (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	@ (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff8e 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff29 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff3e 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff8e 	bl	8001e08 <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff31 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa2 	bl	8001e70 <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff feb6 	bl	8001cb4 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d008      	beq.n	8001f68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2280      	movs	r2, #128	@ 0x80
 8001f5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e052      	b.n	800200e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0216 	bic.w	r2, r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <HAL_DMA_Abort+0x62>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0208 	bic.w	r2, r2, #8
 8001fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb8:	e013      	b.n	8001fe2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fba:	f7ff fe7b 	bl	8001cb4 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d90c      	bls.n	8001fe2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e015      	b.n	800200e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1e4      	bne.n	8001fba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	223f      	movs	r2, #63	@ 0x3f
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d004      	beq.n	8002034 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2280      	movs	r2, #128	@ 0x80
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e00c      	b.n	800204e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2205      	movs	r2, #5
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	@ 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	e165      	b.n	8002344 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002078:	2201      	movs	r2, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	f040 8154 	bne.w	800233e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d005      	beq.n	80020ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d130      	bne.n	8002110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 0201 	and.w	r2, r3, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b03      	cmp	r3, #3
 800211a:	d017      	beq.n	800214c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d123      	bne.n	80021a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80ae 	beq.w	800233e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b5d      	ldr	r3, [pc, #372]	@ (800235c <HAL_GPIO_Init+0x300>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	4a5c      	ldr	r2, [pc, #368]	@ (800235c <HAL_GPIO_Init+0x300>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021f2:	4b5a      	ldr	r3, [pc, #360]	@ (800235c <HAL_GPIO_Init+0x300>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fe:	4a58      	ldr	r2, [pc, #352]	@ (8002360 <HAL_GPIO_Init+0x304>)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4f      	ldr	r2, [pc, #316]	@ (8002364 <HAL_GPIO_Init+0x308>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d025      	beq.n	8002276 <HAL_GPIO_Init+0x21a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4e      	ldr	r2, [pc, #312]	@ (8002368 <HAL_GPIO_Init+0x30c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <HAL_GPIO_Init+0x216>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4d      	ldr	r2, [pc, #308]	@ (800236c <HAL_GPIO_Init+0x310>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d019      	beq.n	800226e <HAL_GPIO_Init+0x212>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4c      	ldr	r2, [pc, #304]	@ (8002370 <HAL_GPIO_Init+0x314>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4b      	ldr	r2, [pc, #300]	@ (8002374 <HAL_GPIO_Init+0x318>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00d      	beq.n	8002266 <HAL_GPIO_Init+0x20a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <HAL_GPIO_Init+0x31c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <HAL_GPIO_Init+0x206>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a49      	ldr	r2, [pc, #292]	@ (800237c <HAL_GPIO_Init+0x320>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_GPIO_Init+0x202>
 800225a:	2306      	movs	r3, #6
 800225c:	e00c      	b.n	8002278 <HAL_GPIO_Init+0x21c>
 800225e:	2307      	movs	r3, #7
 8002260:	e00a      	b.n	8002278 <HAL_GPIO_Init+0x21c>
 8002262:	2305      	movs	r3, #5
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x21c>
 8002266:	2304      	movs	r3, #4
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x21c>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x21c>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x21c>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x21c>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	@ (8002360 <HAL_GPIO_Init+0x304>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <HAL_GPIO_Init+0x324>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a31      	ldr	r2, [pc, #196]	@ (8002380 <HAL_GPIO_Init+0x324>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002380 <HAL_GPIO_Init+0x324>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a26      	ldr	r2, [pc, #152]	@ (8002380 <HAL_GPIO_Init+0x324>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ea:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <HAL_GPIO_Init+0x324>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230e:	4a1c      	ldr	r2, [pc, #112]	@ (8002380 <HAL_GPIO_Init+0x324>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002314:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_GPIO_Init+0x324>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <HAL_GPIO_Init+0x324>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f ae96 	bls.w	8002078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40013800 	.word	0x40013800
 8002364:	40020000 	.word	0x40020000
 8002368:	40020400 	.word	0x40020400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40021400 	.word	0x40021400
 800237c:	40021800 	.word	0x40021800
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e001      	b.n	80023a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0cc      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b68      	ldr	r3, [pc, #416]	@ (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d90c      	bls.n	8002424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b65      	ldr	r3, [pc, #404]	@ (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b63      	ldr	r3, [pc, #396]	@ (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0b8      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b59      	ldr	r3, [pc, #356]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a58      	ldr	r2, [pc, #352]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002454:	4b53      	ldr	r3, [pc, #332]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a52      	ldr	r2, [pc, #328]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800245e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b50      	ldr	r3, [pc, #320]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	494d      	ldr	r1, [pc, #308]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d044      	beq.n	8002508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b47      	ldr	r3, [pc, #284]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d119      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b3f      	ldr	r3, [pc, #252]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e06f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e067      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4934      	ldr	r1, [pc, #208]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d8:	f7ff fbec 	bl	8001cb4 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7ff fbe8 	bl	8001cb4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e04f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d20c      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e032      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4916      	ldr	r1, [pc, #88]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	490e      	ldr	r1, [pc, #56]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256e:	f000 f855 	bl	800261c <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	490a      	ldr	r1, [pc, #40]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb4c 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023c00 	.word	0x40023c00
 80025a4:	40023800 	.word	0x40023800
 80025a8:	08007878 	.word	0x08007878
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000004 	.word	0x20000004

080025b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0a9b      	lsrs	r3, r3, #10
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	08007888 	.word	0x08007888

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f8:	f7ff ffdc 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0b5b      	lsrs	r3, r3, #13
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	08007888 	.word	0x08007888

0800261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002620:	b0a6      	sub	sp, #152	@ 0x98
 8002622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002642:	4bc8      	ldr	r3, [pc, #800]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b0c      	cmp	r3, #12
 800264c:	f200 817e 	bhi.w	800294c <HAL_RCC_GetSysClockFreq+0x330>
 8002650:	a201      	add	r2, pc, #4	@ (adr r2, 8002658 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	0800268d 	.word	0x0800268d
 800265c:	0800294d 	.word	0x0800294d
 8002660:	0800294d 	.word	0x0800294d
 8002664:	0800294d 	.word	0x0800294d
 8002668:	08002695 	.word	0x08002695
 800266c:	0800294d 	.word	0x0800294d
 8002670:	0800294d 	.word	0x0800294d
 8002674:	0800294d 	.word	0x0800294d
 8002678:	0800269d 	.word	0x0800269d
 800267c:	0800294d 	.word	0x0800294d
 8002680:	0800294d 	.word	0x0800294d
 8002684:	0800294d 	.word	0x0800294d
 8002688:	08002807 	.word	0x08002807
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4bb6      	ldr	r3, [pc, #728]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x34c>)
 800268e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002692:	e15f      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002694:	4bb5      	ldr	r3, [pc, #724]	@ (800296c <HAL_RCC_GetSysClockFreq+0x350>)
 8002696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800269a:	e15b      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800269c:	4bb1      	ldr	r3, [pc, #708]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a8:	4bae      	ldr	r3, [pc, #696]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d031      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b4:	4bab      	ldr	r3, [pc, #684]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	2200      	movs	r2, #0
 80026bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80026c8:	2300      	movs	r3, #0
 80026ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80026cc:	4ba7      	ldr	r3, [pc, #668]	@ (800296c <HAL_RCC_GetSysClockFreq+0x350>)
 80026ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80026d2:	462a      	mov	r2, r5
 80026d4:	fb03 f202 	mul.w	r2, r3, r2
 80026d8:	2300      	movs	r3, #0
 80026da:	4621      	mov	r1, r4
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	4aa2      	ldr	r2, [pc, #648]	@ (800296c <HAL_RCC_GetSysClockFreq+0x350>)
 80026e4:	4621      	mov	r1, r4
 80026e6:	fba1 1202 	umull	r1, r2, r1, r2
 80026ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026ec:	460a      	mov	r2, r1
 80026ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80026f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80026f2:	4413      	add	r3, r2
 80026f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fa:	2200      	movs	r2, #0
 80026fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002700:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002704:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002708:	f7fe fabe 	bl	8000c88 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002716:	e064      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002718:	4b92      	ldr	r3, [pc, #584]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	2200      	movs	r2, #0
 8002720:	653b      	str	r3, [r7, #80]	@ 0x50
 8002722:	657a      	str	r2, [r7, #84]	@ 0x54
 8002724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800272c:	2300      	movs	r3, #0
 800272e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002730:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002734:	4622      	mov	r2, r4
 8002736:	462b      	mov	r3, r5
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	0159      	lsls	r1, r3, #5
 8002742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002746:	0150      	lsls	r0, r2, #5
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4621      	mov	r1, r4
 800274e:	1a51      	subs	r1, r2, r1
 8002750:	6139      	str	r1, [r7, #16]
 8002752:	4629      	mov	r1, r5
 8002754:	eb63 0301 	sbc.w	r3, r3, r1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002766:	4659      	mov	r1, fp
 8002768:	018b      	lsls	r3, r1, #6
 800276a:	4651      	mov	r1, sl
 800276c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002770:	4651      	mov	r1, sl
 8002772:	018a      	lsls	r2, r1, #6
 8002774:	4651      	mov	r1, sl
 8002776:	ebb2 0801 	subs.w	r8, r2, r1
 800277a:	4659      	mov	r1, fp
 800277c:	eb63 0901 	sbc.w	r9, r3, r1
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002794:	4690      	mov	r8, r2
 8002796:	4699      	mov	r9, r3
 8002798:	4623      	mov	r3, r4
 800279a:	eb18 0303 	adds.w	r3, r8, r3
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	462b      	mov	r3, r5
 80027a2:	eb49 0303 	adc.w	r3, r9, r3
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027b4:	4629      	mov	r1, r5
 80027b6:	028b      	lsls	r3, r1, #10
 80027b8:	4621      	mov	r1, r4
 80027ba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027be:	4621      	mov	r1, r4
 80027c0:	028a      	lsls	r2, r1, #10
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ca:	2200      	movs	r2, #0
 80027cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80027d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027d4:	f7fe fa58 	bl	8000c88 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027e2:	4b60      	ldr	r3, [pc, #384]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0c1b      	lsrs	r3, r3, #16
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	3301      	adds	r3, #1
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80027f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002804:	e0a6      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002806:	4b57      	ldr	r3, [pc, #348]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800280e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002812:	4b54      	ldr	r3, [pc, #336]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d02a      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281e:	4b51      	ldr	r3, [pc, #324]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	2200      	movs	r2, #0
 8002826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002828:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002830:	2100      	movs	r1, #0
 8002832:	4b4e      	ldr	r3, [pc, #312]	@ (800296c <HAL_RCC_GetSysClockFreq+0x350>)
 8002834:	fb03 f201 	mul.w	r2, r3, r1
 8002838:	2300      	movs	r3, #0
 800283a:	fb00 f303 	mul.w	r3, r0, r3
 800283e:	4413      	add	r3, r2
 8002840:	4a4a      	ldr	r2, [pc, #296]	@ (800296c <HAL_RCC_GetSysClockFreq+0x350>)
 8002842:	fba0 1202 	umull	r1, r2, r0, r2
 8002846:	677a      	str	r2, [r7, #116]	@ 0x74
 8002848:	460a      	mov	r2, r1
 800284a:	673a      	str	r2, [r7, #112]	@ 0x70
 800284c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800284e:	4413      	add	r3, r2
 8002850:	677b      	str	r3, [r7, #116]	@ 0x74
 8002852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002856:	2200      	movs	r2, #0
 8002858:	633b      	str	r3, [r7, #48]	@ 0x30
 800285a:	637a      	str	r2, [r7, #52]	@ 0x34
 800285c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002860:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002864:	f7fe fa10 	bl	8000c88 <__aeabi_uldivmod>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4613      	mov	r3, r2
 800286e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002872:	e05b      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	2200      	movs	r2, #0
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800287e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
 800288c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	0159      	lsls	r1, r3, #5
 800289e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a2:	0150      	lsls	r0, r2, #5
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4641      	mov	r1, r8
 80028aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ae:	4649      	mov	r1, r9
 80028b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028c8:	ebb2 040a 	subs.w	r4, r2, sl
 80028cc:	eb63 050b 	sbc.w	r5, r3, fp
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	00eb      	lsls	r3, r5, #3
 80028da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028de:	00e2      	lsls	r2, r4, #3
 80028e0:	4614      	mov	r4, r2
 80028e2:	461d      	mov	r5, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	18e3      	adds	r3, r4, r3
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	464b      	mov	r3, r9
 80028ec:	eb45 0303 	adc.w	r3, r5, r3
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fe:	4629      	mov	r1, r5
 8002900:	028b      	lsls	r3, r1, #10
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002908:	4621      	mov	r1, r4
 800290a:	028a      	lsls	r2, r1, #10
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002914:	2200      	movs	r2, #0
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	61fa      	str	r2, [r7, #28]
 800291a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291e:	f7fe f9b3 	bl	8000c88 <__aeabi_uldivmod>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4613      	mov	r3, r2
 8002928:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800292c:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x348>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	0f1b      	lsrs	r3, r3, #28
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800293a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800293e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800294a:	e003      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x34c>)
 800294e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002952:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002954:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002958:	4618      	mov	r0, r3
 800295a:	3798      	adds	r7, #152	@ 0x98
 800295c:	46bd      	mov	sp, r7
 800295e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	00f42400 	.word	0x00f42400
 800296c:	017d7840 	.word	0x017d7840

08002970 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e28d      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8083 	beq.w	8002a96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002990:	4b94      	ldr	r3, [pc, #592]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b04      	cmp	r3, #4
 800299a:	d019      	beq.n	80029d0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800299c:	4b91      	ldr	r3, [pc, #580]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
        || \
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029a8:	4b8e      	ldr	r3, [pc, #568]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b6:	4b8b      	ldr	r3, [pc, #556]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d112      	bne.n	80029e8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c2:	4b88      	ldr	r3, [pc, #544]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	4b84      	ldr	r3, [pc, #528]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05b      	beq.n	8002a94 <HAL_RCC_OscConfig+0x124>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d157      	bne.n	8002a94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e25a      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f0:	d106      	bne.n	8002a00 <HAL_RCC_OscConfig+0x90>
 80029f2:	4b7c      	ldr	r3, [pc, #496]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a7b      	ldr	r2, [pc, #492]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xcc>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xb4>
 8002a0a:	4b76      	ldr	r3, [pc, #472]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a75      	ldr	r2, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b73      	ldr	r3, [pc, #460]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a72      	ldr	r2, [pc, #456]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xcc>
 8002a24:	4b6f      	ldr	r3, [pc, #444]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6e      	ldr	r2, [pc, #440]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b6c      	ldr	r3, [pc, #432]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6b      	ldr	r2, [pc, #428]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff f936 	bl	8001cb4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7ff f932 	bl	8001cb4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e21f      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b61      	ldr	r3, [pc, #388]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xdc>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f922 	bl	8001cb4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff f91e 	bl	8001cb4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e20b      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b57      	ldr	r3, [pc, #348]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x104>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d06f      	beq.n	8002b82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aa2:	4b50      	ldr	r3, [pc, #320]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d017      	beq.n	8002ade <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002aae:	4b4d      	ldr	r3, [pc, #308]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002aba:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b44      	ldr	r3, [pc, #272]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b41      	ldr	r3, [pc, #260]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x186>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1d3      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4937      	ldr	r1, [pc, #220]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b34      	ldr	r3, [pc, #208]	@ (8002be8 <HAL_RCC_OscConfig+0x278>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7ff f8cb 	bl	8001cb4 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7ff f8c7 	bl	8001cb4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1b4      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4925      	ldr	r1, [pc, #148]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCC_OscConfig+0x278>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff f8aa 	bl	8001cb4 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7ff f8a6 	bl	8001cb4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e193      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d036      	beq.n	8002bfc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7ff f88a 	bl	8001cb4 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7ff f886 	bl	8001cb4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e173      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x234>
 8002bc2:	e01b      	b.n	8002bfc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7ff f873 	bl	8001cb4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e00e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f86f 	bl	8001cb4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d907      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e15c      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470000 	.word	0x42470000
 8002bec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	4b8a      	ldr	r3, [pc, #552]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ea      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8097 	beq.w	8002d38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b83      	ldr	r3, [pc, #524]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4a7e      	ldr	r2, [pc, #504]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b79      	ldr	r3, [pc, #484]	@ (8002e20 <HAL_RCC_OscConfig+0x4b0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d118      	bne.n	8002c78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <HAL_RCC_OscConfig+0x4b0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	@ (8002e20 <HAL_RCC_OscConfig+0x4b0>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7ff f82f 	bl	8001cb4 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5a:	f7ff f82b 	bl	8001cb4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e118      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e20 <HAL_RCC_OscConfig+0x4b0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x31e>
 8002c80:	4b66      	ldr	r3, [pc, #408]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a65      	ldr	r2, [pc, #404]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x358>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x340>
 8002c96:	4b61      	ldr	r3, [pc, #388]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a60      	ldr	r2, [pc, #384]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca6:	4a5d      	ldr	r2, [pc, #372]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x358>
 8002cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a59      	ldr	r2, [pc, #356]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	4b57      	ldr	r3, [pc, #348]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a56      	ldr	r2, [pc, #344]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fff0 	bl	8001cb4 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe ffec 	bl	8001cb4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0d7      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	4b4b      	ldr	r3, [pc, #300]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ee      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x368>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe ffda 	bl	8001cb4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe ffd6 	bl	8001cb4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0c1      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ee      	bne.n	8002d04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	4a3a      	ldr	r2, [pc, #232]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80ad 	beq.w	8002e9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d42:	4b36      	ldr	r3, [pc, #216]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d060      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d145      	bne.n	8002de2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b33      	ldr	r3, [pc, #204]	@ (8002e24 <HAL_RCC_OscConfig+0x4b4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe ffaa 	bl	8001cb4 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe ffa6 	bl	8001cb4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e093      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	4b29      	ldr	r3, [pc, #164]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	071b      	lsls	r3, r3, #28
 8002dae:	491b      	ldr	r1, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_RCC_OscConfig+0x4b4>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe ff7b 	bl	8001cb4 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fe ff77 	bl	8001cb4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e064      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x452>
 8002de0:	e05c      	b.n	8002e9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <HAL_RCC_OscConfig+0x4b4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe ff64 	bl	8001cb4 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe ff60 	bl	8001cb4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e04d      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x480>
 8002e0e:	e045      	b.n	8002e9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e040      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea8 <HAL_RCC_OscConfig+0x538>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d030      	beq.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d129      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d122      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d119      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	3b01      	subs	r3, #1
 8002e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d10f      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e042      	b.n	8002f44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fcfc 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	@ 0x24
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fe55 	bl	8003ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	@ 0x28
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d175      	bne.n	8003058 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_UART_Transmit+0x2c>
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e06e      	b.n	800305a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	@ 0x21
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f8a:	f7fe fe93 	bl	8001cb4 <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_UART_Transmit+0x6c>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e003      	b.n	8002fc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc0:	e02e      	b.n	8003020 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	@ 0x80
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fbb7 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e03a      	b.n	800305a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e007      	b.n	8003012 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3301      	adds	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1cb      	bne.n	8002fc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	2140      	movs	r1, #64	@ 0x40
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fb83 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e006      	b.n	800305a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b08a      	sub	sp, #40	@ 0x28
 8003066:	af02      	add	r7, sp, #8
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	f040 8081 	bne.w	8003186 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_UART_Receive+0x2e>
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e079      	b.n	8003188 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2222      	movs	r2, #34	@ 0x22
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fe04 	bl	8001cb4 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c2:	d108      	bne.n	80030d6 <HAL_UART_Receive+0x74>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e003      	b.n	80030de <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030de:	e047      	b.n	8003170 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2200      	movs	r2, #0
 80030e8:	2120      	movs	r1, #32
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fb28 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e042      	b.n	8003188 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10c      	bne.n	8003122 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003114:	b29a      	uxth	r2, r3
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	3302      	adds	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e01f      	b.n	8003162 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800312a:	d007      	beq.n	800313c <HAL_UART_Receive+0xda>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <HAL_UART_Receive+0xe8>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e008      	b.n	800315c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003156:	b2da      	uxtb	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	3301      	adds	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1b2      	bne.n	80030e0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d112      	bne.n	80031d0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_UART_Receive_IT+0x26>
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00b      	b.n	80031d2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fb13 	bl	80037f2 <UART_Start_Receive_IT>
 80031cc:	4603      	mov	r3, r0
 80031ce:	e000      	b.n	80031d2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b0ba      	sub	sp, #232	@ 0xe8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800321a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_UART_IRQHandler+0x66>
 800322e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fbf2 	bl	8003a24 <UART_Receive_IT>
      return;
 8003240:	e25b      	b.n	80036fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80de 	beq.w	8003408 <HAL_UART_IRQHandler+0x22c>
 800324c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80d1 	beq.w	8003408 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_UART_IRQHandler+0xae>
 8003272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800328a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_UART_IRQHandler+0xd2>
 8003296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_UART_IRQHandler+0xf6>
 80032ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d011      	beq.n	8003302 <HAL_UART_IRQHandler+0x126>
 80032de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f043 0208 	orr.w	r2, r3, #8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 81f2 	beq.w	80036f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800330c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_UART_IRQHandler+0x14e>
 8003318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fb7d 	bl	8003a24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b40      	cmp	r3, #64	@ 0x40
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d103      	bne.n	8003356 <HAL_UART_IRQHandler+0x17a>
 800334e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d04f      	beq.n	80033f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa85 	bl	8003866 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003366:	2b40      	cmp	r3, #64	@ 0x40
 8003368:	d141      	bne.n	80033ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3314      	adds	r3, #20
 8003392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003396:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800339a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1d9      	bne.n	800336a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	4a7e      	ldr	r2, [pc, #504]	@ (80035bc <HAL_UART_IRQHandler+0x3e0>)
 80033c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fe23 	bl	8002016 <HAL_DMA_Abort_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033e0:	4610      	mov	r0, r2
 80033e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	e00e      	b.n	8003404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f994 	bl	8003714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	e00a      	b.n	8003404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f990 	bl	8003714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e006      	b.n	8003404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f98c 	bl	8003714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003402:	e175      	b.n	80036f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	bf00      	nop
    return;
 8003406:	e173      	b.n	80036f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340c:	2b01      	cmp	r3, #1
 800340e:	f040 814f 	bne.w	80036b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8148 	beq.w	80036b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8141 	beq.w	80036b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344e:	2b40      	cmp	r3, #64	@ 0x40
 8003450:	f040 80b6 	bne.w	80035c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003460:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8145 	beq.w	80036f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800346e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003472:	429a      	cmp	r2, r3
 8003474:	f080 813e 	bcs.w	80036f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800347e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800348a:	f000 8088 	beq.w	800359e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1d9      	bne.n	800348e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3314      	adds	r3, #20
 80034e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003502:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003506:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e1      	bne.n	80034da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3314      	adds	r3, #20
 800351c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800352c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3314      	adds	r3, #20
 8003536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800353a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800353c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003540:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e3      	bne.n	8003516 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800356c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800356e:	f023 0310 	bic.w	r3, r3, #16
 8003572:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003580:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003582:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800358e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e3      	bne.n	800355c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe fccc 	bl	8001f36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f8b7 	bl	8003728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ba:	e09b      	b.n	80036f4 <HAL_UART_IRQHandler+0x518>
 80035bc:	0800392d 	.word	0x0800392d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 808e 	beq.w	80036f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8089 	beq.w	80036f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800360a:	647a      	str	r2, [r7, #68]	@ 0x44
 800360c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003610:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e3      	bne.n	80035e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3314      	adds	r3, #20
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	623b      	str	r3, [r7, #32]
   return(result);
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3314      	adds	r3, #20
 800363e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003642:	633a      	str	r2, [r7, #48]	@ 0x30
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e3      	bne.n	800361e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	60fb      	str	r3, [r7, #12]
   return(result);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0310 	bic.w	r3, r3, #16
 800367a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003688:	61fa      	str	r2, [r7, #28]
 800368a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	69b9      	ldr	r1, [r7, #24]
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	617b      	str	r3, [r7, #20]
   return(result);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e3      	bne.n	8003664 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036a6:	4619      	mov	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f83d 	bl	8003728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036ae:	e023      	b.n	80036f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <HAL_UART_IRQHandler+0x4f4>
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f943 	bl	8003954 <UART_Transmit_IT>
    return;
 80036ce:	e014      	b.n	80036fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <HAL_UART_IRQHandler+0x51e>
 80036dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f983 	bl	80039f4 <UART_EndTransmit_IT>
    return;
 80036ee:	e004      	b.n	80036fa <HAL_UART_IRQHandler+0x51e>
    return;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_UART_IRQHandler+0x51e>
      return;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_UART_IRQHandler+0x51e>
      return;
 80036f8:	bf00      	nop
  }
}
 80036fa:	37e8      	adds	r7, #232	@ 0xe8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003750:	e03b      	b.n	80037ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d037      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe faab 	bl	8001cb4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <UART_WaitOnFlagUntilTimeout+0x30>
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e03a      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d023      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b80      	cmp	r3, #128	@ 0x80
 8003786:	d020      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b40      	cmp	r3, #64	@ 0x40
 800378c:	d01d      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d116      	bne.n	80037ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f857 	bl	8003866 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2208      	movs	r2, #8
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00f      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4013      	ands	r3, r2
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	bf0c      	ite	eq
 80037da:	2301      	moveq	r3, #1
 80037dc:	2300      	movne	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d0b4      	beq.n	8003752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4613      	mov	r3, r2
 80037fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2222      	movs	r2, #34	@ 0x22
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003836:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003866:	b480      	push	{r7}
 8003868:	b095      	sub	sp, #84	@ 0x54
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003884:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800388e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003894:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800389c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e5      	bne.n	800386e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e5      	bne.n	80038a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d119      	bne.n	8003912 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f023 0310 	bic.w	r3, r3, #16
 80038f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038fe:	61ba      	str	r2, [r7, #24]
 8003900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6979      	ldr	r1, [r7, #20]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	613b      	str	r3, [r7, #16]
   return(result);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e5      	bne.n	80038de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003920:	bf00      	nop
 8003922:	3754      	adds	r7, #84	@ 0x54
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fee4 	bl	8003714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b21      	cmp	r3, #33	@ 0x21
 8003966:	d13e      	bne.n	80039e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003970:	d114      	bne.n	800399c <UART_Transmit_IT+0x48>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d110      	bne.n	800399c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	1c9a      	adds	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]
 800399a:	e008      	b.n	80039ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	1c59      	adds	r1, r3, #1
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6211      	str	r1, [r2, #32]
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4619      	mov	r1, r3
 80039bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fe73 	bl	8003700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	@ 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b22      	cmp	r3, #34	@ 0x22
 8003a36:	f040 80ae 	bne.w	8003b96 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a42:	d117      	bne.n	8003a74 <UART_Receive_IT+0x50>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a72:	e026      	b.n	8003ac2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a86:	d007      	beq.n	8003a98 <UART_Receive_IT+0x74>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <UART_Receive_IT+0x82>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d106      	bne.n	8003aa6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	e008      	b.n	8003ab8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d15d      	bne.n	8003b92 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0220 	bic.w	r2, r2, #32
 8003ae4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003af4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d135      	bne.n	8003b88 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	613b      	str	r3, [r7, #16]
   return(result);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f023 0310 	bic.w	r3, r3, #16
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b42:	623a      	str	r2, [r7, #32]
 8003b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	69f9      	ldr	r1, [r7, #28]
 8003b48:	6a3a      	ldr	r2, [r7, #32]
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e5      	bne.n	8003b22 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d10a      	bne.n	8003b7a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fdd1 	bl	8003728 <HAL_UARTEx_RxEventCallback>
 8003b86:	e002      	b.n	8003b8e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fd f9f5 	bl	8000f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e002      	b.n	8003b98 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3730      	adds	r7, #48	@ 0x30
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b0c0      	sub	sp, #256	@ 0x100
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	68d9      	ldr	r1, [r3, #12]
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	ea40 0301 	orr.w	r3, r0, r1
 8003bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bf8:	f021 010c 	bic.w	r1, r1, #12
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c06:	430b      	orrs	r3, r1
 8003c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	6999      	ldr	r1, [r3, #24]
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	ea40 0301 	orr.w	r3, r0, r1
 8003c26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b8f      	ldr	r3, [pc, #572]	@ (8003e6c <UART_SetConfig+0x2cc>)
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d005      	beq.n	8003c40 <UART_SetConfig+0xa0>
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003e70 <UART_SetConfig+0x2d0>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d104      	bne.n	8003c4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7fe fcd8 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8003c44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c48:	e003      	b.n	8003c52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c4a:	f7fe fcbf 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003c4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c5c:	f040 810c 	bne.w	8003e78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c72:	4622      	mov	r2, r4
 8003c74:	462b      	mov	r3, r5
 8003c76:	1891      	adds	r1, r2, r2
 8003c78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c82:	4621      	mov	r1, r4
 8003c84:	eb12 0801 	adds.w	r8, r2, r1
 8003c88:	4629      	mov	r1, r5
 8003c8a:	eb43 0901 	adc.w	r9, r3, r1
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca2:	4690      	mov	r8, r2
 8003ca4:	4699      	mov	r9, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	eb18 0303 	adds.w	r3, r8, r3
 8003cac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	eb49 0303 	adc.w	r3, r9, r3
 8003cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003cce:	460b      	mov	r3, r1
 8003cd0:	18db      	adds	r3, r3, r3
 8003cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	eb42 0303 	adc.w	r3, r2, r3
 8003cda:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ce0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ce4:	f7fc ffd0 	bl	8000c88 <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4b61      	ldr	r3, [pc, #388]	@ (8003e74 <UART_SetConfig+0x2d4>)
 8003cee:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	011c      	lsls	r4, r3, #4
 8003cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d10:	415b      	adcs	r3, r3
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d18:	4641      	mov	r1, r8
 8003d1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d1e:	4649      	mov	r1, r9
 8003d20:	eb43 0b01 	adc.w	fp, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d38:	4692      	mov	sl, r2
 8003d3a:	469b      	mov	fp, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d46:	464b      	mov	r3, r9
 8003d48:	eb4b 0303 	adc.w	r3, fp, r3
 8003d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d64:	460b      	mov	r3, r1
 8003d66:	18db      	adds	r3, r3, r3
 8003d68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d7a:	f7fc ff85 	bl	8000c88 <__aeabi_uldivmod>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <UART_SetConfig+0x2d4>)
 8003d86:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2264      	movs	r2, #100	@ 0x64
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	1acb      	subs	r3, r1, r3
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d9a:	4b36      	ldr	r3, [pc, #216]	@ (8003e74 <UART_SetConfig+0x2d4>)
 8003d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003da8:	441c      	add	r4, r3
 8003daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003db4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003db8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003dcc:	4641      	mov	r1, r8
 8003dce:	1851      	adds	r1, r2, r1
 8003dd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	414b      	adcs	r3, r1
 8003dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003de4:	4659      	mov	r1, fp
 8003de6:	00cb      	lsls	r3, r1, #3
 8003de8:	4651      	mov	r1, sl
 8003dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dee:	4651      	mov	r1, sl
 8003df0:	00ca      	lsls	r2, r1, #3
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	4642      	mov	r2, r8
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e00:	464b      	mov	r3, r9
 8003e02:	460a      	mov	r2, r1
 8003e04:	eb42 0303 	adc.w	r3, r2, r3
 8003e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e20:	460b      	mov	r3, r1
 8003e22:	18db      	adds	r3, r3, r3
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e26:	4613      	mov	r3, r2
 8003e28:	eb42 0303 	adc.w	r3, r2, r3
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e36:	f7fc ff27 	bl	8000c88 <__aeabi_uldivmod>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <UART_SetConfig+0x2d4>)
 8003e40:	fba3 1302 	umull	r1, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	2164      	movs	r1, #100	@ 0x64
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3332      	adds	r3, #50	@ 0x32
 8003e52:	4a08      	ldr	r2, [pc, #32]	@ (8003e74 <UART_SetConfig+0x2d4>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	f003 0207 	and.w	r2, r3, #7
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4422      	add	r2, r4
 8003e66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e68:	e106      	b.n	8004078 <UART_SetConfig+0x4d8>
 8003e6a:	bf00      	nop
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40011400 	.word	0x40011400
 8003e74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e8a:	4642      	mov	r2, r8
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	1891      	adds	r1, r2, r2
 8003e90:	6239      	str	r1, [r7, #32]
 8003e92:	415b      	adcs	r3, r3
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	1854      	adds	r4, r2, r1
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	eb43 0501 	adc.w	r5, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	00eb      	lsls	r3, r5, #3
 8003eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb2:	00e2      	lsls	r2, r4, #3
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	4643      	mov	r3, r8
 8003eba:	18e3      	adds	r3, r4, r3
 8003ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	eb45 0303 	adc.w	r3, r5, r3
 8003ec6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ed6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	008b      	lsls	r3, r1, #2
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	008a      	lsls	r2, r1, #2
 8003ef4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ef8:	f7fc fec6 	bl	8000c88 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4b60      	ldr	r3, [pc, #384]	@ (8004084 <UART_SetConfig+0x4e4>)
 8003f02:	fba3 2302 	umull	r2, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	011c      	lsls	r4, r3, #4
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	61b9      	str	r1, [r7, #24]
 8003f24:	415b      	adcs	r3, r3
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	1851      	adds	r1, r2, r1
 8003f30:	6139      	str	r1, [r7, #16]
 8003f32:	4649      	mov	r1, r9
 8003f34:	414b      	adcs	r3, r1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f44:	4659      	mov	r1, fp
 8003f46:	00cb      	lsls	r3, r1, #3
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4e:	4651      	mov	r1, sl
 8003f50:	00ca      	lsls	r2, r1, #3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f84:	4649      	mov	r1, r9
 8003f86:	008b      	lsls	r3, r1, #2
 8003f88:	4641      	mov	r1, r8
 8003f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8e:	4641      	mov	r1, r8
 8003f90:	008a      	lsls	r2, r1, #2
 8003f92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f96:	f7fc fe77 	bl	8000c88 <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <UART_SetConfig+0x4e4>)
 8003fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2264      	movs	r2, #100	@ 0x64
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	1acb      	subs	r3, r1, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	@ 0x32
 8003fb4:	4a33      	ldr	r2, [pc, #204]	@ (8004084 <UART_SetConfig+0x4e4>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc0:	441c      	add	r4, r3
 8003fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fca:	677a      	str	r2, [r7, #116]	@ 0x74
 8003fcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	1891      	adds	r1, r2, r2
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	415b      	adcs	r3, r3
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	1851      	adds	r1, r2, r1
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	414b      	adcs	r3, r1
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ff8:	4659      	mov	r1, fp
 8003ffa:	00cb      	lsls	r3, r1, #3
 8003ffc:	4651      	mov	r1, sl
 8003ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004002:	4651      	mov	r1, sl
 8004004:	00ca      	lsls	r2, r1, #3
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	4603      	mov	r3, r0
 800400c:	4642      	mov	r2, r8
 800400e:	189b      	adds	r3, r3, r2
 8004010:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004012:	464b      	mov	r3, r9
 8004014:	460a      	mov	r2, r1
 8004016:	eb42 0303 	adc.w	r3, r2, r3
 800401a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	663b      	str	r3, [r7, #96]	@ 0x60
 8004026:	667a      	str	r2, [r7, #100]	@ 0x64
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004034:	4649      	mov	r1, r9
 8004036:	008b      	lsls	r3, r1, #2
 8004038:	4641      	mov	r1, r8
 800403a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403e:	4641      	mov	r1, r8
 8004040:	008a      	lsls	r2, r1, #2
 8004042:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004046:	f7fc fe1f 	bl	8000c88 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <UART_SetConfig+0x4e4>)
 8004050:	fba3 1302 	umull	r1, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	2164      	movs	r1, #100	@ 0x64
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	3332      	adds	r3, #50	@ 0x32
 8004062:	4a08      	ldr	r2, [pc, #32]	@ (8004084 <UART_SetConfig+0x4e4>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f003 020f 	and.w	r2, r3, #15
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4422      	add	r2, r4
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800407e:	46bd      	mov	sp, r7
 8004080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004084:	51eb851f 	.word	0x51eb851f

08004088 <__cvt>:
 8004088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800408c:	ec57 6b10 	vmov	r6, r7, d0
 8004090:	2f00      	cmp	r7, #0
 8004092:	460c      	mov	r4, r1
 8004094:	4619      	mov	r1, r3
 8004096:	463b      	mov	r3, r7
 8004098:	bfbb      	ittet	lt
 800409a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800409e:	461f      	movlt	r7, r3
 80040a0:	2300      	movge	r3, #0
 80040a2:	232d      	movlt	r3, #45	@ 0x2d
 80040a4:	700b      	strb	r3, [r1, #0]
 80040a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80040ac:	4691      	mov	r9, r2
 80040ae:	f023 0820 	bic.w	r8, r3, #32
 80040b2:	bfbc      	itt	lt
 80040b4:	4632      	movlt	r2, r6
 80040b6:	4616      	movlt	r6, r2
 80040b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040bc:	d005      	beq.n	80040ca <__cvt+0x42>
 80040be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80040c2:	d100      	bne.n	80040c6 <__cvt+0x3e>
 80040c4:	3401      	adds	r4, #1
 80040c6:	2102      	movs	r1, #2
 80040c8:	e000      	b.n	80040cc <__cvt+0x44>
 80040ca:	2103      	movs	r1, #3
 80040cc:	ab03      	add	r3, sp, #12
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	ab02      	add	r3, sp, #8
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	ec47 6b10 	vmov	d0, r6, r7
 80040d8:	4653      	mov	r3, sl
 80040da:	4622      	mov	r2, r4
 80040dc:	f000 feac 	bl	8004e38 <_dtoa_r>
 80040e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80040e4:	4605      	mov	r5, r0
 80040e6:	d119      	bne.n	800411c <__cvt+0x94>
 80040e8:	f019 0f01 	tst.w	r9, #1
 80040ec:	d00e      	beq.n	800410c <__cvt+0x84>
 80040ee:	eb00 0904 	add.w	r9, r0, r4
 80040f2:	2200      	movs	r2, #0
 80040f4:	2300      	movs	r3, #0
 80040f6:	4630      	mov	r0, r6
 80040f8:	4639      	mov	r1, r7
 80040fa:	f7fc fd05 	bl	8000b08 <__aeabi_dcmpeq>
 80040fe:	b108      	cbz	r0, 8004104 <__cvt+0x7c>
 8004100:	f8cd 900c 	str.w	r9, [sp, #12]
 8004104:	2230      	movs	r2, #48	@ 0x30
 8004106:	9b03      	ldr	r3, [sp, #12]
 8004108:	454b      	cmp	r3, r9
 800410a:	d31e      	bcc.n	800414a <__cvt+0xc2>
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004110:	1b5b      	subs	r3, r3, r5
 8004112:	4628      	mov	r0, r5
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	b004      	add	sp, #16
 8004118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004120:	eb00 0904 	add.w	r9, r0, r4
 8004124:	d1e5      	bne.n	80040f2 <__cvt+0x6a>
 8004126:	7803      	ldrb	r3, [r0, #0]
 8004128:	2b30      	cmp	r3, #48	@ 0x30
 800412a:	d10a      	bne.n	8004142 <__cvt+0xba>
 800412c:	2200      	movs	r2, #0
 800412e:	2300      	movs	r3, #0
 8004130:	4630      	mov	r0, r6
 8004132:	4639      	mov	r1, r7
 8004134:	f7fc fce8 	bl	8000b08 <__aeabi_dcmpeq>
 8004138:	b918      	cbnz	r0, 8004142 <__cvt+0xba>
 800413a:	f1c4 0401 	rsb	r4, r4, #1
 800413e:	f8ca 4000 	str.w	r4, [sl]
 8004142:	f8da 3000 	ldr.w	r3, [sl]
 8004146:	4499      	add	r9, r3
 8004148:	e7d3      	b.n	80040f2 <__cvt+0x6a>
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	9103      	str	r1, [sp, #12]
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e7d9      	b.n	8004106 <__cvt+0x7e>

08004152 <__exponent>:
 8004152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004154:	2900      	cmp	r1, #0
 8004156:	bfba      	itte	lt
 8004158:	4249      	neglt	r1, r1
 800415a:	232d      	movlt	r3, #45	@ 0x2d
 800415c:	232b      	movge	r3, #43	@ 0x2b
 800415e:	2909      	cmp	r1, #9
 8004160:	7002      	strb	r2, [r0, #0]
 8004162:	7043      	strb	r3, [r0, #1]
 8004164:	dd29      	ble.n	80041ba <__exponent+0x68>
 8004166:	f10d 0307 	add.w	r3, sp, #7
 800416a:	461d      	mov	r5, r3
 800416c:	270a      	movs	r7, #10
 800416e:	461a      	mov	r2, r3
 8004170:	fbb1 f6f7 	udiv	r6, r1, r7
 8004174:	fb07 1416 	mls	r4, r7, r6, r1
 8004178:	3430      	adds	r4, #48	@ 0x30
 800417a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800417e:	460c      	mov	r4, r1
 8004180:	2c63      	cmp	r4, #99	@ 0x63
 8004182:	f103 33ff 	add.w	r3, r3, #4294967295
 8004186:	4631      	mov	r1, r6
 8004188:	dcf1      	bgt.n	800416e <__exponent+0x1c>
 800418a:	3130      	adds	r1, #48	@ 0x30
 800418c:	1e94      	subs	r4, r2, #2
 800418e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004192:	1c41      	adds	r1, r0, #1
 8004194:	4623      	mov	r3, r4
 8004196:	42ab      	cmp	r3, r5
 8004198:	d30a      	bcc.n	80041b0 <__exponent+0x5e>
 800419a:	f10d 0309 	add.w	r3, sp, #9
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	42ac      	cmp	r4, r5
 80041a2:	bf88      	it	hi
 80041a4:	2300      	movhi	r3, #0
 80041a6:	3302      	adds	r3, #2
 80041a8:	4403      	add	r3, r0
 80041aa:	1a18      	subs	r0, r3, r0
 80041ac:	b003      	add	sp, #12
 80041ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80041b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80041b8:	e7ed      	b.n	8004196 <__exponent+0x44>
 80041ba:	2330      	movs	r3, #48	@ 0x30
 80041bc:	3130      	adds	r1, #48	@ 0x30
 80041be:	7083      	strb	r3, [r0, #2]
 80041c0:	70c1      	strb	r1, [r0, #3]
 80041c2:	1d03      	adds	r3, r0, #4
 80041c4:	e7f1      	b.n	80041aa <__exponent+0x58>
	...

080041c8 <_printf_float>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	b08d      	sub	sp, #52	@ 0x34
 80041ce:	460c      	mov	r4, r1
 80041d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80041d4:	4616      	mov	r6, r2
 80041d6:	461f      	mov	r7, r3
 80041d8:	4605      	mov	r5, r0
 80041da:	f000 fd2b 	bl	8004c34 <_localeconv_r>
 80041de:	6803      	ldr	r3, [r0, #0]
 80041e0:	9304      	str	r3, [sp, #16]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc f864 	bl	80002b0 <strlen>
 80041e8:	2300      	movs	r3, #0
 80041ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80041ec:	f8d8 3000 	ldr.w	r3, [r8]
 80041f0:	9005      	str	r0, [sp, #20]
 80041f2:	3307      	adds	r3, #7
 80041f4:	f023 0307 	bic.w	r3, r3, #7
 80041f8:	f103 0208 	add.w	r2, r3, #8
 80041fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004200:	f8d4 b000 	ldr.w	fp, [r4]
 8004204:	f8c8 2000 	str.w	r2, [r8]
 8004208:	e9d3 8900 	ldrd	r8, r9, [r3]
 800420c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004210:	9307      	str	r3, [sp, #28]
 8004212:	f8cd 8018 	str.w	r8, [sp, #24]
 8004216:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800421a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800421e:	4b9c      	ldr	r3, [pc, #624]	@ (8004490 <_printf_float+0x2c8>)
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	f7fc fca2 	bl	8000b6c <__aeabi_dcmpun>
 8004228:	bb70      	cbnz	r0, 8004288 <_printf_float+0xc0>
 800422a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800422e:	4b98      	ldr	r3, [pc, #608]	@ (8004490 <_printf_float+0x2c8>)
 8004230:	f04f 32ff 	mov.w	r2, #4294967295
 8004234:	f7fc fc7c 	bl	8000b30 <__aeabi_dcmple>
 8004238:	bb30      	cbnz	r0, 8004288 <_printf_float+0xc0>
 800423a:	2200      	movs	r2, #0
 800423c:	2300      	movs	r3, #0
 800423e:	4640      	mov	r0, r8
 8004240:	4649      	mov	r1, r9
 8004242:	f7fc fc6b 	bl	8000b1c <__aeabi_dcmplt>
 8004246:	b110      	cbz	r0, 800424e <_printf_float+0x86>
 8004248:	232d      	movs	r3, #45	@ 0x2d
 800424a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800424e:	4a91      	ldr	r2, [pc, #580]	@ (8004494 <_printf_float+0x2cc>)
 8004250:	4b91      	ldr	r3, [pc, #580]	@ (8004498 <_printf_float+0x2d0>)
 8004252:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004256:	bf94      	ite	ls
 8004258:	4690      	movls	r8, r2
 800425a:	4698      	movhi	r8, r3
 800425c:	2303      	movs	r3, #3
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	f02b 0304 	bic.w	r3, fp, #4
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	f04f 0900 	mov.w	r9, #0
 800426a:	9700      	str	r7, [sp, #0]
 800426c:	4633      	mov	r3, r6
 800426e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004270:	4621      	mov	r1, r4
 8004272:	4628      	mov	r0, r5
 8004274:	f000 f9d2 	bl	800461c <_printf_common>
 8004278:	3001      	adds	r0, #1
 800427a:	f040 808d 	bne.w	8004398 <_printf_float+0x1d0>
 800427e:	f04f 30ff 	mov.w	r0, #4294967295
 8004282:	b00d      	add	sp, #52	@ 0x34
 8004284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004288:	4642      	mov	r2, r8
 800428a:	464b      	mov	r3, r9
 800428c:	4640      	mov	r0, r8
 800428e:	4649      	mov	r1, r9
 8004290:	f7fc fc6c 	bl	8000b6c <__aeabi_dcmpun>
 8004294:	b140      	cbz	r0, 80042a8 <_printf_float+0xe0>
 8004296:	464b      	mov	r3, r9
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfbc      	itt	lt
 800429c:	232d      	movlt	r3, #45	@ 0x2d
 800429e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80042a2:	4a7e      	ldr	r2, [pc, #504]	@ (800449c <_printf_float+0x2d4>)
 80042a4:	4b7e      	ldr	r3, [pc, #504]	@ (80044a0 <_printf_float+0x2d8>)
 80042a6:	e7d4      	b.n	8004252 <_printf_float+0x8a>
 80042a8:	6863      	ldr	r3, [r4, #4]
 80042aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80042ae:	9206      	str	r2, [sp, #24]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	d13b      	bne.n	800432c <_printf_float+0x164>
 80042b4:	2306      	movs	r3, #6
 80042b6:	6063      	str	r3, [r4, #4]
 80042b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80042bc:	2300      	movs	r3, #0
 80042be:	6022      	str	r2, [r4, #0]
 80042c0:	9303      	str	r3, [sp, #12]
 80042c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80042c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80042c8:	ab09      	add	r3, sp, #36	@ 0x24
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	6861      	ldr	r1, [r4, #4]
 80042ce:	ec49 8b10 	vmov	d0, r8, r9
 80042d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80042d6:	4628      	mov	r0, r5
 80042d8:	f7ff fed6 	bl	8004088 <__cvt>
 80042dc:	9b06      	ldr	r3, [sp, #24]
 80042de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80042e0:	2b47      	cmp	r3, #71	@ 0x47
 80042e2:	4680      	mov	r8, r0
 80042e4:	d129      	bne.n	800433a <_printf_float+0x172>
 80042e6:	1cc8      	adds	r0, r1, #3
 80042e8:	db02      	blt.n	80042f0 <_printf_float+0x128>
 80042ea:	6863      	ldr	r3, [r4, #4]
 80042ec:	4299      	cmp	r1, r3
 80042ee:	dd41      	ble.n	8004374 <_printf_float+0x1ac>
 80042f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80042f4:	fa5f fa8a 	uxtb.w	sl, sl
 80042f8:	3901      	subs	r1, #1
 80042fa:	4652      	mov	r2, sl
 80042fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004300:	9109      	str	r1, [sp, #36]	@ 0x24
 8004302:	f7ff ff26 	bl	8004152 <__exponent>
 8004306:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004308:	1813      	adds	r3, r2, r0
 800430a:	2a01      	cmp	r2, #1
 800430c:	4681      	mov	r9, r0
 800430e:	6123      	str	r3, [r4, #16]
 8004310:	dc02      	bgt.n	8004318 <_printf_float+0x150>
 8004312:	6822      	ldr	r2, [r4, #0]
 8004314:	07d2      	lsls	r2, r2, #31
 8004316:	d501      	bpl.n	800431c <_printf_float+0x154>
 8004318:	3301      	adds	r3, #1
 800431a:	6123      	str	r3, [r4, #16]
 800431c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0a2      	beq.n	800426a <_printf_float+0xa2>
 8004324:	232d      	movs	r3, #45	@ 0x2d
 8004326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800432a:	e79e      	b.n	800426a <_printf_float+0xa2>
 800432c:	9a06      	ldr	r2, [sp, #24]
 800432e:	2a47      	cmp	r2, #71	@ 0x47
 8004330:	d1c2      	bne.n	80042b8 <_printf_float+0xf0>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1c0      	bne.n	80042b8 <_printf_float+0xf0>
 8004336:	2301      	movs	r3, #1
 8004338:	e7bd      	b.n	80042b6 <_printf_float+0xee>
 800433a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800433e:	d9db      	bls.n	80042f8 <_printf_float+0x130>
 8004340:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004344:	d118      	bne.n	8004378 <_printf_float+0x1b0>
 8004346:	2900      	cmp	r1, #0
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	dd0b      	ble.n	8004364 <_printf_float+0x19c>
 800434c:	6121      	str	r1, [r4, #16]
 800434e:	b913      	cbnz	r3, 8004356 <_printf_float+0x18e>
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	07d0      	lsls	r0, r2, #31
 8004354:	d502      	bpl.n	800435c <_printf_float+0x194>
 8004356:	3301      	adds	r3, #1
 8004358:	440b      	add	r3, r1
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800435e:	f04f 0900 	mov.w	r9, #0
 8004362:	e7db      	b.n	800431c <_printf_float+0x154>
 8004364:	b913      	cbnz	r3, 800436c <_printf_float+0x1a4>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	07d2      	lsls	r2, r2, #31
 800436a:	d501      	bpl.n	8004370 <_printf_float+0x1a8>
 800436c:	3302      	adds	r3, #2
 800436e:	e7f4      	b.n	800435a <_printf_float+0x192>
 8004370:	2301      	movs	r3, #1
 8004372:	e7f2      	b.n	800435a <_printf_float+0x192>
 8004374:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800437a:	4299      	cmp	r1, r3
 800437c:	db05      	blt.n	800438a <_printf_float+0x1c2>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	6121      	str	r1, [r4, #16]
 8004382:	07d8      	lsls	r0, r3, #31
 8004384:	d5ea      	bpl.n	800435c <_printf_float+0x194>
 8004386:	1c4b      	adds	r3, r1, #1
 8004388:	e7e7      	b.n	800435a <_printf_float+0x192>
 800438a:	2900      	cmp	r1, #0
 800438c:	bfd4      	ite	le
 800438e:	f1c1 0202 	rsble	r2, r1, #2
 8004392:	2201      	movgt	r2, #1
 8004394:	4413      	add	r3, r2
 8004396:	e7e0      	b.n	800435a <_printf_float+0x192>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	055a      	lsls	r2, r3, #21
 800439c:	d407      	bmi.n	80043ae <_printf_float+0x1e6>
 800439e:	6923      	ldr	r3, [r4, #16]
 80043a0:	4642      	mov	r2, r8
 80043a2:	4631      	mov	r1, r6
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b8      	blx	r7
 80043a8:	3001      	adds	r0, #1
 80043aa:	d12b      	bne.n	8004404 <_printf_float+0x23c>
 80043ac:	e767      	b.n	800427e <_printf_float+0xb6>
 80043ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043b2:	f240 80dd 	bls.w	8004570 <_printf_float+0x3a8>
 80043b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043ba:	2200      	movs	r2, #0
 80043bc:	2300      	movs	r3, #0
 80043be:	f7fc fba3 	bl	8000b08 <__aeabi_dcmpeq>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d033      	beq.n	800442e <_printf_float+0x266>
 80043c6:	4a37      	ldr	r2, [pc, #220]	@ (80044a4 <_printf_float+0x2dc>)
 80043c8:	2301      	movs	r3, #1
 80043ca:	4631      	mov	r1, r6
 80043cc:	4628      	mov	r0, r5
 80043ce:	47b8      	blx	r7
 80043d0:	3001      	adds	r0, #1
 80043d2:	f43f af54 	beq.w	800427e <_printf_float+0xb6>
 80043d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80043da:	4543      	cmp	r3, r8
 80043dc:	db02      	blt.n	80043e4 <_printf_float+0x21c>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	07d8      	lsls	r0, r3, #31
 80043e2:	d50f      	bpl.n	8004404 <_printf_float+0x23c>
 80043e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043e8:	4631      	mov	r1, r6
 80043ea:	4628      	mov	r0, r5
 80043ec:	47b8      	blx	r7
 80043ee:	3001      	adds	r0, #1
 80043f0:	f43f af45 	beq.w	800427e <_printf_float+0xb6>
 80043f4:	f04f 0900 	mov.w	r9, #0
 80043f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80043fc:	f104 0a1a 	add.w	sl, r4, #26
 8004400:	45c8      	cmp	r8, r9
 8004402:	dc09      	bgt.n	8004418 <_printf_float+0x250>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	079b      	lsls	r3, r3, #30
 8004408:	f100 8103 	bmi.w	8004612 <_printf_float+0x44a>
 800440c:	68e0      	ldr	r0, [r4, #12]
 800440e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004410:	4298      	cmp	r0, r3
 8004412:	bfb8      	it	lt
 8004414:	4618      	movlt	r0, r3
 8004416:	e734      	b.n	8004282 <_printf_float+0xba>
 8004418:	2301      	movs	r3, #1
 800441a:	4652      	mov	r2, sl
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f af2b 	beq.w	800427e <_printf_float+0xb6>
 8004428:	f109 0901 	add.w	r9, r9, #1
 800442c:	e7e8      	b.n	8004400 <_printf_float+0x238>
 800442e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	dc39      	bgt.n	80044a8 <_printf_float+0x2e0>
 8004434:	4a1b      	ldr	r2, [pc, #108]	@ (80044a4 <_printf_float+0x2dc>)
 8004436:	2301      	movs	r3, #1
 8004438:	4631      	mov	r1, r6
 800443a:	4628      	mov	r0, r5
 800443c:	47b8      	blx	r7
 800443e:	3001      	adds	r0, #1
 8004440:	f43f af1d 	beq.w	800427e <_printf_float+0xb6>
 8004444:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004448:	ea59 0303 	orrs.w	r3, r9, r3
 800444c:	d102      	bne.n	8004454 <_printf_float+0x28c>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	07d9      	lsls	r1, r3, #31
 8004452:	d5d7      	bpl.n	8004404 <_printf_float+0x23c>
 8004454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004458:	4631      	mov	r1, r6
 800445a:	4628      	mov	r0, r5
 800445c:	47b8      	blx	r7
 800445e:	3001      	adds	r0, #1
 8004460:	f43f af0d 	beq.w	800427e <_printf_float+0xb6>
 8004464:	f04f 0a00 	mov.w	sl, #0
 8004468:	f104 0b1a 	add.w	fp, r4, #26
 800446c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800446e:	425b      	negs	r3, r3
 8004470:	4553      	cmp	r3, sl
 8004472:	dc01      	bgt.n	8004478 <_printf_float+0x2b0>
 8004474:	464b      	mov	r3, r9
 8004476:	e793      	b.n	80043a0 <_printf_float+0x1d8>
 8004478:	2301      	movs	r3, #1
 800447a:	465a      	mov	r2, fp
 800447c:	4631      	mov	r1, r6
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	f43f aefb 	beq.w	800427e <_printf_float+0xb6>
 8004488:	f10a 0a01 	add.w	sl, sl, #1
 800448c:	e7ee      	b.n	800446c <_printf_float+0x2a4>
 800448e:	bf00      	nop
 8004490:	7fefffff 	.word	0x7fefffff
 8004494:	08007890 	.word	0x08007890
 8004498:	08007894 	.word	0x08007894
 800449c:	08007898 	.word	0x08007898
 80044a0:	0800789c 	.word	0x0800789c
 80044a4:	08007acf 	.word	0x08007acf
 80044a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80044ae:	4553      	cmp	r3, sl
 80044b0:	bfa8      	it	ge
 80044b2:	4653      	movge	r3, sl
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	4699      	mov	r9, r3
 80044b8:	dc36      	bgt.n	8004528 <_printf_float+0x360>
 80044ba:	f04f 0b00 	mov.w	fp, #0
 80044be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044c2:	f104 021a 	add.w	r2, r4, #26
 80044c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044c8:	9306      	str	r3, [sp, #24]
 80044ca:	eba3 0309 	sub.w	r3, r3, r9
 80044ce:	455b      	cmp	r3, fp
 80044d0:	dc31      	bgt.n	8004536 <_printf_float+0x36e>
 80044d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d4:	459a      	cmp	sl, r3
 80044d6:	dc3a      	bgt.n	800454e <_printf_float+0x386>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	07da      	lsls	r2, r3, #31
 80044dc:	d437      	bmi.n	800454e <_printf_float+0x386>
 80044de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044e0:	ebaa 0903 	sub.w	r9, sl, r3
 80044e4:	9b06      	ldr	r3, [sp, #24]
 80044e6:	ebaa 0303 	sub.w	r3, sl, r3
 80044ea:	4599      	cmp	r9, r3
 80044ec:	bfa8      	it	ge
 80044ee:	4699      	movge	r9, r3
 80044f0:	f1b9 0f00 	cmp.w	r9, #0
 80044f4:	dc33      	bgt.n	800455e <_printf_float+0x396>
 80044f6:	f04f 0800 	mov.w	r8, #0
 80044fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044fe:	f104 0b1a 	add.w	fp, r4, #26
 8004502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004504:	ebaa 0303 	sub.w	r3, sl, r3
 8004508:	eba3 0309 	sub.w	r3, r3, r9
 800450c:	4543      	cmp	r3, r8
 800450e:	f77f af79 	ble.w	8004404 <_printf_float+0x23c>
 8004512:	2301      	movs	r3, #1
 8004514:	465a      	mov	r2, fp
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f aeae 	beq.w	800427e <_printf_float+0xb6>
 8004522:	f108 0801 	add.w	r8, r8, #1
 8004526:	e7ec      	b.n	8004502 <_printf_float+0x33a>
 8004528:	4642      	mov	r2, r8
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	d1c2      	bne.n	80044ba <_printf_float+0x2f2>
 8004534:	e6a3      	b.n	800427e <_printf_float+0xb6>
 8004536:	2301      	movs	r3, #1
 8004538:	4631      	mov	r1, r6
 800453a:	4628      	mov	r0, r5
 800453c:	9206      	str	r2, [sp, #24]
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	f43f ae9c 	beq.w	800427e <_printf_float+0xb6>
 8004546:	9a06      	ldr	r2, [sp, #24]
 8004548:	f10b 0b01 	add.w	fp, fp, #1
 800454c:	e7bb      	b.n	80044c6 <_printf_float+0x2fe>
 800454e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004552:	4631      	mov	r1, r6
 8004554:	4628      	mov	r0, r5
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	d1c0      	bne.n	80044de <_printf_float+0x316>
 800455c:	e68f      	b.n	800427e <_printf_float+0xb6>
 800455e:	9a06      	ldr	r2, [sp, #24]
 8004560:	464b      	mov	r3, r9
 8004562:	4442      	add	r2, r8
 8004564:	4631      	mov	r1, r6
 8004566:	4628      	mov	r0, r5
 8004568:	47b8      	blx	r7
 800456a:	3001      	adds	r0, #1
 800456c:	d1c3      	bne.n	80044f6 <_printf_float+0x32e>
 800456e:	e686      	b.n	800427e <_printf_float+0xb6>
 8004570:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004574:	f1ba 0f01 	cmp.w	sl, #1
 8004578:	dc01      	bgt.n	800457e <_printf_float+0x3b6>
 800457a:	07db      	lsls	r3, r3, #31
 800457c:	d536      	bpl.n	80045ec <_printf_float+0x424>
 800457e:	2301      	movs	r3, #1
 8004580:	4642      	mov	r2, r8
 8004582:	4631      	mov	r1, r6
 8004584:	4628      	mov	r0, r5
 8004586:	47b8      	blx	r7
 8004588:	3001      	adds	r0, #1
 800458a:	f43f ae78 	beq.w	800427e <_printf_float+0xb6>
 800458e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	f43f ae70 	beq.w	800427e <_printf_float+0xb6>
 800459e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045a2:	2200      	movs	r2, #0
 80045a4:	2300      	movs	r3, #0
 80045a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045aa:	f7fc faad 	bl	8000b08 <__aeabi_dcmpeq>
 80045ae:	b9c0      	cbnz	r0, 80045e2 <_printf_float+0x41a>
 80045b0:	4653      	mov	r3, sl
 80045b2:	f108 0201 	add.w	r2, r8, #1
 80045b6:	4631      	mov	r1, r6
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b8      	blx	r7
 80045bc:	3001      	adds	r0, #1
 80045be:	d10c      	bne.n	80045da <_printf_float+0x412>
 80045c0:	e65d      	b.n	800427e <_printf_float+0xb6>
 80045c2:	2301      	movs	r3, #1
 80045c4:	465a      	mov	r2, fp
 80045c6:	4631      	mov	r1, r6
 80045c8:	4628      	mov	r0, r5
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	f43f ae56 	beq.w	800427e <_printf_float+0xb6>
 80045d2:	f108 0801 	add.w	r8, r8, #1
 80045d6:	45d0      	cmp	r8, sl
 80045d8:	dbf3      	blt.n	80045c2 <_printf_float+0x3fa>
 80045da:	464b      	mov	r3, r9
 80045dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80045e0:	e6df      	b.n	80043a2 <_printf_float+0x1da>
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	f104 0b1a 	add.w	fp, r4, #26
 80045ea:	e7f4      	b.n	80045d6 <_printf_float+0x40e>
 80045ec:	2301      	movs	r3, #1
 80045ee:	4642      	mov	r2, r8
 80045f0:	e7e1      	b.n	80045b6 <_printf_float+0x3ee>
 80045f2:	2301      	movs	r3, #1
 80045f4:	464a      	mov	r2, r9
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	f43f ae3e 	beq.w	800427e <_printf_float+0xb6>
 8004602:	f108 0801 	add.w	r8, r8, #1
 8004606:	68e3      	ldr	r3, [r4, #12]
 8004608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800460a:	1a5b      	subs	r3, r3, r1
 800460c:	4543      	cmp	r3, r8
 800460e:	dcf0      	bgt.n	80045f2 <_printf_float+0x42a>
 8004610:	e6fc      	b.n	800440c <_printf_float+0x244>
 8004612:	f04f 0800 	mov.w	r8, #0
 8004616:	f104 0919 	add.w	r9, r4, #25
 800461a:	e7f4      	b.n	8004606 <_printf_float+0x43e>

0800461c <_printf_common>:
 800461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004620:	4616      	mov	r6, r2
 8004622:	4698      	mov	r8, r3
 8004624:	688a      	ldr	r2, [r1, #8]
 8004626:	690b      	ldr	r3, [r1, #16]
 8004628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800462c:	4293      	cmp	r3, r2
 800462e:	bfb8      	it	lt
 8004630:	4613      	movlt	r3, r2
 8004632:	6033      	str	r3, [r6, #0]
 8004634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004638:	4607      	mov	r7, r0
 800463a:	460c      	mov	r4, r1
 800463c:	b10a      	cbz	r2, 8004642 <_printf_common+0x26>
 800463e:	3301      	adds	r3, #1
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	0699      	lsls	r1, r3, #26
 8004646:	bf42      	ittt	mi
 8004648:	6833      	ldrmi	r3, [r6, #0]
 800464a:	3302      	addmi	r3, #2
 800464c:	6033      	strmi	r3, [r6, #0]
 800464e:	6825      	ldr	r5, [r4, #0]
 8004650:	f015 0506 	ands.w	r5, r5, #6
 8004654:	d106      	bne.n	8004664 <_printf_common+0x48>
 8004656:	f104 0a19 	add.w	sl, r4, #25
 800465a:	68e3      	ldr	r3, [r4, #12]
 800465c:	6832      	ldr	r2, [r6, #0]
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	42ab      	cmp	r3, r5
 8004662:	dc26      	bgt.n	80046b2 <_printf_common+0x96>
 8004664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	3b00      	subs	r3, #0
 800466c:	bf18      	it	ne
 800466e:	2301      	movne	r3, #1
 8004670:	0692      	lsls	r2, r2, #26
 8004672:	d42b      	bmi.n	80046cc <_printf_common+0xb0>
 8004674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004678:	4641      	mov	r1, r8
 800467a:	4638      	mov	r0, r7
 800467c:	47c8      	blx	r9
 800467e:	3001      	adds	r0, #1
 8004680:	d01e      	beq.n	80046c0 <_printf_common+0xa4>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	6922      	ldr	r2, [r4, #16]
 8004686:	f003 0306 	and.w	r3, r3, #6
 800468a:	2b04      	cmp	r3, #4
 800468c:	bf02      	ittt	eq
 800468e:	68e5      	ldreq	r5, [r4, #12]
 8004690:	6833      	ldreq	r3, [r6, #0]
 8004692:	1aed      	subeq	r5, r5, r3
 8004694:	68a3      	ldr	r3, [r4, #8]
 8004696:	bf0c      	ite	eq
 8004698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800469c:	2500      	movne	r5, #0
 800469e:	4293      	cmp	r3, r2
 80046a0:	bfc4      	itt	gt
 80046a2:	1a9b      	subgt	r3, r3, r2
 80046a4:	18ed      	addgt	r5, r5, r3
 80046a6:	2600      	movs	r6, #0
 80046a8:	341a      	adds	r4, #26
 80046aa:	42b5      	cmp	r5, r6
 80046ac:	d11a      	bne.n	80046e4 <_printf_common+0xc8>
 80046ae:	2000      	movs	r0, #0
 80046b0:	e008      	b.n	80046c4 <_printf_common+0xa8>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4652      	mov	r2, sl
 80046b6:	4641      	mov	r1, r8
 80046b8:	4638      	mov	r0, r7
 80046ba:	47c8      	blx	r9
 80046bc:	3001      	adds	r0, #1
 80046be:	d103      	bne.n	80046c8 <_printf_common+0xac>
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c8:	3501      	adds	r5, #1
 80046ca:	e7c6      	b.n	800465a <_printf_common+0x3e>
 80046cc:	18e1      	adds	r1, r4, r3
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	2030      	movs	r0, #48	@ 0x30
 80046d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046d6:	4422      	add	r2, r4
 80046d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046e0:	3302      	adds	r3, #2
 80046e2:	e7c7      	b.n	8004674 <_printf_common+0x58>
 80046e4:	2301      	movs	r3, #1
 80046e6:	4622      	mov	r2, r4
 80046e8:	4641      	mov	r1, r8
 80046ea:	4638      	mov	r0, r7
 80046ec:	47c8      	blx	r9
 80046ee:	3001      	adds	r0, #1
 80046f0:	d0e6      	beq.n	80046c0 <_printf_common+0xa4>
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7d9      	b.n	80046aa <_printf_common+0x8e>
	...

080046f8 <_printf_i>:
 80046f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	7e0f      	ldrb	r7, [r1, #24]
 80046fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004700:	2f78      	cmp	r7, #120	@ 0x78
 8004702:	4691      	mov	r9, r2
 8004704:	4680      	mov	r8, r0
 8004706:	460c      	mov	r4, r1
 8004708:	469a      	mov	sl, r3
 800470a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800470e:	d807      	bhi.n	8004720 <_printf_i+0x28>
 8004710:	2f62      	cmp	r7, #98	@ 0x62
 8004712:	d80a      	bhi.n	800472a <_printf_i+0x32>
 8004714:	2f00      	cmp	r7, #0
 8004716:	f000 80d2 	beq.w	80048be <_printf_i+0x1c6>
 800471a:	2f58      	cmp	r7, #88	@ 0x58
 800471c:	f000 80b9 	beq.w	8004892 <_printf_i+0x19a>
 8004720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004728:	e03a      	b.n	80047a0 <_printf_i+0xa8>
 800472a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800472e:	2b15      	cmp	r3, #21
 8004730:	d8f6      	bhi.n	8004720 <_printf_i+0x28>
 8004732:	a101      	add	r1, pc, #4	@ (adr r1, 8004738 <_printf_i+0x40>)
 8004734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004738:	08004791 	.word	0x08004791
 800473c:	080047a5 	.word	0x080047a5
 8004740:	08004721 	.word	0x08004721
 8004744:	08004721 	.word	0x08004721
 8004748:	08004721 	.word	0x08004721
 800474c:	08004721 	.word	0x08004721
 8004750:	080047a5 	.word	0x080047a5
 8004754:	08004721 	.word	0x08004721
 8004758:	08004721 	.word	0x08004721
 800475c:	08004721 	.word	0x08004721
 8004760:	08004721 	.word	0x08004721
 8004764:	080048a5 	.word	0x080048a5
 8004768:	080047cf 	.word	0x080047cf
 800476c:	0800485f 	.word	0x0800485f
 8004770:	08004721 	.word	0x08004721
 8004774:	08004721 	.word	0x08004721
 8004778:	080048c7 	.word	0x080048c7
 800477c:	08004721 	.word	0x08004721
 8004780:	080047cf 	.word	0x080047cf
 8004784:	08004721 	.word	0x08004721
 8004788:	08004721 	.word	0x08004721
 800478c:	08004867 	.word	0x08004867
 8004790:	6833      	ldr	r3, [r6, #0]
 8004792:	1d1a      	adds	r2, r3, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6032      	str	r2, [r6, #0]
 8004798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800479c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047a0:	2301      	movs	r3, #1
 80047a2:	e09d      	b.n	80048e0 <_printf_i+0x1e8>
 80047a4:	6833      	ldr	r3, [r6, #0]
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	1d19      	adds	r1, r3, #4
 80047aa:	6031      	str	r1, [r6, #0]
 80047ac:	0606      	lsls	r6, r0, #24
 80047ae:	d501      	bpl.n	80047b4 <_printf_i+0xbc>
 80047b0:	681d      	ldr	r5, [r3, #0]
 80047b2:	e003      	b.n	80047bc <_printf_i+0xc4>
 80047b4:	0645      	lsls	r5, r0, #25
 80047b6:	d5fb      	bpl.n	80047b0 <_printf_i+0xb8>
 80047b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047bc:	2d00      	cmp	r5, #0
 80047be:	da03      	bge.n	80047c8 <_printf_i+0xd0>
 80047c0:	232d      	movs	r3, #45	@ 0x2d
 80047c2:	426d      	negs	r5, r5
 80047c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047c8:	4859      	ldr	r0, [pc, #356]	@ (8004930 <_printf_i+0x238>)
 80047ca:	230a      	movs	r3, #10
 80047cc:	e011      	b.n	80047f2 <_printf_i+0xfa>
 80047ce:	6821      	ldr	r1, [r4, #0]
 80047d0:	6833      	ldr	r3, [r6, #0]
 80047d2:	0608      	lsls	r0, r1, #24
 80047d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80047d8:	d402      	bmi.n	80047e0 <_printf_i+0xe8>
 80047da:	0649      	lsls	r1, r1, #25
 80047dc:	bf48      	it	mi
 80047de:	b2ad      	uxthmi	r5, r5
 80047e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80047e2:	4853      	ldr	r0, [pc, #332]	@ (8004930 <_printf_i+0x238>)
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	bf14      	ite	ne
 80047e8:	230a      	movne	r3, #10
 80047ea:	2308      	moveq	r3, #8
 80047ec:	2100      	movs	r1, #0
 80047ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047f2:	6866      	ldr	r6, [r4, #4]
 80047f4:	60a6      	str	r6, [r4, #8]
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	bfa2      	ittt	ge
 80047fa:	6821      	ldrge	r1, [r4, #0]
 80047fc:	f021 0104 	bicge.w	r1, r1, #4
 8004800:	6021      	strge	r1, [r4, #0]
 8004802:	b90d      	cbnz	r5, 8004808 <_printf_i+0x110>
 8004804:	2e00      	cmp	r6, #0
 8004806:	d04b      	beq.n	80048a0 <_printf_i+0x1a8>
 8004808:	4616      	mov	r6, r2
 800480a:	fbb5 f1f3 	udiv	r1, r5, r3
 800480e:	fb03 5711 	mls	r7, r3, r1, r5
 8004812:	5dc7      	ldrb	r7, [r0, r7]
 8004814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004818:	462f      	mov	r7, r5
 800481a:	42bb      	cmp	r3, r7
 800481c:	460d      	mov	r5, r1
 800481e:	d9f4      	bls.n	800480a <_printf_i+0x112>
 8004820:	2b08      	cmp	r3, #8
 8004822:	d10b      	bne.n	800483c <_printf_i+0x144>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	07df      	lsls	r7, r3, #31
 8004828:	d508      	bpl.n	800483c <_printf_i+0x144>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	6861      	ldr	r1, [r4, #4]
 800482e:	4299      	cmp	r1, r3
 8004830:	bfde      	ittt	le
 8004832:	2330      	movle	r3, #48	@ 0x30
 8004834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800483c:	1b92      	subs	r2, r2, r6
 800483e:	6122      	str	r2, [r4, #16]
 8004840:	f8cd a000 	str.w	sl, [sp]
 8004844:	464b      	mov	r3, r9
 8004846:	aa03      	add	r2, sp, #12
 8004848:	4621      	mov	r1, r4
 800484a:	4640      	mov	r0, r8
 800484c:	f7ff fee6 	bl	800461c <_printf_common>
 8004850:	3001      	adds	r0, #1
 8004852:	d14a      	bne.n	80048ea <_printf_i+0x1f2>
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	b004      	add	sp, #16
 800485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	f043 0320 	orr.w	r3, r3, #32
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	4833      	ldr	r0, [pc, #204]	@ (8004934 <_printf_i+0x23c>)
 8004868:	2778      	movs	r7, #120	@ 0x78
 800486a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6831      	ldr	r1, [r6, #0]
 8004872:	061f      	lsls	r7, r3, #24
 8004874:	f851 5b04 	ldr.w	r5, [r1], #4
 8004878:	d402      	bmi.n	8004880 <_printf_i+0x188>
 800487a:	065f      	lsls	r7, r3, #25
 800487c:	bf48      	it	mi
 800487e:	b2ad      	uxthmi	r5, r5
 8004880:	6031      	str	r1, [r6, #0]
 8004882:	07d9      	lsls	r1, r3, #31
 8004884:	bf44      	itt	mi
 8004886:	f043 0320 	orrmi.w	r3, r3, #32
 800488a:	6023      	strmi	r3, [r4, #0]
 800488c:	b11d      	cbz	r5, 8004896 <_printf_i+0x19e>
 800488e:	2310      	movs	r3, #16
 8004890:	e7ac      	b.n	80047ec <_printf_i+0xf4>
 8004892:	4827      	ldr	r0, [pc, #156]	@ (8004930 <_printf_i+0x238>)
 8004894:	e7e9      	b.n	800486a <_printf_i+0x172>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	f023 0320 	bic.w	r3, r3, #32
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	e7f6      	b.n	800488e <_printf_i+0x196>
 80048a0:	4616      	mov	r6, r2
 80048a2:	e7bd      	b.n	8004820 <_printf_i+0x128>
 80048a4:	6833      	ldr	r3, [r6, #0]
 80048a6:	6825      	ldr	r5, [r4, #0]
 80048a8:	6961      	ldr	r1, [r4, #20]
 80048aa:	1d18      	adds	r0, r3, #4
 80048ac:	6030      	str	r0, [r6, #0]
 80048ae:	062e      	lsls	r6, r5, #24
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	d501      	bpl.n	80048b8 <_printf_i+0x1c0>
 80048b4:	6019      	str	r1, [r3, #0]
 80048b6:	e002      	b.n	80048be <_printf_i+0x1c6>
 80048b8:	0668      	lsls	r0, r5, #25
 80048ba:	d5fb      	bpl.n	80048b4 <_printf_i+0x1bc>
 80048bc:	8019      	strh	r1, [r3, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	4616      	mov	r6, r2
 80048c4:	e7bc      	b.n	8004840 <_printf_i+0x148>
 80048c6:	6833      	ldr	r3, [r6, #0]
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	6032      	str	r2, [r6, #0]
 80048cc:	681e      	ldr	r6, [r3, #0]
 80048ce:	6862      	ldr	r2, [r4, #4]
 80048d0:	2100      	movs	r1, #0
 80048d2:	4630      	mov	r0, r6
 80048d4:	f7fb fc9c 	bl	8000210 <memchr>
 80048d8:	b108      	cbz	r0, 80048de <_printf_i+0x1e6>
 80048da:	1b80      	subs	r0, r0, r6
 80048dc:	6060      	str	r0, [r4, #4]
 80048de:	6863      	ldr	r3, [r4, #4]
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	2300      	movs	r3, #0
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e8:	e7aa      	b.n	8004840 <_printf_i+0x148>
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	4632      	mov	r2, r6
 80048ee:	4649      	mov	r1, r9
 80048f0:	4640      	mov	r0, r8
 80048f2:	47d0      	blx	sl
 80048f4:	3001      	adds	r0, #1
 80048f6:	d0ad      	beq.n	8004854 <_printf_i+0x15c>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	079b      	lsls	r3, r3, #30
 80048fc:	d413      	bmi.n	8004926 <_printf_i+0x22e>
 80048fe:	68e0      	ldr	r0, [r4, #12]
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	4298      	cmp	r0, r3
 8004904:	bfb8      	it	lt
 8004906:	4618      	movlt	r0, r3
 8004908:	e7a6      	b.n	8004858 <_printf_i+0x160>
 800490a:	2301      	movs	r3, #1
 800490c:	4632      	mov	r2, r6
 800490e:	4649      	mov	r1, r9
 8004910:	4640      	mov	r0, r8
 8004912:	47d0      	blx	sl
 8004914:	3001      	adds	r0, #1
 8004916:	d09d      	beq.n	8004854 <_printf_i+0x15c>
 8004918:	3501      	adds	r5, #1
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	9903      	ldr	r1, [sp, #12]
 800491e:	1a5b      	subs	r3, r3, r1
 8004920:	42ab      	cmp	r3, r5
 8004922:	dcf2      	bgt.n	800490a <_printf_i+0x212>
 8004924:	e7eb      	b.n	80048fe <_printf_i+0x206>
 8004926:	2500      	movs	r5, #0
 8004928:	f104 0619 	add.w	r6, r4, #25
 800492c:	e7f5      	b.n	800491a <_printf_i+0x222>
 800492e:	bf00      	nop
 8004930:	080078a0 	.word	0x080078a0
 8004934:	080078b1 	.word	0x080078b1

08004938 <std>:
 8004938:	2300      	movs	r3, #0
 800493a:	b510      	push	{r4, lr}
 800493c:	4604      	mov	r4, r0
 800493e:	e9c0 3300 	strd	r3, r3, [r0]
 8004942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004946:	6083      	str	r3, [r0, #8]
 8004948:	8181      	strh	r1, [r0, #12]
 800494a:	6643      	str	r3, [r0, #100]	@ 0x64
 800494c:	81c2      	strh	r2, [r0, #14]
 800494e:	6183      	str	r3, [r0, #24]
 8004950:	4619      	mov	r1, r3
 8004952:	2208      	movs	r2, #8
 8004954:	305c      	adds	r0, #92	@ 0x5c
 8004956:	f000 f952 	bl	8004bfe <memset>
 800495a:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <std+0x58>)
 800495c:	6263      	str	r3, [r4, #36]	@ 0x24
 800495e:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <std+0x5c>)
 8004960:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004962:	4b0d      	ldr	r3, [pc, #52]	@ (8004998 <std+0x60>)
 8004964:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004966:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <std+0x64>)
 8004968:	6323      	str	r3, [r4, #48]	@ 0x30
 800496a:	4b0d      	ldr	r3, [pc, #52]	@ (80049a0 <std+0x68>)
 800496c:	6224      	str	r4, [r4, #32]
 800496e:	429c      	cmp	r4, r3
 8004970:	d006      	beq.n	8004980 <std+0x48>
 8004972:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004976:	4294      	cmp	r4, r2
 8004978:	d002      	beq.n	8004980 <std+0x48>
 800497a:	33d0      	adds	r3, #208	@ 0xd0
 800497c:	429c      	cmp	r4, r3
 800497e:	d105      	bne.n	800498c <std+0x54>
 8004980:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004988:	f000 b9c8 	b.w	8004d1c <__retarget_lock_init_recursive>
 800498c:	bd10      	pop	{r4, pc}
 800498e:	bf00      	nop
 8004990:	08004b75 	.word	0x08004b75
 8004994:	08004b9b 	.word	0x08004b9b
 8004998:	08004bd3 	.word	0x08004bd3
 800499c:	08004bf7 	.word	0x08004bf7
 80049a0:	2000030c 	.word	0x2000030c

080049a4 <stdio_exit_handler>:
 80049a4:	4a02      	ldr	r2, [pc, #8]	@ (80049b0 <stdio_exit_handler+0xc>)
 80049a6:	4903      	ldr	r1, [pc, #12]	@ (80049b4 <stdio_exit_handler+0x10>)
 80049a8:	4803      	ldr	r0, [pc, #12]	@ (80049b8 <stdio_exit_handler+0x14>)
 80049aa:	f000 b869 	b.w	8004a80 <_fwalk_sglue>
 80049ae:	bf00      	nop
 80049b0:	2000000c 	.word	0x2000000c
 80049b4:	08006f35 	.word	0x08006f35
 80049b8:	2000001c 	.word	0x2000001c

080049bc <cleanup_stdio>:
 80049bc:	6841      	ldr	r1, [r0, #4]
 80049be:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <cleanup_stdio+0x34>)
 80049c0:	4299      	cmp	r1, r3
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
 80049c6:	d001      	beq.n	80049cc <cleanup_stdio+0x10>
 80049c8:	f002 fab4 	bl	8006f34 <_fflush_r>
 80049cc:	68a1      	ldr	r1, [r4, #8]
 80049ce:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <cleanup_stdio+0x38>)
 80049d0:	4299      	cmp	r1, r3
 80049d2:	d002      	beq.n	80049da <cleanup_stdio+0x1e>
 80049d4:	4620      	mov	r0, r4
 80049d6:	f002 faad 	bl	8006f34 <_fflush_r>
 80049da:	68e1      	ldr	r1, [r4, #12]
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <cleanup_stdio+0x3c>)
 80049de:	4299      	cmp	r1, r3
 80049e0:	d004      	beq.n	80049ec <cleanup_stdio+0x30>
 80049e2:	4620      	mov	r0, r4
 80049e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e8:	f002 baa4 	b.w	8006f34 <_fflush_r>
 80049ec:	bd10      	pop	{r4, pc}
 80049ee:	bf00      	nop
 80049f0:	2000030c 	.word	0x2000030c
 80049f4:	20000374 	.word	0x20000374
 80049f8:	200003dc 	.word	0x200003dc

080049fc <global_stdio_init.part.0>:
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <global_stdio_init.part.0+0x30>)
 8004a00:	4c0b      	ldr	r4, [pc, #44]	@ (8004a30 <global_stdio_init.part.0+0x34>)
 8004a02:	4a0c      	ldr	r2, [pc, #48]	@ (8004a34 <global_stdio_init.part.0+0x38>)
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	4620      	mov	r0, r4
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2104      	movs	r1, #4
 8004a0c:	f7ff ff94 	bl	8004938 <std>
 8004a10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a14:	2201      	movs	r2, #1
 8004a16:	2109      	movs	r1, #9
 8004a18:	f7ff ff8e 	bl	8004938 <std>
 8004a1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a20:	2202      	movs	r2, #2
 8004a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a26:	2112      	movs	r1, #18
 8004a28:	f7ff bf86 	b.w	8004938 <std>
 8004a2c:	20000444 	.word	0x20000444
 8004a30:	2000030c 	.word	0x2000030c
 8004a34:	080049a5 	.word	0x080049a5

08004a38 <__sfp_lock_acquire>:
 8004a38:	4801      	ldr	r0, [pc, #4]	@ (8004a40 <__sfp_lock_acquire+0x8>)
 8004a3a:	f000 b970 	b.w	8004d1e <__retarget_lock_acquire_recursive>
 8004a3e:	bf00      	nop
 8004a40:	2000044d 	.word	0x2000044d

08004a44 <__sfp_lock_release>:
 8004a44:	4801      	ldr	r0, [pc, #4]	@ (8004a4c <__sfp_lock_release+0x8>)
 8004a46:	f000 b96b 	b.w	8004d20 <__retarget_lock_release_recursive>
 8004a4a:	bf00      	nop
 8004a4c:	2000044d 	.word	0x2000044d

08004a50 <__sinit>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	f7ff fff0 	bl	8004a38 <__sfp_lock_acquire>
 8004a58:	6a23      	ldr	r3, [r4, #32]
 8004a5a:	b11b      	cbz	r3, 8004a64 <__sinit+0x14>
 8004a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a60:	f7ff bff0 	b.w	8004a44 <__sfp_lock_release>
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <__sinit+0x28>)
 8004a66:	6223      	str	r3, [r4, #32]
 8004a68:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <__sinit+0x2c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f5      	bne.n	8004a5c <__sinit+0xc>
 8004a70:	f7ff ffc4 	bl	80049fc <global_stdio_init.part.0>
 8004a74:	e7f2      	b.n	8004a5c <__sinit+0xc>
 8004a76:	bf00      	nop
 8004a78:	080049bd 	.word	0x080049bd
 8004a7c:	20000444 	.word	0x20000444

08004a80 <_fwalk_sglue>:
 8004a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a84:	4607      	mov	r7, r0
 8004a86:	4688      	mov	r8, r1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	2600      	movs	r6, #0
 8004a8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a90:	f1b9 0901 	subs.w	r9, r9, #1
 8004a94:	d505      	bpl.n	8004aa2 <_fwalk_sglue+0x22>
 8004a96:	6824      	ldr	r4, [r4, #0]
 8004a98:	2c00      	cmp	r4, #0
 8004a9a:	d1f7      	bne.n	8004a8c <_fwalk_sglue+0xc>
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aa2:	89ab      	ldrh	r3, [r5, #12]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d907      	bls.n	8004ab8 <_fwalk_sglue+0x38>
 8004aa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aac:	3301      	adds	r3, #1
 8004aae:	d003      	beq.n	8004ab8 <_fwalk_sglue+0x38>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	47c0      	blx	r8
 8004ab6:	4306      	orrs	r6, r0
 8004ab8:	3568      	adds	r5, #104	@ 0x68
 8004aba:	e7e9      	b.n	8004a90 <_fwalk_sglue+0x10>

08004abc <iprintf>:
 8004abc:	b40f      	push	{r0, r1, r2, r3}
 8004abe:	b507      	push	{r0, r1, r2, lr}
 8004ac0:	4906      	ldr	r1, [pc, #24]	@ (8004adc <iprintf+0x20>)
 8004ac2:	ab04      	add	r3, sp, #16
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aca:	6881      	ldr	r1, [r0, #8]
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	f001 ff47 	bl	8006960 <_vfiprintf_r>
 8004ad2:	b003      	add	sp, #12
 8004ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad8:	b004      	add	sp, #16
 8004ada:	4770      	bx	lr
 8004adc:	20000018 	.word	0x20000018

08004ae0 <siprintf>:
 8004ae0:	b40e      	push	{r1, r2, r3}
 8004ae2:	b500      	push	{lr}
 8004ae4:	b09c      	sub	sp, #112	@ 0x70
 8004ae6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ae8:	9002      	str	r0, [sp, #8]
 8004aea:	9006      	str	r0, [sp, #24]
 8004aec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004af0:	4809      	ldr	r0, [pc, #36]	@ (8004b18 <siprintf+0x38>)
 8004af2:	9107      	str	r1, [sp, #28]
 8004af4:	9104      	str	r1, [sp, #16]
 8004af6:	4909      	ldr	r1, [pc, #36]	@ (8004b1c <siprintf+0x3c>)
 8004af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004afc:	9105      	str	r1, [sp, #20]
 8004afe:	6800      	ldr	r0, [r0, #0]
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	a902      	add	r1, sp, #8
 8004b04:	f001 fc3a 	bl	800637c <_svfiprintf_r>
 8004b08:	9b02      	ldr	r3, [sp, #8]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	b01c      	add	sp, #112	@ 0x70
 8004b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b14:	b003      	add	sp, #12
 8004b16:	4770      	bx	lr
 8004b18:	20000018 	.word	0x20000018
 8004b1c:	ffff0208 	.word	0xffff0208

08004b20 <siscanf>:
 8004b20:	b40e      	push	{r1, r2, r3}
 8004b22:	b530      	push	{r4, r5, lr}
 8004b24:	b09c      	sub	sp, #112	@ 0x70
 8004b26:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004b28:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004b2c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004b30:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004b34:	9002      	str	r0, [sp, #8]
 8004b36:	9006      	str	r0, [sp, #24]
 8004b38:	f7fb fbba 	bl	80002b0 <strlen>
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <siscanf+0x4c>)
 8004b3e:	9003      	str	r0, [sp, #12]
 8004b40:	9007      	str	r0, [sp, #28]
 8004b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b44:	480a      	ldr	r0, [pc, #40]	@ (8004b70 <siscanf+0x50>)
 8004b46:	9401      	str	r4, [sp, #4]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b4c:	9314      	str	r3, [sp, #80]	@ 0x50
 8004b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b56:	462a      	mov	r2, r5
 8004b58:	4623      	mov	r3, r4
 8004b5a:	a902      	add	r1, sp, #8
 8004b5c:	6800      	ldr	r0, [r0, #0]
 8004b5e:	f001 fd61 	bl	8006624 <__ssvfiscanf_r>
 8004b62:	b01c      	add	sp, #112	@ 0x70
 8004b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b68:	b003      	add	sp, #12
 8004b6a:	4770      	bx	lr
 8004b6c:	08004b97 	.word	0x08004b97
 8004b70:	20000018 	.word	0x20000018

08004b74 <__sread>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	460c      	mov	r4, r1
 8004b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7c:	f000 f880 	bl	8004c80 <_read_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	bfab      	itete	ge
 8004b84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b86:	89a3      	ldrhlt	r3, [r4, #12]
 8004b88:	181b      	addge	r3, r3, r0
 8004b8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b8e:	bfac      	ite	ge
 8004b90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b92:	81a3      	strhlt	r3, [r4, #12]
 8004b94:	bd10      	pop	{r4, pc}

08004b96 <__seofread>:
 8004b96:	2000      	movs	r0, #0
 8004b98:	4770      	bx	lr

08004b9a <__swrite>:
 8004b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9e:	461f      	mov	r7, r3
 8004ba0:	898b      	ldrh	r3, [r1, #12]
 8004ba2:	05db      	lsls	r3, r3, #23
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	4616      	mov	r6, r2
 8004baa:	d505      	bpl.n	8004bb8 <__swrite+0x1e>
 8004bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f000 f852 	bl	8004c5c <_lseek_r>
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	4628      	mov	r0, r5
 8004bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bce:	f000 b869 	b.w	8004ca4 <_write_r>

08004bd2 <__sseek>:
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bda:	f000 f83f 	bl	8004c5c <_lseek_r>
 8004bde:	1c43      	adds	r3, r0, #1
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	bf15      	itete	ne
 8004be4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004be6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004bea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004bee:	81a3      	strheq	r3, [r4, #12]
 8004bf0:	bf18      	it	ne
 8004bf2:	81a3      	strhne	r3, [r4, #12]
 8004bf4:	bd10      	pop	{r4, pc}

08004bf6 <__sclose>:
 8004bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfa:	f000 b81f 	b.w	8004c3c <_close_r>

08004bfe <memset>:
 8004bfe:	4402      	add	r2, r0
 8004c00:	4603      	mov	r3, r0
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d100      	bne.n	8004c08 <memset+0xa>
 8004c06:	4770      	bx	lr
 8004c08:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0c:	e7f9      	b.n	8004c02 <memset+0x4>

08004c0e <strncmp>:
 8004c0e:	b510      	push	{r4, lr}
 8004c10:	b16a      	cbz	r2, 8004c2e <strncmp+0x20>
 8004c12:	3901      	subs	r1, #1
 8004c14:	1884      	adds	r4, r0, r2
 8004c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d103      	bne.n	8004c2a <strncmp+0x1c>
 8004c22:	42a0      	cmp	r0, r4
 8004c24:	d001      	beq.n	8004c2a <strncmp+0x1c>
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	d1f5      	bne.n	8004c16 <strncmp+0x8>
 8004c2a:	1ad0      	subs	r0, r2, r3
 8004c2c:	bd10      	pop	{r4, pc}
 8004c2e:	4610      	mov	r0, r2
 8004c30:	e7fc      	b.n	8004c2c <strncmp+0x1e>
	...

08004c34 <_localeconv_r>:
 8004c34:	4800      	ldr	r0, [pc, #0]	@ (8004c38 <_localeconv_r+0x4>)
 8004c36:	4770      	bx	lr
 8004c38:	20000158 	.word	0x20000158

08004c3c <_close_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4d06      	ldr	r5, [pc, #24]	@ (8004c58 <_close_r+0x1c>)
 8004c40:	2300      	movs	r3, #0
 8004c42:	4604      	mov	r4, r0
 8004c44:	4608      	mov	r0, r1
 8004c46:	602b      	str	r3, [r5, #0]
 8004c48:	f7fc ff28 	bl	8001a9c <_close>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_close_r+0x1a>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_close_r+0x1a>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	20000448 	.word	0x20000448

08004c5c <_lseek_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4d07      	ldr	r5, [pc, #28]	@ (8004c7c <_lseek_r+0x20>)
 8004c60:	4604      	mov	r4, r0
 8004c62:	4608      	mov	r0, r1
 8004c64:	4611      	mov	r1, r2
 8004c66:	2200      	movs	r2, #0
 8004c68:	602a      	str	r2, [r5, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fc ff3d 	bl	8001aea <_lseek>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_lseek_r+0x1e>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_lseek_r+0x1e>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20000448 	.word	0x20000448

08004c80 <_read_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	4d07      	ldr	r5, [pc, #28]	@ (8004ca0 <_read_r+0x20>)
 8004c84:	4604      	mov	r4, r0
 8004c86:	4608      	mov	r0, r1
 8004c88:	4611      	mov	r1, r2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	602a      	str	r2, [r5, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f7fc fecb 	bl	8001a2a <_read>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_read_r+0x1e>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_read_r+0x1e>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	20000448 	.word	0x20000448

08004ca4 <_write_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4d07      	ldr	r5, [pc, #28]	@ (8004cc4 <_write_r+0x20>)
 8004ca8:	4604      	mov	r4, r0
 8004caa:	4608      	mov	r0, r1
 8004cac:	4611      	mov	r1, r2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	602a      	str	r2, [r5, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f7fc fed6 	bl	8001a64 <_write>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_write_r+0x1e>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_write_r+0x1e>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000448 	.word	0x20000448

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	@ (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000018 	.word	0x20000018

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f002 fce2 	bl	80076b0 <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08007c24 	.word	0x08007c24
 8004d10:	08007c24 	.word	0x08007c24
 8004d14:	08007c24 	.word	0x08007c24
 8004d18:	08007c28 	.word	0x08007c28

08004d1c <__retarget_lock_init_recursive>:
 8004d1c:	4770      	bx	lr

08004d1e <__retarget_lock_acquire_recursive>:
 8004d1e:	4770      	bx	lr

08004d20 <__retarget_lock_release_recursive>:
 8004d20:	4770      	bx	lr

08004d22 <quorem>:
 8004d22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d26:	6903      	ldr	r3, [r0, #16]
 8004d28:	690c      	ldr	r4, [r1, #16]
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	4607      	mov	r7, r0
 8004d2e:	db7e      	blt.n	8004e2e <quorem+0x10c>
 8004d30:	3c01      	subs	r4, #1
 8004d32:	f101 0814 	add.w	r8, r1, #20
 8004d36:	00a3      	lsls	r3, r4, #2
 8004d38:	f100 0514 	add.w	r5, r0, #20
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d58:	d32e      	bcc.n	8004db8 <quorem+0x96>
 8004d5a:	f04f 0a00 	mov.w	sl, #0
 8004d5e:	46c4      	mov	ip, r8
 8004d60:	46ae      	mov	lr, r5
 8004d62:	46d3      	mov	fp, sl
 8004d64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d68:	b298      	uxth	r0, r3
 8004d6a:	fb06 a000 	mla	r0, r6, r0, sl
 8004d6e:	0c02      	lsrs	r2, r0, #16
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	fb06 2303 	mla	r3, r6, r3, r2
 8004d76:	f8de 2000 	ldr.w	r2, [lr]
 8004d7a:	b280      	uxth	r0, r0
 8004d7c:	b292      	uxth	r2, r2
 8004d7e:	1a12      	subs	r2, r2, r0
 8004d80:	445a      	add	r2, fp
 8004d82:	f8de 0000 	ldr.w	r0, [lr]
 8004d86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004d90:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004d94:	b292      	uxth	r2, r2
 8004d96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d9a:	45e1      	cmp	r9, ip
 8004d9c:	f84e 2b04 	str.w	r2, [lr], #4
 8004da0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004da4:	d2de      	bcs.n	8004d64 <quorem+0x42>
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	58eb      	ldr	r3, [r5, r3]
 8004daa:	b92b      	cbnz	r3, 8004db8 <quorem+0x96>
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	3b04      	subs	r3, #4
 8004db0:	429d      	cmp	r5, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	d32f      	bcc.n	8004e16 <quorem+0xf4>
 8004db6:	613c      	str	r4, [r7, #16]
 8004db8:	4638      	mov	r0, r7
 8004dba:	f001 f97b 	bl	80060b4 <__mcmp>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	db25      	blt.n	8004e0e <quorem+0xec>
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004dca:	f8d1 c000 	ldr.w	ip, [r1]
 8004dce:	fa1f fe82 	uxth.w	lr, r2
 8004dd2:	fa1f f38c 	uxth.w	r3, ip
 8004dd6:	eba3 030e 	sub.w	r3, r3, lr
 8004dda:	4403      	add	r3, r0
 8004ddc:	0c12      	lsrs	r2, r2, #16
 8004dde:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004de2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dec:	45c1      	cmp	r9, r8
 8004dee:	f841 3b04 	str.w	r3, [r1], #4
 8004df2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004df6:	d2e6      	bcs.n	8004dc6 <quorem+0xa4>
 8004df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e00:	b922      	cbnz	r2, 8004e0c <quorem+0xea>
 8004e02:	3b04      	subs	r3, #4
 8004e04:	429d      	cmp	r5, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	d30b      	bcc.n	8004e22 <quorem+0x100>
 8004e0a:	613c      	str	r4, [r7, #16]
 8004e0c:	3601      	adds	r6, #1
 8004e0e:	4630      	mov	r0, r6
 8004e10:	b003      	add	sp, #12
 8004e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	3b04      	subs	r3, #4
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	d1cb      	bne.n	8004db6 <quorem+0x94>
 8004e1e:	3c01      	subs	r4, #1
 8004e20:	e7c6      	b.n	8004db0 <quorem+0x8e>
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	3b04      	subs	r3, #4
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d1ef      	bne.n	8004e0a <quorem+0xe8>
 8004e2a:	3c01      	subs	r4, #1
 8004e2c:	e7ea      	b.n	8004e04 <quorem+0xe2>
 8004e2e:	2000      	movs	r0, #0
 8004e30:	e7ee      	b.n	8004e10 <quorem+0xee>
 8004e32:	0000      	movs	r0, r0
 8004e34:	0000      	movs	r0, r0
	...

08004e38 <_dtoa_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	69c7      	ldr	r7, [r0, #28]
 8004e3e:	b099      	sub	sp, #100	@ 0x64
 8004e40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004e44:	ec55 4b10 	vmov	r4, r5, d0
 8004e48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004e4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e4c:	4683      	mov	fp, r0
 8004e4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e52:	b97f      	cbnz	r7, 8004e74 <_dtoa_r+0x3c>
 8004e54:	2010      	movs	r0, #16
 8004e56:	f000 fdfd 	bl	8005a54 <malloc>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004e60:	b920      	cbnz	r0, 8004e6c <_dtoa_r+0x34>
 8004e62:	4ba7      	ldr	r3, [pc, #668]	@ (8005100 <_dtoa_r+0x2c8>)
 8004e64:	21ef      	movs	r1, #239	@ 0xef
 8004e66:	48a7      	ldr	r0, [pc, #668]	@ (8005104 <_dtoa_r+0x2cc>)
 8004e68:	f002 f9cc 	bl	8007204 <__assert_func>
 8004e6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e70:	6007      	str	r7, [r0, #0]
 8004e72:	60c7      	str	r7, [r0, #12]
 8004e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	b159      	cbz	r1, 8004e94 <_dtoa_r+0x5c>
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	604a      	str	r2, [r1, #4]
 8004e80:	2301      	movs	r3, #1
 8004e82:	4093      	lsls	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
 8004e86:	4658      	mov	r0, fp
 8004e88:	f000 feda 	bl	8005c40 <_Bfree>
 8004e8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	1e2b      	subs	r3, r5, #0
 8004e96:	bfb9      	ittee	lt
 8004e98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004e9c:	9303      	strlt	r3, [sp, #12]
 8004e9e:	2300      	movge	r3, #0
 8004ea0:	6033      	strge	r3, [r6, #0]
 8004ea2:	9f03      	ldr	r7, [sp, #12]
 8004ea4:	4b98      	ldr	r3, [pc, #608]	@ (8005108 <_dtoa_r+0x2d0>)
 8004ea6:	bfbc      	itt	lt
 8004ea8:	2201      	movlt	r2, #1
 8004eaa:	6032      	strlt	r2, [r6, #0]
 8004eac:	43bb      	bics	r3, r7
 8004eae:	d112      	bne.n	8004ed6 <_dtoa_r+0x9e>
 8004eb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004eb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004ebc:	4323      	orrs	r3, r4
 8004ebe:	f000 854d 	beq.w	800595c <_dtoa_r+0xb24>
 8004ec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ec4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800511c <_dtoa_r+0x2e4>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 854f 	beq.w	800596c <_dtoa_r+0xb34>
 8004ece:	f10a 0303 	add.w	r3, sl, #3
 8004ed2:	f000 bd49 	b.w	8005968 <_dtoa_r+0xb30>
 8004ed6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004eda:	2200      	movs	r2, #0
 8004edc:	ec51 0b17 	vmov	r0, r1, d7
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004ee6:	f7fb fe0f 	bl	8000b08 <__aeabi_dcmpeq>
 8004eea:	4680      	mov	r8, r0
 8004eec:	b158      	cbz	r0, 8004f06 <_dtoa_r+0xce>
 8004eee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ef6:	b113      	cbz	r3, 8004efe <_dtoa_r+0xc6>
 8004ef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004efa:	4b84      	ldr	r3, [pc, #528]	@ (800510c <_dtoa_r+0x2d4>)
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005120 <_dtoa_r+0x2e8>
 8004f02:	f000 bd33 	b.w	800596c <_dtoa_r+0xb34>
 8004f06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004f0a:	aa16      	add	r2, sp, #88	@ 0x58
 8004f0c:	a917      	add	r1, sp, #92	@ 0x5c
 8004f0e:	4658      	mov	r0, fp
 8004f10:	f001 f980 	bl	8006214 <__d2b>
 8004f14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004f18:	4681      	mov	r9, r0
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	d077      	beq.n	800500e <_dtoa_r+0x1d6>
 8004f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f38:	4619      	mov	r1, r3
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4b74      	ldr	r3, [pc, #464]	@ (8005110 <_dtoa_r+0x2d8>)
 8004f3e:	f7fb f9c3 	bl	80002c8 <__aeabi_dsub>
 8004f42:	a369      	add	r3, pc, #420	@ (adr r3, 80050e8 <_dtoa_r+0x2b0>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f7fb fb76 	bl	8000638 <__aeabi_dmul>
 8004f4c:	a368      	add	r3, pc, #416	@ (adr r3, 80050f0 <_dtoa_r+0x2b8>)
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f7fb f9bb 	bl	80002cc <__adddf3>
 8004f56:	4604      	mov	r4, r0
 8004f58:	4630      	mov	r0, r6
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	f7fb fb02 	bl	8000564 <__aeabi_i2d>
 8004f60:	a365      	add	r3, pc, #404	@ (adr r3, 80050f8 <_dtoa_r+0x2c0>)
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f7fb fb67 	bl	8000638 <__aeabi_dmul>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4620      	mov	r0, r4
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7fb f9ab 	bl	80002cc <__adddf3>
 8004f76:	4604      	mov	r4, r0
 8004f78:	460d      	mov	r5, r1
 8004f7a:	f7fb fe0d 	bl	8000b98 <__aeabi_d2iz>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	4607      	mov	r7, r0
 8004f82:	2300      	movs	r3, #0
 8004f84:	4620      	mov	r0, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	f7fb fdc8 	bl	8000b1c <__aeabi_dcmplt>
 8004f8c:	b140      	cbz	r0, 8004fa0 <_dtoa_r+0x168>
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f7fb fae8 	bl	8000564 <__aeabi_i2d>
 8004f94:	4622      	mov	r2, r4
 8004f96:	462b      	mov	r3, r5
 8004f98:	f7fb fdb6 	bl	8000b08 <__aeabi_dcmpeq>
 8004f9c:	b900      	cbnz	r0, 8004fa0 <_dtoa_r+0x168>
 8004f9e:	3f01      	subs	r7, #1
 8004fa0:	2f16      	cmp	r7, #22
 8004fa2:	d851      	bhi.n	8005048 <_dtoa_r+0x210>
 8004fa4:	4b5b      	ldr	r3, [pc, #364]	@ (8005114 <_dtoa_r+0x2dc>)
 8004fa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fb2:	f7fb fdb3 	bl	8000b1c <__aeabi_dcmplt>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d048      	beq.n	800504c <_dtoa_r+0x214>
 8004fba:	3f01      	subs	r7, #1
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9312      	str	r3, [sp, #72]	@ 0x48
 8004fc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004fc2:	1b9b      	subs	r3, r3, r6
 8004fc4:	1e5a      	subs	r2, r3, #1
 8004fc6:	bf44      	itt	mi
 8004fc8:	f1c3 0801 	rsbmi	r8, r3, #1
 8004fcc:	2300      	movmi	r3, #0
 8004fce:	9208      	str	r2, [sp, #32]
 8004fd0:	bf54      	ite	pl
 8004fd2:	f04f 0800 	movpl.w	r8, #0
 8004fd6:	9308      	strmi	r3, [sp, #32]
 8004fd8:	2f00      	cmp	r7, #0
 8004fda:	db39      	blt.n	8005050 <_dtoa_r+0x218>
 8004fdc:	9b08      	ldr	r3, [sp, #32]
 8004fde:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004fe0:	443b      	add	r3, r7
 8004fe2:	9308      	str	r3, [sp, #32]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	d864      	bhi.n	80050b8 <_dtoa_r+0x280>
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	bfc4      	itt	gt
 8004ff2:	3b04      	subgt	r3, #4
 8004ff4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff8:	f1a3 0302 	sub.w	r3, r3, #2
 8004ffc:	bfcc      	ite	gt
 8004ffe:	2400      	movgt	r4, #0
 8005000:	2401      	movle	r4, #1
 8005002:	2b03      	cmp	r3, #3
 8005004:	d863      	bhi.n	80050ce <_dtoa_r+0x296>
 8005006:	e8df f003 	tbb	[pc, r3]
 800500a:	372a      	.short	0x372a
 800500c:	5535      	.short	0x5535
 800500e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005012:	441e      	add	r6, r3
 8005014:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005018:	2b20      	cmp	r3, #32
 800501a:	bfc1      	itttt	gt
 800501c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005020:	409f      	lslgt	r7, r3
 8005022:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005026:	fa24 f303 	lsrgt.w	r3, r4, r3
 800502a:	bfd6      	itet	le
 800502c:	f1c3 0320 	rsble	r3, r3, #32
 8005030:	ea47 0003 	orrgt.w	r0, r7, r3
 8005034:	fa04 f003 	lslle.w	r0, r4, r3
 8005038:	f7fb fa84 	bl	8000544 <__aeabi_ui2d>
 800503c:	2201      	movs	r2, #1
 800503e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005042:	3e01      	subs	r6, #1
 8005044:	9214      	str	r2, [sp, #80]	@ 0x50
 8005046:	e777      	b.n	8004f38 <_dtoa_r+0x100>
 8005048:	2301      	movs	r3, #1
 800504a:	e7b8      	b.n	8004fbe <_dtoa_r+0x186>
 800504c:	9012      	str	r0, [sp, #72]	@ 0x48
 800504e:	e7b7      	b.n	8004fc0 <_dtoa_r+0x188>
 8005050:	427b      	negs	r3, r7
 8005052:	930a      	str	r3, [sp, #40]	@ 0x28
 8005054:	2300      	movs	r3, #0
 8005056:	eba8 0807 	sub.w	r8, r8, r7
 800505a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800505c:	e7c4      	b.n	8004fe8 <_dtoa_r+0x1b0>
 800505e:	2300      	movs	r3, #0
 8005060:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005064:	2b00      	cmp	r3, #0
 8005066:	dc35      	bgt.n	80050d4 <_dtoa_r+0x29c>
 8005068:	2301      	movs	r3, #1
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	9307      	str	r3, [sp, #28]
 800506e:	461a      	mov	r2, r3
 8005070:	920e      	str	r2, [sp, #56]	@ 0x38
 8005072:	e00b      	b.n	800508c <_dtoa_r+0x254>
 8005074:	2301      	movs	r3, #1
 8005076:	e7f3      	b.n	8005060 <_dtoa_r+0x228>
 8005078:	2300      	movs	r3, #0
 800507a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800507c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	bfb8      	it	lt
 800508a:	2301      	movlt	r3, #1
 800508c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005090:	2100      	movs	r1, #0
 8005092:	2204      	movs	r2, #4
 8005094:	f102 0514 	add.w	r5, r2, #20
 8005098:	429d      	cmp	r5, r3
 800509a:	d91f      	bls.n	80050dc <_dtoa_r+0x2a4>
 800509c:	6041      	str	r1, [r0, #4]
 800509e:	4658      	mov	r0, fp
 80050a0:	f000 fd8e 	bl	8005bc0 <_Balloc>
 80050a4:	4682      	mov	sl, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d13c      	bne.n	8005124 <_dtoa_r+0x2ec>
 80050aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <_dtoa_r+0x2e0>)
 80050ac:	4602      	mov	r2, r0
 80050ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80050b2:	e6d8      	b.n	8004e66 <_dtoa_r+0x2e>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e7e0      	b.n	800507a <_dtoa_r+0x242>
 80050b8:	2401      	movs	r4, #1
 80050ba:	2300      	movs	r3, #0
 80050bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	9307      	str	r3, [sp, #28]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2312      	movs	r3, #18
 80050cc:	e7d0      	b.n	8005070 <_dtoa_r+0x238>
 80050ce:	2301      	movs	r3, #1
 80050d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050d2:	e7f5      	b.n	80050c0 <_dtoa_r+0x288>
 80050d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	9307      	str	r3, [sp, #28]
 80050da:	e7d7      	b.n	800508c <_dtoa_r+0x254>
 80050dc:	3101      	adds	r1, #1
 80050de:	0052      	lsls	r2, r2, #1
 80050e0:	e7d8      	b.n	8005094 <_dtoa_r+0x25c>
 80050e2:	bf00      	nop
 80050e4:	f3af 8000 	nop.w
 80050e8:	636f4361 	.word	0x636f4361
 80050ec:	3fd287a7 	.word	0x3fd287a7
 80050f0:	8b60c8b3 	.word	0x8b60c8b3
 80050f4:	3fc68a28 	.word	0x3fc68a28
 80050f8:	509f79fb 	.word	0x509f79fb
 80050fc:	3fd34413 	.word	0x3fd34413
 8005100:	080078cf 	.word	0x080078cf
 8005104:	080078e6 	.word	0x080078e6
 8005108:	7ff00000 	.word	0x7ff00000
 800510c:	08007ad0 	.word	0x08007ad0
 8005110:	3ff80000 	.word	0x3ff80000
 8005114:	080079e0 	.word	0x080079e0
 8005118:	0800793e 	.word	0x0800793e
 800511c:	080078cb 	.word	0x080078cb
 8005120:	08007acf 	.word	0x08007acf
 8005124:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005128:	6018      	str	r0, [r3, #0]
 800512a:	9b07      	ldr	r3, [sp, #28]
 800512c:	2b0e      	cmp	r3, #14
 800512e:	f200 80a4 	bhi.w	800527a <_dtoa_r+0x442>
 8005132:	2c00      	cmp	r4, #0
 8005134:	f000 80a1 	beq.w	800527a <_dtoa_r+0x442>
 8005138:	2f00      	cmp	r7, #0
 800513a:	dd33      	ble.n	80051a4 <_dtoa_r+0x36c>
 800513c:	4bad      	ldr	r3, [pc, #692]	@ (80053f4 <_dtoa_r+0x5bc>)
 800513e:	f007 020f 	and.w	r2, r7, #15
 8005142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005146:	ed93 7b00 	vldr	d7, [r3]
 800514a:	05f8      	lsls	r0, r7, #23
 800514c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005150:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005154:	d516      	bpl.n	8005184 <_dtoa_r+0x34c>
 8005156:	4ba8      	ldr	r3, [pc, #672]	@ (80053f8 <_dtoa_r+0x5c0>)
 8005158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800515c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005160:	f7fb fb94 	bl	800088c <__aeabi_ddiv>
 8005164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005168:	f004 040f 	and.w	r4, r4, #15
 800516c:	2603      	movs	r6, #3
 800516e:	4da2      	ldr	r5, [pc, #648]	@ (80053f8 <_dtoa_r+0x5c0>)
 8005170:	b954      	cbnz	r4, 8005188 <_dtoa_r+0x350>
 8005172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800517a:	f7fb fb87 	bl	800088c <__aeabi_ddiv>
 800517e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005182:	e028      	b.n	80051d6 <_dtoa_r+0x39e>
 8005184:	2602      	movs	r6, #2
 8005186:	e7f2      	b.n	800516e <_dtoa_r+0x336>
 8005188:	07e1      	lsls	r1, r4, #31
 800518a:	d508      	bpl.n	800519e <_dtoa_r+0x366>
 800518c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005190:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005194:	f7fb fa50 	bl	8000638 <__aeabi_dmul>
 8005198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800519c:	3601      	adds	r6, #1
 800519e:	1064      	asrs	r4, r4, #1
 80051a0:	3508      	adds	r5, #8
 80051a2:	e7e5      	b.n	8005170 <_dtoa_r+0x338>
 80051a4:	f000 80d2 	beq.w	800534c <_dtoa_r+0x514>
 80051a8:	427c      	negs	r4, r7
 80051aa:	4b92      	ldr	r3, [pc, #584]	@ (80053f4 <_dtoa_r+0x5bc>)
 80051ac:	4d92      	ldr	r5, [pc, #584]	@ (80053f8 <_dtoa_r+0x5c0>)
 80051ae:	f004 020f 	and.w	r2, r4, #15
 80051b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051be:	f7fb fa3b 	bl	8000638 <__aeabi_dmul>
 80051c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c6:	1124      	asrs	r4, r4, #4
 80051c8:	2300      	movs	r3, #0
 80051ca:	2602      	movs	r6, #2
 80051cc:	2c00      	cmp	r4, #0
 80051ce:	f040 80b2 	bne.w	8005336 <_dtoa_r+0x4fe>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1d3      	bne.n	800517e <_dtoa_r+0x346>
 80051d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80051d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80b7 	beq.w	8005350 <_dtoa_r+0x518>
 80051e2:	4b86      	ldr	r3, [pc, #536]	@ (80053fc <_dtoa_r+0x5c4>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	4620      	mov	r0, r4
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7fb fc97 	bl	8000b1c <__aeabi_dcmplt>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	f000 80ae 	beq.w	8005350 <_dtoa_r+0x518>
 80051f4:	9b07      	ldr	r3, [sp, #28]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80aa 	beq.w	8005350 <_dtoa_r+0x518>
 80051fc:	9b00      	ldr	r3, [sp, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dd37      	ble.n	8005272 <_dtoa_r+0x43a>
 8005202:	1e7b      	subs	r3, r7, #1
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	4620      	mov	r0, r4
 8005208:	4b7d      	ldr	r3, [pc, #500]	@ (8005400 <_dtoa_r+0x5c8>)
 800520a:	2200      	movs	r2, #0
 800520c:	4629      	mov	r1, r5
 800520e:	f7fb fa13 	bl	8000638 <__aeabi_dmul>
 8005212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005216:	9c00      	ldr	r4, [sp, #0]
 8005218:	3601      	adds	r6, #1
 800521a:	4630      	mov	r0, r6
 800521c:	f7fb f9a2 	bl	8000564 <__aeabi_i2d>
 8005220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005224:	f7fb fa08 	bl	8000638 <__aeabi_dmul>
 8005228:	4b76      	ldr	r3, [pc, #472]	@ (8005404 <_dtoa_r+0x5cc>)
 800522a:	2200      	movs	r2, #0
 800522c:	f7fb f84e 	bl	80002cc <__adddf3>
 8005230:	4605      	mov	r5, r0
 8005232:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005236:	2c00      	cmp	r4, #0
 8005238:	f040 808d 	bne.w	8005356 <_dtoa_r+0x51e>
 800523c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005240:	4b71      	ldr	r3, [pc, #452]	@ (8005408 <_dtoa_r+0x5d0>)
 8005242:	2200      	movs	r2, #0
 8005244:	f7fb f840 	bl	80002c8 <__aeabi_dsub>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005250:	462a      	mov	r2, r5
 8005252:	4633      	mov	r3, r6
 8005254:	f7fb fc80 	bl	8000b58 <__aeabi_dcmpgt>
 8005258:	2800      	cmp	r0, #0
 800525a:	f040 828b 	bne.w	8005774 <_dtoa_r+0x93c>
 800525e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005262:	462a      	mov	r2, r5
 8005264:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005268:	f7fb fc58 	bl	8000b1c <__aeabi_dcmplt>
 800526c:	2800      	cmp	r0, #0
 800526e:	f040 8128 	bne.w	80054c2 <_dtoa_r+0x68a>
 8005272:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005276:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800527a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800527c:	2b00      	cmp	r3, #0
 800527e:	f2c0 815a 	blt.w	8005536 <_dtoa_r+0x6fe>
 8005282:	2f0e      	cmp	r7, #14
 8005284:	f300 8157 	bgt.w	8005536 <_dtoa_r+0x6fe>
 8005288:	4b5a      	ldr	r3, [pc, #360]	@ (80053f4 <_dtoa_r+0x5bc>)
 800528a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800528e:	ed93 7b00 	vldr	d7, [r3]
 8005292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005294:	2b00      	cmp	r3, #0
 8005296:	ed8d 7b00 	vstr	d7, [sp]
 800529a:	da03      	bge.n	80052a4 <_dtoa_r+0x46c>
 800529c:	9b07      	ldr	r3, [sp, #28]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f340 8101 	ble.w	80054a6 <_dtoa_r+0x66e>
 80052a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80052a8:	4656      	mov	r6, sl
 80052aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fb faeb 	bl	800088c <__aeabi_ddiv>
 80052b6:	f7fb fc6f 	bl	8000b98 <__aeabi_d2iz>
 80052ba:	4680      	mov	r8, r0
 80052bc:	f7fb f952 	bl	8000564 <__aeabi_i2d>
 80052c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052c4:	f7fb f9b8 	bl	8000638 <__aeabi_dmul>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80052d4:	f7fa fff8 	bl	80002c8 <__aeabi_dsub>
 80052d8:	f806 4b01 	strb.w	r4, [r6], #1
 80052dc:	9d07      	ldr	r5, [sp, #28]
 80052de:	eba6 040a 	sub.w	r4, r6, sl
 80052e2:	42a5      	cmp	r5, r4
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	f040 8117 	bne.w	800551a <_dtoa_r+0x6e2>
 80052ec:	f7fa ffee 	bl	80002cc <__adddf3>
 80052f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052f4:	4604      	mov	r4, r0
 80052f6:	460d      	mov	r5, r1
 80052f8:	f7fb fc2e 	bl	8000b58 <__aeabi_dcmpgt>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	f040 80f9 	bne.w	80054f4 <_dtoa_r+0x6bc>
 8005302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005306:	4620      	mov	r0, r4
 8005308:	4629      	mov	r1, r5
 800530a:	f7fb fbfd 	bl	8000b08 <__aeabi_dcmpeq>
 800530e:	b118      	cbz	r0, 8005318 <_dtoa_r+0x4e0>
 8005310:	f018 0f01 	tst.w	r8, #1
 8005314:	f040 80ee 	bne.w	80054f4 <_dtoa_r+0x6bc>
 8005318:	4649      	mov	r1, r9
 800531a:	4658      	mov	r0, fp
 800531c:	f000 fc90 	bl	8005c40 <_Bfree>
 8005320:	2300      	movs	r3, #0
 8005322:	7033      	strb	r3, [r6, #0]
 8005324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005326:	3701      	adds	r7, #1
 8005328:	601f      	str	r7, [r3, #0]
 800532a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 831d 	beq.w	800596c <_dtoa_r+0xb34>
 8005332:	601e      	str	r6, [r3, #0]
 8005334:	e31a      	b.n	800596c <_dtoa_r+0xb34>
 8005336:	07e2      	lsls	r2, r4, #31
 8005338:	d505      	bpl.n	8005346 <_dtoa_r+0x50e>
 800533a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800533e:	f7fb f97b 	bl	8000638 <__aeabi_dmul>
 8005342:	3601      	adds	r6, #1
 8005344:	2301      	movs	r3, #1
 8005346:	1064      	asrs	r4, r4, #1
 8005348:	3508      	adds	r5, #8
 800534a:	e73f      	b.n	80051cc <_dtoa_r+0x394>
 800534c:	2602      	movs	r6, #2
 800534e:	e742      	b.n	80051d6 <_dtoa_r+0x39e>
 8005350:	9c07      	ldr	r4, [sp, #28]
 8005352:	9704      	str	r7, [sp, #16]
 8005354:	e761      	b.n	800521a <_dtoa_r+0x3e2>
 8005356:	4b27      	ldr	r3, [pc, #156]	@ (80053f4 <_dtoa_r+0x5bc>)
 8005358:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800535a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800535e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005362:	4454      	add	r4, sl
 8005364:	2900      	cmp	r1, #0
 8005366:	d053      	beq.n	8005410 <_dtoa_r+0x5d8>
 8005368:	4928      	ldr	r1, [pc, #160]	@ (800540c <_dtoa_r+0x5d4>)
 800536a:	2000      	movs	r0, #0
 800536c:	f7fb fa8e 	bl	800088c <__aeabi_ddiv>
 8005370:	4633      	mov	r3, r6
 8005372:	462a      	mov	r2, r5
 8005374:	f7fa ffa8 	bl	80002c8 <__aeabi_dsub>
 8005378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800537c:	4656      	mov	r6, sl
 800537e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005382:	f7fb fc09 	bl	8000b98 <__aeabi_d2iz>
 8005386:	4605      	mov	r5, r0
 8005388:	f7fb f8ec 	bl	8000564 <__aeabi_i2d>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005394:	f7fa ff98 	bl	80002c8 <__aeabi_dsub>
 8005398:	3530      	adds	r5, #48	@ 0x30
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053a2:	f806 5b01 	strb.w	r5, [r6], #1
 80053a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053aa:	f7fb fbb7 	bl	8000b1c <__aeabi_dcmplt>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d171      	bne.n	8005496 <_dtoa_r+0x65e>
 80053b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b6:	4911      	ldr	r1, [pc, #68]	@ (80053fc <_dtoa_r+0x5c4>)
 80053b8:	2000      	movs	r0, #0
 80053ba:	f7fa ff85 	bl	80002c8 <__aeabi_dsub>
 80053be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053c2:	f7fb fbab 	bl	8000b1c <__aeabi_dcmplt>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f040 8095 	bne.w	80054f6 <_dtoa_r+0x6be>
 80053cc:	42a6      	cmp	r6, r4
 80053ce:	f43f af50 	beq.w	8005272 <_dtoa_r+0x43a>
 80053d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80053d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <_dtoa_r+0x5c8>)
 80053d8:	2200      	movs	r2, #0
 80053da:	f7fb f92d 	bl	8000638 <__aeabi_dmul>
 80053de:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <_dtoa_r+0x5c8>)
 80053e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053e4:	2200      	movs	r2, #0
 80053e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ea:	f7fb f925 	bl	8000638 <__aeabi_dmul>
 80053ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053f2:	e7c4      	b.n	800537e <_dtoa_r+0x546>
 80053f4:	080079e0 	.word	0x080079e0
 80053f8:	080079b8 	.word	0x080079b8
 80053fc:	3ff00000 	.word	0x3ff00000
 8005400:	40240000 	.word	0x40240000
 8005404:	401c0000 	.word	0x401c0000
 8005408:	40140000 	.word	0x40140000
 800540c:	3fe00000 	.word	0x3fe00000
 8005410:	4631      	mov	r1, r6
 8005412:	4628      	mov	r0, r5
 8005414:	f7fb f910 	bl	8000638 <__aeabi_dmul>
 8005418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800541c:	9415      	str	r4, [sp, #84]	@ 0x54
 800541e:	4656      	mov	r6, sl
 8005420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005424:	f7fb fbb8 	bl	8000b98 <__aeabi_d2iz>
 8005428:	4605      	mov	r5, r0
 800542a:	f7fb f89b 	bl	8000564 <__aeabi_i2d>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005436:	f7fa ff47 	bl	80002c8 <__aeabi_dsub>
 800543a:	3530      	adds	r5, #48	@ 0x30
 800543c:	f806 5b01 	strb.w	r5, [r6], #1
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	42a6      	cmp	r6, r4
 8005446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	d124      	bne.n	800549a <_dtoa_r+0x662>
 8005450:	4bac      	ldr	r3, [pc, #688]	@ (8005704 <_dtoa_r+0x8cc>)
 8005452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005456:	f7fa ff39 	bl	80002cc <__adddf3>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005462:	f7fb fb79 	bl	8000b58 <__aeabi_dcmpgt>
 8005466:	2800      	cmp	r0, #0
 8005468:	d145      	bne.n	80054f6 <_dtoa_r+0x6be>
 800546a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800546e:	49a5      	ldr	r1, [pc, #660]	@ (8005704 <_dtoa_r+0x8cc>)
 8005470:	2000      	movs	r0, #0
 8005472:	f7fa ff29 	bl	80002c8 <__aeabi_dsub>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800547e:	f7fb fb4d 	bl	8000b1c <__aeabi_dcmplt>
 8005482:	2800      	cmp	r0, #0
 8005484:	f43f aef5 	beq.w	8005272 <_dtoa_r+0x43a>
 8005488:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800548a:	1e73      	subs	r3, r6, #1
 800548c:	9315      	str	r3, [sp, #84]	@ 0x54
 800548e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005492:	2b30      	cmp	r3, #48	@ 0x30
 8005494:	d0f8      	beq.n	8005488 <_dtoa_r+0x650>
 8005496:	9f04      	ldr	r7, [sp, #16]
 8005498:	e73e      	b.n	8005318 <_dtoa_r+0x4e0>
 800549a:	4b9b      	ldr	r3, [pc, #620]	@ (8005708 <_dtoa_r+0x8d0>)
 800549c:	f7fb f8cc 	bl	8000638 <__aeabi_dmul>
 80054a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054a4:	e7bc      	b.n	8005420 <_dtoa_r+0x5e8>
 80054a6:	d10c      	bne.n	80054c2 <_dtoa_r+0x68a>
 80054a8:	4b98      	ldr	r3, [pc, #608]	@ (800570c <_dtoa_r+0x8d4>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054b0:	f7fb f8c2 	bl	8000638 <__aeabi_dmul>
 80054b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054b8:	f7fb fb44 	bl	8000b44 <__aeabi_dcmpge>
 80054bc:	2800      	cmp	r0, #0
 80054be:	f000 8157 	beq.w	8005770 <_dtoa_r+0x938>
 80054c2:	2400      	movs	r4, #0
 80054c4:	4625      	mov	r5, r4
 80054c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054c8:	43db      	mvns	r3, r3
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	4656      	mov	r6, sl
 80054ce:	2700      	movs	r7, #0
 80054d0:	4621      	mov	r1, r4
 80054d2:	4658      	mov	r0, fp
 80054d4:	f000 fbb4 	bl	8005c40 <_Bfree>
 80054d8:	2d00      	cmp	r5, #0
 80054da:	d0dc      	beq.n	8005496 <_dtoa_r+0x65e>
 80054dc:	b12f      	cbz	r7, 80054ea <_dtoa_r+0x6b2>
 80054de:	42af      	cmp	r7, r5
 80054e0:	d003      	beq.n	80054ea <_dtoa_r+0x6b2>
 80054e2:	4639      	mov	r1, r7
 80054e4:	4658      	mov	r0, fp
 80054e6:	f000 fbab 	bl	8005c40 <_Bfree>
 80054ea:	4629      	mov	r1, r5
 80054ec:	4658      	mov	r0, fp
 80054ee:	f000 fba7 	bl	8005c40 <_Bfree>
 80054f2:	e7d0      	b.n	8005496 <_dtoa_r+0x65e>
 80054f4:	9704      	str	r7, [sp, #16]
 80054f6:	4633      	mov	r3, r6
 80054f8:	461e      	mov	r6, r3
 80054fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054fe:	2a39      	cmp	r2, #57	@ 0x39
 8005500:	d107      	bne.n	8005512 <_dtoa_r+0x6da>
 8005502:	459a      	cmp	sl, r3
 8005504:	d1f8      	bne.n	80054f8 <_dtoa_r+0x6c0>
 8005506:	9a04      	ldr	r2, [sp, #16]
 8005508:	3201      	adds	r2, #1
 800550a:	9204      	str	r2, [sp, #16]
 800550c:	2230      	movs	r2, #48	@ 0x30
 800550e:	f88a 2000 	strb.w	r2, [sl]
 8005512:	781a      	ldrb	r2, [r3, #0]
 8005514:	3201      	adds	r2, #1
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	e7bd      	b.n	8005496 <_dtoa_r+0x65e>
 800551a:	4b7b      	ldr	r3, [pc, #492]	@ (8005708 <_dtoa_r+0x8d0>)
 800551c:	2200      	movs	r2, #0
 800551e:	f7fb f88b 	bl	8000638 <__aeabi_dmul>
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	4604      	mov	r4, r0
 8005528:	460d      	mov	r5, r1
 800552a:	f7fb faed 	bl	8000b08 <__aeabi_dcmpeq>
 800552e:	2800      	cmp	r0, #0
 8005530:	f43f aebb 	beq.w	80052aa <_dtoa_r+0x472>
 8005534:	e6f0      	b.n	8005318 <_dtoa_r+0x4e0>
 8005536:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005538:	2a00      	cmp	r2, #0
 800553a:	f000 80db 	beq.w	80056f4 <_dtoa_r+0x8bc>
 800553e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005540:	2a01      	cmp	r2, #1
 8005542:	f300 80bf 	bgt.w	80056c4 <_dtoa_r+0x88c>
 8005546:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005548:	2a00      	cmp	r2, #0
 800554a:	f000 80b7 	beq.w	80056bc <_dtoa_r+0x884>
 800554e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005552:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005554:	4646      	mov	r6, r8
 8005556:	9a08      	ldr	r2, [sp, #32]
 8005558:	2101      	movs	r1, #1
 800555a:	441a      	add	r2, r3
 800555c:	4658      	mov	r0, fp
 800555e:	4498      	add	r8, r3
 8005560:	9208      	str	r2, [sp, #32]
 8005562:	f000 fc21 	bl	8005da8 <__i2b>
 8005566:	4605      	mov	r5, r0
 8005568:	b15e      	cbz	r6, 8005582 <_dtoa_r+0x74a>
 800556a:	9b08      	ldr	r3, [sp, #32]
 800556c:	2b00      	cmp	r3, #0
 800556e:	dd08      	ble.n	8005582 <_dtoa_r+0x74a>
 8005570:	42b3      	cmp	r3, r6
 8005572:	9a08      	ldr	r2, [sp, #32]
 8005574:	bfa8      	it	ge
 8005576:	4633      	movge	r3, r6
 8005578:	eba8 0803 	sub.w	r8, r8, r3
 800557c:	1af6      	subs	r6, r6, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	9308      	str	r3, [sp, #32]
 8005582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005584:	b1f3      	cbz	r3, 80055c4 <_dtoa_r+0x78c>
 8005586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80b7 	beq.w	80056fc <_dtoa_r+0x8c4>
 800558e:	b18c      	cbz	r4, 80055b4 <_dtoa_r+0x77c>
 8005590:	4629      	mov	r1, r5
 8005592:	4622      	mov	r2, r4
 8005594:	4658      	mov	r0, fp
 8005596:	f000 fcc7 	bl	8005f28 <__pow5mult>
 800559a:	464a      	mov	r2, r9
 800559c:	4601      	mov	r1, r0
 800559e:	4605      	mov	r5, r0
 80055a0:	4658      	mov	r0, fp
 80055a2:	f000 fc17 	bl	8005dd4 <__multiply>
 80055a6:	4649      	mov	r1, r9
 80055a8:	9004      	str	r0, [sp, #16]
 80055aa:	4658      	mov	r0, fp
 80055ac:	f000 fb48 	bl	8005c40 <_Bfree>
 80055b0:	9b04      	ldr	r3, [sp, #16]
 80055b2:	4699      	mov	r9, r3
 80055b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055b6:	1b1a      	subs	r2, r3, r4
 80055b8:	d004      	beq.n	80055c4 <_dtoa_r+0x78c>
 80055ba:	4649      	mov	r1, r9
 80055bc:	4658      	mov	r0, fp
 80055be:	f000 fcb3 	bl	8005f28 <__pow5mult>
 80055c2:	4681      	mov	r9, r0
 80055c4:	2101      	movs	r1, #1
 80055c6:	4658      	mov	r0, fp
 80055c8:	f000 fbee 	bl	8005da8 <__i2b>
 80055cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055ce:	4604      	mov	r4, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 81cf 	beq.w	8005974 <_dtoa_r+0xb3c>
 80055d6:	461a      	mov	r2, r3
 80055d8:	4601      	mov	r1, r0
 80055da:	4658      	mov	r0, fp
 80055dc:	f000 fca4 	bl	8005f28 <__pow5mult>
 80055e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	4604      	mov	r4, r0
 80055e6:	f300 8095 	bgt.w	8005714 <_dtoa_r+0x8dc>
 80055ea:	9b02      	ldr	r3, [sp, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 8087 	bne.w	8005700 <_dtoa_r+0x8c8>
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 8089 	bne.w	8005710 <_dtoa_r+0x8d8>
 80055fe:	9b03      	ldr	r3, [sp, #12]
 8005600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005604:	0d1b      	lsrs	r3, r3, #20
 8005606:	051b      	lsls	r3, r3, #20
 8005608:	b12b      	cbz	r3, 8005616 <_dtoa_r+0x7de>
 800560a:	9b08      	ldr	r3, [sp, #32]
 800560c:	3301      	adds	r3, #1
 800560e:	9308      	str	r3, [sp, #32]
 8005610:	f108 0801 	add.w	r8, r8, #1
 8005614:	2301      	movs	r3, #1
 8005616:	930a      	str	r3, [sp, #40]	@ 0x28
 8005618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 81b0 	beq.w	8005980 <_dtoa_r+0xb48>
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005626:	6918      	ldr	r0, [r3, #16]
 8005628:	f000 fb72 	bl	8005d10 <__hi0bits>
 800562c:	f1c0 0020 	rsb	r0, r0, #32
 8005630:	9b08      	ldr	r3, [sp, #32]
 8005632:	4418      	add	r0, r3
 8005634:	f010 001f 	ands.w	r0, r0, #31
 8005638:	d077      	beq.n	800572a <_dtoa_r+0x8f2>
 800563a:	f1c0 0320 	rsb	r3, r0, #32
 800563e:	2b04      	cmp	r3, #4
 8005640:	dd6b      	ble.n	800571a <_dtoa_r+0x8e2>
 8005642:	9b08      	ldr	r3, [sp, #32]
 8005644:	f1c0 001c 	rsb	r0, r0, #28
 8005648:	4403      	add	r3, r0
 800564a:	4480      	add	r8, r0
 800564c:	4406      	add	r6, r0
 800564e:	9308      	str	r3, [sp, #32]
 8005650:	f1b8 0f00 	cmp.w	r8, #0
 8005654:	dd05      	ble.n	8005662 <_dtoa_r+0x82a>
 8005656:	4649      	mov	r1, r9
 8005658:	4642      	mov	r2, r8
 800565a:	4658      	mov	r0, fp
 800565c:	f000 fcbe 	bl	8005fdc <__lshift>
 8005660:	4681      	mov	r9, r0
 8005662:	9b08      	ldr	r3, [sp, #32]
 8005664:	2b00      	cmp	r3, #0
 8005666:	dd05      	ble.n	8005674 <_dtoa_r+0x83c>
 8005668:	4621      	mov	r1, r4
 800566a:	461a      	mov	r2, r3
 800566c:	4658      	mov	r0, fp
 800566e:	f000 fcb5 	bl	8005fdc <__lshift>
 8005672:	4604      	mov	r4, r0
 8005674:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005676:	2b00      	cmp	r3, #0
 8005678:	d059      	beq.n	800572e <_dtoa_r+0x8f6>
 800567a:	4621      	mov	r1, r4
 800567c:	4648      	mov	r0, r9
 800567e:	f000 fd19 	bl	80060b4 <__mcmp>
 8005682:	2800      	cmp	r0, #0
 8005684:	da53      	bge.n	800572e <_dtoa_r+0x8f6>
 8005686:	1e7b      	subs	r3, r7, #1
 8005688:	9304      	str	r3, [sp, #16]
 800568a:	4649      	mov	r1, r9
 800568c:	2300      	movs	r3, #0
 800568e:	220a      	movs	r2, #10
 8005690:	4658      	mov	r0, fp
 8005692:	f000 faf7 	bl	8005c84 <__multadd>
 8005696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005698:	4681      	mov	r9, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8172 	beq.w	8005984 <_dtoa_r+0xb4c>
 80056a0:	2300      	movs	r3, #0
 80056a2:	4629      	mov	r1, r5
 80056a4:	220a      	movs	r2, #10
 80056a6:	4658      	mov	r0, fp
 80056a8:	f000 faec 	bl	8005c84 <__multadd>
 80056ac:	9b00      	ldr	r3, [sp, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	4605      	mov	r5, r0
 80056b2:	dc67      	bgt.n	8005784 <_dtoa_r+0x94c>
 80056b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	dc41      	bgt.n	800573e <_dtoa_r+0x906>
 80056ba:	e063      	b.n	8005784 <_dtoa_r+0x94c>
 80056bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80056be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80056c2:	e746      	b.n	8005552 <_dtoa_r+0x71a>
 80056c4:	9b07      	ldr	r3, [sp, #28]
 80056c6:	1e5c      	subs	r4, r3, #1
 80056c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056ca:	42a3      	cmp	r3, r4
 80056cc:	bfbf      	itttt	lt
 80056ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80056d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80056d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80056d4:	1ae3      	sublt	r3, r4, r3
 80056d6:	bfb4      	ite	lt
 80056d8:	18d2      	addlt	r2, r2, r3
 80056da:	1b1c      	subge	r4, r3, r4
 80056dc:	9b07      	ldr	r3, [sp, #28]
 80056de:	bfbc      	itt	lt
 80056e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80056e2:	2400      	movlt	r4, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bfb5      	itete	lt
 80056e8:	eba8 0603 	sublt.w	r6, r8, r3
 80056ec:	9b07      	ldrge	r3, [sp, #28]
 80056ee:	2300      	movlt	r3, #0
 80056f0:	4646      	movge	r6, r8
 80056f2:	e730      	b.n	8005556 <_dtoa_r+0x71e>
 80056f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80056f8:	4646      	mov	r6, r8
 80056fa:	e735      	b.n	8005568 <_dtoa_r+0x730>
 80056fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056fe:	e75c      	b.n	80055ba <_dtoa_r+0x782>
 8005700:	2300      	movs	r3, #0
 8005702:	e788      	b.n	8005616 <_dtoa_r+0x7de>
 8005704:	3fe00000 	.word	0x3fe00000
 8005708:	40240000 	.word	0x40240000
 800570c:	40140000 	.word	0x40140000
 8005710:	9b02      	ldr	r3, [sp, #8]
 8005712:	e780      	b.n	8005616 <_dtoa_r+0x7de>
 8005714:	2300      	movs	r3, #0
 8005716:	930a      	str	r3, [sp, #40]	@ 0x28
 8005718:	e782      	b.n	8005620 <_dtoa_r+0x7e8>
 800571a:	d099      	beq.n	8005650 <_dtoa_r+0x818>
 800571c:	9a08      	ldr	r2, [sp, #32]
 800571e:	331c      	adds	r3, #28
 8005720:	441a      	add	r2, r3
 8005722:	4498      	add	r8, r3
 8005724:	441e      	add	r6, r3
 8005726:	9208      	str	r2, [sp, #32]
 8005728:	e792      	b.n	8005650 <_dtoa_r+0x818>
 800572a:	4603      	mov	r3, r0
 800572c:	e7f6      	b.n	800571c <_dtoa_r+0x8e4>
 800572e:	9b07      	ldr	r3, [sp, #28]
 8005730:	9704      	str	r7, [sp, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	dc20      	bgt.n	8005778 <_dtoa_r+0x940>
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800573a:	2b02      	cmp	r3, #2
 800573c:	dd1e      	ble.n	800577c <_dtoa_r+0x944>
 800573e:	9b00      	ldr	r3, [sp, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f47f aec0 	bne.w	80054c6 <_dtoa_r+0x68e>
 8005746:	4621      	mov	r1, r4
 8005748:	2205      	movs	r2, #5
 800574a:	4658      	mov	r0, fp
 800574c:	f000 fa9a 	bl	8005c84 <__multadd>
 8005750:	4601      	mov	r1, r0
 8005752:	4604      	mov	r4, r0
 8005754:	4648      	mov	r0, r9
 8005756:	f000 fcad 	bl	80060b4 <__mcmp>
 800575a:	2800      	cmp	r0, #0
 800575c:	f77f aeb3 	ble.w	80054c6 <_dtoa_r+0x68e>
 8005760:	4656      	mov	r6, sl
 8005762:	2331      	movs	r3, #49	@ 0x31
 8005764:	f806 3b01 	strb.w	r3, [r6], #1
 8005768:	9b04      	ldr	r3, [sp, #16]
 800576a:	3301      	adds	r3, #1
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	e6ae      	b.n	80054ce <_dtoa_r+0x696>
 8005770:	9c07      	ldr	r4, [sp, #28]
 8005772:	9704      	str	r7, [sp, #16]
 8005774:	4625      	mov	r5, r4
 8005776:	e7f3      	b.n	8005760 <_dtoa_r+0x928>
 8005778:	9b07      	ldr	r3, [sp, #28]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8104 	beq.w	800598c <_dtoa_r+0xb54>
 8005784:	2e00      	cmp	r6, #0
 8005786:	dd05      	ble.n	8005794 <_dtoa_r+0x95c>
 8005788:	4629      	mov	r1, r5
 800578a:	4632      	mov	r2, r6
 800578c:	4658      	mov	r0, fp
 800578e:	f000 fc25 	bl	8005fdc <__lshift>
 8005792:	4605      	mov	r5, r0
 8005794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	d05a      	beq.n	8005850 <_dtoa_r+0xa18>
 800579a:	6869      	ldr	r1, [r5, #4]
 800579c:	4658      	mov	r0, fp
 800579e:	f000 fa0f 	bl	8005bc0 <_Balloc>
 80057a2:	4606      	mov	r6, r0
 80057a4:	b928      	cbnz	r0, 80057b2 <_dtoa_r+0x97a>
 80057a6:	4b84      	ldr	r3, [pc, #528]	@ (80059b8 <_dtoa_r+0xb80>)
 80057a8:	4602      	mov	r2, r0
 80057aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80057ae:	f7ff bb5a 	b.w	8004e66 <_dtoa_r+0x2e>
 80057b2:	692a      	ldr	r2, [r5, #16]
 80057b4:	3202      	adds	r2, #2
 80057b6:	0092      	lsls	r2, r2, #2
 80057b8:	f105 010c 	add.w	r1, r5, #12
 80057bc:	300c      	adds	r0, #12
 80057be:	f001 fd13 	bl	80071e8 <memcpy>
 80057c2:	2201      	movs	r2, #1
 80057c4:	4631      	mov	r1, r6
 80057c6:	4658      	mov	r0, fp
 80057c8:	f000 fc08 	bl	8005fdc <__lshift>
 80057cc:	f10a 0301 	add.w	r3, sl, #1
 80057d0:	9307      	str	r3, [sp, #28]
 80057d2:	9b00      	ldr	r3, [sp, #0]
 80057d4:	4453      	add	r3, sl
 80057d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057d8:	9b02      	ldr	r3, [sp, #8]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	462f      	mov	r7, r5
 80057e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80057e2:	4605      	mov	r5, r0
 80057e4:	9b07      	ldr	r3, [sp, #28]
 80057e6:	4621      	mov	r1, r4
 80057e8:	3b01      	subs	r3, #1
 80057ea:	4648      	mov	r0, r9
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	f7ff fa98 	bl	8004d22 <quorem>
 80057f2:	4639      	mov	r1, r7
 80057f4:	9002      	str	r0, [sp, #8]
 80057f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80057fa:	4648      	mov	r0, r9
 80057fc:	f000 fc5a 	bl	80060b4 <__mcmp>
 8005800:	462a      	mov	r2, r5
 8005802:	9008      	str	r0, [sp, #32]
 8005804:	4621      	mov	r1, r4
 8005806:	4658      	mov	r0, fp
 8005808:	f000 fc70 	bl	80060ec <__mdiff>
 800580c:	68c2      	ldr	r2, [r0, #12]
 800580e:	4606      	mov	r6, r0
 8005810:	bb02      	cbnz	r2, 8005854 <_dtoa_r+0xa1c>
 8005812:	4601      	mov	r1, r0
 8005814:	4648      	mov	r0, r9
 8005816:	f000 fc4d 	bl	80060b4 <__mcmp>
 800581a:	4602      	mov	r2, r0
 800581c:	4631      	mov	r1, r6
 800581e:	4658      	mov	r0, fp
 8005820:	920e      	str	r2, [sp, #56]	@ 0x38
 8005822:	f000 fa0d 	bl	8005c40 <_Bfree>
 8005826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005828:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800582a:	9e07      	ldr	r6, [sp, #28]
 800582c:	ea43 0102 	orr.w	r1, r3, r2
 8005830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005832:	4319      	orrs	r1, r3
 8005834:	d110      	bne.n	8005858 <_dtoa_r+0xa20>
 8005836:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800583a:	d029      	beq.n	8005890 <_dtoa_r+0xa58>
 800583c:	9b08      	ldr	r3, [sp, #32]
 800583e:	2b00      	cmp	r3, #0
 8005840:	dd02      	ble.n	8005848 <_dtoa_r+0xa10>
 8005842:	9b02      	ldr	r3, [sp, #8]
 8005844:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005848:	9b00      	ldr	r3, [sp, #0]
 800584a:	f883 8000 	strb.w	r8, [r3]
 800584e:	e63f      	b.n	80054d0 <_dtoa_r+0x698>
 8005850:	4628      	mov	r0, r5
 8005852:	e7bb      	b.n	80057cc <_dtoa_r+0x994>
 8005854:	2201      	movs	r2, #1
 8005856:	e7e1      	b.n	800581c <_dtoa_r+0x9e4>
 8005858:	9b08      	ldr	r3, [sp, #32]
 800585a:	2b00      	cmp	r3, #0
 800585c:	db04      	blt.n	8005868 <_dtoa_r+0xa30>
 800585e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005860:	430b      	orrs	r3, r1
 8005862:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005864:	430b      	orrs	r3, r1
 8005866:	d120      	bne.n	80058aa <_dtoa_r+0xa72>
 8005868:	2a00      	cmp	r2, #0
 800586a:	dded      	ble.n	8005848 <_dtoa_r+0xa10>
 800586c:	4649      	mov	r1, r9
 800586e:	2201      	movs	r2, #1
 8005870:	4658      	mov	r0, fp
 8005872:	f000 fbb3 	bl	8005fdc <__lshift>
 8005876:	4621      	mov	r1, r4
 8005878:	4681      	mov	r9, r0
 800587a:	f000 fc1b 	bl	80060b4 <__mcmp>
 800587e:	2800      	cmp	r0, #0
 8005880:	dc03      	bgt.n	800588a <_dtoa_r+0xa52>
 8005882:	d1e1      	bne.n	8005848 <_dtoa_r+0xa10>
 8005884:	f018 0f01 	tst.w	r8, #1
 8005888:	d0de      	beq.n	8005848 <_dtoa_r+0xa10>
 800588a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800588e:	d1d8      	bne.n	8005842 <_dtoa_r+0xa0a>
 8005890:	9a00      	ldr	r2, [sp, #0]
 8005892:	2339      	movs	r3, #57	@ 0x39
 8005894:	7013      	strb	r3, [r2, #0]
 8005896:	4633      	mov	r3, r6
 8005898:	461e      	mov	r6, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80058a0:	2a39      	cmp	r2, #57	@ 0x39
 80058a2:	d052      	beq.n	800594a <_dtoa_r+0xb12>
 80058a4:	3201      	adds	r2, #1
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e612      	b.n	80054d0 <_dtoa_r+0x698>
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	dd07      	ble.n	80058be <_dtoa_r+0xa86>
 80058ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058b2:	d0ed      	beq.n	8005890 <_dtoa_r+0xa58>
 80058b4:	9a00      	ldr	r2, [sp, #0]
 80058b6:	f108 0301 	add.w	r3, r8, #1
 80058ba:	7013      	strb	r3, [r2, #0]
 80058bc:	e608      	b.n	80054d0 <_dtoa_r+0x698>
 80058be:	9b07      	ldr	r3, [sp, #28]
 80058c0:	9a07      	ldr	r2, [sp, #28]
 80058c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80058c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d028      	beq.n	800591e <_dtoa_r+0xae6>
 80058cc:	4649      	mov	r1, r9
 80058ce:	2300      	movs	r3, #0
 80058d0:	220a      	movs	r2, #10
 80058d2:	4658      	mov	r0, fp
 80058d4:	f000 f9d6 	bl	8005c84 <__multadd>
 80058d8:	42af      	cmp	r7, r5
 80058da:	4681      	mov	r9, r0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	f04f 020a 	mov.w	r2, #10
 80058e4:	4639      	mov	r1, r7
 80058e6:	4658      	mov	r0, fp
 80058e8:	d107      	bne.n	80058fa <_dtoa_r+0xac2>
 80058ea:	f000 f9cb 	bl	8005c84 <__multadd>
 80058ee:	4607      	mov	r7, r0
 80058f0:	4605      	mov	r5, r0
 80058f2:	9b07      	ldr	r3, [sp, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	9307      	str	r3, [sp, #28]
 80058f8:	e774      	b.n	80057e4 <_dtoa_r+0x9ac>
 80058fa:	f000 f9c3 	bl	8005c84 <__multadd>
 80058fe:	4629      	mov	r1, r5
 8005900:	4607      	mov	r7, r0
 8005902:	2300      	movs	r3, #0
 8005904:	220a      	movs	r2, #10
 8005906:	4658      	mov	r0, fp
 8005908:	f000 f9bc 	bl	8005c84 <__multadd>
 800590c:	4605      	mov	r5, r0
 800590e:	e7f0      	b.n	80058f2 <_dtoa_r+0xaba>
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	bfcc      	ite	gt
 8005916:	461e      	movgt	r6, r3
 8005918:	2601      	movle	r6, #1
 800591a:	4456      	add	r6, sl
 800591c:	2700      	movs	r7, #0
 800591e:	4649      	mov	r1, r9
 8005920:	2201      	movs	r2, #1
 8005922:	4658      	mov	r0, fp
 8005924:	f000 fb5a 	bl	8005fdc <__lshift>
 8005928:	4621      	mov	r1, r4
 800592a:	4681      	mov	r9, r0
 800592c:	f000 fbc2 	bl	80060b4 <__mcmp>
 8005930:	2800      	cmp	r0, #0
 8005932:	dcb0      	bgt.n	8005896 <_dtoa_r+0xa5e>
 8005934:	d102      	bne.n	800593c <_dtoa_r+0xb04>
 8005936:	f018 0f01 	tst.w	r8, #1
 800593a:	d1ac      	bne.n	8005896 <_dtoa_r+0xa5e>
 800593c:	4633      	mov	r3, r6
 800593e:	461e      	mov	r6, r3
 8005940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005944:	2a30      	cmp	r2, #48	@ 0x30
 8005946:	d0fa      	beq.n	800593e <_dtoa_r+0xb06>
 8005948:	e5c2      	b.n	80054d0 <_dtoa_r+0x698>
 800594a:	459a      	cmp	sl, r3
 800594c:	d1a4      	bne.n	8005898 <_dtoa_r+0xa60>
 800594e:	9b04      	ldr	r3, [sp, #16]
 8005950:	3301      	adds	r3, #1
 8005952:	9304      	str	r3, [sp, #16]
 8005954:	2331      	movs	r3, #49	@ 0x31
 8005956:	f88a 3000 	strb.w	r3, [sl]
 800595a:	e5b9      	b.n	80054d0 <_dtoa_r+0x698>
 800595c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800595e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80059bc <_dtoa_r+0xb84>
 8005962:	b11b      	cbz	r3, 800596c <_dtoa_r+0xb34>
 8005964:	f10a 0308 	add.w	r3, sl, #8
 8005968:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4650      	mov	r0, sl
 800596e:	b019      	add	sp, #100	@ 0x64
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005976:	2b01      	cmp	r3, #1
 8005978:	f77f ae37 	ble.w	80055ea <_dtoa_r+0x7b2>
 800597c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800597e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005980:	2001      	movs	r0, #1
 8005982:	e655      	b.n	8005630 <_dtoa_r+0x7f8>
 8005984:	9b00      	ldr	r3, [sp, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f77f aed6 	ble.w	8005738 <_dtoa_r+0x900>
 800598c:	4656      	mov	r6, sl
 800598e:	4621      	mov	r1, r4
 8005990:	4648      	mov	r0, r9
 8005992:	f7ff f9c6 	bl	8004d22 <quorem>
 8005996:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800599a:	f806 8b01 	strb.w	r8, [r6], #1
 800599e:	9b00      	ldr	r3, [sp, #0]
 80059a0:	eba6 020a 	sub.w	r2, r6, sl
 80059a4:	4293      	cmp	r3, r2
 80059a6:	ddb3      	ble.n	8005910 <_dtoa_r+0xad8>
 80059a8:	4649      	mov	r1, r9
 80059aa:	2300      	movs	r3, #0
 80059ac:	220a      	movs	r2, #10
 80059ae:	4658      	mov	r0, fp
 80059b0:	f000 f968 	bl	8005c84 <__multadd>
 80059b4:	4681      	mov	r9, r0
 80059b6:	e7ea      	b.n	800598e <_dtoa_r+0xb56>
 80059b8:	0800793e 	.word	0x0800793e
 80059bc:	080078c2 	.word	0x080078c2

080059c0 <_free_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4605      	mov	r5, r0
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d041      	beq.n	8005a4c <_free_r+0x8c>
 80059c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059cc:	1f0c      	subs	r4, r1, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bfb8      	it	lt
 80059d2:	18e4      	addlt	r4, r4, r3
 80059d4:	f000 f8e8 	bl	8005ba8 <__malloc_lock>
 80059d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <_free_r+0x90>)
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	b933      	cbnz	r3, 80059ec <_free_r+0x2c>
 80059de:	6063      	str	r3, [r4, #4]
 80059e0:	6014      	str	r4, [r2, #0]
 80059e2:	4628      	mov	r0, r5
 80059e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e8:	f000 b8e4 	b.w	8005bb4 <__malloc_unlock>
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d908      	bls.n	8005a02 <_free_r+0x42>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	1821      	adds	r1, r4, r0
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf01      	itttt	eq
 80059f8:	6819      	ldreq	r1, [r3, #0]
 80059fa:	685b      	ldreq	r3, [r3, #4]
 80059fc:	1809      	addeq	r1, r1, r0
 80059fe:	6021      	streq	r1, [r4, #0]
 8005a00:	e7ed      	b.n	80059de <_free_r+0x1e>
 8005a02:	461a      	mov	r2, r3
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b10b      	cbz	r3, 8005a0c <_free_r+0x4c>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d9fa      	bls.n	8005a02 <_free_r+0x42>
 8005a0c:	6811      	ldr	r1, [r2, #0]
 8005a0e:	1850      	adds	r0, r2, r1
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d10b      	bne.n	8005a2c <_free_r+0x6c>
 8005a14:	6820      	ldr	r0, [r4, #0]
 8005a16:	4401      	add	r1, r0
 8005a18:	1850      	adds	r0, r2, r1
 8005a1a:	4283      	cmp	r3, r0
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	d1e0      	bne.n	80059e2 <_free_r+0x22>
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	6053      	str	r3, [r2, #4]
 8005a26:	4408      	add	r0, r1
 8005a28:	6010      	str	r0, [r2, #0]
 8005a2a:	e7da      	b.n	80059e2 <_free_r+0x22>
 8005a2c:	d902      	bls.n	8005a34 <_free_r+0x74>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	602b      	str	r3, [r5, #0]
 8005a32:	e7d6      	b.n	80059e2 <_free_r+0x22>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	1821      	adds	r1, r4, r0
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	bf04      	itt	eq
 8005a3c:	6819      	ldreq	r1, [r3, #0]
 8005a3e:	685b      	ldreq	r3, [r3, #4]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	bf04      	itt	eq
 8005a44:	1809      	addeq	r1, r1, r0
 8005a46:	6021      	streq	r1, [r4, #0]
 8005a48:	6054      	str	r4, [r2, #4]
 8005a4a:	e7ca      	b.n	80059e2 <_free_r+0x22>
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000454 	.word	0x20000454

08005a54 <malloc>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <malloc+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f000 b825 	b.w	8005aa8 <_malloc_r>
 8005a5e:	bf00      	nop
 8005a60:	20000018 	.word	0x20000018

08005a64 <sbrk_aligned>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4e0f      	ldr	r6, [pc, #60]	@ (8005aa4 <sbrk_aligned+0x40>)
 8005a68:	460c      	mov	r4, r1
 8005a6a:	6831      	ldr	r1, [r6, #0]
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	b911      	cbnz	r1, 8005a76 <sbrk_aligned+0x12>
 8005a70:	f001 fbaa 	bl	80071c8 <_sbrk_r>
 8005a74:	6030      	str	r0, [r6, #0]
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f001 fba5 	bl	80071c8 <_sbrk_r>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	d103      	bne.n	8005a8a <sbrk_aligned+0x26>
 8005a82:	f04f 34ff 	mov.w	r4, #4294967295
 8005a86:	4620      	mov	r0, r4
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
 8005a8a:	1cc4      	adds	r4, r0, #3
 8005a8c:	f024 0403 	bic.w	r4, r4, #3
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d0f8      	beq.n	8005a86 <sbrk_aligned+0x22>
 8005a94:	1a21      	subs	r1, r4, r0
 8005a96:	4628      	mov	r0, r5
 8005a98:	f001 fb96 	bl	80071c8 <_sbrk_r>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d1f2      	bne.n	8005a86 <sbrk_aligned+0x22>
 8005aa0:	e7ef      	b.n	8005a82 <sbrk_aligned+0x1e>
 8005aa2:	bf00      	nop
 8005aa4:	20000450 	.word	0x20000450

08005aa8 <_malloc_r>:
 8005aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aac:	1ccd      	adds	r5, r1, #3
 8005aae:	f025 0503 	bic.w	r5, r5, #3
 8005ab2:	3508      	adds	r5, #8
 8005ab4:	2d0c      	cmp	r5, #12
 8005ab6:	bf38      	it	cc
 8005ab8:	250c      	movcc	r5, #12
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	4606      	mov	r6, r0
 8005abe:	db01      	blt.n	8005ac4 <_malloc_r+0x1c>
 8005ac0:	42a9      	cmp	r1, r5
 8005ac2:	d904      	bls.n	8005ace <_malloc_r+0x26>
 8005ac4:	230c      	movs	r3, #12
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ace:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ba4 <_malloc_r+0xfc>
 8005ad2:	f000 f869 	bl	8005ba8 <__malloc_lock>
 8005ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8005ada:	461c      	mov	r4, r3
 8005adc:	bb44      	cbnz	r4, 8005b30 <_malloc_r+0x88>
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f7ff ffbf 	bl	8005a64 <sbrk_aligned>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	4604      	mov	r4, r0
 8005aea:	d158      	bne.n	8005b9e <_malloc_r+0xf6>
 8005aec:	f8d8 4000 	ldr.w	r4, [r8]
 8005af0:	4627      	mov	r7, r4
 8005af2:	2f00      	cmp	r7, #0
 8005af4:	d143      	bne.n	8005b7e <_malloc_r+0xd6>
 8005af6:	2c00      	cmp	r4, #0
 8005af8:	d04b      	beq.n	8005b92 <_malloc_r+0xea>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	4639      	mov	r1, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	eb04 0903 	add.w	r9, r4, r3
 8005b04:	f001 fb60 	bl	80071c8 <_sbrk_r>
 8005b08:	4581      	cmp	r9, r0
 8005b0a:	d142      	bne.n	8005b92 <_malloc_r+0xea>
 8005b0c:	6821      	ldr	r1, [r4, #0]
 8005b0e:	1a6d      	subs	r5, r5, r1
 8005b10:	4629      	mov	r1, r5
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7ff ffa6 	bl	8005a64 <sbrk_aligned>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d03a      	beq.n	8005b92 <_malloc_r+0xea>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	442b      	add	r3, r5
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	f8d8 3000 	ldr.w	r3, [r8]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	bb62      	cbnz	r2, 8005b84 <_malloc_r+0xdc>
 8005b2a:	f8c8 7000 	str.w	r7, [r8]
 8005b2e:	e00f      	b.n	8005b50 <_malloc_r+0xa8>
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	1b52      	subs	r2, r2, r5
 8005b34:	d420      	bmi.n	8005b78 <_malloc_r+0xd0>
 8005b36:	2a0b      	cmp	r2, #11
 8005b38:	d917      	bls.n	8005b6a <_malloc_r+0xc2>
 8005b3a:	1961      	adds	r1, r4, r5
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	6025      	str	r5, [r4, #0]
 8005b40:	bf18      	it	ne
 8005b42:	6059      	strne	r1, [r3, #4]
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	bf08      	it	eq
 8005b48:	f8c8 1000 	streq.w	r1, [r8]
 8005b4c:	5162      	str	r2, [r4, r5]
 8005b4e:	604b      	str	r3, [r1, #4]
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 f82f 	bl	8005bb4 <__malloc_unlock>
 8005b56:	f104 000b 	add.w	r0, r4, #11
 8005b5a:	1d23      	adds	r3, r4, #4
 8005b5c:	f020 0007 	bic.w	r0, r0, #7
 8005b60:	1ac2      	subs	r2, r0, r3
 8005b62:	bf1c      	itt	ne
 8005b64:	1a1b      	subne	r3, r3, r0
 8005b66:	50a3      	strne	r3, [r4, r2]
 8005b68:	e7af      	b.n	8005aca <_malloc_r+0x22>
 8005b6a:	6862      	ldr	r2, [r4, #4]
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	bf0c      	ite	eq
 8005b70:	f8c8 2000 	streq.w	r2, [r8]
 8005b74:	605a      	strne	r2, [r3, #4]
 8005b76:	e7eb      	b.n	8005b50 <_malloc_r+0xa8>
 8005b78:	4623      	mov	r3, r4
 8005b7a:	6864      	ldr	r4, [r4, #4]
 8005b7c:	e7ae      	b.n	8005adc <_malloc_r+0x34>
 8005b7e:	463c      	mov	r4, r7
 8005b80:	687f      	ldr	r7, [r7, #4]
 8005b82:	e7b6      	b.n	8005af2 <_malloc_r+0x4a>
 8005b84:	461a      	mov	r2, r3
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d1fb      	bne.n	8005b84 <_malloc_r+0xdc>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6053      	str	r3, [r2, #4]
 8005b90:	e7de      	b.n	8005b50 <_malloc_r+0xa8>
 8005b92:	230c      	movs	r3, #12
 8005b94:	6033      	str	r3, [r6, #0]
 8005b96:	4630      	mov	r0, r6
 8005b98:	f000 f80c 	bl	8005bb4 <__malloc_unlock>
 8005b9c:	e794      	b.n	8005ac8 <_malloc_r+0x20>
 8005b9e:	6005      	str	r5, [r0, #0]
 8005ba0:	e7d6      	b.n	8005b50 <_malloc_r+0xa8>
 8005ba2:	bf00      	nop
 8005ba4:	20000454 	.word	0x20000454

08005ba8 <__malloc_lock>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	@ (8005bb0 <__malloc_lock+0x8>)
 8005baa:	f7ff b8b8 	b.w	8004d1e <__retarget_lock_acquire_recursive>
 8005bae:	bf00      	nop
 8005bb0:	2000044c 	.word	0x2000044c

08005bb4 <__malloc_unlock>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	@ (8005bbc <__malloc_unlock+0x8>)
 8005bb6:	f7ff b8b3 	b.w	8004d20 <__retarget_lock_release_recursive>
 8005bba:	bf00      	nop
 8005bbc:	2000044c 	.word	0x2000044c

08005bc0 <_Balloc>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	69c6      	ldr	r6, [r0, #28]
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	460d      	mov	r5, r1
 8005bc8:	b976      	cbnz	r6, 8005be8 <_Balloc+0x28>
 8005bca:	2010      	movs	r0, #16
 8005bcc:	f7ff ff42 	bl	8005a54 <malloc>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	61e0      	str	r0, [r4, #28]
 8005bd4:	b920      	cbnz	r0, 8005be0 <_Balloc+0x20>
 8005bd6:	4b18      	ldr	r3, [pc, #96]	@ (8005c38 <_Balloc+0x78>)
 8005bd8:	4818      	ldr	r0, [pc, #96]	@ (8005c3c <_Balloc+0x7c>)
 8005bda:	216b      	movs	r1, #107	@ 0x6b
 8005bdc:	f001 fb12 	bl	8007204 <__assert_func>
 8005be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005be4:	6006      	str	r6, [r0, #0]
 8005be6:	60c6      	str	r6, [r0, #12]
 8005be8:	69e6      	ldr	r6, [r4, #28]
 8005bea:	68f3      	ldr	r3, [r6, #12]
 8005bec:	b183      	cbz	r3, 8005c10 <_Balloc+0x50>
 8005bee:	69e3      	ldr	r3, [r4, #28]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005bf6:	b9b8      	cbnz	r0, 8005c28 <_Balloc+0x68>
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	fa01 f605 	lsl.w	r6, r1, r5
 8005bfe:	1d72      	adds	r2, r6, #5
 8005c00:	0092      	lsls	r2, r2, #2
 8005c02:	4620      	mov	r0, r4
 8005c04:	f001 fb1c 	bl	8007240 <_calloc_r>
 8005c08:	b160      	cbz	r0, 8005c24 <_Balloc+0x64>
 8005c0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c0e:	e00e      	b.n	8005c2e <_Balloc+0x6e>
 8005c10:	2221      	movs	r2, #33	@ 0x21
 8005c12:	2104      	movs	r1, #4
 8005c14:	4620      	mov	r0, r4
 8005c16:	f001 fb13 	bl	8007240 <_calloc_r>
 8005c1a:	69e3      	ldr	r3, [r4, #28]
 8005c1c:	60f0      	str	r0, [r6, #12]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e4      	bne.n	8005bee <_Balloc+0x2e>
 8005c24:	2000      	movs	r0, #0
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	6802      	ldr	r2, [r0, #0]
 8005c2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c34:	e7f7      	b.n	8005c26 <_Balloc+0x66>
 8005c36:	bf00      	nop
 8005c38:	080078cf 	.word	0x080078cf
 8005c3c:	0800794f 	.word	0x0800794f

08005c40 <_Bfree>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	69c6      	ldr	r6, [r0, #28]
 8005c44:	4605      	mov	r5, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	b976      	cbnz	r6, 8005c68 <_Bfree+0x28>
 8005c4a:	2010      	movs	r0, #16
 8005c4c:	f7ff ff02 	bl	8005a54 <malloc>
 8005c50:	4602      	mov	r2, r0
 8005c52:	61e8      	str	r0, [r5, #28]
 8005c54:	b920      	cbnz	r0, 8005c60 <_Bfree+0x20>
 8005c56:	4b09      	ldr	r3, [pc, #36]	@ (8005c7c <_Bfree+0x3c>)
 8005c58:	4809      	ldr	r0, [pc, #36]	@ (8005c80 <_Bfree+0x40>)
 8005c5a:	218f      	movs	r1, #143	@ 0x8f
 8005c5c:	f001 fad2 	bl	8007204 <__assert_func>
 8005c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c64:	6006      	str	r6, [r0, #0]
 8005c66:	60c6      	str	r6, [r0, #12]
 8005c68:	b13c      	cbz	r4, 8005c7a <_Bfree+0x3a>
 8005c6a:	69eb      	ldr	r3, [r5, #28]
 8005c6c:	6862      	ldr	r2, [r4, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c74:	6021      	str	r1, [r4, #0]
 8005c76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
 8005c7c:	080078cf 	.word	0x080078cf
 8005c80:	0800794f 	.word	0x0800794f

08005c84 <__multadd>:
 8005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	690d      	ldr	r5, [r1, #16]
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	461e      	mov	r6, r3
 8005c90:	f101 0c14 	add.w	ip, r1, #20
 8005c94:	2000      	movs	r0, #0
 8005c96:	f8dc 3000 	ldr.w	r3, [ip]
 8005c9a:	b299      	uxth	r1, r3
 8005c9c:	fb02 6101 	mla	r1, r2, r1, r6
 8005ca0:	0c1e      	lsrs	r6, r3, #16
 8005ca2:	0c0b      	lsrs	r3, r1, #16
 8005ca4:	fb02 3306 	mla	r3, r2, r6, r3
 8005ca8:	b289      	uxth	r1, r1
 8005caa:	3001      	adds	r0, #1
 8005cac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cb0:	4285      	cmp	r5, r0
 8005cb2:	f84c 1b04 	str.w	r1, [ip], #4
 8005cb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cba:	dcec      	bgt.n	8005c96 <__multadd+0x12>
 8005cbc:	b30e      	cbz	r6, 8005d02 <__multadd+0x7e>
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc19      	bgt.n	8005cf8 <__multadd+0x74>
 8005cc4:	6861      	ldr	r1, [r4, #4]
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	3101      	adds	r1, #1
 8005cca:	f7ff ff79 	bl	8005bc0 <_Balloc>
 8005cce:	4680      	mov	r8, r0
 8005cd0:	b928      	cbnz	r0, 8005cde <__multadd+0x5a>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d08 <__multadd+0x84>)
 8005cd6:	480d      	ldr	r0, [pc, #52]	@ (8005d0c <__multadd+0x88>)
 8005cd8:	21ba      	movs	r1, #186	@ 0xba
 8005cda:	f001 fa93 	bl	8007204 <__assert_func>
 8005cde:	6922      	ldr	r2, [r4, #16]
 8005ce0:	3202      	adds	r2, #2
 8005ce2:	f104 010c 	add.w	r1, r4, #12
 8005ce6:	0092      	lsls	r2, r2, #2
 8005ce8:	300c      	adds	r0, #12
 8005cea:	f001 fa7d 	bl	80071e8 <memcpy>
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	f7ff ffa5 	bl	8005c40 <_Bfree>
 8005cf6:	4644      	mov	r4, r8
 8005cf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	615e      	str	r6, [r3, #20]
 8005d00:	6125      	str	r5, [r4, #16]
 8005d02:	4620      	mov	r0, r4
 8005d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d08:	0800793e 	.word	0x0800793e
 8005d0c:	0800794f 	.word	0x0800794f

08005d10 <__hi0bits>:
 8005d10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d14:	4603      	mov	r3, r0
 8005d16:	bf36      	itet	cc
 8005d18:	0403      	lslcc	r3, r0, #16
 8005d1a:	2000      	movcs	r0, #0
 8005d1c:	2010      	movcc	r0, #16
 8005d1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d22:	bf3c      	itt	cc
 8005d24:	021b      	lslcc	r3, r3, #8
 8005d26:	3008      	addcc	r0, #8
 8005d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d2c:	bf3c      	itt	cc
 8005d2e:	011b      	lslcc	r3, r3, #4
 8005d30:	3004      	addcc	r0, #4
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d36:	bf3c      	itt	cc
 8005d38:	009b      	lslcc	r3, r3, #2
 8005d3a:	3002      	addcc	r0, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	db05      	blt.n	8005d4c <__hi0bits+0x3c>
 8005d40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005d44:	f100 0001 	add.w	r0, r0, #1
 8005d48:	bf08      	it	eq
 8005d4a:	2020      	moveq	r0, #32
 8005d4c:	4770      	bx	lr

08005d4e <__lo0bits>:
 8005d4e:	6803      	ldr	r3, [r0, #0]
 8005d50:	4602      	mov	r2, r0
 8005d52:	f013 0007 	ands.w	r0, r3, #7
 8005d56:	d00b      	beq.n	8005d70 <__lo0bits+0x22>
 8005d58:	07d9      	lsls	r1, r3, #31
 8005d5a:	d421      	bmi.n	8005da0 <__lo0bits+0x52>
 8005d5c:	0798      	lsls	r0, r3, #30
 8005d5e:	bf49      	itett	mi
 8005d60:	085b      	lsrmi	r3, r3, #1
 8005d62:	089b      	lsrpl	r3, r3, #2
 8005d64:	2001      	movmi	r0, #1
 8005d66:	6013      	strmi	r3, [r2, #0]
 8005d68:	bf5c      	itt	pl
 8005d6a:	6013      	strpl	r3, [r2, #0]
 8005d6c:	2002      	movpl	r0, #2
 8005d6e:	4770      	bx	lr
 8005d70:	b299      	uxth	r1, r3
 8005d72:	b909      	cbnz	r1, 8005d78 <__lo0bits+0x2a>
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	2010      	movs	r0, #16
 8005d78:	b2d9      	uxtb	r1, r3
 8005d7a:	b909      	cbnz	r1, 8005d80 <__lo0bits+0x32>
 8005d7c:	3008      	adds	r0, #8
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	0719      	lsls	r1, r3, #28
 8005d82:	bf04      	itt	eq
 8005d84:	091b      	lsreq	r3, r3, #4
 8005d86:	3004      	addeq	r0, #4
 8005d88:	0799      	lsls	r1, r3, #30
 8005d8a:	bf04      	itt	eq
 8005d8c:	089b      	lsreq	r3, r3, #2
 8005d8e:	3002      	addeq	r0, #2
 8005d90:	07d9      	lsls	r1, r3, #31
 8005d92:	d403      	bmi.n	8005d9c <__lo0bits+0x4e>
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	f100 0001 	add.w	r0, r0, #1
 8005d9a:	d003      	beq.n	8005da4 <__lo0bits+0x56>
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	4770      	bx	lr
 8005da0:	2000      	movs	r0, #0
 8005da2:	4770      	bx	lr
 8005da4:	2020      	movs	r0, #32
 8005da6:	4770      	bx	lr

08005da8 <__i2b>:
 8005da8:	b510      	push	{r4, lr}
 8005daa:	460c      	mov	r4, r1
 8005dac:	2101      	movs	r1, #1
 8005dae:	f7ff ff07 	bl	8005bc0 <_Balloc>
 8005db2:	4602      	mov	r2, r0
 8005db4:	b928      	cbnz	r0, 8005dc2 <__i2b+0x1a>
 8005db6:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <__i2b+0x24>)
 8005db8:	4805      	ldr	r0, [pc, #20]	@ (8005dd0 <__i2b+0x28>)
 8005dba:	f240 1145 	movw	r1, #325	@ 0x145
 8005dbe:	f001 fa21 	bl	8007204 <__assert_func>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	6144      	str	r4, [r0, #20]
 8005dc6:	6103      	str	r3, [r0, #16]
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	bf00      	nop
 8005dcc:	0800793e 	.word	0x0800793e
 8005dd0:	0800794f 	.word	0x0800794f

08005dd4 <__multiply>:
 8005dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	4614      	mov	r4, r2
 8005dda:	690a      	ldr	r2, [r1, #16]
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	bfa8      	it	ge
 8005de2:	4623      	movge	r3, r4
 8005de4:	460f      	mov	r7, r1
 8005de6:	bfa4      	itt	ge
 8005de8:	460c      	movge	r4, r1
 8005dea:	461f      	movge	r7, r3
 8005dec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005df0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005df4:	68a3      	ldr	r3, [r4, #8]
 8005df6:	6861      	ldr	r1, [r4, #4]
 8005df8:	eb0a 0609 	add.w	r6, sl, r9
 8005dfc:	42b3      	cmp	r3, r6
 8005dfe:	b085      	sub	sp, #20
 8005e00:	bfb8      	it	lt
 8005e02:	3101      	addlt	r1, #1
 8005e04:	f7ff fedc 	bl	8005bc0 <_Balloc>
 8005e08:	b930      	cbnz	r0, 8005e18 <__multiply+0x44>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	4b44      	ldr	r3, [pc, #272]	@ (8005f20 <__multiply+0x14c>)
 8005e0e:	4845      	ldr	r0, [pc, #276]	@ (8005f24 <__multiply+0x150>)
 8005e10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e14:	f001 f9f6 	bl	8007204 <__assert_func>
 8005e18:	f100 0514 	add.w	r5, r0, #20
 8005e1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e20:	462b      	mov	r3, r5
 8005e22:	2200      	movs	r2, #0
 8005e24:	4543      	cmp	r3, r8
 8005e26:	d321      	bcc.n	8005e6c <__multiply+0x98>
 8005e28:	f107 0114 	add.w	r1, r7, #20
 8005e2c:	f104 0214 	add.w	r2, r4, #20
 8005e30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005e34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	1b13      	subs	r3, r2, r4
 8005e3c:	3b15      	subs	r3, #21
 8005e3e:	f023 0303 	bic.w	r3, r3, #3
 8005e42:	3304      	adds	r3, #4
 8005e44:	f104 0715 	add.w	r7, r4, #21
 8005e48:	42ba      	cmp	r2, r7
 8005e4a:	bf38      	it	cc
 8005e4c:	2304      	movcc	r3, #4
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	9103      	str	r1, [sp, #12]
 8005e54:	428b      	cmp	r3, r1
 8005e56:	d80c      	bhi.n	8005e72 <__multiply+0x9e>
 8005e58:	2e00      	cmp	r6, #0
 8005e5a:	dd03      	ble.n	8005e64 <__multiply+0x90>
 8005e5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d05b      	beq.n	8005f1c <__multiply+0x148>
 8005e64:	6106      	str	r6, [r0, #16]
 8005e66:	b005      	add	sp, #20
 8005e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6c:	f843 2b04 	str.w	r2, [r3], #4
 8005e70:	e7d8      	b.n	8005e24 <__multiply+0x50>
 8005e72:	f8b1 a000 	ldrh.w	sl, [r1]
 8005e76:	f1ba 0f00 	cmp.w	sl, #0
 8005e7a:	d024      	beq.n	8005ec6 <__multiply+0xf2>
 8005e7c:	f104 0e14 	add.w	lr, r4, #20
 8005e80:	46a9      	mov	r9, r5
 8005e82:	f04f 0c00 	mov.w	ip, #0
 8005e86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e8a:	f8d9 3000 	ldr.w	r3, [r9]
 8005e8e:	fa1f fb87 	uxth.w	fp, r7
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	fb0a 330b 	mla	r3, sl, fp, r3
 8005e98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005e9c:	f8d9 7000 	ldr.w	r7, [r9]
 8005ea0:	4463      	add	r3, ip
 8005ea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005ea6:	fb0a c70b 	mla	r7, sl, fp, ip
 8005eaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005eb4:	4572      	cmp	r2, lr
 8005eb6:	f849 3b04 	str.w	r3, [r9], #4
 8005eba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005ebe:	d8e2      	bhi.n	8005e86 <__multiply+0xb2>
 8005ec0:	9b01      	ldr	r3, [sp, #4]
 8005ec2:	f845 c003 	str.w	ip, [r5, r3]
 8005ec6:	9b03      	ldr	r3, [sp, #12]
 8005ec8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ecc:	3104      	adds	r1, #4
 8005ece:	f1b9 0f00 	cmp.w	r9, #0
 8005ed2:	d021      	beq.n	8005f18 <__multiply+0x144>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	f104 0c14 	add.w	ip, r4, #20
 8005eda:	46ae      	mov	lr, r5
 8005edc:	f04f 0a00 	mov.w	sl, #0
 8005ee0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ee4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005ee8:	fb09 770b 	mla	r7, r9, fp, r7
 8005eec:	4457      	add	r7, sl
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ef4:	f84e 3b04 	str.w	r3, [lr], #4
 8005ef8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005efc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f00:	f8be 3000 	ldrh.w	r3, [lr]
 8005f04:	fb09 330a 	mla	r3, r9, sl, r3
 8005f08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005f0c:	4562      	cmp	r2, ip
 8005f0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f12:	d8e5      	bhi.n	8005ee0 <__multiply+0x10c>
 8005f14:	9f01      	ldr	r7, [sp, #4]
 8005f16:	51eb      	str	r3, [r5, r7]
 8005f18:	3504      	adds	r5, #4
 8005f1a:	e799      	b.n	8005e50 <__multiply+0x7c>
 8005f1c:	3e01      	subs	r6, #1
 8005f1e:	e79b      	b.n	8005e58 <__multiply+0x84>
 8005f20:	0800793e 	.word	0x0800793e
 8005f24:	0800794f 	.word	0x0800794f

08005f28 <__pow5mult>:
 8005f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f2c:	4615      	mov	r5, r2
 8005f2e:	f012 0203 	ands.w	r2, r2, #3
 8005f32:	4607      	mov	r7, r0
 8005f34:	460e      	mov	r6, r1
 8005f36:	d007      	beq.n	8005f48 <__pow5mult+0x20>
 8005f38:	4c25      	ldr	r4, [pc, #148]	@ (8005fd0 <__pow5mult+0xa8>)
 8005f3a:	3a01      	subs	r2, #1
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f42:	f7ff fe9f 	bl	8005c84 <__multadd>
 8005f46:	4606      	mov	r6, r0
 8005f48:	10ad      	asrs	r5, r5, #2
 8005f4a:	d03d      	beq.n	8005fc8 <__pow5mult+0xa0>
 8005f4c:	69fc      	ldr	r4, [r7, #28]
 8005f4e:	b97c      	cbnz	r4, 8005f70 <__pow5mult+0x48>
 8005f50:	2010      	movs	r0, #16
 8005f52:	f7ff fd7f 	bl	8005a54 <malloc>
 8005f56:	4602      	mov	r2, r0
 8005f58:	61f8      	str	r0, [r7, #28]
 8005f5a:	b928      	cbnz	r0, 8005f68 <__pow5mult+0x40>
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd4 <__pow5mult+0xac>)
 8005f5e:	481e      	ldr	r0, [pc, #120]	@ (8005fd8 <__pow5mult+0xb0>)
 8005f60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f64:	f001 f94e 	bl	8007204 <__assert_func>
 8005f68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f6c:	6004      	str	r4, [r0, #0]
 8005f6e:	60c4      	str	r4, [r0, #12]
 8005f70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005f74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f78:	b94c      	cbnz	r4, 8005f8e <__pow5mult+0x66>
 8005f7a:	f240 2171 	movw	r1, #625	@ 0x271
 8005f7e:	4638      	mov	r0, r7
 8005f80:	f7ff ff12 	bl	8005da8 <__i2b>
 8005f84:	2300      	movs	r3, #0
 8005f86:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	f04f 0900 	mov.w	r9, #0
 8005f92:	07eb      	lsls	r3, r5, #31
 8005f94:	d50a      	bpl.n	8005fac <__pow5mult+0x84>
 8005f96:	4631      	mov	r1, r6
 8005f98:	4622      	mov	r2, r4
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	f7ff ff1a 	bl	8005dd4 <__multiply>
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7ff fe4b 	bl	8005c40 <_Bfree>
 8005faa:	4646      	mov	r6, r8
 8005fac:	106d      	asrs	r5, r5, #1
 8005fae:	d00b      	beq.n	8005fc8 <__pow5mult+0xa0>
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	b938      	cbnz	r0, 8005fc4 <__pow5mult+0x9c>
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f7ff ff0b 	bl	8005dd4 <__multiply>
 8005fbe:	6020      	str	r0, [r4, #0]
 8005fc0:	f8c0 9000 	str.w	r9, [r0]
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	e7e4      	b.n	8005f92 <__pow5mult+0x6a>
 8005fc8:	4630      	mov	r0, r6
 8005fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fce:	bf00      	nop
 8005fd0:	080079a8 	.word	0x080079a8
 8005fd4:	080078cf 	.word	0x080078cf
 8005fd8:	0800794f 	.word	0x0800794f

08005fdc <__lshift>:
 8005fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	6849      	ldr	r1, [r1, #4]
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	4607      	mov	r7, r0
 8005fee:	4691      	mov	r9, r2
 8005ff0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ff4:	f108 0601 	add.w	r6, r8, #1
 8005ff8:	42b3      	cmp	r3, r6
 8005ffa:	db0b      	blt.n	8006014 <__lshift+0x38>
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7ff fddf 	bl	8005bc0 <_Balloc>
 8006002:	4605      	mov	r5, r0
 8006004:	b948      	cbnz	r0, 800601a <__lshift+0x3e>
 8006006:	4602      	mov	r2, r0
 8006008:	4b28      	ldr	r3, [pc, #160]	@ (80060ac <__lshift+0xd0>)
 800600a:	4829      	ldr	r0, [pc, #164]	@ (80060b0 <__lshift+0xd4>)
 800600c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006010:	f001 f8f8 	bl	8007204 <__assert_func>
 8006014:	3101      	adds	r1, #1
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	e7ee      	b.n	8005ff8 <__lshift+0x1c>
 800601a:	2300      	movs	r3, #0
 800601c:	f100 0114 	add.w	r1, r0, #20
 8006020:	f100 0210 	add.w	r2, r0, #16
 8006024:	4618      	mov	r0, r3
 8006026:	4553      	cmp	r3, sl
 8006028:	db33      	blt.n	8006092 <__lshift+0xb6>
 800602a:	6920      	ldr	r0, [r4, #16]
 800602c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006030:	f104 0314 	add.w	r3, r4, #20
 8006034:	f019 091f 	ands.w	r9, r9, #31
 8006038:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800603c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006040:	d02b      	beq.n	800609a <__lshift+0xbe>
 8006042:	f1c9 0e20 	rsb	lr, r9, #32
 8006046:	468a      	mov	sl, r1
 8006048:	2200      	movs	r2, #0
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	fa00 f009 	lsl.w	r0, r0, r9
 8006050:	4310      	orrs	r0, r2
 8006052:	f84a 0b04 	str.w	r0, [sl], #4
 8006056:	f853 2b04 	ldr.w	r2, [r3], #4
 800605a:	459c      	cmp	ip, r3
 800605c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006060:	d8f3      	bhi.n	800604a <__lshift+0x6e>
 8006062:	ebac 0304 	sub.w	r3, ip, r4
 8006066:	3b15      	subs	r3, #21
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	3304      	adds	r3, #4
 800606e:	f104 0015 	add.w	r0, r4, #21
 8006072:	4584      	cmp	ip, r0
 8006074:	bf38      	it	cc
 8006076:	2304      	movcc	r3, #4
 8006078:	50ca      	str	r2, [r1, r3]
 800607a:	b10a      	cbz	r2, 8006080 <__lshift+0xa4>
 800607c:	f108 0602 	add.w	r6, r8, #2
 8006080:	3e01      	subs	r6, #1
 8006082:	4638      	mov	r0, r7
 8006084:	612e      	str	r6, [r5, #16]
 8006086:	4621      	mov	r1, r4
 8006088:	f7ff fdda 	bl	8005c40 <_Bfree>
 800608c:	4628      	mov	r0, r5
 800608e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006092:	f842 0f04 	str.w	r0, [r2, #4]!
 8006096:	3301      	adds	r3, #1
 8006098:	e7c5      	b.n	8006026 <__lshift+0x4a>
 800609a:	3904      	subs	r1, #4
 800609c:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80060a4:	459c      	cmp	ip, r3
 80060a6:	d8f9      	bhi.n	800609c <__lshift+0xc0>
 80060a8:	e7ea      	b.n	8006080 <__lshift+0xa4>
 80060aa:	bf00      	nop
 80060ac:	0800793e 	.word	0x0800793e
 80060b0:	0800794f 	.word	0x0800794f

080060b4 <__mcmp>:
 80060b4:	690a      	ldr	r2, [r1, #16]
 80060b6:	4603      	mov	r3, r0
 80060b8:	6900      	ldr	r0, [r0, #16]
 80060ba:	1a80      	subs	r0, r0, r2
 80060bc:	b530      	push	{r4, r5, lr}
 80060be:	d10e      	bne.n	80060de <__mcmp+0x2a>
 80060c0:	3314      	adds	r3, #20
 80060c2:	3114      	adds	r1, #20
 80060c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060d4:	4295      	cmp	r5, r2
 80060d6:	d003      	beq.n	80060e0 <__mcmp+0x2c>
 80060d8:	d205      	bcs.n	80060e6 <__mcmp+0x32>
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	bd30      	pop	{r4, r5, pc}
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d3f3      	bcc.n	80060cc <__mcmp+0x18>
 80060e4:	e7fb      	b.n	80060de <__mcmp+0x2a>
 80060e6:	2001      	movs	r0, #1
 80060e8:	e7f9      	b.n	80060de <__mcmp+0x2a>
	...

080060ec <__mdiff>:
 80060ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f0:	4689      	mov	r9, r1
 80060f2:	4606      	mov	r6, r0
 80060f4:	4611      	mov	r1, r2
 80060f6:	4648      	mov	r0, r9
 80060f8:	4614      	mov	r4, r2
 80060fa:	f7ff ffdb 	bl	80060b4 <__mcmp>
 80060fe:	1e05      	subs	r5, r0, #0
 8006100:	d112      	bne.n	8006128 <__mdiff+0x3c>
 8006102:	4629      	mov	r1, r5
 8006104:	4630      	mov	r0, r6
 8006106:	f7ff fd5b 	bl	8005bc0 <_Balloc>
 800610a:	4602      	mov	r2, r0
 800610c:	b928      	cbnz	r0, 800611a <__mdiff+0x2e>
 800610e:	4b3f      	ldr	r3, [pc, #252]	@ (800620c <__mdiff+0x120>)
 8006110:	f240 2137 	movw	r1, #567	@ 0x237
 8006114:	483e      	ldr	r0, [pc, #248]	@ (8006210 <__mdiff+0x124>)
 8006116:	f001 f875 	bl	8007204 <__assert_func>
 800611a:	2301      	movs	r3, #1
 800611c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006120:	4610      	mov	r0, r2
 8006122:	b003      	add	sp, #12
 8006124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006128:	bfbc      	itt	lt
 800612a:	464b      	movlt	r3, r9
 800612c:	46a1      	movlt	r9, r4
 800612e:	4630      	mov	r0, r6
 8006130:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006134:	bfba      	itte	lt
 8006136:	461c      	movlt	r4, r3
 8006138:	2501      	movlt	r5, #1
 800613a:	2500      	movge	r5, #0
 800613c:	f7ff fd40 	bl	8005bc0 <_Balloc>
 8006140:	4602      	mov	r2, r0
 8006142:	b918      	cbnz	r0, 800614c <__mdiff+0x60>
 8006144:	4b31      	ldr	r3, [pc, #196]	@ (800620c <__mdiff+0x120>)
 8006146:	f240 2145 	movw	r1, #581	@ 0x245
 800614a:	e7e3      	b.n	8006114 <__mdiff+0x28>
 800614c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006150:	6926      	ldr	r6, [r4, #16]
 8006152:	60c5      	str	r5, [r0, #12]
 8006154:	f109 0310 	add.w	r3, r9, #16
 8006158:	f109 0514 	add.w	r5, r9, #20
 800615c:	f104 0e14 	add.w	lr, r4, #20
 8006160:	f100 0b14 	add.w	fp, r0, #20
 8006164:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006168:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	46d9      	mov	r9, fp
 8006170:	f04f 0c00 	mov.w	ip, #0
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	f85e 0b04 	ldr.w	r0, [lr], #4
 800617a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	fa1f f38a 	uxth.w	r3, sl
 8006184:	4619      	mov	r1, r3
 8006186:	b283      	uxth	r3, r0
 8006188:	1acb      	subs	r3, r1, r3
 800618a:	0c00      	lsrs	r0, r0, #16
 800618c:	4463      	add	r3, ip
 800618e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006192:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006196:	b29b      	uxth	r3, r3
 8006198:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800619c:	4576      	cmp	r6, lr
 800619e:	f849 3b04 	str.w	r3, [r9], #4
 80061a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061a6:	d8e5      	bhi.n	8006174 <__mdiff+0x88>
 80061a8:	1b33      	subs	r3, r6, r4
 80061aa:	3b15      	subs	r3, #21
 80061ac:	f023 0303 	bic.w	r3, r3, #3
 80061b0:	3415      	adds	r4, #21
 80061b2:	3304      	adds	r3, #4
 80061b4:	42a6      	cmp	r6, r4
 80061b6:	bf38      	it	cc
 80061b8:	2304      	movcc	r3, #4
 80061ba:	441d      	add	r5, r3
 80061bc:	445b      	add	r3, fp
 80061be:	461e      	mov	r6, r3
 80061c0:	462c      	mov	r4, r5
 80061c2:	4544      	cmp	r4, r8
 80061c4:	d30e      	bcc.n	80061e4 <__mdiff+0xf8>
 80061c6:	f108 0103 	add.w	r1, r8, #3
 80061ca:	1b49      	subs	r1, r1, r5
 80061cc:	f021 0103 	bic.w	r1, r1, #3
 80061d0:	3d03      	subs	r5, #3
 80061d2:	45a8      	cmp	r8, r5
 80061d4:	bf38      	it	cc
 80061d6:	2100      	movcc	r1, #0
 80061d8:	440b      	add	r3, r1
 80061da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061de:	b191      	cbz	r1, 8006206 <__mdiff+0x11a>
 80061e0:	6117      	str	r7, [r2, #16]
 80061e2:	e79d      	b.n	8006120 <__mdiff+0x34>
 80061e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80061e8:	46e6      	mov	lr, ip
 80061ea:	0c08      	lsrs	r0, r1, #16
 80061ec:	fa1c fc81 	uxtah	ip, ip, r1
 80061f0:	4471      	add	r1, lr
 80061f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80061f6:	b289      	uxth	r1, r1
 80061f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061fc:	f846 1b04 	str.w	r1, [r6], #4
 8006200:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006204:	e7dd      	b.n	80061c2 <__mdiff+0xd6>
 8006206:	3f01      	subs	r7, #1
 8006208:	e7e7      	b.n	80061da <__mdiff+0xee>
 800620a:	bf00      	nop
 800620c:	0800793e 	.word	0x0800793e
 8006210:	0800794f 	.word	0x0800794f

08006214 <__d2b>:
 8006214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006218:	460f      	mov	r7, r1
 800621a:	2101      	movs	r1, #1
 800621c:	ec59 8b10 	vmov	r8, r9, d0
 8006220:	4616      	mov	r6, r2
 8006222:	f7ff fccd 	bl	8005bc0 <_Balloc>
 8006226:	4604      	mov	r4, r0
 8006228:	b930      	cbnz	r0, 8006238 <__d2b+0x24>
 800622a:	4602      	mov	r2, r0
 800622c:	4b23      	ldr	r3, [pc, #140]	@ (80062bc <__d2b+0xa8>)
 800622e:	4824      	ldr	r0, [pc, #144]	@ (80062c0 <__d2b+0xac>)
 8006230:	f240 310f 	movw	r1, #783	@ 0x30f
 8006234:	f000 ffe6 	bl	8007204 <__assert_func>
 8006238:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800623c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006240:	b10d      	cbz	r5, 8006246 <__d2b+0x32>
 8006242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006246:	9301      	str	r3, [sp, #4]
 8006248:	f1b8 0300 	subs.w	r3, r8, #0
 800624c:	d023      	beq.n	8006296 <__d2b+0x82>
 800624e:	4668      	mov	r0, sp
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	f7ff fd7c 	bl	8005d4e <__lo0bits>
 8006256:	e9dd 1200 	ldrd	r1, r2, [sp]
 800625a:	b1d0      	cbz	r0, 8006292 <__d2b+0x7e>
 800625c:	f1c0 0320 	rsb	r3, r0, #32
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	430b      	orrs	r3, r1
 8006266:	40c2      	lsrs	r2, r0
 8006268:	6163      	str	r3, [r4, #20]
 800626a:	9201      	str	r2, [sp, #4]
 800626c:	9b01      	ldr	r3, [sp, #4]
 800626e:	61a3      	str	r3, [r4, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf0c      	ite	eq
 8006274:	2201      	moveq	r2, #1
 8006276:	2202      	movne	r2, #2
 8006278:	6122      	str	r2, [r4, #16]
 800627a:	b1a5      	cbz	r5, 80062a6 <__d2b+0x92>
 800627c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006280:	4405      	add	r5, r0
 8006282:	603d      	str	r5, [r7, #0]
 8006284:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006288:	6030      	str	r0, [r6, #0]
 800628a:	4620      	mov	r0, r4
 800628c:	b003      	add	sp, #12
 800628e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006292:	6161      	str	r1, [r4, #20]
 8006294:	e7ea      	b.n	800626c <__d2b+0x58>
 8006296:	a801      	add	r0, sp, #4
 8006298:	f7ff fd59 	bl	8005d4e <__lo0bits>
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	6163      	str	r3, [r4, #20]
 80062a0:	3020      	adds	r0, #32
 80062a2:	2201      	movs	r2, #1
 80062a4:	e7e8      	b.n	8006278 <__d2b+0x64>
 80062a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80062ae:	6038      	str	r0, [r7, #0]
 80062b0:	6918      	ldr	r0, [r3, #16]
 80062b2:	f7ff fd2d 	bl	8005d10 <__hi0bits>
 80062b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062ba:	e7e5      	b.n	8006288 <__d2b+0x74>
 80062bc:	0800793e 	.word	0x0800793e
 80062c0:	0800794f 	.word	0x0800794f

080062c4 <__ssputs_r>:
 80062c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	688e      	ldr	r6, [r1, #8]
 80062ca:	461f      	mov	r7, r3
 80062cc:	42be      	cmp	r6, r7
 80062ce:	680b      	ldr	r3, [r1, #0]
 80062d0:	4682      	mov	sl, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	4690      	mov	r8, r2
 80062d6:	d82d      	bhi.n	8006334 <__ssputs_r+0x70>
 80062d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062e0:	d026      	beq.n	8006330 <__ssputs_r+0x6c>
 80062e2:	6965      	ldr	r5, [r4, #20]
 80062e4:	6909      	ldr	r1, [r1, #16]
 80062e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062ea:	eba3 0901 	sub.w	r9, r3, r1
 80062ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062f2:	1c7b      	adds	r3, r7, #1
 80062f4:	444b      	add	r3, r9
 80062f6:	106d      	asrs	r5, r5, #1
 80062f8:	429d      	cmp	r5, r3
 80062fa:	bf38      	it	cc
 80062fc:	461d      	movcc	r5, r3
 80062fe:	0553      	lsls	r3, r2, #21
 8006300:	d527      	bpl.n	8006352 <__ssputs_r+0x8e>
 8006302:	4629      	mov	r1, r5
 8006304:	f7ff fbd0 	bl	8005aa8 <_malloc_r>
 8006308:	4606      	mov	r6, r0
 800630a:	b360      	cbz	r0, 8006366 <__ssputs_r+0xa2>
 800630c:	6921      	ldr	r1, [r4, #16]
 800630e:	464a      	mov	r2, r9
 8006310:	f000 ff6a 	bl	80071e8 <memcpy>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800631a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	6126      	str	r6, [r4, #16]
 8006322:	6165      	str	r5, [r4, #20]
 8006324:	444e      	add	r6, r9
 8006326:	eba5 0509 	sub.w	r5, r5, r9
 800632a:	6026      	str	r6, [r4, #0]
 800632c:	60a5      	str	r5, [r4, #8]
 800632e:	463e      	mov	r6, r7
 8006330:	42be      	cmp	r6, r7
 8006332:	d900      	bls.n	8006336 <__ssputs_r+0x72>
 8006334:	463e      	mov	r6, r7
 8006336:	6820      	ldr	r0, [r4, #0]
 8006338:	4632      	mov	r2, r6
 800633a:	4641      	mov	r1, r8
 800633c:	f000 ff2a 	bl	8007194 <memmove>
 8006340:	68a3      	ldr	r3, [r4, #8]
 8006342:	1b9b      	subs	r3, r3, r6
 8006344:	60a3      	str	r3, [r4, #8]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	4433      	add	r3, r6
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	2000      	movs	r0, #0
 800634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006352:	462a      	mov	r2, r5
 8006354:	f000 ff9a 	bl	800728c <_realloc_r>
 8006358:	4606      	mov	r6, r0
 800635a:	2800      	cmp	r0, #0
 800635c:	d1e0      	bne.n	8006320 <__ssputs_r+0x5c>
 800635e:	6921      	ldr	r1, [r4, #16]
 8006360:	4650      	mov	r0, sl
 8006362:	f7ff fb2d 	bl	80059c0 <_free_r>
 8006366:	230c      	movs	r3, #12
 8006368:	f8ca 3000 	str.w	r3, [sl]
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e7e9      	b.n	800634e <__ssputs_r+0x8a>
	...

0800637c <_svfiprintf_r>:
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	4698      	mov	r8, r3
 8006382:	898b      	ldrh	r3, [r1, #12]
 8006384:	061b      	lsls	r3, r3, #24
 8006386:	b09d      	sub	sp, #116	@ 0x74
 8006388:	4607      	mov	r7, r0
 800638a:	460d      	mov	r5, r1
 800638c:	4614      	mov	r4, r2
 800638e:	d510      	bpl.n	80063b2 <_svfiprintf_r+0x36>
 8006390:	690b      	ldr	r3, [r1, #16]
 8006392:	b973      	cbnz	r3, 80063b2 <_svfiprintf_r+0x36>
 8006394:	2140      	movs	r1, #64	@ 0x40
 8006396:	f7ff fb87 	bl	8005aa8 <_malloc_r>
 800639a:	6028      	str	r0, [r5, #0]
 800639c:	6128      	str	r0, [r5, #16]
 800639e:	b930      	cbnz	r0, 80063ae <_svfiprintf_r+0x32>
 80063a0:	230c      	movs	r3, #12
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	b01d      	add	sp, #116	@ 0x74
 80063aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ae:	2340      	movs	r3, #64	@ 0x40
 80063b0:	616b      	str	r3, [r5, #20]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b6:	2320      	movs	r3, #32
 80063b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80063c0:	2330      	movs	r3, #48	@ 0x30
 80063c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006560 <_svfiprintf_r+0x1e4>
 80063c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063ca:	f04f 0901 	mov.w	r9, #1
 80063ce:	4623      	mov	r3, r4
 80063d0:	469a      	mov	sl, r3
 80063d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d6:	b10a      	cbz	r2, 80063dc <_svfiprintf_r+0x60>
 80063d8:	2a25      	cmp	r2, #37	@ 0x25
 80063da:	d1f9      	bne.n	80063d0 <_svfiprintf_r+0x54>
 80063dc:	ebba 0b04 	subs.w	fp, sl, r4
 80063e0:	d00b      	beq.n	80063fa <_svfiprintf_r+0x7e>
 80063e2:	465b      	mov	r3, fp
 80063e4:	4622      	mov	r2, r4
 80063e6:	4629      	mov	r1, r5
 80063e8:	4638      	mov	r0, r7
 80063ea:	f7ff ff6b 	bl	80062c4 <__ssputs_r>
 80063ee:	3001      	adds	r0, #1
 80063f0:	f000 80a7 	beq.w	8006542 <_svfiprintf_r+0x1c6>
 80063f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063f6:	445a      	add	r2, fp
 80063f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80063fa:	f89a 3000 	ldrb.w	r3, [sl]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 809f 	beq.w	8006542 <_svfiprintf_r+0x1c6>
 8006404:	2300      	movs	r3, #0
 8006406:	f04f 32ff 	mov.w	r2, #4294967295
 800640a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800640e:	f10a 0a01 	add.w	sl, sl, #1
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	9307      	str	r3, [sp, #28]
 8006416:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800641a:	931a      	str	r3, [sp, #104]	@ 0x68
 800641c:	4654      	mov	r4, sl
 800641e:	2205      	movs	r2, #5
 8006420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006424:	484e      	ldr	r0, [pc, #312]	@ (8006560 <_svfiprintf_r+0x1e4>)
 8006426:	f7f9 fef3 	bl	8000210 <memchr>
 800642a:	9a04      	ldr	r2, [sp, #16]
 800642c:	b9d8      	cbnz	r0, 8006466 <_svfiprintf_r+0xea>
 800642e:	06d0      	lsls	r0, r2, #27
 8006430:	bf44      	itt	mi
 8006432:	2320      	movmi	r3, #32
 8006434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006438:	0711      	lsls	r1, r2, #28
 800643a:	bf44      	itt	mi
 800643c:	232b      	movmi	r3, #43	@ 0x2b
 800643e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006442:	f89a 3000 	ldrb.w	r3, [sl]
 8006446:	2b2a      	cmp	r3, #42	@ 0x2a
 8006448:	d015      	beq.n	8006476 <_svfiprintf_r+0xfa>
 800644a:	9a07      	ldr	r2, [sp, #28]
 800644c:	4654      	mov	r4, sl
 800644e:	2000      	movs	r0, #0
 8006450:	f04f 0c0a 	mov.w	ip, #10
 8006454:	4621      	mov	r1, r4
 8006456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800645a:	3b30      	subs	r3, #48	@ 0x30
 800645c:	2b09      	cmp	r3, #9
 800645e:	d94b      	bls.n	80064f8 <_svfiprintf_r+0x17c>
 8006460:	b1b0      	cbz	r0, 8006490 <_svfiprintf_r+0x114>
 8006462:	9207      	str	r2, [sp, #28]
 8006464:	e014      	b.n	8006490 <_svfiprintf_r+0x114>
 8006466:	eba0 0308 	sub.w	r3, r0, r8
 800646a:	fa09 f303 	lsl.w	r3, r9, r3
 800646e:	4313      	orrs	r3, r2
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	46a2      	mov	sl, r4
 8006474:	e7d2      	b.n	800641c <_svfiprintf_r+0xa0>
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	1d19      	adds	r1, r3, #4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	9103      	str	r1, [sp, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfbb      	ittet	lt
 8006482:	425b      	neglt	r3, r3
 8006484:	f042 0202 	orrlt.w	r2, r2, #2
 8006488:	9307      	strge	r3, [sp, #28]
 800648a:	9307      	strlt	r3, [sp, #28]
 800648c:	bfb8      	it	lt
 800648e:	9204      	strlt	r2, [sp, #16]
 8006490:	7823      	ldrb	r3, [r4, #0]
 8006492:	2b2e      	cmp	r3, #46	@ 0x2e
 8006494:	d10a      	bne.n	80064ac <_svfiprintf_r+0x130>
 8006496:	7863      	ldrb	r3, [r4, #1]
 8006498:	2b2a      	cmp	r3, #42	@ 0x2a
 800649a:	d132      	bne.n	8006502 <_svfiprintf_r+0x186>
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	1d1a      	adds	r2, r3, #4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	9203      	str	r2, [sp, #12]
 80064a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064a8:	3402      	adds	r4, #2
 80064aa:	9305      	str	r3, [sp, #20]
 80064ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006570 <_svfiprintf_r+0x1f4>
 80064b0:	7821      	ldrb	r1, [r4, #0]
 80064b2:	2203      	movs	r2, #3
 80064b4:	4650      	mov	r0, sl
 80064b6:	f7f9 feab 	bl	8000210 <memchr>
 80064ba:	b138      	cbz	r0, 80064cc <_svfiprintf_r+0x150>
 80064bc:	9b04      	ldr	r3, [sp, #16]
 80064be:	eba0 000a 	sub.w	r0, r0, sl
 80064c2:	2240      	movs	r2, #64	@ 0x40
 80064c4:	4082      	lsls	r2, r0
 80064c6:	4313      	orrs	r3, r2
 80064c8:	3401      	adds	r4, #1
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d0:	4824      	ldr	r0, [pc, #144]	@ (8006564 <_svfiprintf_r+0x1e8>)
 80064d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064d6:	2206      	movs	r2, #6
 80064d8:	f7f9 fe9a 	bl	8000210 <memchr>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d036      	beq.n	800654e <_svfiprintf_r+0x1d2>
 80064e0:	4b21      	ldr	r3, [pc, #132]	@ (8006568 <_svfiprintf_r+0x1ec>)
 80064e2:	bb1b      	cbnz	r3, 800652c <_svfiprintf_r+0x1b0>
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	3307      	adds	r3, #7
 80064e8:	f023 0307 	bic.w	r3, r3, #7
 80064ec:	3308      	adds	r3, #8
 80064ee:	9303      	str	r3, [sp, #12]
 80064f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f2:	4433      	add	r3, r6
 80064f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80064f6:	e76a      	b.n	80063ce <_svfiprintf_r+0x52>
 80064f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064fc:	460c      	mov	r4, r1
 80064fe:	2001      	movs	r0, #1
 8006500:	e7a8      	b.n	8006454 <_svfiprintf_r+0xd8>
 8006502:	2300      	movs	r3, #0
 8006504:	3401      	adds	r4, #1
 8006506:	9305      	str	r3, [sp, #20]
 8006508:	4619      	mov	r1, r3
 800650a:	f04f 0c0a 	mov.w	ip, #10
 800650e:	4620      	mov	r0, r4
 8006510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006514:	3a30      	subs	r2, #48	@ 0x30
 8006516:	2a09      	cmp	r2, #9
 8006518:	d903      	bls.n	8006522 <_svfiprintf_r+0x1a6>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0c6      	beq.n	80064ac <_svfiprintf_r+0x130>
 800651e:	9105      	str	r1, [sp, #20]
 8006520:	e7c4      	b.n	80064ac <_svfiprintf_r+0x130>
 8006522:	fb0c 2101 	mla	r1, ip, r1, r2
 8006526:	4604      	mov	r4, r0
 8006528:	2301      	movs	r3, #1
 800652a:	e7f0      	b.n	800650e <_svfiprintf_r+0x192>
 800652c:	ab03      	add	r3, sp, #12
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	462a      	mov	r2, r5
 8006532:	4b0e      	ldr	r3, [pc, #56]	@ (800656c <_svfiprintf_r+0x1f0>)
 8006534:	a904      	add	r1, sp, #16
 8006536:	4638      	mov	r0, r7
 8006538:	f7fd fe46 	bl	80041c8 <_printf_float>
 800653c:	1c42      	adds	r2, r0, #1
 800653e:	4606      	mov	r6, r0
 8006540:	d1d6      	bne.n	80064f0 <_svfiprintf_r+0x174>
 8006542:	89ab      	ldrh	r3, [r5, #12]
 8006544:	065b      	lsls	r3, r3, #25
 8006546:	f53f af2d 	bmi.w	80063a4 <_svfiprintf_r+0x28>
 800654a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800654c:	e72c      	b.n	80063a8 <_svfiprintf_r+0x2c>
 800654e:	ab03      	add	r3, sp, #12
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	462a      	mov	r2, r5
 8006554:	4b05      	ldr	r3, [pc, #20]	@ (800656c <_svfiprintf_r+0x1f0>)
 8006556:	a904      	add	r1, sp, #16
 8006558:	4638      	mov	r0, r7
 800655a:	f7fe f8cd 	bl	80046f8 <_printf_i>
 800655e:	e7ed      	b.n	800653c <_svfiprintf_r+0x1c0>
 8006560:	08007aa8 	.word	0x08007aa8
 8006564:	08007ab2 	.word	0x08007ab2
 8006568:	080041c9 	.word	0x080041c9
 800656c:	080062c5 	.word	0x080062c5
 8006570:	08007aae 	.word	0x08007aae

08006574 <_sungetc_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	1c4b      	adds	r3, r1, #1
 8006578:	4614      	mov	r4, r2
 800657a:	d103      	bne.n	8006584 <_sungetc_r+0x10>
 800657c:	f04f 35ff 	mov.w	r5, #4294967295
 8006580:	4628      	mov	r0, r5
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	8993      	ldrh	r3, [r2, #12]
 8006586:	f023 0320 	bic.w	r3, r3, #32
 800658a:	8193      	strh	r3, [r2, #12]
 800658c:	6853      	ldr	r3, [r2, #4]
 800658e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006590:	b2cd      	uxtb	r5, r1
 8006592:	b18a      	cbz	r2, 80065b8 <_sungetc_r+0x44>
 8006594:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006596:	429a      	cmp	r2, r3
 8006598:	dd08      	ble.n	80065ac <_sungetc_r+0x38>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	1e5a      	subs	r2, r3, #1
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80065a4:	6863      	ldr	r3, [r4, #4]
 80065a6:	3301      	adds	r3, #1
 80065a8:	6063      	str	r3, [r4, #4]
 80065aa:	e7e9      	b.n	8006580 <_sungetc_r+0xc>
 80065ac:	4621      	mov	r1, r4
 80065ae:	f000 fd22 	bl	8006ff6 <__submore>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d0f1      	beq.n	800659a <_sungetc_r+0x26>
 80065b6:	e7e1      	b.n	800657c <_sungetc_r+0x8>
 80065b8:	6921      	ldr	r1, [r4, #16]
 80065ba:	6822      	ldr	r2, [r4, #0]
 80065bc:	b141      	cbz	r1, 80065d0 <_sungetc_r+0x5c>
 80065be:	4291      	cmp	r1, r2
 80065c0:	d206      	bcs.n	80065d0 <_sungetc_r+0x5c>
 80065c2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80065c6:	42a9      	cmp	r1, r5
 80065c8:	d102      	bne.n	80065d0 <_sungetc_r+0x5c>
 80065ca:	3a01      	subs	r2, #1
 80065cc:	6022      	str	r2, [r4, #0]
 80065ce:	e7ea      	b.n	80065a6 <_sungetc_r+0x32>
 80065d0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80065d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80065da:	2303      	movs	r3, #3
 80065dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80065de:	4623      	mov	r3, r4
 80065e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	2301      	movs	r3, #1
 80065e8:	e7de      	b.n	80065a8 <_sungetc_r+0x34>

080065ea <__ssrefill_r>:
 80065ea:	b510      	push	{r4, lr}
 80065ec:	460c      	mov	r4, r1
 80065ee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80065f0:	b169      	cbz	r1, 800660e <__ssrefill_r+0x24>
 80065f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065f6:	4299      	cmp	r1, r3
 80065f8:	d001      	beq.n	80065fe <__ssrefill_r+0x14>
 80065fa:	f7ff f9e1 	bl	80059c0 <_free_r>
 80065fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	2000      	movs	r0, #0
 8006604:	6360      	str	r0, [r4, #52]	@ 0x34
 8006606:	b113      	cbz	r3, 800660e <__ssrefill_r+0x24>
 8006608:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	bd10      	pop	{r4, pc}
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	2300      	movs	r3, #0
 8006614:	6063      	str	r3, [r4, #4]
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f043 0320 	orr.w	r3, r3, #32
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	e7f3      	b.n	800660c <__ssrefill_r+0x22>

08006624 <__ssvfiscanf_r>:
 8006624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	460c      	mov	r4, r1
 800662a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800662e:	2100      	movs	r1, #0
 8006630:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006634:	49a5      	ldr	r1, [pc, #660]	@ (80068cc <__ssvfiscanf_r+0x2a8>)
 8006636:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006638:	f10d 0804 	add.w	r8, sp, #4
 800663c:	49a4      	ldr	r1, [pc, #656]	@ (80068d0 <__ssvfiscanf_r+0x2ac>)
 800663e:	4fa5      	ldr	r7, [pc, #660]	@ (80068d4 <__ssvfiscanf_r+0x2b0>)
 8006640:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006644:	4606      	mov	r6, r0
 8006646:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	7813      	ldrb	r3, [r2, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8158 	beq.w	8006902 <__ssvfiscanf_r+0x2de>
 8006652:	5cf9      	ldrb	r1, [r7, r3]
 8006654:	f011 0108 	ands.w	r1, r1, #8
 8006658:	f102 0501 	add.w	r5, r2, #1
 800665c:	d019      	beq.n	8006692 <__ssvfiscanf_r+0x6e>
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	dd0f      	ble.n	8006684 <__ssvfiscanf_r+0x60>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	5cba      	ldrb	r2, [r7, r2]
 800666a:	0712      	lsls	r2, r2, #28
 800666c:	d401      	bmi.n	8006672 <__ssvfiscanf_r+0x4e>
 800666e:	462a      	mov	r2, r5
 8006670:	e7eb      	b.n	800664a <__ssvfiscanf_r+0x26>
 8006672:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006674:	3201      	adds	r2, #1
 8006676:	9245      	str	r2, [sp, #276]	@ 0x114
 8006678:	6862      	ldr	r2, [r4, #4]
 800667a:	3301      	adds	r3, #1
 800667c:	3a01      	subs	r2, #1
 800667e:	6062      	str	r2, [r4, #4]
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	e7ec      	b.n	800665e <__ssvfiscanf_r+0x3a>
 8006684:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006686:	4621      	mov	r1, r4
 8006688:	4630      	mov	r0, r6
 800668a:	4798      	blx	r3
 800668c:	2800      	cmp	r0, #0
 800668e:	d0e9      	beq.n	8006664 <__ssvfiscanf_r+0x40>
 8006690:	e7ed      	b.n	800666e <__ssvfiscanf_r+0x4a>
 8006692:	2b25      	cmp	r3, #37	@ 0x25
 8006694:	d012      	beq.n	80066bc <__ssvfiscanf_r+0x98>
 8006696:	4699      	mov	r9, r3
 8006698:	6863      	ldr	r3, [r4, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f340 8093 	ble.w	80067c6 <__ssvfiscanf_r+0x1a2>
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	7813      	ldrb	r3, [r2, #0]
 80066a4:	454b      	cmp	r3, r9
 80066a6:	f040 812c 	bne.w	8006902 <__ssvfiscanf_r+0x2de>
 80066aa:	6863      	ldr	r3, [r4, #4]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	6063      	str	r3, [r4, #4]
 80066b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80066b2:	3201      	adds	r2, #1
 80066b4:	3301      	adds	r3, #1
 80066b6:	6022      	str	r2, [r4, #0]
 80066b8:	9345      	str	r3, [sp, #276]	@ 0x114
 80066ba:	e7d8      	b.n	800666e <__ssvfiscanf_r+0x4a>
 80066bc:	9141      	str	r1, [sp, #260]	@ 0x104
 80066be:	9143      	str	r1, [sp, #268]	@ 0x10c
 80066c0:	7853      	ldrb	r3, [r2, #1]
 80066c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c4:	bf02      	ittt	eq
 80066c6:	2310      	moveq	r3, #16
 80066c8:	1c95      	addeq	r5, r2, #2
 80066ca:	9341      	streq	r3, [sp, #260]	@ 0x104
 80066cc:	220a      	movs	r2, #10
 80066ce:	46a9      	mov	r9, r5
 80066d0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80066d4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80066d8:	2b09      	cmp	r3, #9
 80066da:	d91e      	bls.n	800671a <__ssvfiscanf_r+0xf6>
 80066dc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80068d8 <__ssvfiscanf_r+0x2b4>
 80066e0:	2203      	movs	r2, #3
 80066e2:	4650      	mov	r0, sl
 80066e4:	f7f9 fd94 	bl	8000210 <memchr>
 80066e8:	b138      	cbz	r0, 80066fa <__ssvfiscanf_r+0xd6>
 80066ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80066ec:	eba0 000a 	sub.w	r0, r0, sl
 80066f0:	2301      	movs	r3, #1
 80066f2:	4083      	lsls	r3, r0
 80066f4:	4313      	orrs	r3, r2
 80066f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80066f8:	464d      	mov	r5, r9
 80066fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066fe:	2b78      	cmp	r3, #120	@ 0x78
 8006700:	d806      	bhi.n	8006710 <__ssvfiscanf_r+0xec>
 8006702:	2b57      	cmp	r3, #87	@ 0x57
 8006704:	d810      	bhi.n	8006728 <__ssvfiscanf_r+0x104>
 8006706:	2b25      	cmp	r3, #37	@ 0x25
 8006708:	d0c5      	beq.n	8006696 <__ssvfiscanf_r+0x72>
 800670a:	d857      	bhi.n	80067bc <__ssvfiscanf_r+0x198>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d065      	beq.n	80067dc <__ssvfiscanf_r+0x1b8>
 8006710:	2303      	movs	r3, #3
 8006712:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006714:	230a      	movs	r3, #10
 8006716:	9342      	str	r3, [sp, #264]	@ 0x108
 8006718:	e078      	b.n	800680c <__ssvfiscanf_r+0x1e8>
 800671a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800671c:	fb02 1103 	mla	r1, r2, r3, r1
 8006720:	3930      	subs	r1, #48	@ 0x30
 8006722:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006724:	464d      	mov	r5, r9
 8006726:	e7d2      	b.n	80066ce <__ssvfiscanf_r+0xaa>
 8006728:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800672c:	2a20      	cmp	r2, #32
 800672e:	d8ef      	bhi.n	8006710 <__ssvfiscanf_r+0xec>
 8006730:	a101      	add	r1, pc, #4	@ (adr r1, 8006738 <__ssvfiscanf_r+0x114>)
 8006732:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006736:	bf00      	nop
 8006738:	080067eb 	.word	0x080067eb
 800673c:	08006711 	.word	0x08006711
 8006740:	08006711 	.word	0x08006711
 8006744:	08006845 	.word	0x08006845
 8006748:	08006711 	.word	0x08006711
 800674c:	08006711 	.word	0x08006711
 8006750:	08006711 	.word	0x08006711
 8006754:	08006711 	.word	0x08006711
 8006758:	08006711 	.word	0x08006711
 800675c:	08006711 	.word	0x08006711
 8006760:	08006711 	.word	0x08006711
 8006764:	0800685b 	.word	0x0800685b
 8006768:	08006841 	.word	0x08006841
 800676c:	080067c3 	.word	0x080067c3
 8006770:	080067c3 	.word	0x080067c3
 8006774:	080067c3 	.word	0x080067c3
 8006778:	08006711 	.word	0x08006711
 800677c:	080067fd 	.word	0x080067fd
 8006780:	08006711 	.word	0x08006711
 8006784:	08006711 	.word	0x08006711
 8006788:	08006711 	.word	0x08006711
 800678c:	08006711 	.word	0x08006711
 8006790:	0800686b 	.word	0x0800686b
 8006794:	08006805 	.word	0x08006805
 8006798:	080067e3 	.word	0x080067e3
 800679c:	08006711 	.word	0x08006711
 80067a0:	08006711 	.word	0x08006711
 80067a4:	08006867 	.word	0x08006867
 80067a8:	08006711 	.word	0x08006711
 80067ac:	08006841 	.word	0x08006841
 80067b0:	08006711 	.word	0x08006711
 80067b4:	08006711 	.word	0x08006711
 80067b8:	080067eb 	.word	0x080067eb
 80067bc:	3b45      	subs	r3, #69	@ 0x45
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d8a6      	bhi.n	8006710 <__ssvfiscanf_r+0xec>
 80067c2:	2305      	movs	r3, #5
 80067c4:	e021      	b.n	800680a <__ssvfiscanf_r+0x1e6>
 80067c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80067c8:	4621      	mov	r1, r4
 80067ca:	4630      	mov	r0, r6
 80067cc:	4798      	blx	r3
 80067ce:	2800      	cmp	r0, #0
 80067d0:	f43f af66 	beq.w	80066a0 <__ssvfiscanf_r+0x7c>
 80067d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f040 808b 	bne.w	80068f2 <__ssvfiscanf_r+0x2ce>
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e08b      	b.n	80068fa <__ssvfiscanf_r+0x2d6>
 80067e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80067e4:	f042 0220 	orr.w	r2, r2, #32
 80067e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80067ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80067ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80067f2:	2210      	movs	r2, #16
 80067f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80067f6:	9242      	str	r2, [sp, #264]	@ 0x108
 80067f8:	d902      	bls.n	8006800 <__ssvfiscanf_r+0x1dc>
 80067fa:	e005      	b.n	8006808 <__ssvfiscanf_r+0x1e4>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8006800:	2303      	movs	r3, #3
 8006802:	e002      	b.n	800680a <__ssvfiscanf_r+0x1e6>
 8006804:	2308      	movs	r3, #8
 8006806:	9342      	str	r3, [sp, #264]	@ 0x108
 8006808:	2304      	movs	r3, #4
 800680a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd39      	ble.n	8006886 <__ssvfiscanf_r+0x262>
 8006812:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006814:	0659      	lsls	r1, r3, #25
 8006816:	d404      	bmi.n	8006822 <__ssvfiscanf_r+0x1fe>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	781a      	ldrb	r2, [r3, #0]
 800681c:	5cba      	ldrb	r2, [r7, r2]
 800681e:	0712      	lsls	r2, r2, #28
 8006820:	d438      	bmi.n	8006894 <__ssvfiscanf_r+0x270>
 8006822:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006824:	2b02      	cmp	r3, #2
 8006826:	dc47      	bgt.n	80068b8 <__ssvfiscanf_r+0x294>
 8006828:	466b      	mov	r3, sp
 800682a:	4622      	mov	r2, r4
 800682c:	a941      	add	r1, sp, #260	@ 0x104
 800682e:	4630      	mov	r0, r6
 8006830:	f000 f9ae 	bl	8006b90 <_scanf_chars>
 8006834:	2801      	cmp	r0, #1
 8006836:	d064      	beq.n	8006902 <__ssvfiscanf_r+0x2de>
 8006838:	2802      	cmp	r0, #2
 800683a:	f47f af18 	bne.w	800666e <__ssvfiscanf_r+0x4a>
 800683e:	e7c9      	b.n	80067d4 <__ssvfiscanf_r+0x1b0>
 8006840:	220a      	movs	r2, #10
 8006842:	e7d7      	b.n	80067f4 <__ssvfiscanf_r+0x1d0>
 8006844:	4629      	mov	r1, r5
 8006846:	4640      	mov	r0, r8
 8006848:	f000 fb9c 	bl	8006f84 <__sccl>
 800684c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800684e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006852:	9341      	str	r3, [sp, #260]	@ 0x104
 8006854:	4605      	mov	r5, r0
 8006856:	2301      	movs	r3, #1
 8006858:	e7d7      	b.n	800680a <__ssvfiscanf_r+0x1e6>
 800685a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800685c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006860:	9341      	str	r3, [sp, #260]	@ 0x104
 8006862:	2300      	movs	r3, #0
 8006864:	e7d1      	b.n	800680a <__ssvfiscanf_r+0x1e6>
 8006866:	2302      	movs	r3, #2
 8006868:	e7cf      	b.n	800680a <__ssvfiscanf_r+0x1e6>
 800686a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800686c:	06c3      	lsls	r3, r0, #27
 800686e:	f53f aefe 	bmi.w	800666e <__ssvfiscanf_r+0x4a>
 8006872:	9b00      	ldr	r3, [sp, #0]
 8006874:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006876:	1d19      	adds	r1, r3, #4
 8006878:	9100      	str	r1, [sp, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	07c0      	lsls	r0, r0, #31
 800687e:	bf4c      	ite	mi
 8006880:	801a      	strhmi	r2, [r3, #0]
 8006882:	601a      	strpl	r2, [r3, #0]
 8006884:	e6f3      	b.n	800666e <__ssvfiscanf_r+0x4a>
 8006886:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006888:	4621      	mov	r1, r4
 800688a:	4630      	mov	r0, r6
 800688c:	4798      	blx	r3
 800688e:	2800      	cmp	r0, #0
 8006890:	d0bf      	beq.n	8006812 <__ssvfiscanf_r+0x1ee>
 8006892:	e79f      	b.n	80067d4 <__ssvfiscanf_r+0x1b0>
 8006894:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006896:	3201      	adds	r2, #1
 8006898:	9245      	str	r2, [sp, #276]	@ 0x114
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	3a01      	subs	r2, #1
 800689e:	2a00      	cmp	r2, #0
 80068a0:	6062      	str	r2, [r4, #4]
 80068a2:	dd02      	ble.n	80068aa <__ssvfiscanf_r+0x286>
 80068a4:	3301      	adds	r3, #1
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	e7b6      	b.n	8006818 <__ssvfiscanf_r+0x1f4>
 80068aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80068ac:	4621      	mov	r1, r4
 80068ae:	4630      	mov	r0, r6
 80068b0:	4798      	blx	r3
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d0b0      	beq.n	8006818 <__ssvfiscanf_r+0x1f4>
 80068b6:	e78d      	b.n	80067d4 <__ssvfiscanf_r+0x1b0>
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	dc0f      	bgt.n	80068dc <__ssvfiscanf_r+0x2b8>
 80068bc:	466b      	mov	r3, sp
 80068be:	4622      	mov	r2, r4
 80068c0:	a941      	add	r1, sp, #260	@ 0x104
 80068c2:	4630      	mov	r0, r6
 80068c4:	f000 f9be 	bl	8006c44 <_scanf_i>
 80068c8:	e7b4      	b.n	8006834 <__ssvfiscanf_r+0x210>
 80068ca:	bf00      	nop
 80068cc:	08006575 	.word	0x08006575
 80068d0:	080065eb 	.word	0x080065eb
 80068d4:	08007b1b 	.word	0x08007b1b
 80068d8:	08007aae 	.word	0x08007aae
 80068dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <__ssvfiscanf_r+0x2e4>)
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f43f aec5 	beq.w	800666e <__ssvfiscanf_r+0x4a>
 80068e4:	466b      	mov	r3, sp
 80068e6:	4622      	mov	r2, r4
 80068e8:	a941      	add	r1, sp, #260	@ 0x104
 80068ea:	4630      	mov	r0, r6
 80068ec:	f3af 8000 	nop.w
 80068f0:	e7a0      	b.n	8006834 <__ssvfiscanf_r+0x210>
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	065b      	lsls	r3, r3, #25
 80068f6:	f53f af71 	bmi.w	80067dc <__ssvfiscanf_r+0x1b8>
 80068fa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006904:	e7f9      	b.n	80068fa <__ssvfiscanf_r+0x2d6>
 8006906:	bf00      	nop
 8006908:	00000000 	.word	0x00000000

0800690c <__sfputc_r>:
 800690c:	6893      	ldr	r3, [r2, #8]
 800690e:	3b01      	subs	r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	b410      	push	{r4}
 8006914:	6093      	str	r3, [r2, #8]
 8006916:	da08      	bge.n	800692a <__sfputc_r+0x1e>
 8006918:	6994      	ldr	r4, [r2, #24]
 800691a:	42a3      	cmp	r3, r4
 800691c:	db01      	blt.n	8006922 <__sfputc_r+0x16>
 800691e:	290a      	cmp	r1, #10
 8006920:	d103      	bne.n	800692a <__sfputc_r+0x1e>
 8006922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006926:	f000 bba0 	b.w	800706a <__swbuf_r>
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	1c58      	adds	r0, r3, #1
 800692e:	6010      	str	r0, [r2, #0]
 8006930:	7019      	strb	r1, [r3, #0]
 8006932:	4608      	mov	r0, r1
 8006934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006938:	4770      	bx	lr

0800693a <__sfputs_r>:
 800693a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	4614      	mov	r4, r2
 8006942:	18d5      	adds	r5, r2, r3
 8006944:	42ac      	cmp	r4, r5
 8006946:	d101      	bne.n	800694c <__sfputs_r+0x12>
 8006948:	2000      	movs	r0, #0
 800694a:	e007      	b.n	800695c <__sfputs_r+0x22>
 800694c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006950:	463a      	mov	r2, r7
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ffda 	bl	800690c <__sfputc_r>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d1f3      	bne.n	8006944 <__sfputs_r+0xa>
 800695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006960 <_vfiprintf_r>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	460d      	mov	r5, r1
 8006966:	b09d      	sub	sp, #116	@ 0x74
 8006968:	4614      	mov	r4, r2
 800696a:	4698      	mov	r8, r3
 800696c:	4606      	mov	r6, r0
 800696e:	b118      	cbz	r0, 8006978 <_vfiprintf_r+0x18>
 8006970:	6a03      	ldr	r3, [r0, #32]
 8006972:	b90b      	cbnz	r3, 8006978 <_vfiprintf_r+0x18>
 8006974:	f7fe f86c 	bl	8004a50 <__sinit>
 8006978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	d405      	bmi.n	800698a <_vfiprintf_r+0x2a>
 800697e:	89ab      	ldrh	r3, [r5, #12]
 8006980:	059a      	lsls	r2, r3, #22
 8006982:	d402      	bmi.n	800698a <_vfiprintf_r+0x2a>
 8006984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006986:	f7fe f9ca 	bl	8004d1e <__retarget_lock_acquire_recursive>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	071b      	lsls	r3, r3, #28
 800698e:	d501      	bpl.n	8006994 <_vfiprintf_r+0x34>
 8006990:	692b      	ldr	r3, [r5, #16]
 8006992:	b99b      	cbnz	r3, 80069bc <_vfiprintf_r+0x5c>
 8006994:	4629      	mov	r1, r5
 8006996:	4630      	mov	r0, r6
 8006998:	f000 fba6 	bl	80070e8 <__swsetup_r>
 800699c:	b170      	cbz	r0, 80069bc <_vfiprintf_r+0x5c>
 800699e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069a0:	07dc      	lsls	r4, r3, #31
 80069a2:	d504      	bpl.n	80069ae <_vfiprintf_r+0x4e>
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	b01d      	add	sp, #116	@ 0x74
 80069aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	0598      	lsls	r0, r3, #22
 80069b2:	d4f7      	bmi.n	80069a4 <_vfiprintf_r+0x44>
 80069b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069b6:	f7fe f9b3 	bl	8004d20 <__retarget_lock_release_recursive>
 80069ba:	e7f3      	b.n	80069a4 <_vfiprintf_r+0x44>
 80069bc:	2300      	movs	r3, #0
 80069be:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c0:	2320      	movs	r3, #32
 80069c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ca:	2330      	movs	r3, #48	@ 0x30
 80069cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b7c <_vfiprintf_r+0x21c>
 80069d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069d4:	f04f 0901 	mov.w	r9, #1
 80069d8:	4623      	mov	r3, r4
 80069da:	469a      	mov	sl, r3
 80069dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e0:	b10a      	cbz	r2, 80069e6 <_vfiprintf_r+0x86>
 80069e2:	2a25      	cmp	r2, #37	@ 0x25
 80069e4:	d1f9      	bne.n	80069da <_vfiprintf_r+0x7a>
 80069e6:	ebba 0b04 	subs.w	fp, sl, r4
 80069ea:	d00b      	beq.n	8006a04 <_vfiprintf_r+0xa4>
 80069ec:	465b      	mov	r3, fp
 80069ee:	4622      	mov	r2, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff ffa1 	bl	800693a <__sfputs_r>
 80069f8:	3001      	adds	r0, #1
 80069fa:	f000 80a7 	beq.w	8006b4c <_vfiprintf_r+0x1ec>
 80069fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a00:	445a      	add	r2, fp
 8006a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a04:	f89a 3000 	ldrb.w	r3, [sl]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 809f 	beq.w	8006b4c <_vfiprintf_r+0x1ec>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a18:	f10a 0a01 	add.w	sl, sl, #1
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a26:	4654      	mov	r4, sl
 8006a28:	2205      	movs	r2, #5
 8006a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a2e:	4853      	ldr	r0, [pc, #332]	@ (8006b7c <_vfiprintf_r+0x21c>)
 8006a30:	f7f9 fbee 	bl	8000210 <memchr>
 8006a34:	9a04      	ldr	r2, [sp, #16]
 8006a36:	b9d8      	cbnz	r0, 8006a70 <_vfiprintf_r+0x110>
 8006a38:	06d1      	lsls	r1, r2, #27
 8006a3a:	bf44      	itt	mi
 8006a3c:	2320      	movmi	r3, #32
 8006a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a42:	0713      	lsls	r3, r2, #28
 8006a44:	bf44      	itt	mi
 8006a46:	232b      	movmi	r3, #43	@ 0x2b
 8006a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a52:	d015      	beq.n	8006a80 <_vfiprintf_r+0x120>
 8006a54:	9a07      	ldr	r2, [sp, #28]
 8006a56:	4654      	mov	r4, sl
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f04f 0c0a 	mov.w	ip, #10
 8006a5e:	4621      	mov	r1, r4
 8006a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a64:	3b30      	subs	r3, #48	@ 0x30
 8006a66:	2b09      	cmp	r3, #9
 8006a68:	d94b      	bls.n	8006b02 <_vfiprintf_r+0x1a2>
 8006a6a:	b1b0      	cbz	r0, 8006a9a <_vfiprintf_r+0x13a>
 8006a6c:	9207      	str	r2, [sp, #28]
 8006a6e:	e014      	b.n	8006a9a <_vfiprintf_r+0x13a>
 8006a70:	eba0 0308 	sub.w	r3, r0, r8
 8006a74:	fa09 f303 	lsl.w	r3, r9, r3
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	46a2      	mov	sl, r4
 8006a7e:	e7d2      	b.n	8006a26 <_vfiprintf_r+0xc6>
 8006a80:	9b03      	ldr	r3, [sp, #12]
 8006a82:	1d19      	adds	r1, r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	9103      	str	r1, [sp, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfbb      	ittet	lt
 8006a8c:	425b      	neglt	r3, r3
 8006a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a92:	9307      	strge	r3, [sp, #28]
 8006a94:	9307      	strlt	r3, [sp, #28]
 8006a96:	bfb8      	it	lt
 8006a98:	9204      	strlt	r2, [sp, #16]
 8006a9a:	7823      	ldrb	r3, [r4, #0]
 8006a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a9e:	d10a      	bne.n	8006ab6 <_vfiprintf_r+0x156>
 8006aa0:	7863      	ldrb	r3, [r4, #1]
 8006aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aa4:	d132      	bne.n	8006b0c <_vfiprintf_r+0x1ac>
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	9203      	str	r2, [sp, #12]
 8006aae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ab2:	3402      	adds	r4, #2
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b8c <_vfiprintf_r+0x22c>
 8006aba:	7821      	ldrb	r1, [r4, #0]
 8006abc:	2203      	movs	r2, #3
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f7f9 fba6 	bl	8000210 <memchr>
 8006ac4:	b138      	cbz	r0, 8006ad6 <_vfiprintf_r+0x176>
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	eba0 000a 	sub.w	r0, r0, sl
 8006acc:	2240      	movs	r2, #64	@ 0x40
 8006ace:	4082      	lsls	r2, r0
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	3401      	adds	r4, #1
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ada:	4829      	ldr	r0, [pc, #164]	@ (8006b80 <_vfiprintf_r+0x220>)
 8006adc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ae0:	2206      	movs	r2, #6
 8006ae2:	f7f9 fb95 	bl	8000210 <memchr>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d03f      	beq.n	8006b6a <_vfiprintf_r+0x20a>
 8006aea:	4b26      	ldr	r3, [pc, #152]	@ (8006b84 <_vfiprintf_r+0x224>)
 8006aec:	bb1b      	cbnz	r3, 8006b36 <_vfiprintf_r+0x1d6>
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	3307      	adds	r3, #7
 8006af2:	f023 0307 	bic.w	r3, r3, #7
 8006af6:	3308      	adds	r3, #8
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afc:	443b      	add	r3, r7
 8006afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b00:	e76a      	b.n	80069d8 <_vfiprintf_r+0x78>
 8006b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b06:	460c      	mov	r4, r1
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e7a8      	b.n	8006a5e <_vfiprintf_r+0xfe>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	3401      	adds	r4, #1
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	4619      	mov	r1, r3
 8006b14:	f04f 0c0a 	mov.w	ip, #10
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b1e:	3a30      	subs	r2, #48	@ 0x30
 8006b20:	2a09      	cmp	r2, #9
 8006b22:	d903      	bls.n	8006b2c <_vfiprintf_r+0x1cc>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0c6      	beq.n	8006ab6 <_vfiprintf_r+0x156>
 8006b28:	9105      	str	r1, [sp, #20]
 8006b2a:	e7c4      	b.n	8006ab6 <_vfiprintf_r+0x156>
 8006b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b30:	4604      	mov	r4, r0
 8006b32:	2301      	movs	r3, #1
 8006b34:	e7f0      	b.n	8006b18 <_vfiprintf_r+0x1b8>
 8006b36:	ab03      	add	r3, sp, #12
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4b12      	ldr	r3, [pc, #72]	@ (8006b88 <_vfiprintf_r+0x228>)
 8006b3e:	a904      	add	r1, sp, #16
 8006b40:	4630      	mov	r0, r6
 8006b42:	f7fd fb41 	bl	80041c8 <_printf_float>
 8006b46:	4607      	mov	r7, r0
 8006b48:	1c78      	adds	r0, r7, #1
 8006b4a:	d1d6      	bne.n	8006afa <_vfiprintf_r+0x19a>
 8006b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b4e:	07d9      	lsls	r1, r3, #31
 8006b50:	d405      	bmi.n	8006b5e <_vfiprintf_r+0x1fe>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	059a      	lsls	r2, r3, #22
 8006b56:	d402      	bmi.n	8006b5e <_vfiprintf_r+0x1fe>
 8006b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b5a:	f7fe f8e1 	bl	8004d20 <__retarget_lock_release_recursive>
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	065b      	lsls	r3, r3, #25
 8006b62:	f53f af1f 	bmi.w	80069a4 <_vfiprintf_r+0x44>
 8006b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b68:	e71e      	b.n	80069a8 <_vfiprintf_r+0x48>
 8006b6a:	ab03      	add	r3, sp, #12
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <_vfiprintf_r+0x228>)
 8006b72:	a904      	add	r1, sp, #16
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7fd fdbf 	bl	80046f8 <_printf_i>
 8006b7a:	e7e4      	b.n	8006b46 <_vfiprintf_r+0x1e6>
 8006b7c:	08007aa8 	.word	0x08007aa8
 8006b80:	08007ab2 	.word	0x08007ab2
 8006b84:	080041c9 	.word	0x080041c9
 8006b88:	0800693b 	.word	0x0800693b
 8006b8c:	08007aae 	.word	0x08007aae

08006b90 <_scanf_chars>:
 8006b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b94:	4615      	mov	r5, r2
 8006b96:	688a      	ldr	r2, [r1, #8]
 8006b98:	4680      	mov	r8, r0
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	b932      	cbnz	r2, 8006bac <_scanf_chars+0x1c>
 8006b9e:	698a      	ldr	r2, [r1, #24]
 8006ba0:	2a00      	cmp	r2, #0
 8006ba2:	bf14      	ite	ne
 8006ba4:	f04f 32ff 	movne.w	r2, #4294967295
 8006ba8:	2201      	moveq	r2, #1
 8006baa:	608a      	str	r2, [r1, #8]
 8006bac:	6822      	ldr	r2, [r4, #0]
 8006bae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006c40 <_scanf_chars+0xb0>
 8006bb2:	06d1      	lsls	r1, r2, #27
 8006bb4:	bf5f      	itttt	pl
 8006bb6:	681a      	ldrpl	r2, [r3, #0]
 8006bb8:	1d11      	addpl	r1, r2, #4
 8006bba:	6019      	strpl	r1, [r3, #0]
 8006bbc:	6816      	ldrpl	r6, [r2, #0]
 8006bbe:	2700      	movs	r7, #0
 8006bc0:	69a0      	ldr	r0, [r4, #24]
 8006bc2:	b188      	cbz	r0, 8006be8 <_scanf_chars+0x58>
 8006bc4:	2801      	cmp	r0, #1
 8006bc6:	d107      	bne.n	8006bd8 <_scanf_chars+0x48>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	6963      	ldr	r3, [r4, #20]
 8006bce:	5c9b      	ldrb	r3, [r3, r2]
 8006bd0:	b953      	cbnz	r3, 8006be8 <_scanf_chars+0x58>
 8006bd2:	2f00      	cmp	r7, #0
 8006bd4:	d031      	beq.n	8006c3a <_scanf_chars+0xaa>
 8006bd6:	e022      	b.n	8006c1e <_scanf_chars+0x8e>
 8006bd8:	2802      	cmp	r0, #2
 8006bda:	d120      	bne.n	8006c1e <_scanf_chars+0x8e>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006be4:	071b      	lsls	r3, r3, #28
 8006be6:	d41a      	bmi.n	8006c1e <_scanf_chars+0x8e>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	06da      	lsls	r2, r3, #27
 8006bec:	bf5e      	ittt	pl
 8006bee:	682b      	ldrpl	r3, [r5, #0]
 8006bf0:	781b      	ldrbpl	r3, [r3, #0]
 8006bf2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006bf6:	682a      	ldr	r2, [r5, #0]
 8006bf8:	686b      	ldr	r3, [r5, #4]
 8006bfa:	3201      	adds	r2, #1
 8006bfc:	602a      	str	r2, [r5, #0]
 8006bfe:	68a2      	ldr	r2, [r4, #8]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	3a01      	subs	r2, #1
 8006c04:	606b      	str	r3, [r5, #4]
 8006c06:	3701      	adds	r7, #1
 8006c08:	60a2      	str	r2, [r4, #8]
 8006c0a:	b142      	cbz	r2, 8006c1e <_scanf_chars+0x8e>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dcd7      	bgt.n	8006bc0 <_scanf_chars+0x30>
 8006c10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c14:	4629      	mov	r1, r5
 8006c16:	4640      	mov	r0, r8
 8006c18:	4798      	blx	r3
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d0d0      	beq.n	8006bc0 <_scanf_chars+0x30>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f013 0310 	ands.w	r3, r3, #16
 8006c24:	d105      	bne.n	8006c32 <_scanf_chars+0xa2>
 8006c26:	68e2      	ldr	r2, [r4, #12]
 8006c28:	3201      	adds	r2, #1
 8006c2a:	60e2      	str	r2, [r4, #12]
 8006c2c:	69a2      	ldr	r2, [r4, #24]
 8006c2e:	b102      	cbz	r2, 8006c32 <_scanf_chars+0xa2>
 8006c30:	7033      	strb	r3, [r6, #0]
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	443b      	add	r3, r7
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	2000      	movs	r0, #0
 8006c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c3e:	bf00      	nop
 8006c40:	08007b1b 	.word	0x08007b1b

08006c44 <_scanf_i>:
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	4698      	mov	r8, r3
 8006c4a:	4b74      	ldr	r3, [pc, #464]	@ (8006e1c <_scanf_i+0x1d8>)
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	4682      	mov	sl, r0
 8006c50:	4616      	mov	r6, r2
 8006c52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c56:	b087      	sub	sp, #28
 8006c58:	ab03      	add	r3, sp, #12
 8006c5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006c5e:	4b70      	ldr	r3, [pc, #448]	@ (8006e20 <_scanf_i+0x1dc>)
 8006c60:	69a1      	ldr	r1, [r4, #24]
 8006c62:	4a70      	ldr	r2, [pc, #448]	@ (8006e24 <_scanf_i+0x1e0>)
 8006c64:	2903      	cmp	r1, #3
 8006c66:	bf08      	it	eq
 8006c68:	461a      	moveq	r2, r3
 8006c6a:	68a3      	ldr	r3, [r4, #8]
 8006c6c:	9201      	str	r2, [sp, #4]
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c74:	bf88      	it	hi
 8006c76:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c7a:	4627      	mov	r7, r4
 8006c7c:	bf82      	ittt	hi
 8006c7e:	eb03 0905 	addhi.w	r9, r3, r5
 8006c82:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c86:	60a3      	strhi	r3, [r4, #8]
 8006c88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006c8c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006c90:	bf98      	it	ls
 8006c92:	f04f 0900 	movls.w	r9, #0
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	463d      	mov	r5, r7
 8006c9a:	f04f 0b00 	mov.w	fp, #0
 8006c9e:	6831      	ldr	r1, [r6, #0]
 8006ca0:	ab03      	add	r3, sp, #12
 8006ca2:	7809      	ldrb	r1, [r1, #0]
 8006ca4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f7f9 fab1 	bl	8000210 <memchr>
 8006cae:	b328      	cbz	r0, 8006cfc <_scanf_i+0xb8>
 8006cb0:	f1bb 0f01 	cmp.w	fp, #1
 8006cb4:	d159      	bne.n	8006d6a <_scanf_i+0x126>
 8006cb6:	6862      	ldr	r2, [r4, #4]
 8006cb8:	b92a      	cbnz	r2, 8006cc6 <_scanf_i+0x82>
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	2108      	movs	r1, #8
 8006cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cc2:	6061      	str	r1, [r4, #4]
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006ccc:	6022      	str	r2, [r4, #0]
 8006cce:	68a2      	ldr	r2, [r4, #8]
 8006cd0:	1e51      	subs	r1, r2, #1
 8006cd2:	60a1      	str	r1, [r4, #8]
 8006cd4:	b192      	cbz	r2, 8006cfc <_scanf_i+0xb8>
 8006cd6:	6832      	ldr	r2, [r6, #0]
 8006cd8:	1c51      	adds	r1, r2, #1
 8006cda:	6031      	str	r1, [r6, #0]
 8006cdc:	7812      	ldrb	r2, [r2, #0]
 8006cde:	f805 2b01 	strb.w	r2, [r5], #1
 8006ce2:	6872      	ldr	r2, [r6, #4]
 8006ce4:	3a01      	subs	r2, #1
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	6072      	str	r2, [r6, #4]
 8006cea:	dc07      	bgt.n	8006cfc <_scanf_i+0xb8>
 8006cec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	4790      	blx	r2
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8085 	bne.w	8006e06 <_scanf_i+0x1c2>
 8006cfc:	f10b 0b01 	add.w	fp, fp, #1
 8006d00:	f1bb 0f03 	cmp.w	fp, #3
 8006d04:	d1cb      	bne.n	8006c9e <_scanf_i+0x5a>
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	b90b      	cbnz	r3, 8006d0e <_scanf_i+0xca>
 8006d0a:	230a      	movs	r3, #10
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	4945      	ldr	r1, [pc, #276]	@ (8006e28 <_scanf_i+0x1e4>)
 8006d12:	6960      	ldr	r0, [r4, #20]
 8006d14:	1ac9      	subs	r1, r1, r3
 8006d16:	f000 f935 	bl	8006f84 <__sccl>
 8006d1a:	f04f 0b00 	mov.w	fp, #0
 8006d1e:	68a3      	ldr	r3, [r4, #8]
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d03d      	beq.n	8006da2 <_scanf_i+0x15e>
 8006d26:	6831      	ldr	r1, [r6, #0]
 8006d28:	6960      	ldr	r0, [r4, #20]
 8006d2a:	f891 c000 	ldrb.w	ip, [r1]
 8006d2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d035      	beq.n	8006da2 <_scanf_i+0x15e>
 8006d36:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006d3a:	d124      	bne.n	8006d86 <_scanf_i+0x142>
 8006d3c:	0510      	lsls	r0, r2, #20
 8006d3e:	d522      	bpl.n	8006d86 <_scanf_i+0x142>
 8006d40:	f10b 0b01 	add.w	fp, fp, #1
 8006d44:	f1b9 0f00 	cmp.w	r9, #0
 8006d48:	d003      	beq.n	8006d52 <_scanf_i+0x10e>
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d50:	60a3      	str	r3, [r4, #8]
 8006d52:	6873      	ldr	r3, [r6, #4]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	6073      	str	r3, [r6, #4]
 8006d5a:	dd1b      	ble.n	8006d94 <_scanf_i+0x150>
 8006d5c:	6833      	ldr	r3, [r6, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	6033      	str	r3, [r6, #0]
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	60a3      	str	r3, [r4, #8]
 8006d68:	e7d9      	b.n	8006d1e <_scanf_i+0xda>
 8006d6a:	f1bb 0f02 	cmp.w	fp, #2
 8006d6e:	d1ae      	bne.n	8006cce <_scanf_i+0x8a>
 8006d70:	6822      	ldr	r2, [r4, #0]
 8006d72:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006d76:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006d7a:	d1bf      	bne.n	8006cfc <_scanf_i+0xb8>
 8006d7c:	2110      	movs	r1, #16
 8006d7e:	6061      	str	r1, [r4, #4]
 8006d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d84:	e7a2      	b.n	8006ccc <_scanf_i+0x88>
 8006d86:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006d8a:	6022      	str	r2, [r4, #0]
 8006d8c:	780b      	ldrb	r3, [r1, #0]
 8006d8e:	f805 3b01 	strb.w	r3, [r5], #1
 8006d92:	e7de      	b.n	8006d52 <_scanf_i+0x10e>
 8006d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4650      	mov	r0, sl
 8006d9c:	4798      	blx	r3
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d0df      	beq.n	8006d62 <_scanf_i+0x11e>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	05d9      	lsls	r1, r3, #23
 8006da6:	d50d      	bpl.n	8006dc4 <_scanf_i+0x180>
 8006da8:	42bd      	cmp	r5, r7
 8006daa:	d909      	bls.n	8006dc0 <_scanf_i+0x17c>
 8006dac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006db0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006db4:	4632      	mov	r2, r6
 8006db6:	4650      	mov	r0, sl
 8006db8:	4798      	blx	r3
 8006dba:	f105 39ff 	add.w	r9, r5, #4294967295
 8006dbe:	464d      	mov	r5, r9
 8006dc0:	42bd      	cmp	r5, r7
 8006dc2:	d028      	beq.n	8006e16 <_scanf_i+0x1d2>
 8006dc4:	6822      	ldr	r2, [r4, #0]
 8006dc6:	f012 0210 	ands.w	r2, r2, #16
 8006dca:	d113      	bne.n	8006df4 <_scanf_i+0x1b0>
 8006dcc:	702a      	strb	r2, [r5, #0]
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	9e01      	ldr	r6, [sp, #4]
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	47b0      	blx	r6
 8006dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ddc:	6821      	ldr	r1, [r4, #0]
 8006dde:	1d1a      	adds	r2, r3, #4
 8006de0:	f8c8 2000 	str.w	r2, [r8]
 8006de4:	f011 0f20 	tst.w	r1, #32
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	d00f      	beq.n	8006e0c <_scanf_i+0x1c8>
 8006dec:	6018      	str	r0, [r3, #0]
 8006dee:	68e3      	ldr	r3, [r4, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60e3      	str	r3, [r4, #12]
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	1bed      	subs	r5, r5, r7
 8006df8:	445d      	add	r5, fp
 8006dfa:	442b      	add	r3, r5
 8006dfc:	6123      	str	r3, [r4, #16]
 8006dfe:	2000      	movs	r0, #0
 8006e00:	b007      	add	sp, #28
 8006e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e06:	f04f 0b00 	mov.w	fp, #0
 8006e0a:	e7ca      	b.n	8006da2 <_scanf_i+0x15e>
 8006e0c:	07ca      	lsls	r2, r1, #31
 8006e0e:	bf4c      	ite	mi
 8006e10:	8018      	strhmi	r0, [r3, #0]
 8006e12:	6018      	strpl	r0, [r3, #0]
 8006e14:	e7eb      	b.n	8006dee <_scanf_i+0x1aa>
 8006e16:	2001      	movs	r0, #1
 8006e18:	e7f2      	b.n	8006e00 <_scanf_i+0x1bc>
 8006e1a:	bf00      	nop
 8006e1c:	0800786c 	.word	0x0800786c
 8006e20:	080073dd 	.word	0x080073dd
 8006e24:	080074bd 	.word	0x080074bd
 8006e28:	08007ac9 	.word	0x08007ac9

08006e2c <__sflush_r>:
 8006e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e34:	0716      	lsls	r6, r2, #28
 8006e36:	4605      	mov	r5, r0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	d454      	bmi.n	8006ee6 <__sflush_r+0xba>
 8006e3c:	684b      	ldr	r3, [r1, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dc02      	bgt.n	8006e48 <__sflush_r+0x1c>
 8006e42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd48      	ble.n	8006eda <__sflush_r+0xae>
 8006e48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	d045      	beq.n	8006eda <__sflush_r+0xae>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e54:	682f      	ldr	r7, [r5, #0]
 8006e56:	6a21      	ldr	r1, [r4, #32]
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	d030      	beq.n	8006ebe <__sflush_r+0x92>
 8006e5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	0759      	lsls	r1, r3, #29
 8006e62:	d505      	bpl.n	8006e70 <__sflush_r+0x44>
 8006e64:	6863      	ldr	r3, [r4, #4]
 8006e66:	1ad2      	subs	r2, r2, r3
 8006e68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e6a:	b10b      	cbz	r3, 8006e70 <__sflush_r+0x44>
 8006e6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	2300      	movs	r3, #0
 8006e72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e74:	6a21      	ldr	r1, [r4, #32]
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b0      	blx	r6
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	d106      	bne.n	8006e8e <__sflush_r+0x62>
 8006e80:	6829      	ldr	r1, [r5, #0]
 8006e82:	291d      	cmp	r1, #29
 8006e84:	d82b      	bhi.n	8006ede <__sflush_r+0xb2>
 8006e86:	4a2a      	ldr	r2, [pc, #168]	@ (8006f30 <__sflush_r+0x104>)
 8006e88:	410a      	asrs	r2, r1
 8006e8a:	07d6      	lsls	r6, r2, #31
 8006e8c:	d427      	bmi.n	8006ede <__sflush_r+0xb2>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	6062      	str	r2, [r4, #4]
 8006e92:	04d9      	lsls	r1, r3, #19
 8006e94:	6922      	ldr	r2, [r4, #16]
 8006e96:	6022      	str	r2, [r4, #0]
 8006e98:	d504      	bpl.n	8006ea4 <__sflush_r+0x78>
 8006e9a:	1c42      	adds	r2, r0, #1
 8006e9c:	d101      	bne.n	8006ea2 <__sflush_r+0x76>
 8006e9e:	682b      	ldr	r3, [r5, #0]
 8006ea0:	b903      	cbnz	r3, 8006ea4 <__sflush_r+0x78>
 8006ea2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ea4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ea6:	602f      	str	r7, [r5, #0]
 8006ea8:	b1b9      	cbz	r1, 8006eda <__sflush_r+0xae>
 8006eaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eae:	4299      	cmp	r1, r3
 8006eb0:	d002      	beq.n	8006eb8 <__sflush_r+0x8c>
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f7fe fd84 	bl	80059c0 <_free_r>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ebc:	e00d      	b.n	8006eda <__sflush_r+0xae>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b0      	blx	r6
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	1c50      	adds	r0, r2, #1
 8006ec8:	d1c9      	bne.n	8006e5e <__sflush_r+0x32>
 8006eca:	682b      	ldr	r3, [r5, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0c6      	beq.n	8006e5e <__sflush_r+0x32>
 8006ed0:	2b1d      	cmp	r3, #29
 8006ed2:	d001      	beq.n	8006ed8 <__sflush_r+0xac>
 8006ed4:	2b16      	cmp	r3, #22
 8006ed6:	d11e      	bne.n	8006f16 <__sflush_r+0xea>
 8006ed8:	602f      	str	r7, [r5, #0]
 8006eda:	2000      	movs	r0, #0
 8006edc:	e022      	b.n	8006f24 <__sflush_r+0xf8>
 8006ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ee2:	b21b      	sxth	r3, r3
 8006ee4:	e01b      	b.n	8006f1e <__sflush_r+0xf2>
 8006ee6:	690f      	ldr	r7, [r1, #16]
 8006ee8:	2f00      	cmp	r7, #0
 8006eea:	d0f6      	beq.n	8006eda <__sflush_r+0xae>
 8006eec:	0793      	lsls	r3, r2, #30
 8006eee:	680e      	ldr	r6, [r1, #0]
 8006ef0:	bf08      	it	eq
 8006ef2:	694b      	ldreq	r3, [r1, #20]
 8006ef4:	600f      	str	r7, [r1, #0]
 8006ef6:	bf18      	it	ne
 8006ef8:	2300      	movne	r3, #0
 8006efa:	eba6 0807 	sub.w	r8, r6, r7
 8006efe:	608b      	str	r3, [r1, #8]
 8006f00:	f1b8 0f00 	cmp.w	r8, #0
 8006f04:	dde9      	ble.n	8006eda <__sflush_r+0xae>
 8006f06:	6a21      	ldr	r1, [r4, #32]
 8006f08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f0a:	4643      	mov	r3, r8
 8006f0c:	463a      	mov	r2, r7
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b0      	blx	r6
 8006f12:	2800      	cmp	r0, #0
 8006f14:	dc08      	bgt.n	8006f28 <__sflush_r+0xfc>
 8006f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f28:	4407      	add	r7, r0
 8006f2a:	eba8 0800 	sub.w	r8, r8, r0
 8006f2e:	e7e7      	b.n	8006f00 <__sflush_r+0xd4>
 8006f30:	dfbffffe 	.word	0xdfbffffe

08006f34 <_fflush_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	690b      	ldr	r3, [r1, #16]
 8006f38:	4605      	mov	r5, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	b913      	cbnz	r3, 8006f44 <_fflush_r+0x10>
 8006f3e:	2500      	movs	r5, #0
 8006f40:	4628      	mov	r0, r5
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	b118      	cbz	r0, 8006f4e <_fflush_r+0x1a>
 8006f46:	6a03      	ldr	r3, [r0, #32]
 8006f48:	b90b      	cbnz	r3, 8006f4e <_fflush_r+0x1a>
 8006f4a:	f7fd fd81 	bl	8004a50 <__sinit>
 8006f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f3      	beq.n	8006f3e <_fflush_r+0xa>
 8006f56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f58:	07d0      	lsls	r0, r2, #31
 8006f5a:	d404      	bmi.n	8006f66 <_fflush_r+0x32>
 8006f5c:	0599      	lsls	r1, r3, #22
 8006f5e:	d402      	bmi.n	8006f66 <_fflush_r+0x32>
 8006f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f62:	f7fd fedc 	bl	8004d1e <__retarget_lock_acquire_recursive>
 8006f66:	4628      	mov	r0, r5
 8006f68:	4621      	mov	r1, r4
 8006f6a:	f7ff ff5f 	bl	8006e2c <__sflush_r>
 8006f6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f70:	07da      	lsls	r2, r3, #31
 8006f72:	4605      	mov	r5, r0
 8006f74:	d4e4      	bmi.n	8006f40 <_fflush_r+0xc>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	059b      	lsls	r3, r3, #22
 8006f7a:	d4e1      	bmi.n	8006f40 <_fflush_r+0xc>
 8006f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f7e:	f7fd fecf 	bl	8004d20 <__retarget_lock_release_recursive>
 8006f82:	e7dd      	b.n	8006f40 <_fflush_r+0xc>

08006f84 <__sccl>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	780b      	ldrb	r3, [r1, #0]
 8006f88:	4604      	mov	r4, r0
 8006f8a:	2b5e      	cmp	r3, #94	@ 0x5e
 8006f8c:	bf0b      	itete	eq
 8006f8e:	784b      	ldrbeq	r3, [r1, #1]
 8006f90:	1c4a      	addne	r2, r1, #1
 8006f92:	1c8a      	addeq	r2, r1, #2
 8006f94:	2100      	movne	r1, #0
 8006f96:	bf08      	it	eq
 8006f98:	2101      	moveq	r1, #1
 8006f9a:	3801      	subs	r0, #1
 8006f9c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006fa0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006fa4:	42a8      	cmp	r0, r5
 8006fa6:	d1fb      	bne.n	8006fa0 <__sccl+0x1c>
 8006fa8:	b90b      	cbnz	r3, 8006fae <__sccl+0x2a>
 8006faa:	1e50      	subs	r0, r2, #1
 8006fac:	bd70      	pop	{r4, r5, r6, pc}
 8006fae:	f081 0101 	eor.w	r1, r1, #1
 8006fb2:	54e1      	strb	r1, [r4, r3]
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006fbc:	2d2d      	cmp	r5, #45	@ 0x2d
 8006fbe:	d005      	beq.n	8006fcc <__sccl+0x48>
 8006fc0:	2d5d      	cmp	r5, #93	@ 0x5d
 8006fc2:	d016      	beq.n	8006ff2 <__sccl+0x6e>
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	d0f1      	beq.n	8006fac <__sccl+0x28>
 8006fc8:	462b      	mov	r3, r5
 8006fca:	e7f2      	b.n	8006fb2 <__sccl+0x2e>
 8006fcc:	7846      	ldrb	r6, [r0, #1]
 8006fce:	2e5d      	cmp	r6, #93	@ 0x5d
 8006fd0:	d0fa      	beq.n	8006fc8 <__sccl+0x44>
 8006fd2:	42b3      	cmp	r3, r6
 8006fd4:	dcf8      	bgt.n	8006fc8 <__sccl+0x44>
 8006fd6:	3002      	adds	r0, #2
 8006fd8:	461a      	mov	r2, r3
 8006fda:	3201      	adds	r2, #1
 8006fdc:	4296      	cmp	r6, r2
 8006fde:	54a1      	strb	r1, [r4, r2]
 8006fe0:	dcfb      	bgt.n	8006fda <__sccl+0x56>
 8006fe2:	1af2      	subs	r2, r6, r3
 8006fe4:	3a01      	subs	r2, #1
 8006fe6:	1c5d      	adds	r5, r3, #1
 8006fe8:	42b3      	cmp	r3, r6
 8006fea:	bfa8      	it	ge
 8006fec:	2200      	movge	r2, #0
 8006fee:	18ab      	adds	r3, r5, r2
 8006ff0:	e7e1      	b.n	8006fb6 <__sccl+0x32>
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	e7da      	b.n	8006fac <__sccl+0x28>

08006ff6 <__submore>:
 8006ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006ffe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007002:	4299      	cmp	r1, r3
 8007004:	d11d      	bne.n	8007042 <__submore+0x4c>
 8007006:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800700a:	f7fe fd4d 	bl	8005aa8 <_malloc_r>
 800700e:	b918      	cbnz	r0, 8007018 <__submore+0x22>
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800701c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800701e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007022:	6360      	str	r0, [r4, #52]	@ 0x34
 8007024:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007028:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800702c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007030:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007034:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007038:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800703c:	6020      	str	r0, [r4, #0]
 800703e:	2000      	movs	r0, #0
 8007040:	e7e8      	b.n	8007014 <__submore+0x1e>
 8007042:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007044:	0077      	lsls	r7, r6, #1
 8007046:	463a      	mov	r2, r7
 8007048:	f000 f920 	bl	800728c <_realloc_r>
 800704c:	4605      	mov	r5, r0
 800704e:	2800      	cmp	r0, #0
 8007050:	d0de      	beq.n	8007010 <__submore+0x1a>
 8007052:	eb00 0806 	add.w	r8, r0, r6
 8007056:	4601      	mov	r1, r0
 8007058:	4632      	mov	r2, r6
 800705a:	4640      	mov	r0, r8
 800705c:	f000 f8c4 	bl	80071e8 <memcpy>
 8007060:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007064:	f8c4 8000 	str.w	r8, [r4]
 8007068:	e7e9      	b.n	800703e <__submore+0x48>

0800706a <__swbuf_r>:
 800706a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706c:	460e      	mov	r6, r1
 800706e:	4614      	mov	r4, r2
 8007070:	4605      	mov	r5, r0
 8007072:	b118      	cbz	r0, 800707c <__swbuf_r+0x12>
 8007074:	6a03      	ldr	r3, [r0, #32]
 8007076:	b90b      	cbnz	r3, 800707c <__swbuf_r+0x12>
 8007078:	f7fd fcea 	bl	8004a50 <__sinit>
 800707c:	69a3      	ldr	r3, [r4, #24]
 800707e:	60a3      	str	r3, [r4, #8]
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	071a      	lsls	r2, r3, #28
 8007084:	d501      	bpl.n	800708a <__swbuf_r+0x20>
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	b943      	cbnz	r3, 800709c <__swbuf_r+0x32>
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 f82b 	bl	80070e8 <__swsetup_r>
 8007092:	b118      	cbz	r0, 800709c <__swbuf_r+0x32>
 8007094:	f04f 37ff 	mov.w	r7, #4294967295
 8007098:	4638      	mov	r0, r7
 800709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	6922      	ldr	r2, [r4, #16]
 80070a0:	1a98      	subs	r0, r3, r2
 80070a2:	6963      	ldr	r3, [r4, #20]
 80070a4:	b2f6      	uxtb	r6, r6
 80070a6:	4283      	cmp	r3, r0
 80070a8:	4637      	mov	r7, r6
 80070aa:	dc05      	bgt.n	80070b8 <__swbuf_r+0x4e>
 80070ac:	4621      	mov	r1, r4
 80070ae:	4628      	mov	r0, r5
 80070b0:	f7ff ff40 	bl	8006f34 <_fflush_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d1ed      	bne.n	8007094 <__swbuf_r+0x2a>
 80070b8:	68a3      	ldr	r3, [r4, #8]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	60a3      	str	r3, [r4, #8]
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	6022      	str	r2, [r4, #0]
 80070c4:	701e      	strb	r6, [r3, #0]
 80070c6:	6962      	ldr	r2, [r4, #20]
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d004      	beq.n	80070d8 <__swbuf_r+0x6e>
 80070ce:	89a3      	ldrh	r3, [r4, #12]
 80070d0:	07db      	lsls	r3, r3, #31
 80070d2:	d5e1      	bpl.n	8007098 <__swbuf_r+0x2e>
 80070d4:	2e0a      	cmp	r6, #10
 80070d6:	d1df      	bne.n	8007098 <__swbuf_r+0x2e>
 80070d8:	4621      	mov	r1, r4
 80070da:	4628      	mov	r0, r5
 80070dc:	f7ff ff2a 	bl	8006f34 <_fflush_r>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d0d9      	beq.n	8007098 <__swbuf_r+0x2e>
 80070e4:	e7d6      	b.n	8007094 <__swbuf_r+0x2a>
	...

080070e8 <__swsetup_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4b29      	ldr	r3, [pc, #164]	@ (8007190 <__swsetup_r+0xa8>)
 80070ec:	4605      	mov	r5, r0
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	460c      	mov	r4, r1
 80070f2:	b118      	cbz	r0, 80070fc <__swsetup_r+0x14>
 80070f4:	6a03      	ldr	r3, [r0, #32]
 80070f6:	b90b      	cbnz	r3, 80070fc <__swsetup_r+0x14>
 80070f8:	f7fd fcaa 	bl	8004a50 <__sinit>
 80070fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007100:	0719      	lsls	r1, r3, #28
 8007102:	d422      	bmi.n	800714a <__swsetup_r+0x62>
 8007104:	06da      	lsls	r2, r3, #27
 8007106:	d407      	bmi.n	8007118 <__swsetup_r+0x30>
 8007108:	2209      	movs	r2, #9
 800710a:	602a      	str	r2, [r5, #0]
 800710c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	f04f 30ff 	mov.w	r0, #4294967295
 8007116:	e033      	b.n	8007180 <__swsetup_r+0x98>
 8007118:	0758      	lsls	r0, r3, #29
 800711a:	d512      	bpl.n	8007142 <__swsetup_r+0x5a>
 800711c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800711e:	b141      	cbz	r1, 8007132 <__swsetup_r+0x4a>
 8007120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007124:	4299      	cmp	r1, r3
 8007126:	d002      	beq.n	800712e <__swsetup_r+0x46>
 8007128:	4628      	mov	r0, r5
 800712a:	f7fe fc49 	bl	80059c0 <_free_r>
 800712e:	2300      	movs	r3, #0
 8007130:	6363      	str	r3, [r4, #52]	@ 0x34
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	2300      	movs	r3, #0
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f043 0308 	orr.w	r3, r3, #8
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	b94b      	cbnz	r3, 8007162 <__swsetup_r+0x7a>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007158:	d003      	beq.n	8007162 <__swsetup_r+0x7a>
 800715a:	4621      	mov	r1, r4
 800715c:	4628      	mov	r0, r5
 800715e:	f000 f9f5 	bl	800754c <__smakebuf_r>
 8007162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007166:	f013 0201 	ands.w	r2, r3, #1
 800716a:	d00a      	beq.n	8007182 <__swsetup_r+0x9a>
 800716c:	2200      	movs	r2, #0
 800716e:	60a2      	str	r2, [r4, #8]
 8007170:	6962      	ldr	r2, [r4, #20]
 8007172:	4252      	negs	r2, r2
 8007174:	61a2      	str	r2, [r4, #24]
 8007176:	6922      	ldr	r2, [r4, #16]
 8007178:	b942      	cbnz	r2, 800718c <__swsetup_r+0xa4>
 800717a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800717e:	d1c5      	bne.n	800710c <__swsetup_r+0x24>
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	0799      	lsls	r1, r3, #30
 8007184:	bf58      	it	pl
 8007186:	6962      	ldrpl	r2, [r4, #20]
 8007188:	60a2      	str	r2, [r4, #8]
 800718a:	e7f4      	b.n	8007176 <__swsetup_r+0x8e>
 800718c:	2000      	movs	r0, #0
 800718e:	e7f7      	b.n	8007180 <__swsetup_r+0x98>
 8007190:	20000018 	.word	0x20000018

08007194 <memmove>:
 8007194:	4288      	cmp	r0, r1
 8007196:	b510      	push	{r4, lr}
 8007198:	eb01 0402 	add.w	r4, r1, r2
 800719c:	d902      	bls.n	80071a4 <memmove+0x10>
 800719e:	4284      	cmp	r4, r0
 80071a0:	4623      	mov	r3, r4
 80071a2:	d807      	bhi.n	80071b4 <memmove+0x20>
 80071a4:	1e43      	subs	r3, r0, #1
 80071a6:	42a1      	cmp	r1, r4
 80071a8:	d008      	beq.n	80071bc <memmove+0x28>
 80071aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071b2:	e7f8      	b.n	80071a6 <memmove+0x12>
 80071b4:	4402      	add	r2, r0
 80071b6:	4601      	mov	r1, r0
 80071b8:	428a      	cmp	r2, r1
 80071ba:	d100      	bne.n	80071be <memmove+0x2a>
 80071bc:	bd10      	pop	{r4, pc}
 80071be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071c6:	e7f7      	b.n	80071b8 <memmove+0x24>

080071c8 <_sbrk_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d06      	ldr	r5, [pc, #24]	@ (80071e4 <_sbrk_r+0x1c>)
 80071cc:	2300      	movs	r3, #0
 80071ce:	4604      	mov	r4, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	602b      	str	r3, [r5, #0]
 80071d4:	f7fa fc96 	bl	8001b04 <_sbrk>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_sbrk_r+0x1a>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_sbrk_r+0x1a>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	20000448 	.word	0x20000448

080071e8 <memcpy>:
 80071e8:	440a      	add	r2, r1
 80071ea:	4291      	cmp	r1, r2
 80071ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80071f0:	d100      	bne.n	80071f4 <memcpy+0xc>
 80071f2:	4770      	bx	lr
 80071f4:	b510      	push	{r4, lr}
 80071f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071fe:	4291      	cmp	r1, r2
 8007200:	d1f9      	bne.n	80071f6 <memcpy+0xe>
 8007202:	bd10      	pop	{r4, pc}

08007204 <__assert_func>:
 8007204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007206:	4614      	mov	r4, r2
 8007208:	461a      	mov	r2, r3
 800720a:	4b09      	ldr	r3, [pc, #36]	@ (8007230 <__assert_func+0x2c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4605      	mov	r5, r0
 8007210:	68d8      	ldr	r0, [r3, #12]
 8007212:	b954      	cbnz	r4, 800722a <__assert_func+0x26>
 8007214:	4b07      	ldr	r3, [pc, #28]	@ (8007234 <__assert_func+0x30>)
 8007216:	461c      	mov	r4, r3
 8007218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800721c:	9100      	str	r1, [sp, #0]
 800721e:	462b      	mov	r3, r5
 8007220:	4905      	ldr	r1, [pc, #20]	@ (8007238 <__assert_func+0x34>)
 8007222:	f000 f95b 	bl	80074dc <fiprintf>
 8007226:	f000 f9ef 	bl	8007608 <abort>
 800722a:	4b04      	ldr	r3, [pc, #16]	@ (800723c <__assert_func+0x38>)
 800722c:	e7f4      	b.n	8007218 <__assert_func+0x14>
 800722e:	bf00      	nop
 8007230:	20000018 	.word	0x20000018
 8007234:	08007b19 	.word	0x08007b19
 8007238:	08007aeb 	.word	0x08007aeb
 800723c:	08007ade 	.word	0x08007ade

08007240 <_calloc_r>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	fba1 5402 	umull	r5, r4, r1, r2
 8007246:	b93c      	cbnz	r4, 8007258 <_calloc_r+0x18>
 8007248:	4629      	mov	r1, r5
 800724a:	f7fe fc2d 	bl	8005aa8 <_malloc_r>
 800724e:	4606      	mov	r6, r0
 8007250:	b928      	cbnz	r0, 800725e <_calloc_r+0x1e>
 8007252:	2600      	movs	r6, #0
 8007254:	4630      	mov	r0, r6
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	220c      	movs	r2, #12
 800725a:	6002      	str	r2, [r0, #0]
 800725c:	e7f9      	b.n	8007252 <_calloc_r+0x12>
 800725e:	462a      	mov	r2, r5
 8007260:	4621      	mov	r1, r4
 8007262:	f7fd fccc 	bl	8004bfe <memset>
 8007266:	e7f5      	b.n	8007254 <_calloc_r+0x14>

08007268 <__ascii_mbtowc>:
 8007268:	b082      	sub	sp, #8
 800726a:	b901      	cbnz	r1, 800726e <__ascii_mbtowc+0x6>
 800726c:	a901      	add	r1, sp, #4
 800726e:	b142      	cbz	r2, 8007282 <__ascii_mbtowc+0x1a>
 8007270:	b14b      	cbz	r3, 8007286 <__ascii_mbtowc+0x1e>
 8007272:	7813      	ldrb	r3, [r2, #0]
 8007274:	600b      	str	r3, [r1, #0]
 8007276:	7812      	ldrb	r2, [r2, #0]
 8007278:	1e10      	subs	r0, r2, #0
 800727a:	bf18      	it	ne
 800727c:	2001      	movne	r0, #1
 800727e:	b002      	add	sp, #8
 8007280:	4770      	bx	lr
 8007282:	4610      	mov	r0, r2
 8007284:	e7fb      	b.n	800727e <__ascii_mbtowc+0x16>
 8007286:	f06f 0001 	mvn.w	r0, #1
 800728a:	e7f8      	b.n	800727e <__ascii_mbtowc+0x16>

0800728c <_realloc_r>:
 800728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007290:	4680      	mov	r8, r0
 8007292:	4615      	mov	r5, r2
 8007294:	460c      	mov	r4, r1
 8007296:	b921      	cbnz	r1, 80072a2 <_realloc_r+0x16>
 8007298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	4611      	mov	r1, r2
 800729e:	f7fe bc03 	b.w	8005aa8 <_malloc_r>
 80072a2:	b92a      	cbnz	r2, 80072b0 <_realloc_r+0x24>
 80072a4:	f7fe fb8c 	bl	80059c0 <_free_r>
 80072a8:	2400      	movs	r4, #0
 80072aa:	4620      	mov	r0, r4
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b0:	f000 f9b1 	bl	8007616 <_malloc_usable_size_r>
 80072b4:	4285      	cmp	r5, r0
 80072b6:	4606      	mov	r6, r0
 80072b8:	d802      	bhi.n	80072c0 <_realloc_r+0x34>
 80072ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80072be:	d8f4      	bhi.n	80072aa <_realloc_r+0x1e>
 80072c0:	4629      	mov	r1, r5
 80072c2:	4640      	mov	r0, r8
 80072c4:	f7fe fbf0 	bl	8005aa8 <_malloc_r>
 80072c8:	4607      	mov	r7, r0
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d0ec      	beq.n	80072a8 <_realloc_r+0x1c>
 80072ce:	42b5      	cmp	r5, r6
 80072d0:	462a      	mov	r2, r5
 80072d2:	4621      	mov	r1, r4
 80072d4:	bf28      	it	cs
 80072d6:	4632      	movcs	r2, r6
 80072d8:	f7ff ff86 	bl	80071e8 <memcpy>
 80072dc:	4621      	mov	r1, r4
 80072de:	4640      	mov	r0, r8
 80072e0:	f7fe fb6e 	bl	80059c0 <_free_r>
 80072e4:	463c      	mov	r4, r7
 80072e6:	e7e0      	b.n	80072aa <_realloc_r+0x1e>

080072e8 <_strtol_l.constprop.0>:
 80072e8:	2b24      	cmp	r3, #36	@ 0x24
 80072ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ee:	4686      	mov	lr, r0
 80072f0:	4690      	mov	r8, r2
 80072f2:	d801      	bhi.n	80072f8 <_strtol_l.constprop.0+0x10>
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d106      	bne.n	8007306 <_strtol_l.constprop.0+0x1e>
 80072f8:	f7fd fce6 	bl	8004cc8 <__errno>
 80072fc:	2316      	movs	r3, #22
 80072fe:	6003      	str	r3, [r0, #0]
 8007300:	2000      	movs	r0, #0
 8007302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007306:	4834      	ldr	r0, [pc, #208]	@ (80073d8 <_strtol_l.constprop.0+0xf0>)
 8007308:	460d      	mov	r5, r1
 800730a:	462a      	mov	r2, r5
 800730c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007310:	5d06      	ldrb	r6, [r0, r4]
 8007312:	f016 0608 	ands.w	r6, r6, #8
 8007316:	d1f8      	bne.n	800730a <_strtol_l.constprop.0+0x22>
 8007318:	2c2d      	cmp	r4, #45	@ 0x2d
 800731a:	d12d      	bne.n	8007378 <_strtol_l.constprop.0+0x90>
 800731c:	782c      	ldrb	r4, [r5, #0]
 800731e:	2601      	movs	r6, #1
 8007320:	1c95      	adds	r5, r2, #2
 8007322:	f033 0210 	bics.w	r2, r3, #16
 8007326:	d109      	bne.n	800733c <_strtol_l.constprop.0+0x54>
 8007328:	2c30      	cmp	r4, #48	@ 0x30
 800732a:	d12a      	bne.n	8007382 <_strtol_l.constprop.0+0x9a>
 800732c:	782a      	ldrb	r2, [r5, #0]
 800732e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007332:	2a58      	cmp	r2, #88	@ 0x58
 8007334:	d125      	bne.n	8007382 <_strtol_l.constprop.0+0x9a>
 8007336:	786c      	ldrb	r4, [r5, #1]
 8007338:	2310      	movs	r3, #16
 800733a:	3502      	adds	r5, #2
 800733c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007340:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007344:	2200      	movs	r2, #0
 8007346:	fbbc f9f3 	udiv	r9, ip, r3
 800734a:	4610      	mov	r0, r2
 800734c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007350:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007354:	2f09      	cmp	r7, #9
 8007356:	d81b      	bhi.n	8007390 <_strtol_l.constprop.0+0xa8>
 8007358:	463c      	mov	r4, r7
 800735a:	42a3      	cmp	r3, r4
 800735c:	dd27      	ble.n	80073ae <_strtol_l.constprop.0+0xc6>
 800735e:	1c57      	adds	r7, r2, #1
 8007360:	d007      	beq.n	8007372 <_strtol_l.constprop.0+0x8a>
 8007362:	4581      	cmp	r9, r0
 8007364:	d320      	bcc.n	80073a8 <_strtol_l.constprop.0+0xc0>
 8007366:	d101      	bne.n	800736c <_strtol_l.constprop.0+0x84>
 8007368:	45a2      	cmp	sl, r4
 800736a:	db1d      	blt.n	80073a8 <_strtol_l.constprop.0+0xc0>
 800736c:	fb00 4003 	mla	r0, r0, r3, r4
 8007370:	2201      	movs	r2, #1
 8007372:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007376:	e7eb      	b.n	8007350 <_strtol_l.constprop.0+0x68>
 8007378:	2c2b      	cmp	r4, #43	@ 0x2b
 800737a:	bf04      	itt	eq
 800737c:	782c      	ldrbeq	r4, [r5, #0]
 800737e:	1c95      	addeq	r5, r2, #2
 8007380:	e7cf      	b.n	8007322 <_strtol_l.constprop.0+0x3a>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1da      	bne.n	800733c <_strtol_l.constprop.0+0x54>
 8007386:	2c30      	cmp	r4, #48	@ 0x30
 8007388:	bf0c      	ite	eq
 800738a:	2308      	moveq	r3, #8
 800738c:	230a      	movne	r3, #10
 800738e:	e7d5      	b.n	800733c <_strtol_l.constprop.0+0x54>
 8007390:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007394:	2f19      	cmp	r7, #25
 8007396:	d801      	bhi.n	800739c <_strtol_l.constprop.0+0xb4>
 8007398:	3c37      	subs	r4, #55	@ 0x37
 800739a:	e7de      	b.n	800735a <_strtol_l.constprop.0+0x72>
 800739c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80073a0:	2f19      	cmp	r7, #25
 80073a2:	d804      	bhi.n	80073ae <_strtol_l.constprop.0+0xc6>
 80073a4:	3c57      	subs	r4, #87	@ 0x57
 80073a6:	e7d8      	b.n	800735a <_strtol_l.constprop.0+0x72>
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ac:	e7e1      	b.n	8007372 <_strtol_l.constprop.0+0x8a>
 80073ae:	1c53      	adds	r3, r2, #1
 80073b0:	d108      	bne.n	80073c4 <_strtol_l.constprop.0+0xdc>
 80073b2:	2322      	movs	r3, #34	@ 0x22
 80073b4:	f8ce 3000 	str.w	r3, [lr]
 80073b8:	4660      	mov	r0, ip
 80073ba:	f1b8 0f00 	cmp.w	r8, #0
 80073be:	d0a0      	beq.n	8007302 <_strtol_l.constprop.0+0x1a>
 80073c0:	1e69      	subs	r1, r5, #1
 80073c2:	e006      	b.n	80073d2 <_strtol_l.constprop.0+0xea>
 80073c4:	b106      	cbz	r6, 80073c8 <_strtol_l.constprop.0+0xe0>
 80073c6:	4240      	negs	r0, r0
 80073c8:	f1b8 0f00 	cmp.w	r8, #0
 80073cc:	d099      	beq.n	8007302 <_strtol_l.constprop.0+0x1a>
 80073ce:	2a00      	cmp	r2, #0
 80073d0:	d1f6      	bne.n	80073c0 <_strtol_l.constprop.0+0xd8>
 80073d2:	f8c8 1000 	str.w	r1, [r8]
 80073d6:	e794      	b.n	8007302 <_strtol_l.constprop.0+0x1a>
 80073d8:	08007b1b 	.word	0x08007b1b

080073dc <_strtol_r>:
 80073dc:	f7ff bf84 	b.w	80072e8 <_strtol_l.constprop.0>

080073e0 <_strtoul_l.constprop.0>:
 80073e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4e34      	ldr	r6, [pc, #208]	@ (80074b8 <_strtoul_l.constprop.0+0xd8>)
 80073e6:	4686      	mov	lr, r0
 80073e8:	460d      	mov	r5, r1
 80073ea:	4628      	mov	r0, r5
 80073ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073f0:	5d37      	ldrb	r7, [r6, r4]
 80073f2:	f017 0708 	ands.w	r7, r7, #8
 80073f6:	d1f8      	bne.n	80073ea <_strtoul_l.constprop.0+0xa>
 80073f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80073fa:	d12f      	bne.n	800745c <_strtoul_l.constprop.0+0x7c>
 80073fc:	782c      	ldrb	r4, [r5, #0]
 80073fe:	2701      	movs	r7, #1
 8007400:	1c85      	adds	r5, r0, #2
 8007402:	f033 0010 	bics.w	r0, r3, #16
 8007406:	d109      	bne.n	800741c <_strtoul_l.constprop.0+0x3c>
 8007408:	2c30      	cmp	r4, #48	@ 0x30
 800740a:	d12c      	bne.n	8007466 <_strtoul_l.constprop.0+0x86>
 800740c:	7828      	ldrb	r0, [r5, #0]
 800740e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007412:	2858      	cmp	r0, #88	@ 0x58
 8007414:	d127      	bne.n	8007466 <_strtoul_l.constprop.0+0x86>
 8007416:	786c      	ldrb	r4, [r5, #1]
 8007418:	2310      	movs	r3, #16
 800741a:	3502      	adds	r5, #2
 800741c:	f04f 38ff 	mov.w	r8, #4294967295
 8007420:	2600      	movs	r6, #0
 8007422:	fbb8 f8f3 	udiv	r8, r8, r3
 8007426:	fb03 f908 	mul.w	r9, r3, r8
 800742a:	ea6f 0909 	mvn.w	r9, r9
 800742e:	4630      	mov	r0, r6
 8007430:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007434:	f1bc 0f09 	cmp.w	ip, #9
 8007438:	d81c      	bhi.n	8007474 <_strtoul_l.constprop.0+0x94>
 800743a:	4664      	mov	r4, ip
 800743c:	42a3      	cmp	r3, r4
 800743e:	dd2a      	ble.n	8007496 <_strtoul_l.constprop.0+0xb6>
 8007440:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007444:	d007      	beq.n	8007456 <_strtoul_l.constprop.0+0x76>
 8007446:	4580      	cmp	r8, r0
 8007448:	d322      	bcc.n	8007490 <_strtoul_l.constprop.0+0xb0>
 800744a:	d101      	bne.n	8007450 <_strtoul_l.constprop.0+0x70>
 800744c:	45a1      	cmp	r9, r4
 800744e:	db1f      	blt.n	8007490 <_strtoul_l.constprop.0+0xb0>
 8007450:	fb00 4003 	mla	r0, r0, r3, r4
 8007454:	2601      	movs	r6, #1
 8007456:	f815 4b01 	ldrb.w	r4, [r5], #1
 800745a:	e7e9      	b.n	8007430 <_strtoul_l.constprop.0+0x50>
 800745c:	2c2b      	cmp	r4, #43	@ 0x2b
 800745e:	bf04      	itt	eq
 8007460:	782c      	ldrbeq	r4, [r5, #0]
 8007462:	1c85      	addeq	r5, r0, #2
 8007464:	e7cd      	b.n	8007402 <_strtoul_l.constprop.0+0x22>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1d8      	bne.n	800741c <_strtoul_l.constprop.0+0x3c>
 800746a:	2c30      	cmp	r4, #48	@ 0x30
 800746c:	bf0c      	ite	eq
 800746e:	2308      	moveq	r3, #8
 8007470:	230a      	movne	r3, #10
 8007472:	e7d3      	b.n	800741c <_strtoul_l.constprop.0+0x3c>
 8007474:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007478:	f1bc 0f19 	cmp.w	ip, #25
 800747c:	d801      	bhi.n	8007482 <_strtoul_l.constprop.0+0xa2>
 800747e:	3c37      	subs	r4, #55	@ 0x37
 8007480:	e7dc      	b.n	800743c <_strtoul_l.constprop.0+0x5c>
 8007482:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007486:	f1bc 0f19 	cmp.w	ip, #25
 800748a:	d804      	bhi.n	8007496 <_strtoul_l.constprop.0+0xb6>
 800748c:	3c57      	subs	r4, #87	@ 0x57
 800748e:	e7d5      	b.n	800743c <_strtoul_l.constprop.0+0x5c>
 8007490:	f04f 36ff 	mov.w	r6, #4294967295
 8007494:	e7df      	b.n	8007456 <_strtoul_l.constprop.0+0x76>
 8007496:	1c73      	adds	r3, r6, #1
 8007498:	d106      	bne.n	80074a8 <_strtoul_l.constprop.0+0xc8>
 800749a:	2322      	movs	r3, #34	@ 0x22
 800749c:	f8ce 3000 	str.w	r3, [lr]
 80074a0:	4630      	mov	r0, r6
 80074a2:	b932      	cbnz	r2, 80074b2 <_strtoul_l.constprop.0+0xd2>
 80074a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074a8:	b107      	cbz	r7, 80074ac <_strtoul_l.constprop.0+0xcc>
 80074aa:	4240      	negs	r0, r0
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	d0f9      	beq.n	80074a4 <_strtoul_l.constprop.0+0xc4>
 80074b0:	b106      	cbz	r6, 80074b4 <_strtoul_l.constprop.0+0xd4>
 80074b2:	1e69      	subs	r1, r5, #1
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	e7f5      	b.n	80074a4 <_strtoul_l.constprop.0+0xc4>
 80074b8:	08007b1b 	.word	0x08007b1b

080074bc <_strtoul_r>:
 80074bc:	f7ff bf90 	b.w	80073e0 <_strtoul_l.constprop.0>

080074c0 <__ascii_wctomb>:
 80074c0:	4603      	mov	r3, r0
 80074c2:	4608      	mov	r0, r1
 80074c4:	b141      	cbz	r1, 80074d8 <__ascii_wctomb+0x18>
 80074c6:	2aff      	cmp	r2, #255	@ 0xff
 80074c8:	d904      	bls.n	80074d4 <__ascii_wctomb+0x14>
 80074ca:	228a      	movs	r2, #138	@ 0x8a
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	f04f 30ff 	mov.w	r0, #4294967295
 80074d2:	4770      	bx	lr
 80074d4:	700a      	strb	r2, [r1, #0]
 80074d6:	2001      	movs	r0, #1
 80074d8:	4770      	bx	lr
	...

080074dc <fiprintf>:
 80074dc:	b40e      	push	{r1, r2, r3}
 80074de:	b503      	push	{r0, r1, lr}
 80074e0:	4601      	mov	r1, r0
 80074e2:	ab03      	add	r3, sp, #12
 80074e4:	4805      	ldr	r0, [pc, #20]	@ (80074fc <fiprintf+0x20>)
 80074e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	f7ff fa37 	bl	8006960 <_vfiprintf_r>
 80074f2:	b002      	add	sp, #8
 80074f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074f8:	b003      	add	sp, #12
 80074fa:	4770      	bx	lr
 80074fc:	20000018 	.word	0x20000018

08007500 <__swhatbuf_r>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	460c      	mov	r4, r1
 8007504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007508:	2900      	cmp	r1, #0
 800750a:	b096      	sub	sp, #88	@ 0x58
 800750c:	4615      	mov	r5, r2
 800750e:	461e      	mov	r6, r3
 8007510:	da0d      	bge.n	800752e <__swhatbuf_r+0x2e>
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007518:	f04f 0100 	mov.w	r1, #0
 800751c:	bf14      	ite	ne
 800751e:	2340      	movne	r3, #64	@ 0x40
 8007520:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007524:	2000      	movs	r0, #0
 8007526:	6031      	str	r1, [r6, #0]
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	b016      	add	sp, #88	@ 0x58
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	466a      	mov	r2, sp
 8007530:	f000 f848 	bl	80075c4 <_fstat_r>
 8007534:	2800      	cmp	r0, #0
 8007536:	dbec      	blt.n	8007512 <__swhatbuf_r+0x12>
 8007538:	9901      	ldr	r1, [sp, #4]
 800753a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800753e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007542:	4259      	negs	r1, r3
 8007544:	4159      	adcs	r1, r3
 8007546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800754a:	e7eb      	b.n	8007524 <__swhatbuf_r+0x24>

0800754c <__smakebuf_r>:
 800754c:	898b      	ldrh	r3, [r1, #12]
 800754e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007550:	079d      	lsls	r5, r3, #30
 8007552:	4606      	mov	r6, r0
 8007554:	460c      	mov	r4, r1
 8007556:	d507      	bpl.n	8007568 <__smakebuf_r+0x1c>
 8007558:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	2301      	movs	r3, #1
 8007562:	6163      	str	r3, [r4, #20]
 8007564:	b003      	add	sp, #12
 8007566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007568:	ab01      	add	r3, sp, #4
 800756a:	466a      	mov	r2, sp
 800756c:	f7ff ffc8 	bl	8007500 <__swhatbuf_r>
 8007570:	9f00      	ldr	r7, [sp, #0]
 8007572:	4605      	mov	r5, r0
 8007574:	4639      	mov	r1, r7
 8007576:	4630      	mov	r0, r6
 8007578:	f7fe fa96 	bl	8005aa8 <_malloc_r>
 800757c:	b948      	cbnz	r0, 8007592 <__smakebuf_r+0x46>
 800757e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007582:	059a      	lsls	r2, r3, #22
 8007584:	d4ee      	bmi.n	8007564 <__smakebuf_r+0x18>
 8007586:	f023 0303 	bic.w	r3, r3, #3
 800758a:	f043 0302 	orr.w	r3, r3, #2
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	e7e2      	b.n	8007558 <__smakebuf_r+0xc>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	6020      	str	r0, [r4, #0]
 8007596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075a2:	b15b      	cbz	r3, 80075bc <__smakebuf_r+0x70>
 80075a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075a8:	4630      	mov	r0, r6
 80075aa:	f000 f81d 	bl	80075e8 <_isatty_r>
 80075ae:	b128      	cbz	r0, 80075bc <__smakebuf_r+0x70>
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	81a3      	strh	r3, [r4, #12]
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	431d      	orrs	r5, r3
 80075c0:	81a5      	strh	r5, [r4, #12]
 80075c2:	e7cf      	b.n	8007564 <__smakebuf_r+0x18>

080075c4 <_fstat_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d07      	ldr	r5, [pc, #28]	@ (80075e4 <_fstat_r+0x20>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	f7fa fa6f 	bl	8001ab4 <_fstat>
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	d102      	bne.n	80075e0 <_fstat_r+0x1c>
 80075da:	682b      	ldr	r3, [r5, #0]
 80075dc:	b103      	cbz	r3, 80075e0 <_fstat_r+0x1c>
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	bd38      	pop	{r3, r4, r5, pc}
 80075e2:	bf00      	nop
 80075e4:	20000448 	.word	0x20000448

080075e8 <_isatty_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d06      	ldr	r5, [pc, #24]	@ (8007604 <_isatty_r+0x1c>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7fa fa6e 	bl	8001ad4 <_isatty>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_isatty_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_isatty_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000448 	.word	0x20000448

08007608 <abort>:
 8007608:	b508      	push	{r3, lr}
 800760a:	2006      	movs	r0, #6
 800760c:	f000 f834 	bl	8007678 <raise>
 8007610:	2001      	movs	r0, #1
 8007612:	f7fa f9ff 	bl	8001a14 <_exit>

08007616 <_malloc_usable_size_r>:
 8007616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800761a:	1f18      	subs	r0, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfbc      	itt	lt
 8007620:	580b      	ldrlt	r3, [r1, r0]
 8007622:	18c0      	addlt	r0, r0, r3
 8007624:	4770      	bx	lr

08007626 <_raise_r>:
 8007626:	291f      	cmp	r1, #31
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4605      	mov	r5, r0
 800762c:	460c      	mov	r4, r1
 800762e:	d904      	bls.n	800763a <_raise_r+0x14>
 8007630:	2316      	movs	r3, #22
 8007632:	6003      	str	r3, [r0, #0]
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	bd38      	pop	{r3, r4, r5, pc}
 800763a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800763c:	b112      	cbz	r2, 8007644 <_raise_r+0x1e>
 800763e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007642:	b94b      	cbnz	r3, 8007658 <_raise_r+0x32>
 8007644:	4628      	mov	r0, r5
 8007646:	f000 f831 	bl	80076ac <_getpid_r>
 800764a:	4622      	mov	r2, r4
 800764c:	4601      	mov	r1, r0
 800764e:	4628      	mov	r0, r5
 8007650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007654:	f000 b818 	b.w	8007688 <_kill_r>
 8007658:	2b01      	cmp	r3, #1
 800765a:	d00a      	beq.n	8007672 <_raise_r+0x4c>
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	d103      	bne.n	8007668 <_raise_r+0x42>
 8007660:	2316      	movs	r3, #22
 8007662:	6003      	str	r3, [r0, #0]
 8007664:	2001      	movs	r0, #1
 8007666:	e7e7      	b.n	8007638 <_raise_r+0x12>
 8007668:	2100      	movs	r1, #0
 800766a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800766e:	4620      	mov	r0, r4
 8007670:	4798      	blx	r3
 8007672:	2000      	movs	r0, #0
 8007674:	e7e0      	b.n	8007638 <_raise_r+0x12>
	...

08007678 <raise>:
 8007678:	4b02      	ldr	r3, [pc, #8]	@ (8007684 <raise+0xc>)
 800767a:	4601      	mov	r1, r0
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	f7ff bfd2 	b.w	8007626 <_raise_r>
 8007682:	bf00      	nop
 8007684:	20000018 	.word	0x20000018

08007688 <_kill_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	@ (80076a8 <_kill_r+0x20>)
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	602b      	str	r3, [r5, #0]
 8007696:	f7fa f9ad 	bl	80019f4 <_kill>
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	d102      	bne.n	80076a4 <_kill_r+0x1c>
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	b103      	cbz	r3, 80076a4 <_kill_r+0x1c>
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	bd38      	pop	{r3, r4, r5, pc}
 80076a6:	bf00      	nop
 80076a8:	20000448 	.word	0x20000448

080076ac <_getpid_r>:
 80076ac:	f7fa b99a 	b.w	80019e4 <_getpid>

080076b0 <_init>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	bf00      	nop
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr

080076bc <_fini>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr
