
STM32-NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08007480  08007480  00008480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007908  08007908  000091e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007908  08007908  00008908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007910  08007910  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007910  08007910  00008910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007914  08007914  00008914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08007918  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001e4  08007afc  000091e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08007afc  0000951c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dee3  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205a  00000000  00000000  000170f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00019158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a86  00000000  00000000  00019ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bbc  00000000  00000000  0001a956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010338  00000000  00000000  0003d512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2cb2  00000000  00000000  0004d84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001204fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a98  00000000  00000000  00120540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00124fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007468 	.word	0x08007468

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007468 	.word	0x08007468

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay (uint16_t delay)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <microDelay+0x30>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000f8a:	bf00      	nop
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <microDelay+0x30>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f9      	bcc.n	8000f8c <microDelay+0x14>
	  //printf("%d ticks \n",__HAL_TIM_GET_COUNTER(&htim1));
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000200 	.word	0x20000200

08000fac <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482d      	ldr	r0, [pc, #180]	@ (8001090 <DHT11_Start+0xe4>)
 8000fdc:	f001 f888 	bl	80020f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe6:	482a      	ldr	r0, [pc, #168]	@ (8001090 <DHT11_Start+0xe4>)
 8000fe8:	f001 fa2e 	bl	8002448 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000fec:	2014      	movs	r0, #20
 8000fee:	f000 feb7 	bl	8001d60 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ff8:	4825      	ldr	r0, [pc, #148]	@ (8001090 <DHT11_Start+0xe4>)
 8000ffa:	f001 fa25 	bl	8002448 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000ffe:	201e      	movs	r0, #30
 8001000:	f7ff ffba 	bl	8000f78 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	481f      	ldr	r0, [pc, #124]	@ (8001090 <DHT11_Start+0xe4>)
 8001012:	f001 f86d 	bl	80020f0 <HAL_GPIO_Init>
  microDelay (40);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f7ff ffae 	bl	8000f78 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800101c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001020:	481b      	ldr	r0, [pc, #108]	@ (8001090 <DHT11_Start+0xe4>)
 8001022:	f001 f9f9 	bl	8002418 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10c      	bne.n	8001046 <DHT11_Start+0x9a>
  {
    microDelay (80);
 800102c:	2050      	movs	r0, #80	@ 0x50
 800102e:	f7ff ffa3 	bl	8000f78 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001036:	4816      	ldr	r0, [pc, #88]	@ (8001090 <DHT11_Start+0xe4>)
 8001038:	f001 f9ee 	bl	8002418 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <DHT11_Start+0x9a>
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001046:	f000 fe7f 	bl	8001d48 <HAL_GetTick>
 800104a:	4603      	mov	r3, r0
 800104c:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <DHT11_Start+0xe8>)
 800104e:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001050:	f000 fe7a 	bl	8001d48 <HAL_GetTick>
 8001054:	4603      	mov	r3, r0
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <DHT11_Start+0xec>)
 8001058:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800105a:	e004      	b.n	8001066 <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 800105c:	f000 fe74 	bl	8001d48 <HAL_GetTick>
 8001060:	4603      	mov	r3, r0
 8001062:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <DHT11_Start+0xec>)
 8001064:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	4809      	ldr	r0, [pc, #36]	@ (8001090 <DHT11_Start+0xe4>)
 800106c:	f001 f9d4 	bl	8002418 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <DHT11_Start+0xd8>
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <DHT11_Start+0xe8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1c9a      	adds	r2, r3, #2
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <DHT11_Start+0xec>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8eb      	bhi.n	800105c <DHT11_Start+0xb0>
  }
  return Response;
 8001084:	7dfb      	ldrb	r3, [r7, #23]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020800 	.word	0x40020800
 8001094:	200002e0 	.word	0x200002e0
 8001098:	200002e4 	.word	0x200002e4

0800109c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	e066      	b.n	8001176 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 80010a8:	f000 fe4e 	bl	8001d48 <HAL_GetTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a36      	ldr	r2, [pc, #216]	@ (8001188 <DHT11_Read+0xec>)
 80010b0:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010b2:	f000 fe49 	bl	8001d48 <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a34      	ldr	r2, [pc, #208]	@ (800118c <DHT11_Read+0xf0>)
 80010ba:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010bc:	e004      	b.n	80010c8 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80010be:	f000 fe43 	bl	8001d48 <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a31      	ldr	r2, [pc, #196]	@ (800118c <DHT11_Read+0xf0>)
 80010c6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010cc:	4830      	ldr	r0, [pc, #192]	@ (8001190 <DHT11_Read+0xf4>)
 80010ce:	f001 f9a3 	bl	8002418 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <DHT11_Read+0x4a>
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <DHT11_Read+0xec>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	1c9a      	adds	r2, r3, #2
 80010de:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <DHT11_Read+0xf0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d8eb      	bhi.n	80010be <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80010e6:	2028      	movs	r0, #40	@ 0x28
 80010e8:	f7ff ff46 	bl	8000f78 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80010ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f0:	4827      	ldr	r0, [pc, #156]	@ (8001190 <DHT11_Read+0xf4>)
 80010f2:	f001 f991 	bl	8002418 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10e      	bne.n	800111a <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2201      	movs	r2, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	b25b      	sxtb	r3, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	b25a      	sxtb	r2, r3
 800110e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001112:	4013      	ands	r3, r2
 8001114:	b25b      	sxtb	r3, r3
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	e00b      	b.n	8001132 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f1c3 0307 	rsb	r3, r3, #7
 8001120:	2201      	movs	r2, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	b25a      	sxtb	r2, r3
 8001128:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800112c:	4313      	orrs	r3, r2
 800112e:	b25b      	sxtb	r3, r3
 8001130:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001132:	f000 fe09 	bl	8001d48 <HAL_GetTick>
 8001136:	4603      	mov	r3, r0
 8001138:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <DHT11_Read+0xec>)
 800113a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800113c:	f000 fe04 	bl	8001d48 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <DHT11_Read+0xf0>)
 8001144:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001146:	e004      	b.n	8001152 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001148:	f000 fdfe 	bl	8001d48 <HAL_GetTick>
 800114c:	4603      	mov	r3, r0
 800114e:	4a0f      	ldr	r2, [pc, #60]	@ (800118c <DHT11_Read+0xf0>)
 8001150:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001152:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001156:	480e      	ldr	r0, [pc, #56]	@ (8001190 <DHT11_Read+0xf4>)
 8001158:	f001 f95e 	bl	8002418 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <DHT11_Read+0xd4>
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <DHT11_Read+0xec>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1c9a      	adds	r2, r3, #2
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <DHT11_Read+0xf0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8eb      	bhi.n	8001148 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	3301      	adds	r3, #1
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b07      	cmp	r3, #7
 800117a:	d995      	bls.n	80010a8 <DHT11_Read+0xc>
    }
  }
  return b;
 800117c:	79bb      	ldrb	r3, [r7, #6]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200002e0 	.word	0x200002e0
 800118c:	200002e4 	.word	0x200002e4
 8001190:	40020800 	.word	0x40020800

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	ed2d 8b02 	vpush	{d8}
 800119a:	b091      	sub	sp, #68	@ 0x44
 800119c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f000 fd6d 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f9a7 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f000 fab5 	bl	8001714 <MX_GPIO_Init>
  MX_UART4_Init();
 80011aa:	f000 fa5f 	bl	800166c <MX_UART4_Init>
  MX_TIM1_Init();
 80011ae:	f000 fa0d 	bl	80015cc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80011b2:	f000 fa85 	bl	80016c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80011b6:	48ad      	ldr	r0, [pc, #692]	@ (800146c <main+0x2d8>)
 80011b8:	f001 ff12 	bl	8002fe0 <HAL_TIM_Base_Start>
  HAL_UART_Transmit(&huart2, "Start\n", 28, 1000u);
 80011bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c0:	221c      	movs	r2, #28
 80011c2:	49ab      	ldr	r1, [pc, #684]	@ (8001470 <main+0x2dc>)
 80011c4:	48ab      	ldr	r0, [pc, #684]	@ (8001474 <main+0x2e0>)
 80011c6:	f002 fa4d 	bl	8003664 <HAL_UART_Transmit>

  UART_SendString("[DEBUG] STM32 USART6 Initialized!\n");
 80011ca:	48ab      	ldr	r0, [pc, #684]	@ (8001478 <main+0x2e4>)
 80011cc:	f000 fb30 	bl	8001830 <UART_SendString>
  HAL_UART_Receive_IT(&huart4, (uint8_t *) rx_buffer, sizeof(rx_buffer));
 80011d0:	2201      	movs	r2, #1
 80011d2:	49aa      	ldr	r1, [pc, #680]	@ (800147c <main+0x2e8>)
 80011d4:	48aa      	ldr	r0, [pc, #680]	@ (8001480 <main+0x2ec>)
 80011d6:	f002 fb67 	bl	80038a8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (DHT11_Start()) {
 80011da:	f7ff fee7 	bl	8000fac <DHT11_Start>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80e1 	beq.w	80013a8 <main+0x214>
          RHI = DHT11_Read(); // Relative humidity integral
 80011e6:	f7ff ff59 	bl	800109c <DHT11_Read>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4ba5      	ldr	r3, [pc, #660]	@ (8001484 <main+0x2f0>)
 80011f0:	701a      	strb	r2, [r3, #0]
          RHD = DHT11_Read(); // Relative humidity decimal
 80011f2:	f7ff ff53 	bl	800109c <DHT11_Read>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4ba3      	ldr	r3, [pc, #652]	@ (8001488 <main+0x2f4>)
 80011fc:	701a      	strb	r2, [r3, #0]
          TCI = DHT11_Read(); // Celsius integral
 80011fe:	f7ff ff4d 	bl	800109c <DHT11_Read>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4ba1      	ldr	r3, [pc, #644]	@ (800148c <main+0x2f8>)
 8001208:	701a      	strb	r2, [r3, #0]
          TCD = DHT11_Read(); // Celsius decimal
 800120a:	f7ff ff47 	bl	800109c <DHT11_Read>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b9f      	ldr	r3, [pc, #636]	@ (8001490 <main+0x2fc>)
 8001214:	701a      	strb	r2, [r3, #0]
          SUM = DHT11_Read(); // Check sum
 8001216:	f7ff ff41 	bl	800109c <DHT11_Read>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b9d      	ldr	r3, [pc, #628]	@ (8001494 <main+0x300>)
 8001220:	701a      	strb	r2, [r3, #0]
          if (RHI + RHD + TCI + TCD == SUM) {
 8001222:	4b98      	ldr	r3, [pc, #608]	@ (8001484 <main+0x2f0>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b97      	ldr	r3, [pc, #604]	@ (8001488 <main+0x2f4>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4413      	add	r3, r2
 800122e:	4a97      	ldr	r2, [pc, #604]	@ (800148c <main+0x2f8>)
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a96      	ldr	r2, [pc, #600]	@ (8001490 <main+0x2fc>)
 8001236:	7812      	ldrb	r2, [r2, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a96      	ldr	r2, [pc, #600]	@ (8001494 <main+0x300>)
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	4293      	cmp	r3, r2
 8001240:	f040 80b2 	bne.w	80013a8 <main+0x214>
              // Can use RHI and TCI for any purposes if whole number only needed
              tCelsius = (float) TCI + (float) (TCD / 10.0);
 8001244:	4b91      	ldr	r3, [pc, #580]	@ (800148c <main+0x2f8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001250:	4b8f      	ldr	r3, [pc, #572]	@ (8001490 <main+0x2fc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f985 	bl	8000564 <__aeabi_i2d>
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b8e      	ldr	r3, [pc, #568]	@ (8001498 <main+0x304>)
 8001260:	f7ff fb14 	bl	800088c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fcbc 	bl	8000be8 <__aeabi_d2f>
 8001270:	ee07 0a90 	vmov	s15, r0
 8001274:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001278:	4b88      	ldr	r3, [pc, #544]	@ (800149c <main+0x308>)
 800127a:	edc3 7a00 	vstr	s15, [r3]
              tFahrenheit = tCelsius * 9 / 5 + 32;
 800127e:	4b87      	ldr	r3, [pc, #540]	@ (800149c <main+0x308>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001288:	ee27 7a87 	vmul.f32	s14, s15, s14
 800128c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80014a0 <main+0x30c>
 8001298:	ee77 7a87 	vadd.f32	s15, s15, s14
 800129c:	4b81      	ldr	r3, [pc, #516]	@ (80014a4 <main+0x310>)
 800129e:	edc3 7a00 	vstr	s15, [r3]
              RH = (float) RHI + (float) (RHD / 10.0);
 80012a2:	4b78      	ldr	r3, [pc, #480]	@ (8001484 <main+0x2f0>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80012ae:	4b76      	ldr	r3, [pc, #472]	@ (8001488 <main+0x2f4>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f956 	bl	8000564 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b76      	ldr	r3, [pc, #472]	@ (8001498 <main+0x304>)
 80012be:	f7ff fae5 	bl	800088c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc8d 	bl	8000be8 <__aeabi_d2f>
 80012ce:	ee07 0a90 	vmov	s15, r0
 80012d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012d6:	4b74      	ldr	r3, [pc, #464]	@ (80014a8 <main+0x314>)
 80012d8:	edc3 7a00 	vstr	s15, [r3]
              // Can use tCelsius, tFahrenheit and RH for any purposes
              TFI = tFahrenheit;  // Fahrenheit integral
 80012dc:	4b71      	ldr	r3, [pc, #452]	@ (80014a4 <main+0x310>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	edc7 7a03 	vstr	s15, [r7, #12]
 80012ea:	7b3b      	ldrb	r3, [r7, #12]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b6f      	ldr	r3, [pc, #444]	@ (80014ac <main+0x318>)
 80012f0:	701a      	strb	r2, [r3, #0]
              TFD = tFahrenheit * 10 - TFI * 10; // Fahrenheit decimal
 80012f2:	4b6c      	ldr	r3, [pc, #432]	@ (80014a4 <main+0x310>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001300:	4b6a      	ldr	r3, [pc, #424]	@ (80014ac <main+0x318>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001322:	7b3b      	ldrb	r3, [r7, #12]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b62      	ldr	r3, [pc, #392]	@ (80014b0 <main+0x31c>)
 8001328:	701a      	strb	r2, [r3, #0]
              printf("%d.%d C   ", TCI, TCD);
 800132a:	4b58      	ldr	r3, [pc, #352]	@ (800148c <main+0x2f8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4b57      	ldr	r3, [pc, #348]	@ (8001490 <main+0x2fc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	485f      	ldr	r0, [pc, #380]	@ (80014b4 <main+0x320>)
 8001338:	f004 f80c 	bl	8005354 <iprintf>
              printf("%d.%d F   ", TFI, TFD);
 800133c:	4b5b      	ldr	r3, [pc, #364]	@ (80014ac <main+0x318>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	4b5b      	ldr	r3, [pc, #364]	@ (80014b0 <main+0x31c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	485b      	ldr	r0, [pc, #364]	@ (80014b8 <main+0x324>)
 800134a:	f004 f803 	bl	8005354 <iprintf>
              char *buf = (char *) malloc(sizeof(char) * 100);
 800134e:	2064      	movs	r0, #100	@ 0x64
 8001350:	f003 fa30 	bl	80047b4 <malloc>
 8001354:	4603      	mov	r3, r0
 8001356:	617b      	str	r3, [r7, #20]
              sprintf(buf, "%d.%d C\n", TCI, TCD);
 8001358:	4b4c      	ldr	r3, [pc, #304]	@ (800148c <main+0x2f8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b4c      	ldr	r3, [pc, #304]	@ (8001490 <main+0x2fc>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4956      	ldr	r1, [pc, #344]	@ (80014bc <main+0x328>)
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f004 f807 	bl	8005378 <siprintf>
              HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000u);
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7fe ffa0 	bl	80002b0 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001378:	6979      	ldr	r1, [r7, #20]
 800137a:	483e      	ldr	r0, [pc, #248]	@ (8001474 <main+0x2e0>)
 800137c:	f002 f972 	bl	8003664 <HAL_UART_Transmit>
              sprintf(buf, "%d.%d %%\n", RHI, RHD);
 8001380:	4b40      	ldr	r3, [pc, #256]	@ (8001484 <main+0x2f0>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b40      	ldr	r3, [pc, #256]	@ (8001488 <main+0x2f4>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	494d      	ldr	r1, [pc, #308]	@ (80014c0 <main+0x32c>)
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f003 fff3 	bl	8005378 <siprintf>
              HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000u);
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7fe ff8c 	bl	80002b0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a0:	6979      	ldr	r1, [r7, #20]
 80013a2:	4834      	ldr	r0, [pc, #208]	@ (8001474 <main+0x2e0>)
 80013a4:	f002 f95e 	bl	8003664 <HAL_UART_Transmit>
          }
      }
      HAL_Delay(2000);
 80013a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ac:	f000 fcd8 	bl	8001d60 <HAL_Delay>
              } else { UART_SendString("[DEBUG] Commande inconnue\n"); }
              memset(buffer, 0, sizeof(buffer));
          }
      }*/

      sprintf(
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <main+0x2f8>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	469c      	mov	ip, r3
 80013b6:	4b36      	ldr	r3, [pc, #216]	@ (8001490 <main+0x2fc>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	469e      	mov	lr, r3
 80013bc:	4b31      	ldr	r3, [pc, #196]	@ (8001484 <main+0x2f0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b31      	ldr	r3, [pc, #196]	@ (8001488 <main+0x2f4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <main+0x330>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4a3e      	ldr	r2, [pc, #248]	@ (80014c8 <main+0x334>)
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	493e      	ldr	r1, [pc, #248]	@ (80014cc <main+0x338>)
 80013d4:	6809      	ldr	r1, [r1, #0]
              uart_buf,
              "{\"Temperature\":%d.%d,\"Humidity\":%d.%d,\"RGB\":{\"red\":%d,\"green\":%d,\"blue\":%d,\"state\":%s},\"Led\":%s,\"Buzzer\":%s,\"Button\":%s,\"TemperatureThreshold\":%d}\n",
              TCI, TCD, // Temperature
              RHI, RHD, // Humidity
              rgbr, rgbg, rgbb, // RGB color
              rgb ? "true" : "false", // RGB state
 80013d6:	483e      	ldr	r0, [pc, #248]	@ (80014d0 <main+0x33c>)
 80013d8:	7800      	ldrb	r0, [r0, #0]
      sprintf(
 80013da:	2800      	cmp	r0, #0
 80013dc:	d001      	beq.n	80013e2 <main+0x24e>
 80013de:	483d      	ldr	r0, [pc, #244]	@ (80014d4 <main+0x340>)
 80013e0:	e000      	b.n	80013e4 <main+0x250>
 80013e2:	483d      	ldr	r0, [pc, #244]	@ (80014d8 <main+0x344>)
              led ? "true" : "false", // Led state
 80013e4:	4c3d      	ldr	r4, [pc, #244]	@ (80014dc <main+0x348>)
 80013e6:	7824      	ldrb	r4, [r4, #0]
      sprintf(
 80013e8:	2c00      	cmp	r4, #0
 80013ea:	d001      	beq.n	80013f0 <main+0x25c>
 80013ec:	4c39      	ldr	r4, [pc, #228]	@ (80014d4 <main+0x340>)
 80013ee:	e000      	b.n	80013f2 <main+0x25e>
 80013f0:	4c39      	ldr	r4, [pc, #228]	@ (80014d8 <main+0x344>)
              buz ? "true" : "false", // Buzzer state
 80013f2:	4d3b      	ldr	r5, [pc, #236]	@ (80014e0 <main+0x34c>)
 80013f4:	782d      	ldrb	r5, [r5, #0]
      sprintf(
 80013f6:	2d00      	cmp	r5, #0
 80013f8:	d001      	beq.n	80013fe <main+0x26a>
 80013fa:	4d36      	ldr	r5, [pc, #216]	@ (80014d4 <main+0x340>)
 80013fc:	e000      	b.n	8001400 <main+0x26c>
 80013fe:	4d36      	ldr	r5, [pc, #216]	@ (80014d8 <main+0x344>)
              but ? "true" : "false", // Button state
 8001400:	4e38      	ldr	r6, [pc, #224]	@ (80014e4 <main+0x350>)
 8001402:	7836      	ldrb	r6, [r6, #0]
      sprintf(
 8001404:	2e00      	cmp	r6, #0
 8001406:	d001      	beq.n	800140c <main+0x278>
 8001408:	4e32      	ldr	r6, [pc, #200]	@ (80014d4 <main+0x340>)
 800140a:	e000      	b.n	800140e <main+0x27a>
 800140c:	4e32      	ldr	r6, [pc, #200]	@ (80014d8 <main+0x344>)
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <main+0x354>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	9309      	str	r3, [sp, #36]	@ 0x24
 8001414:	9608      	str	r6, [sp, #32]
 8001416:	9507      	str	r5, [sp, #28]
 8001418:	9406      	str	r4, [sp, #24]
 800141a:	9005      	str	r0, [sp, #20]
 800141c:	9104      	str	r1, [sp, #16]
 800141e:	9203      	str	r2, [sp, #12]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4673      	mov	r3, lr
 800142e:	4662      	mov	r2, ip
 8001430:	492e      	ldr	r1, [pc, #184]	@ (80014ec <main+0x358>)
 8001432:	482f      	ldr	r0, [pc, #188]	@ (80014f0 <main+0x35c>)
 8001434:	f003 ffa0 	bl	8005378 <siprintf>
              temp_threshold // Temperature threshold
      );
      UART_SendString(uart_buf);
 8001438:	482d      	ldr	r0, [pc, #180]	@ (80014f0 <main+0x35c>)
 800143a:	f000 f9f9 	bl	8001830 <UART_SendString>

      HAL_Delay(2000);
 800143e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001442:	f000 fc8d 	bl	8001d60 <HAL_Delay>

      if (HAL_UART_Receive(&huart4, (uint8_t *) rx_buffer, 1, 100) == HAL_OK) {
 8001446:	2364      	movs	r3, #100	@ 0x64
 8001448:	2201      	movs	r2, #1
 800144a:	490c      	ldr	r1, [pc, #48]	@ (800147c <main+0x2e8>)
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <main+0x2ec>)
 800144e:	f002 f994 	bl	800377a <HAL_UART_Receive>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f aec0 	bne.w	80011da <main+0x46>
          HAL_UART_Transmit(&huart4, (uint8_t *) rx_buffer, 1, HAL_MAX_DELAY);
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	2201      	movs	r2, #1
 8001460:	4906      	ldr	r1, [pc, #24]	@ (800147c <main+0x2e8>)
 8001462:	4807      	ldr	r0, [pc, #28]	@ (8001480 <main+0x2ec>)
 8001464:	f002 f8fe 	bl	8003664 <HAL_UART_Transmit>
      if (DHT11_Start()) {
 8001468:	e6b7      	b.n	80011da <main+0x46>
 800146a:	bf00      	nop
 800146c:	20000200 	.word	0x20000200
 8001470:	08007480 	.word	0x08007480
 8001474:	20000290 	.word	0x20000290
 8001478:	08007488 	.word	0x08007488
 800147c:	200002fc 	.word	0x200002fc
 8001480:	20000248 	.word	0x20000248
 8001484:	200002d8 	.word	0x200002d8
 8001488:	200002d9 	.word	0x200002d9
 800148c:	200002da 	.word	0x200002da
 8001490:	200002db 	.word	0x200002db
 8001494:	200002dc 	.word	0x200002dc
 8001498:	40240000 	.word	0x40240000
 800149c:	200002e8 	.word	0x200002e8
 80014a0:	42000000 	.word	0x42000000
 80014a4:	200002ec 	.word	0x200002ec
 80014a8:	200002f0 	.word	0x200002f0
 80014ac:	200002f4 	.word	0x200002f4
 80014b0:	200002f5 	.word	0x200002f5
 80014b4:	080074ac 	.word	0x080074ac
 80014b8:	080074b8 	.word	0x080074b8
 80014bc:	080074c4 	.word	0x080074c4
 80014c0:	080074d0 	.word	0x080074d0
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000004 	.word	0x20000004
 80014cc:	20000008 	.word	0x20000008
 80014d0:	200002f6 	.word	0x200002f6
 80014d4:	080074dc 	.word	0x080074dc
 80014d8:	080074e4 	.word	0x080074e4
 80014dc:	200002f7 	.word	0x200002f7
 80014e0:	200002f8 	.word	0x200002f8
 80014e4:	200002f9 	.word	0x200002f9
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	080074ec 	.word	0x080074ec
 80014f0:	20000300 	.word	0x20000300

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	@ 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	2234      	movs	r2, #52	@ 0x34
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f003 ff9b 	bl	800543e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <SystemClock_Config+0xd0>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	4a28      	ldr	r2, [pc, #160]	@ (80015c4 <SystemClock_Config+0xd0>)
 8001522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	@ 0x40
 8001528:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <SystemClock_Config+0xd0>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <SystemClock_Config+0xd4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001540:	4a21      	ldr	r2, [pc, #132]	@ (80015c8 <SystemClock_Config+0xd4>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <SystemClock_Config+0xd4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001554:	2302      	movs	r3, #2
 8001556:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	2301      	movs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155c:	2310      	movs	r3, #16
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001560:	2302      	movs	r3, #2
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001564:	2300      	movs	r3, #0
 8001566:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001568:	2308      	movs	r3, #8
 800156a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800156c:	2348      	movs	r3, #72	@ 0x48
 800156e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001574:	2302      	movs	r3, #2
 8001576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001578:	2302      	movs	r3, #2
 800157a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fa3f 	bl	8002a04 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800158c:	f000 f966 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001594:	2302      	movs	r3, #2
 8001596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2102      	movs	r1, #2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 ff65 	bl	800247c <HAL_RCC_ClockConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80015b8:	f000 f950 	bl	800185c <Error_Handler>
  }
}
 80015bc:	bf00      	nop
 80015be:	3750      	adds	r7, #80	@ 0x50
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000

080015cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <MX_TIM1_Init+0x98>)
 80015ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <MX_TIM1_Init+0x9c>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <MX_TIM1_Init+0x98>)
 80015f0:	2247      	movs	r2, #71	@ 0x47
 80015f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <MX_TIM1_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_TIM1_Init+0x98>)
 80015fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001600:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <MX_TIM1_Init+0x98>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_TIM1_Init+0x98>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <MX_TIM1_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001614:	4813      	ldr	r0, [pc, #76]	@ (8001664 <MX_TIM1_Init+0x98>)
 8001616:	f001 fc93 	bl	8002f40 <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001620:	f000 f91c 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001628:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <MX_TIM1_Init+0x98>)
 8001632:	f001 fd3d 	bl	80030b0 <HAL_TIM_ConfigClockSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800163c:	f000 f90e 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_TIM1_Init+0x98>)
 800164e:	f001 ff3d 	bl	80034cc <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001658:	f000 f900 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000200 	.word	0x20000200
 8001668:	40010000 	.word	0x40010000

0800166c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_UART4_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <MX_UART4_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_UART4_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_UART4_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_UART4_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <MX_UART4_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_UART4_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <MX_UART4_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_UART4_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_UART4_Init+0x4c>)
 80016a4:	f001 ff8e 	bl	80035c4 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f8d5 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000248 	.word	0x20000248
 80016bc:	40004c00 	.word	0x40004c00

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <MX_USART2_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f8:	f001 ff64 	bl	80035c4 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f8ab 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000290 	.word	0x20000290
 8001710:	40004400 	.word	0x40004400

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <MX_GPIO_Init+0x10c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a3b      	ldr	r2, [pc, #236]	@ (8001820 <MX_GPIO_Init+0x10c>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <MX_GPIO_Init+0x10c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <MX_GPIO_Init+0x10c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a34      	ldr	r2, [pc, #208]	@ (8001820 <MX_GPIO_Init+0x10c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <MX_GPIO_Init+0x10c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b2e      	ldr	r3, [pc, #184]	@ (8001820 <MX_GPIO_Init+0x10c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a2d      	ldr	r2, [pc, #180]	@ (8001820 <MX_GPIO_Init+0x10c>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <MX_GPIO_Init+0x10c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_GPIO_Port, TEMP_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001784:	4827      	ldr	r0, [pc, #156]	@ (8001824 <MX_GPIO_Init+0x110>)
 8001786:	f000 fe5f 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_SENSOR_GPIO_Port, TEMP_SENSOR_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2120      	movs	r1, #32
 800178e:	4826      	ldr	r0, [pc, #152]	@ (8001828 <MX_GPIO_Init+0x114>)
 8001790:	f000 fe5a 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RGBBLUE_Pin */
  GPIO_InitStruct.Pin = RGBBLUE_Pin;
 8001794:	2302      	movs	r3, #2
 8001796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001798:	2303      	movs	r3, #3
 800179a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RGBBLUE_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	481f      	ldr	r0, [pc, #124]	@ (8001824 <MX_GPIO_Init+0x110>)
 80017a8:	f000 fca2 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGBTED_Pin */
  GPIO_InitStruct.Pin = RGBTED_Pin;
 80017ac:	2310      	movs	r3, #16
 80017ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b0:	2303      	movs	r3, #3
 80017b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RGBTED_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	481b      	ldr	r0, [pc, #108]	@ (800182c <MX_GPIO_Init+0x118>)
 80017c0:	f000 fc96 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGBGREEN_Pin */
  GPIO_InitStruct.Pin = RGBGREEN_Pin;
 80017c4:	2301      	movs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c8:	2303      	movs	r3, #3
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RGBGREEN_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	4814      	ldr	r0, [pc, #80]	@ (8001828 <MX_GPIO_Init+0x114>)
 80017d8:	f000 fc8a 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_Pin */
  GPIO_InitStruct.Pin = TEMP_Pin;
 80017dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	480b      	ldr	r0, [pc, #44]	@ (8001824 <MX_GPIO_Init+0x110>)
 80017f6:	f000 fc7b 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_SENSOR_Pin */
  GPIO_InitStruct.Pin = TEMP_SENSOR_Pin;
 80017fa:	2320      	movs	r3, #32
 80017fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEMP_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_GPIO_Init+0x114>)
 8001812:	f000 fc6d 	bl	80020f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001816:	bf00      	nop
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40020800 	.word	0x40020800
 8001828:	40020400 	.word	0x40020400
 800182c:	40020000 	.word	0x40020000

08001830 <UART_SendString>:

/* USER CODE BEGIN 4 */

void UART_SendString(char *str) { HAL_UART_Transmit(&huart4, (uint8_t *) str, strlen(str), HAL_MAX_DELAY); }
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fd39 	bl	80002b0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4803      	ldr	r0, [pc, #12]	@ (8001858 <UART_SendString+0x28>)
 800184a:	f001 ff0b 	bl	8003664 <HAL_UART_Transmit>
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000248 	.word	0x20000248

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	4a0f      	ldr	r2, [pc, #60]	@ (80018b4 <HAL_MspInit+0x4c>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800187c:	6453      	str	r3, [r2, #68]	@ 0x44
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	@ (80018b4 <HAL_MspInit+0x4c>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	@ (80018f4 <HAL_TIM_Base_MspInit+0x3c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10d      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_TIM_Base_MspInit+0x40>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_TIM_Base_MspInit+0x40>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <HAL_TIM_Base_MspInit+0x40>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40010000 	.word	0x40010000
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	@ 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a36      	ldr	r2, [pc, #216]	@ (80019f4 <HAL_UART_MspInit+0xf8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d134      	bne.n	8001988 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	4b35      	ldr	r3, [pc, #212]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 8001928:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800192c:	6413      	str	r3, [r2, #64]	@ 0x40
 800192e:	4b32      	ldr	r3, [pc, #200]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a2d      	ldr	r2, [pc, #180]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001956:	2303      	movs	r3, #3
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001966:	2308      	movs	r3, #8
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4822      	ldr	r0, [pc, #136]	@ (80019fc <HAL_UART_MspInit+0x100>)
 8001972:	f000 fbbd 	bl	80020f0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2034      	movs	r0, #52	@ 0x34
 800197c:	f000 faef 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001980:	2034      	movs	r0, #52	@ 0x34
 8001982:	f000 fb08 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001986:	e030      	b.n	80019ea <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a00 <HAL_UART_MspInit+0x104>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d12b      	bne.n	80019ea <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a10      	ldr	r2, [pc, #64]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_UART_MspInit+0xfc>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ca:	230c      	movs	r3, #12
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019da:	2307      	movs	r3, #7
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	@ (80019fc <HAL_UART_MspInit+0x100>)
 80019e6:	f000 fb83 	bl	80020f0 <HAL_GPIO_Init>
}
 80019ea:	bf00      	nop
 80019ec:	3730      	adds	r7, #48	@ 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40004c00 	.word	0x40004c00
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40004400 	.word	0x40004400

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <NMI_Handler+0x4>

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5a:	f000 f961 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <UART4_IRQHandler+0x10>)
 8001a6a:	f001 ff43 	bl	80038f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000248 	.word	0x20000248

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_kill>:

int _kill(int pid, int sig)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a92:	f003 fd37 	bl	8005504 <__errno>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2216      	movs	r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_exit>:

void _exit (int status)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffe7 	bl	8001a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aba:	bf00      	nop
 8001abc:	e7fd      	b.n	8001aba <_exit+0x12>

08001abe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e00a      	b.n	8001ae6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad0:	f3af 8000 	nop.w
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	b2ca      	uxtb	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	dbf0      	blt.n	8001ad0 <_read+0x12>
  }

  return len;
 8001aee:	687b      	ldr	r3, [r7, #4]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e009      	b.n	8001b1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dbf1      	blt.n	8001b0a <_write+0x12>
  }
  return len;
 8001b26:	687b      	ldr	r3, [r7, #4]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_close>:

int _close(int file)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b58:	605a      	str	r2, [r3, #4]
  return 0;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_isatty>:

int _isatty(int file)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	@ (8001bf4 <_sbrk+0x5c>)
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <_sbrk+0x60>)
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <_sbrk+0x64>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <_sbrk+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d207      	bcs.n	8001bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc8:	f003 fc9c 	bl	8005504 <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	220c      	movs	r2, #12
 8001bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	e009      	b.n	8001bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <_sbrk+0x64>)
 8001be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20020000 	.word	0x20020000
 8001bf8:	00000400 	.word	0x00000400
 8001bfc:	200003c8 	.word	0x200003c8
 8001c00:	20000520 	.word	0x20000520

08001c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <SystemInit+0x20>)
 8001c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c0e:	4a05      	ldr	r2, [pc, #20]	@ (8001c24 <SystemInit+0x20>)
 8001c10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c2c:	f7ff ffea 	bl	8001c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c32:	490d      	ldr	r1, [pc, #52]	@ (8001c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c34:	4a0d      	ldr	r2, [pc, #52]	@ (8001c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c48:	4c0a      	ldr	r4, [pc, #40]	@ (8001c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f003 fc5b 	bl	8005510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7ff fa9b 	bl	8001194 <main>
  bx  lr    
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c6c:	08007918 	.word	0x08007918
  ldr r2, =_sbss
 8001c70:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c74:	2000051c 	.word	0x2000051c

08001c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c80:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <HAL_Init+0x40>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_Init+0x40>)
 8001c92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	@ (8001cbc <HAL_Init+0x40>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 f94f 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001caa:	200f      	movs	r0, #15
 8001cac:	f000 f808 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb0:	f7ff fdda 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f967 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 f92f 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	@ (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000010 	.word	0x20000010
 8001d18:	20000018 	.word	0x20000018
 8001d1c:	20000014 	.word	0x20000014

08001d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_IncTick+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_IncTick+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <HAL_IncTick+0x24>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000018 	.word	0x20000018
 8001d44:	200003cc 	.word	0x200003cc

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	200003cc 	.word	0x200003cc

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff ffee 	bl	8001d48 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffde 	bl	8001d48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000018 	.word	0x20000018

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4907      	ldr	r1, [pc, #28]	@ (8001e44 <__NVIC_EnableIRQ+0x38>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	@ (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff29 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff3e 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff8e 	bl	8001e9c <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff31 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa2 	bl	8001f04 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff feb6 	bl	8001d48 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d008      	beq.n	8001ffc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	@ 0x80
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e052      	b.n	80020a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0216 	bic.w	r2, r2, #22
 800200a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800201a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <HAL_DMA_Abort+0x62>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0208 	bic.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204c:	e013      	b.n	8002076 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204e:	f7ff fe7b 	bl	8001d48 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b05      	cmp	r3, #5
 800205a:	d90c      	bls.n	8002076 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e015      	b.n	80020a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e4      	bne.n	800204e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	223f      	movs	r2, #63	@ 0x3f
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e00c      	b.n	80020e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2205      	movs	r2, #5
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e165      	b.n	80023d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8154 	bne.w	80023d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d005      	beq.n	8002142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	2b02      	cmp	r3, #2
 8002140:	d130      	bne.n	80021a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80ae 	beq.w	80023d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b5d      	ldr	r3, [pc, #372]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	4a5c      	ldr	r2, [pc, #368]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002284:	6453      	str	r3, [r2, #68]	@ 0x44
 8002286:	4b5a      	ldr	r3, [pc, #360]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a58      	ldr	r2, [pc, #352]	@ (80023f4 <HAL_GPIO_Init+0x304>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4f      	ldr	r2, [pc, #316]	@ (80023f8 <HAL_GPIO_Init+0x308>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d025      	beq.n	800230a <HAL_GPIO_Init+0x21a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4e      	ldr	r2, [pc, #312]	@ (80023fc <HAL_GPIO_Init+0x30c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <HAL_GPIO_Init+0x216>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002400 <HAL_GPIO_Init+0x310>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x212>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002404 <HAL_GPIO_Init+0x314>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x20e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002408 <HAL_GPIO_Init+0x318>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x20a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4a      	ldr	r2, [pc, #296]	@ (800240c <HAL_GPIO_Init+0x31c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x206>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a49      	ldr	r2, [pc, #292]	@ (8002410 <HAL_GPIO_Init+0x320>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x202>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00c      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e00a      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e008      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022fe:	2303      	movs	r3, #3
 8002300:	e004      	b.n	800230c <HAL_GPIO_Init+0x21c>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_Init+0x21c>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x21c>
 800230a:	2300      	movs	r3, #0
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4093      	lsls	r3, r2
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231c:	4935      	ldr	r1, [pc, #212]	@ (80023f4 <HAL_GPIO_Init+0x304>)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232a:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <HAL_GPIO_Init+0x324>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234e:	4a31      	ldr	r2, [pc, #196]	@ (8002414 <HAL_GPIO_Init+0x324>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002354:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <HAL_GPIO_Init+0x324>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002378:	4a26      	ldr	r2, [pc, #152]	@ (8002414 <HAL_GPIO_Init+0x324>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237e:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <HAL_GPIO_Init+0x324>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002414 <HAL_GPIO_Init+0x324>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <HAL_GPIO_Init+0x324>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023cc:	4a11      	ldr	r2, [pc, #68]	@ (8002414 <HAL_GPIO_Init+0x324>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	f67f ae96 	bls.w	800210c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3724      	adds	r7, #36	@ 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40013800 	.word	0x40013800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40020400 	.word	0x40020400
 8002400:	40020800 	.word	0x40020800
 8002404:	40020c00 	.word	0x40020c00
 8002408:	40021000 	.word	0x40021000
 800240c:	40021400 	.word	0x40021400
 8002410:	40021800 	.word	0x40021800
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0cc      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b68      	ldr	r3, [pc, #416]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d90c      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b65      	ldr	r3, [pc, #404]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b63      	ldr	r3, [pc, #396]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0b8      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d0:	4b59      	ldr	r3, [pc, #356]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a58      	ldr	r2, [pc, #352]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e8:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a52      	ldr	r2, [pc, #328]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b50      	ldr	r3, [pc, #320]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	494d      	ldr	r1, [pc, #308]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d044      	beq.n	800259c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b47      	ldr	r3, [pc, #284]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d119      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e07f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d003      	beq.n	800253a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002536:	2b03      	cmp	r3, #3
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b3f      	ldr	r3, [pc, #252]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e067      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4934      	ldr	r1, [pc, #208]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800256c:	f7ff fbec 	bl	8001d48 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7ff fbe8 	bl	8001d48 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e04f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b25      	ldr	r3, [pc, #148]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d20c      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e032      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4916      	ldr	r1, [pc, #88]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	490e      	ldr	r1, [pc, #56]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002602:	f000 f855 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8002606:	4602      	mov	r2, r0
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	490a      	ldr	r1, [pc, #40]	@ (800263c <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	5ccb      	ldrb	r3, [r1, r3]
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_ClockConfig+0x1c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fb4c 	bl	8001cc0 <HAL_InitTick>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023c00 	.word	0x40023c00
 8002638:	40023800 	.word	0x40023800
 800263c:	08007580 	.word	0x08007580
 8002640:	20000010 	.word	0x20000010
 8002644:	20000014 	.word	0x20000014

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b03      	ldr	r3, [pc, #12]	@ (800265c <HAL_RCC_GetHCLKFreq+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000010 	.word	0x20000010

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002664:	f7ff fff0 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0a9b      	lsrs	r3, r3, #10
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	@ (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	08007590 	.word	0x08007590

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800268c:	f7ff ffdc 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0b5b      	lsrs	r3, r3, #13
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	@ (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08007590 	.word	0x08007590

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b0a6      	sub	sp, #152	@ 0x98
 80026b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d6:	4bc8      	ldr	r3, [pc, #800]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	f200 817e 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x330>
 80026e4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002721 	.word	0x08002721
 80026f0:	080029e1 	.word	0x080029e1
 80026f4:	080029e1 	.word	0x080029e1
 80026f8:	080029e1 	.word	0x080029e1
 80026fc:	08002729 	.word	0x08002729
 8002700:	080029e1 	.word	0x080029e1
 8002704:	080029e1 	.word	0x080029e1
 8002708:	080029e1 	.word	0x080029e1
 800270c:	08002731 	.word	0x08002731
 8002710:	080029e1 	.word	0x080029e1
 8002714:	080029e1 	.word	0x080029e1
 8002718:	080029e1 	.word	0x080029e1
 800271c:	0800289b 	.word	0x0800289b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4bb6      	ldr	r3, [pc, #728]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x34c>)
 8002722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002726:	e15f      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4bb5      	ldr	r3, [pc, #724]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x350>)
 800272a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800272e:	e15b      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4bb1      	ldr	r3, [pc, #708]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273c:	4bae      	ldr	r3, [pc, #696]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d031      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002748:	4bab      	ldr	r3, [pc, #684]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	2200      	movs	r2, #0
 8002750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	663b      	str	r3, [r7, #96]	@ 0x60
 800275c:	2300      	movs	r3, #0
 800275e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002760:	4ba7      	ldr	r3, [pc, #668]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x350>)
 8002762:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002766:	462a      	mov	r2, r5
 8002768:	fb03 f202 	mul.w	r2, r3, r2
 800276c:	2300      	movs	r3, #0
 800276e:	4621      	mov	r1, r4
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	4aa2      	ldr	r2, [pc, #648]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x350>)
 8002778:	4621      	mov	r1, r4
 800277a:	fba1 1202 	umull	r1, r2, r1, r2
 800277e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002780:	460a      	mov	r2, r1
 8002782:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002784:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002786:	4413      	add	r3, r2
 8002788:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800278a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800278e:	2200      	movs	r2, #0
 8002790:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002792:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002794:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002798:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800279c:	f7fe fa74 	bl	8000c88 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027aa:	e064      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ac:	4b92      	ldr	r3, [pc, #584]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	2200      	movs	r2, #0
 80027b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80027b6:	657a      	str	r2, [r7, #84]	@ 0x54
 80027b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027c0:	2300      	movs	r3, #0
 80027c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80027c8:	4622      	mov	r2, r4
 80027ca:	462b      	mov	r3, r5
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	0159      	lsls	r1, r3, #5
 80027d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027da:	0150      	lsls	r0, r2, #5
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4621      	mov	r1, r4
 80027e2:	1a51      	subs	r1, r2, r1
 80027e4:	6139      	str	r1, [r7, #16]
 80027e6:	4629      	mov	r1, r5
 80027e8:	eb63 0301 	sbc.w	r3, r3, r1
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027fa:	4659      	mov	r1, fp
 80027fc:	018b      	lsls	r3, r1, #6
 80027fe:	4651      	mov	r1, sl
 8002800:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002804:	4651      	mov	r1, sl
 8002806:	018a      	lsls	r2, r1, #6
 8002808:	4651      	mov	r1, sl
 800280a:	ebb2 0801 	subs.w	r8, r2, r1
 800280e:	4659      	mov	r1, fp
 8002810:	eb63 0901 	sbc.w	r9, r3, r1
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002820:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002824:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002828:	4690      	mov	r8, r2
 800282a:	4699      	mov	r9, r3
 800282c:	4623      	mov	r3, r4
 800282e:	eb18 0303 	adds.w	r3, r8, r3
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	462b      	mov	r3, r5
 8002836:	eb49 0303 	adc.w	r3, r9, r3
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002848:	4629      	mov	r1, r5
 800284a:	028b      	lsls	r3, r1, #10
 800284c:	4621      	mov	r1, r4
 800284e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002852:	4621      	mov	r1, r4
 8002854:	028a      	lsls	r2, r1, #10
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800285e:	2200      	movs	r2, #0
 8002860:	643b      	str	r3, [r7, #64]	@ 0x40
 8002862:	647a      	str	r2, [r7, #68]	@ 0x44
 8002864:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002868:	f7fe fa0e 	bl	8000c88 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002876:	4b60      	ldr	r3, [pc, #384]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	3301      	adds	r3, #1
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002888:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800288c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002898:	e0a6      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800289a:	4b57      	ldr	r3, [pc, #348]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a6:	4b54      	ldr	r3, [pc, #336]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d02a      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b51      	ldr	r3, [pc, #324]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	2200      	movs	r2, #0
 80028ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028c4:	2100      	movs	r1, #0
 80028c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x350>)
 80028c8:	fb03 f201 	mul.w	r2, r3, r1
 80028cc:	2300      	movs	r3, #0
 80028ce:	fb00 f303 	mul.w	r3, r0, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x350>)
 80028d6:	fba0 1202 	umull	r1, r2, r0, r2
 80028da:	677a      	str	r2, [r7, #116]	@ 0x74
 80028dc:	460a      	mov	r2, r1
 80028de:	673a      	str	r2, [r7, #112]	@ 0x70
 80028e0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028e2:	4413      	add	r3, r2
 80028e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80028e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ea:	2200      	movs	r2, #0
 80028ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80028f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80028f8:	f7fe f9c6 	bl	8000c88 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4613      	mov	r3, r2
 8002902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002906:	e05b      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002908:	4b3b      	ldr	r3, [pc, #236]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	2200      	movs	r2, #0
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002920:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	f04f 0000 	mov.w	r0, #0
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	0159      	lsls	r1, r3, #5
 8002932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002936:	0150      	lsls	r0, r2, #5
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4641      	mov	r1, r8
 800293e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002942:	4649      	mov	r1, r9
 8002944:	eb63 0b01 	sbc.w	fp, r3, r1
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002954:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002958:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800295c:	ebb2 040a 	subs.w	r4, r2, sl
 8002960:	eb63 050b 	sbc.w	r5, r3, fp
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	00eb      	lsls	r3, r5, #3
 800296e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002972:	00e2      	lsls	r2, r4, #3
 8002974:	4614      	mov	r4, r2
 8002976:	461d      	mov	r5, r3
 8002978:	4643      	mov	r3, r8
 800297a:	18e3      	adds	r3, r4, r3
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	464b      	mov	r3, r9
 8002980:	eb45 0303 	adc.w	r3, r5, r3
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002992:	4629      	mov	r1, r5
 8002994:	028b      	lsls	r3, r1, #10
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800299c:	4621      	mov	r1, r4
 800299e:	028a      	lsls	r2, r1, #10
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a8:	2200      	movs	r2, #0
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	61fa      	str	r2, [r7, #28]
 80029ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b2:	f7fe f969 	bl	8000c88 <__aeabi_uldivmod>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4613      	mov	r3, r2
 80029bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0f1b      	lsrs	r3, r3, #28
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80029ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029de:	e003      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x34c>)
 80029e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3798      	adds	r7, #152	@ 0x98
 80029f0:	46bd      	mov	sp, r7
 80029f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	00f42400 	.word	0x00f42400
 8002a00:	017d7840 	.word	0x017d7840

08002a04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e28d      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8083 	beq.w	8002b2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a24:	4b94      	ldr	r3, [pc, #592]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d019      	beq.n	8002a64 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a30:	4b91      	ldr	r3, [pc, #580]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a3c:	4b8e      	ldr	r3, [pc, #568]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d112      	bne.n	8002a7c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4b88      	ldr	r3, [pc, #544]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	4b84      	ldr	r3, [pc, #528]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05b      	beq.n	8002b28 <HAL_RCC_OscConfig+0x124>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d157      	bne.n	8002b28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e25a      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x90>
 8002a86:	4b7c      	ldr	r3, [pc, #496]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7b      	ldr	r2, [pc, #492]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e01d      	b.n	8002ad0 <HAL_RCC_OscConfig+0xcc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xb4>
 8002a9e:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b73      	ldr	r3, [pc, #460]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a72      	ldr	r2, [pc, #456]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCC_OscConfig+0xcc>
 8002ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6e      	ldr	r2, [pc, #440]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7ff f936 	bl	8001d48 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff f932 	bl	8001d48 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	@ 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e21f      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b61      	ldr	r3, [pc, #388]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xdc>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7ff f922 	bl	8001d48 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff f91e 	bl	8001d48 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	@ 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e20b      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	4b57      	ldr	r3, [pc, #348]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x104>
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d06f      	beq.n	8002c16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b36:	4b50      	ldr	r3, [pc, #320]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d017      	beq.n	8002b72 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b42:	4b4d      	ldr	r3, [pc, #308]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d105      	bne.n	8002b5a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b44      	ldr	r3, [pc, #272]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x186>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1d3      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4937      	ldr	r1, [pc, #220]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_RCC_OscConfig+0x278>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7ff f8cb 	bl	8001d48 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7ff f8c7 	bl	8001d48 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1b4      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b28      	ldr	r3, [pc, #160]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4925      	ldr	r1, [pc, #148]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <HAL_RCC_OscConfig+0x278>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f8aa 	bl	8001d48 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7ff f8a6 	bl	8001d48 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e193      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d036      	beq.n	8002c90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_RCC_OscConfig+0x27c>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7ff f88a 	bl	8001d48 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c38:	f7ff f886 	bl	8001d48 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e173      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x234>
 8002c56:	e01b      	b.n	8002c90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7ff f873 	bl	8001d48 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	e00e      	b.n	8002c84 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c66:	f7ff f86f 	bl	8001d48 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d907      	bls.n	8002c84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e15c      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	42470000 	.word	0x42470000
 8002c80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b8a      	ldr	r3, [pc, #552]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ea      	bne.n	8002c66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8097 	beq.w	8002dcc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b83      	ldr	r3, [pc, #524]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a7e      	ldr	r2, [pc, #504]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b79      	ldr	r3, [pc, #484]	@ (8002eb4 <HAL_RCC_OscConfig+0x4b0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b76      	ldr	r3, [pc, #472]	@ (8002eb4 <HAL_RCC_OscConfig+0x4b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a75      	ldr	r2, [pc, #468]	@ (8002eb4 <HAL_RCC_OscConfig+0x4b0>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7ff f82f 	bl	8001d48 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7ff f82b 	bl	8001d48 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e118      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb4 <HAL_RCC_OscConfig+0x4b0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x31e>
 8002d14:	4b66      	ldr	r3, [pc, #408]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d18:	4a65      	ldr	r2, [pc, #404]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d20:	e01c      	b.n	8002d5c <HAL_RCC_OscConfig+0x358>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x340>
 8002d2a:	4b61      	ldr	r3, [pc, #388]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	4a60      	ldr	r2, [pc, #384]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d36:	4b5e      	ldr	r3, [pc, #376]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0x358>
 8002d44:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a59      	ldr	r2, [pc, #356]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d50:	4b57      	ldr	r3, [pc, #348]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	4a56      	ldr	r2, [pc, #344]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	f023 0304 	bic.w	r3, r3, #4
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fff0 	bl	8001d48 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe ffec 	bl	8001d48 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0d7      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ee      	beq.n	8002d6c <HAL_RCC_OscConfig+0x368>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe ffda 	bl	8001d48 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f7fe ffd6 	bl	8001d48 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0c1      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	4b40      	ldr	r3, [pc, #256]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ee      	bne.n	8002d98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80ad 	beq.w	8002f30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd6:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d060      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d145      	bne.n	8002e76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b33      	ldr	r3, [pc, #204]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b4>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe ffaa 	bl	8001d48 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe ffa6 	bl	8001d48 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e093      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	4b29      	ldr	r3, [pc, #164]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e40:	071b      	lsls	r3, r3, #28
 8002e42:	491b      	ldr	r1, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b4>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7fe ff7b 	bl	8001d48 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fe ff77 	bl	8001d48 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e064      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e68:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x452>
 8002e74:	e05c      	b.n	8002f30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b4>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe ff64 	bl	8001d48 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe ff60 	bl	8001d48 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04d      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x480>
 8002ea2:	e045      	b.n	8002f30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e040      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <HAL_RCC_OscConfig+0x538>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d030      	beq.n	8002f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d129      	bne.n	8002f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d122      	bne.n	8002f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eec:	4013      	ands	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ef2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d119      	bne.n	8002f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	3b01      	subs	r3, #1
 8002f06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d10f      	bne.n	8002f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e041      	b.n	8002fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe fca6 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f000 f95e 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d001      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e046      	b.n	8003086 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a23      	ldr	r2, [pc, #140]	@ (8003094 <HAL_TIM_Base_Start+0xb4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d022      	beq.n	8003050 <HAL_TIM_Base_Start+0x70>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003012:	d01d      	beq.n	8003050 <HAL_TIM_Base_Start+0x70>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1f      	ldr	r2, [pc, #124]	@ (8003098 <HAL_TIM_Base_Start+0xb8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d018      	beq.n	8003050 <HAL_TIM_Base_Start+0x70>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1e      	ldr	r2, [pc, #120]	@ (800309c <HAL_TIM_Base_Start+0xbc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <HAL_TIM_Base_Start+0x70>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1c      	ldr	r2, [pc, #112]	@ (80030a0 <HAL_TIM_Base_Start+0xc0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00e      	beq.n	8003050 <HAL_TIM_Base_Start+0x70>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1b      	ldr	r2, [pc, #108]	@ (80030a4 <HAL_TIM_Base_Start+0xc4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d009      	beq.n	8003050 <HAL_TIM_Base_Start+0x70>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <HAL_TIM_Base_Start+0xc8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_TIM_Base_Start+0x70>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <HAL_TIM_Base_Start+0xcc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d111      	bne.n	8003074 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b06      	cmp	r3, #6
 8003060:	d010      	beq.n	8003084 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0201 	orr.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	e007      	b.n	8003084 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800
 80030a0:	40000c00 	.word	0x40000c00
 80030a4:	40010400 	.word	0x40010400
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40001800 	.word	0x40001800

080030b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_ConfigClockSource+0x1c>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e0b4      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x186>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003104:	d03e      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0xd4>
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310a:	f200 8087 	bhi.w	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003112:	f000 8086 	beq.w	8003222 <HAL_TIM_ConfigClockSource+0x172>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311a:	d87f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b70      	cmp	r3, #112	@ 0x70
 800311e:	d01a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0xa6>
 8003120:	2b70      	cmp	r3, #112	@ 0x70
 8003122:	d87b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b60      	cmp	r3, #96	@ 0x60
 8003126:	d050      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x11a>
 8003128:	2b60      	cmp	r3, #96	@ 0x60
 800312a:	d877      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b50      	cmp	r3, #80	@ 0x50
 800312e:	d03c      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0xfa>
 8003130:	2b50      	cmp	r3, #80	@ 0x50
 8003132:	d873      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d058      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x13a>
 8003138:	2b40      	cmp	r3, #64	@ 0x40
 800313a:	d86f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b30      	cmp	r3, #48	@ 0x30
 800313e:	d064      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003140:	2b30      	cmp	r3, #48	@ 0x30
 8003142:	d86b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d060      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d867      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05c      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	2b10      	cmp	r3, #16
 8003152:	d05a      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	e062      	b.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	f000 f991 	bl	800348c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	609a      	str	r2, [r3, #8]
      break;
 8003182:	e04f      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	f000 f97a 	bl	800348c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a6:	609a      	str	r2, [r3, #8]
      break;
 80031a8:	e03c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 f8ee 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2150      	movs	r1, #80	@ 0x50
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f947 	bl	8003456 <TIM_ITRx_SetConfig>
      break;
 80031c8:	e02c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 f90d 	bl	80033f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2160      	movs	r1, #96	@ 0x60
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f937 	bl	8003456 <TIM_ITRx_SetConfig>
      break;
 80031e8:	e01c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 f8ce 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2140      	movs	r1, #64	@ 0x40
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f927 	bl	8003456 <TIM_ITRx_SetConfig>
      break;
 8003208:	e00c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 f91e 	bl	8003456 <TIM_ITRx_SetConfig>
      break;
 800321a:	e003      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e000      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a46      	ldr	r2, [pc, #280]	@ (800336c <TIM_Base_SetConfig+0x12c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a43      	ldr	r2, [pc, #268]	@ (8003370 <TIM_Base_SetConfig+0x130>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a42      	ldr	r2, [pc, #264]	@ (8003374 <TIM_Base_SetConfig+0x134>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a41      	ldr	r2, [pc, #260]	@ (8003378 <TIM_Base_SetConfig+0x138>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a40      	ldr	r2, [pc, #256]	@ (800337c <TIM_Base_SetConfig+0x13c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a35      	ldr	r2, [pc, #212]	@ (800336c <TIM_Base_SetConfig+0x12c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a0:	d027      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a32      	ldr	r2, [pc, #200]	@ (8003370 <TIM_Base_SetConfig+0x130>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d023      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a31      	ldr	r2, [pc, #196]	@ (8003374 <TIM_Base_SetConfig+0x134>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01f      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a30      	ldr	r2, [pc, #192]	@ (8003378 <TIM_Base_SetConfig+0x138>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2f      	ldr	r2, [pc, #188]	@ (800337c <TIM_Base_SetConfig+0x13c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d017      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003380 <TIM_Base_SetConfig+0x140>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003384 <TIM_Base_SetConfig+0x144>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003388 <TIM_Base_SetConfig+0x148>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2b      	ldr	r2, [pc, #172]	@ (800338c <TIM_Base_SetConfig+0x14c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003390 <TIM_Base_SetConfig+0x150>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a29      	ldr	r2, [pc, #164]	@ (8003394 <TIM_Base_SetConfig+0x154>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a10      	ldr	r2, [pc, #64]	@ (800336c <TIM_Base_SetConfig+0x12c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_Base_SetConfig+0xf8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <TIM_Base_SetConfig+0x13c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d105      	bne.n	800335e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f023 0201 	bic.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]
  }
}
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800
 8003378:	40000c00 	.word	0x40000c00
 800337c:	40010400 	.word	0x40010400
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800
 800338c:	40001800 	.word	0x40001800
 8003390:	40001c00 	.word	0x40001c00
 8003394:	40002000 	.word	0x40002000

08003398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 030a 	bic.w	r3, r3, #10
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b087      	sub	sp, #28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 0210 	bic.w	r2, r3, #16
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	031b      	lsls	r3, r3, #12
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003432:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	f043 0307 	orr.w	r3, r3, #7
 8003478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	609a      	str	r2, [r3, #8]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	021a      	lsls	r2, r3, #8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	609a      	str	r2, [r3, #8]
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e05a      	b.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a21      	ldr	r2, [pc, #132]	@ (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d022      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003530:	d01d      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1d      	ldr	r2, [pc, #116]	@ (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d018      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1a      	ldr	r2, [pc, #104]	@ (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00e      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a15      	ldr	r2, [pc, #84]	@ (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10c      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	4313      	orrs	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40010400 	.word	0x40010400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40001800 	.word	0x40001800

080035c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e042      	b.n	800365c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe f986 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	@ 0x24
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fe5f 	bl	80042cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800361c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800362c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800363c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	@ 0x28
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b20      	cmp	r3, #32
 8003682:	d175      	bne.n	8003770 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_UART_Transmit+0x2c>
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e06e      	b.n	8003772 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2221      	movs	r2, #33	@ 0x21
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036a2:	f7fe fb51 	bl	8001d48 <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	88fa      	ldrh	r2, [r7, #6]
 80036b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036bc:	d108      	bne.n	80036d0 <HAL_UART_Transmit+0x6c>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	e003      	b.n	80036d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036d8:	e02e      	b.n	8003738 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	2180      	movs	r1, #128	@ 0x80
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fbc1 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e03a      	b.n	8003772 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	3302      	adds	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e007      	b.n	800372a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1cb      	bne.n	80036da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2140      	movs	r1, #64	@ 0x40
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fb8d 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e006      	b.n	8003772 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b08a      	sub	sp, #40	@ 0x28
 800377e:	af02      	add	r7, sp, #8
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	f040 8081 	bne.w	800389e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_UART_Receive+0x2e>
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e079      	b.n	80038a0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2222      	movs	r2, #34	@ 0x22
 80037b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fac2 	bl	8001d48 <HAL_GetTick>
 80037c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037da:	d108      	bne.n	80037ee <HAL_UART_Receive+0x74>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e003      	b.n	80037f6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037f6:	e047      	b.n	8003888 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2200      	movs	r2, #0
 8003800:	2120      	movs	r1, #32
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fb32 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e042      	b.n	80038a0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10c      	bne.n	800383a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382c:	b29a      	uxth	r2, r3
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3302      	adds	r3, #2
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e01f      	b.n	800387a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003842:	d007      	beq.n	8003854 <HAL_UART_Receive+0xda>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <HAL_UART_Receive+0xe8>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e008      	b.n	8003874 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800386e:	b2da      	uxtb	r2, r3
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	3301      	adds	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1b2      	bne.n	80037f8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d112      	bne.n	80038e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_UART_Receive_IT+0x26>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00b      	b.n	80038ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	461a      	mov	r2, r3
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fb1d 	bl	8003f1e <UART_Start_Receive_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	e000      	b.n	80038ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b0ba      	sub	sp, #232	@ 0xe8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_UART_IRQHandler+0x66>
 8003946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fbfc 	bl	8004150 <UART_Receive_IT>
      return;
 8003958:	e25b      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800395a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80de 	beq.w	8003b20 <HAL_UART_IRQHandler+0x22c>
 8003964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003974:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80d1 	beq.w	8003b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_UART_IRQHandler+0xae>
 800398a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_UART_IRQHandler+0xd2>
 80039ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f043 0202 	orr.w	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_UART_IRQHandler+0xf6>
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e2:	f043 0204 	orr.w	r2, r3, #4
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d011      	beq.n	8003a1a <HAL_UART_IRQHandler+0x126>
 80039f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f043 0208 	orr.w	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 81f2 	beq.w	8003e08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_UART_IRQHandler+0x14e>
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fb87 	bl	8004150 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4c:	2b40      	cmp	r3, #64	@ 0x40
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_UART_IRQHandler+0x17a>
 8003a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04f      	beq.n	8003b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa8f 	bl	8003f92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7e:	2b40      	cmp	r3, #64	@ 0x40
 8003a80:	d141      	bne.n	8003b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3314      	adds	r3, #20
 8003a88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003aae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1d9      	bne.n	8003a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d013      	beq.n	8003afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ada:	4a7e      	ldr	r2, [pc, #504]	@ (8003cd4 <HAL_UART_IRQHandler+0x3e0>)
 8003adc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fae1 	bl	80020aa <HAL_DMA_Abort_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003af8:	4610      	mov	r0, r2
 8003afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e00e      	b.n	8003b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f99e 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e00a      	b.n	8003b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f99a 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e006      	b.n	8003b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f996 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b1a:	e175      	b.n	8003e08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	bf00      	nop
    return;
 8003b1e:	e173      	b.n	8003e08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f040 814f 	bne.w	8003dc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8148 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8141 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b66:	2b40      	cmp	r3, #64	@ 0x40
 8003b68:	f040 80b6 	bne.w	8003cd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8145 	beq.w	8003e0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	f080 813e 	bcs.w	8003e0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba2:	f000 8088 	beq.w	8003cb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1d9      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e1      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3314      	adds	r3, #20
 8003c34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e3      	bne.n	8003c2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e3      	bne.n	8003c74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe f98a 	bl	8001fca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f8c1 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd2:	e09b      	b.n	8003e0c <HAL_UART_IRQHandler+0x518>
 8003cd4:	08004059 	.word	0x08004059
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 808e 	beq.w	8003e10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8089 	beq.w	8003e10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d22:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	623b      	str	r3, [r7, #32]
   return(result);
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e3      	bne.n	8003d36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0310 	bic.w	r3, r3, #16
 8003d92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	617b      	str	r3, [r7, #20]
   return(result);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e3      	bne.n	8003d7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f847 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dc6:	e023      	b.n	8003e10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_UART_IRQHandler+0x4f4>
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f94d 	bl	8004080 <UART_Transmit_IT>
    return;
 8003de6:	e014      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00e      	beq.n	8003e12 <HAL_UART_IRQHandler+0x51e>
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f98d 	bl	8004120 <UART_EndTransmit_IT>
    return;
 8003e06:	e004      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e08:	bf00      	nop
 8003e0a:	e002      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e0c:	bf00      	nop
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e10:	bf00      	nop
  }
}
 8003e12:	37e8      	adds	r7, #232	@ 0xe8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7c:	e03b      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d037      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fd ff5f 	bl	8001d48 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e03a      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d023      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b80      	cmp	r3, #128	@ 0x80
 8003eb2:	d020      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	d01d      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d116      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f857 	bl	8003f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e00f      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4013      	ands	r3, r2
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	bf0c      	ite	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	2300      	movne	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d0b4      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2222      	movs	r2, #34	@ 0x22
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0220 	orr.w	r2, r2, #32
 8003f82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b095      	sub	sp, #84	@ 0x54
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fba:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e5      	bne.n	8003f9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e5      	bne.n	8003fce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	2b01      	cmp	r3, #1
 8004008:	d119      	bne.n	800403e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	60bb      	str	r3, [r7, #8]
   return(result);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 0310 	bic.w	r3, r3, #16
 8004020:	647b      	str	r3, [r7, #68]	@ 0x44
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800402a:	61ba      	str	r2, [r7, #24]
 800402c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6979      	ldr	r1, [r7, #20]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	613b      	str	r3, [r7, #16]
   return(result);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e5      	bne.n	800400a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800404c:	bf00      	nop
 800404e:	3754      	adds	r7, #84	@ 0x54
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff fee4 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b21      	cmp	r3, #33	@ 0x21
 8004092:	d13e      	bne.n	8004112 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800409c:	d114      	bne.n	80040c8 <UART_Transmit_IT+0x48>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d110      	bne.n	80040c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	1c9a      	adds	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]
 80040c6:	e008      	b.n	80040da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	1c59      	adds	r1, r3, #1
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6211      	str	r1, [r2, #32]
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4619      	mov	r1, r3
 80040e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800410c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004136:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fe69 	bl	8003e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08c      	sub	sp, #48	@ 0x30
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b22      	cmp	r3, #34	@ 0x22
 8004162:	f040 80ae 	bne.w	80042c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800416e:	d117      	bne.n	80041a0 <UART_Receive_IT+0x50>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d113      	bne.n	80041a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	b29a      	uxth	r2, r3
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	629a      	str	r2, [r3, #40]	@ 0x28
 800419e:	e026      	b.n	80041ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b2:	d007      	beq.n	80041c4 <UART_Receive_IT+0x74>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <UART_Receive_IT+0x82>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e008      	b.n	80041e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4619      	mov	r1, r3
 80041fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d15d      	bne.n	80042be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0220 	bic.w	r2, r2, #32
 8004210:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004220:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d135      	bne.n	80042b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	613b      	str	r3, [r7, #16]
   return(result);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426e:	623a      	str	r2, [r7, #32]
 8004270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	69f9      	ldr	r1, [r7, #28]
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	61bb      	str	r3, [r7, #24]
   return(result);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d10a      	bne.n	80042a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fdd1 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
 80042b2:	e002      	b.n	80042ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff fdb9 	bl	8003e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e002      	b.n	80042c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3730      	adds	r7, #48	@ 0x30
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d0:	b0c0      	sub	sp, #256	@ 0x100
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	68d9      	ldr	r1, [r3, #12]
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	ea40 0301 	orr.w	r3, r0, r1
 80042f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	431a      	orrs	r2, r3
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	431a      	orrs	r2, r3
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004324:	f021 010c 	bic.w	r1, r1, #12
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004332:	430b      	orrs	r3, r1
 8004334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	6999      	ldr	r1, [r3, #24]
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	ea40 0301 	orr.w	r3, r0, r1
 8004352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b8f      	ldr	r3, [pc, #572]	@ (8004598 <UART_SetConfig+0x2cc>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d005      	beq.n	800436c <UART_SetConfig+0xa0>
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b8d      	ldr	r3, [pc, #564]	@ (800459c <UART_SetConfig+0x2d0>)
 8004368:	429a      	cmp	r2, r3
 800436a:	d104      	bne.n	8004376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800436c:	f7fe f98c 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8004370:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004374:	e003      	b.n	800437e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004376:	f7fe f973 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 800437a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004388:	f040 810c 	bne.w	80045a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800438c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004390:	2200      	movs	r2, #0
 8004392:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004396:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800439a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	1891      	adds	r1, r2, r2
 80043a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043a6:	415b      	adcs	r3, r3
 80043a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043ae:	4621      	mov	r1, r4
 80043b0:	eb12 0801 	adds.w	r8, r2, r1
 80043b4:	4629      	mov	r1, r5
 80043b6:	eb43 0901 	adc.w	r9, r3, r1
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ce:	4690      	mov	r8, r2
 80043d0:	4699      	mov	r9, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	eb18 0303 	adds.w	r3, r8, r3
 80043d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043dc:	462b      	mov	r3, r5
 80043de:	eb49 0303 	adc.w	r3, r9, r3
 80043e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043fa:	460b      	mov	r3, r1
 80043fc:	18db      	adds	r3, r3, r3
 80043fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004400:	4613      	mov	r3, r2
 8004402:	eb42 0303 	adc.w	r3, r2, r3
 8004406:	657b      	str	r3, [r7, #84]	@ 0x54
 8004408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800440c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004410:	f7fc fc3a 	bl	8000c88 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4b61      	ldr	r3, [pc, #388]	@ (80045a0 <UART_SetConfig+0x2d4>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011c      	lsls	r4, r3, #4
 8004422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800442c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800443c:	415b      	adcs	r3, r3
 800443e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004444:	4641      	mov	r1, r8
 8004446:	eb12 0a01 	adds.w	sl, r2, r1
 800444a:	4649      	mov	r1, r9
 800444c:	eb43 0b01 	adc.w	fp, r3, r1
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800445c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004464:	4692      	mov	sl, r2
 8004466:	469b      	mov	fp, r3
 8004468:	4643      	mov	r3, r8
 800446a:	eb1a 0303 	adds.w	r3, sl, r3
 800446e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004472:	464b      	mov	r3, r9
 8004474:	eb4b 0303 	adc.w	r3, fp, r3
 8004478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004488:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800448c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004490:	460b      	mov	r3, r1
 8004492:	18db      	adds	r3, r3, r3
 8004494:	643b      	str	r3, [r7, #64]	@ 0x40
 8004496:	4613      	mov	r3, r2
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
 800449e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044a6:	f7fc fbef 	bl	8000c88 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	4b3b      	ldr	r3, [pc, #236]	@ (80045a0 <UART_SetConfig+0x2d4>)
 80044b2:	fba3 2301 	umull	r2, r3, r3, r1
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2264      	movs	r2, #100	@ 0x64
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	1acb      	subs	r3, r1, r3
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044c6:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <UART_SetConfig+0x2d4>)
 80044c8:	fba3 2302 	umull	r2, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044d4:	441c      	add	r4, r3
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044f0:	415b      	adcs	r3, r3
 80044f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	637b      	str	r3, [r7, #52]	@ 0x34
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800452c:	464b      	mov	r3, r9
 800452e:	460a      	mov	r2, r1
 8004530:	eb42 0303 	adc.w	r3, r2, r3
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004544:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800454c:	460b      	mov	r3, r1
 800454e:	18db      	adds	r3, r3, r3
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004552:	4613      	mov	r3, r2
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800455e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004562:	f7fc fb91 	bl	8000c88 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <UART_SetConfig+0x2d4>)
 800456c:	fba3 1302 	umull	r1, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2164      	movs	r1, #100	@ 0x64
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	3332      	adds	r3, #50	@ 0x32
 800457e:	4a08      	ldr	r2, [pc, #32]	@ (80045a0 <UART_SetConfig+0x2d4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 0207 	and.w	r2, r3, #7
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4422      	add	r2, r4
 8004592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004594:	e106      	b.n	80047a4 <UART_SetConfig+0x4d8>
 8004596:	bf00      	nop
 8004598:	40011000 	.word	0x40011000
 800459c:	40011400 	.word	0x40011400
 80045a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045b6:	4642      	mov	r2, r8
 80045b8:	464b      	mov	r3, r9
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	6239      	str	r1, [r7, #32]
 80045be:	415b      	adcs	r3, r3
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c6:	4641      	mov	r1, r8
 80045c8:	1854      	adds	r4, r2, r1
 80045ca:	4649      	mov	r1, r9
 80045cc:	eb43 0501 	adc.w	r5, r3, r1
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	00eb      	lsls	r3, r5, #3
 80045da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045de:	00e2      	lsls	r2, r4, #3
 80045e0:	4614      	mov	r4, r2
 80045e2:	461d      	mov	r5, r3
 80045e4:	4643      	mov	r3, r8
 80045e6:	18e3      	adds	r3, r4, r3
 80045e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045ec:	464b      	mov	r3, r9
 80045ee:	eb45 0303 	adc.w	r3, r5, r3
 80045f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004602:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004612:	4629      	mov	r1, r5
 8004614:	008b      	lsls	r3, r1, #2
 8004616:	4621      	mov	r1, r4
 8004618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800461c:	4621      	mov	r1, r4
 800461e:	008a      	lsls	r2, r1, #2
 8004620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004624:	f7fc fb30 	bl	8000c88 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4b60      	ldr	r3, [pc, #384]	@ (80047b0 <UART_SetConfig+0x4e4>)
 800462e:	fba3 2302 	umull	r2, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	011c      	lsls	r4, r3, #4
 8004636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004640:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	1891      	adds	r1, r2, r2
 800464e:	61b9      	str	r1, [r7, #24]
 8004650:	415b      	adcs	r3, r3
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004658:	4641      	mov	r1, r8
 800465a:	1851      	adds	r1, r2, r1
 800465c:	6139      	str	r1, [r7, #16]
 800465e:	4649      	mov	r1, r9
 8004660:	414b      	adcs	r3, r1
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004670:	4659      	mov	r1, fp
 8004672:	00cb      	lsls	r3, r1, #3
 8004674:	4651      	mov	r1, sl
 8004676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467a:	4651      	mov	r1, sl
 800467c:	00ca      	lsls	r2, r1, #3
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	4603      	mov	r3, r0
 8004684:	4642      	mov	r2, r8
 8004686:	189b      	adds	r3, r3, r2
 8004688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800468c:	464b      	mov	r3, r9
 800468e:	460a      	mov	r2, r1
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046b0:	4649      	mov	r1, r9
 80046b2:	008b      	lsls	r3, r1, #2
 80046b4:	4641      	mov	r1, r8
 80046b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ba:	4641      	mov	r1, r8
 80046bc:	008a      	lsls	r2, r1, #2
 80046be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046c2:	f7fc fae1 	bl	8000c88 <__aeabi_uldivmod>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4611      	mov	r1, r2
 80046cc:	4b38      	ldr	r3, [pc, #224]	@ (80047b0 <UART_SetConfig+0x4e4>)
 80046ce:	fba3 2301 	umull	r2, r3, r3, r1
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2264      	movs	r2, #100	@ 0x64
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	1acb      	subs	r3, r1, r3
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	3332      	adds	r3, #50	@ 0x32
 80046e0:	4a33      	ldr	r2, [pc, #204]	@ (80047b0 <UART_SetConfig+0x4e4>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046ec:	441c      	add	r4, r3
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	415b      	adcs	r3, r3
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800470c:	4641      	mov	r1, r8
 800470e:	1851      	adds	r1, r2, r1
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	4649      	mov	r1, r9
 8004714:	414b      	adcs	r3, r1
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004724:	4659      	mov	r1, fp
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	4651      	mov	r1, sl
 800472a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472e:	4651      	mov	r1, sl
 8004730:	00ca      	lsls	r2, r1, #3
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4603      	mov	r3, r0
 8004738:	4642      	mov	r2, r8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800473e:	464b      	mov	r3, r9
 8004740:	460a      	mov	r2, r1
 8004742:	eb42 0303 	adc.w	r3, r2, r3
 8004746:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	663b      	str	r3, [r7, #96]	@ 0x60
 8004752:	667a      	str	r2, [r7, #100]	@ 0x64
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004760:	4649      	mov	r1, r9
 8004762:	008b      	lsls	r3, r1, #2
 8004764:	4641      	mov	r1, r8
 8004766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476a:	4641      	mov	r1, r8
 800476c:	008a      	lsls	r2, r1, #2
 800476e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004772:	f7fc fa89 	bl	8000c88 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <UART_SetConfig+0x4e4>)
 800477c:	fba3 1302 	umull	r1, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2164      	movs	r1, #100	@ 0x64
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	3332      	adds	r3, #50	@ 0x32
 800478e:	4a08      	ldr	r2, [pc, #32]	@ (80047b0 <UART_SetConfig+0x4e4>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	f003 020f 	and.w	r2, r3, #15
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4422      	add	r2, r4
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047aa:	46bd      	mov	sp, r7
 80047ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b0:	51eb851f 	.word	0x51eb851f

080047b4 <malloc>:
 80047b4:	4b02      	ldr	r3, [pc, #8]	@ (80047c0 <malloc+0xc>)
 80047b6:	4601      	mov	r1, r0
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	f000 b825 	b.w	8004808 <_malloc_r>
 80047be:	bf00      	nop
 80047c0:	20000028 	.word	0x20000028

080047c4 <sbrk_aligned>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004804 <sbrk_aligned+0x40>)
 80047c8:	460c      	mov	r4, r1
 80047ca:	6831      	ldr	r1, [r6, #0]
 80047cc:	4605      	mov	r5, r0
 80047ce:	b911      	cbnz	r1, 80047d6 <sbrk_aligned+0x12>
 80047d0:	f000 fe76 	bl	80054c0 <_sbrk_r>
 80047d4:	6030      	str	r0, [r6, #0]
 80047d6:	4621      	mov	r1, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 fe71 	bl	80054c0 <_sbrk_r>
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	d103      	bne.n	80047ea <sbrk_aligned+0x26>
 80047e2:	f04f 34ff 	mov.w	r4, #4294967295
 80047e6:	4620      	mov	r0, r4
 80047e8:	bd70      	pop	{r4, r5, r6, pc}
 80047ea:	1cc4      	adds	r4, r0, #3
 80047ec:	f024 0403 	bic.w	r4, r4, #3
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d0f8      	beq.n	80047e6 <sbrk_aligned+0x22>
 80047f4:	1a21      	subs	r1, r4, r0
 80047f6:	4628      	mov	r0, r5
 80047f8:	f000 fe62 	bl	80054c0 <_sbrk_r>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d1f2      	bne.n	80047e6 <sbrk_aligned+0x22>
 8004800:	e7ef      	b.n	80047e2 <sbrk_aligned+0x1e>
 8004802:	bf00      	nop
 8004804:	200003d0 	.word	0x200003d0

08004808 <_malloc_r>:
 8004808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800480c:	1ccd      	adds	r5, r1, #3
 800480e:	f025 0503 	bic.w	r5, r5, #3
 8004812:	3508      	adds	r5, #8
 8004814:	2d0c      	cmp	r5, #12
 8004816:	bf38      	it	cc
 8004818:	250c      	movcc	r5, #12
 800481a:	2d00      	cmp	r5, #0
 800481c:	4606      	mov	r6, r0
 800481e:	db01      	blt.n	8004824 <_malloc_r+0x1c>
 8004820:	42a9      	cmp	r1, r5
 8004822:	d904      	bls.n	800482e <_malloc_r+0x26>
 8004824:	230c      	movs	r3, #12
 8004826:	6033      	str	r3, [r6, #0]
 8004828:	2000      	movs	r0, #0
 800482a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004904 <_malloc_r+0xfc>
 8004832:	f000 f869 	bl	8004908 <__malloc_lock>
 8004836:	f8d8 3000 	ldr.w	r3, [r8]
 800483a:	461c      	mov	r4, r3
 800483c:	bb44      	cbnz	r4, 8004890 <_malloc_r+0x88>
 800483e:	4629      	mov	r1, r5
 8004840:	4630      	mov	r0, r6
 8004842:	f7ff ffbf 	bl	80047c4 <sbrk_aligned>
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	4604      	mov	r4, r0
 800484a:	d158      	bne.n	80048fe <_malloc_r+0xf6>
 800484c:	f8d8 4000 	ldr.w	r4, [r8]
 8004850:	4627      	mov	r7, r4
 8004852:	2f00      	cmp	r7, #0
 8004854:	d143      	bne.n	80048de <_malloc_r+0xd6>
 8004856:	2c00      	cmp	r4, #0
 8004858:	d04b      	beq.n	80048f2 <_malloc_r+0xea>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	4639      	mov	r1, r7
 800485e:	4630      	mov	r0, r6
 8004860:	eb04 0903 	add.w	r9, r4, r3
 8004864:	f000 fe2c 	bl	80054c0 <_sbrk_r>
 8004868:	4581      	cmp	r9, r0
 800486a:	d142      	bne.n	80048f2 <_malloc_r+0xea>
 800486c:	6821      	ldr	r1, [r4, #0]
 800486e:	1a6d      	subs	r5, r5, r1
 8004870:	4629      	mov	r1, r5
 8004872:	4630      	mov	r0, r6
 8004874:	f7ff ffa6 	bl	80047c4 <sbrk_aligned>
 8004878:	3001      	adds	r0, #1
 800487a:	d03a      	beq.n	80048f2 <_malloc_r+0xea>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	442b      	add	r3, r5
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	f8d8 3000 	ldr.w	r3, [r8]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	bb62      	cbnz	r2, 80048e4 <_malloc_r+0xdc>
 800488a:	f8c8 7000 	str.w	r7, [r8]
 800488e:	e00f      	b.n	80048b0 <_malloc_r+0xa8>
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	1b52      	subs	r2, r2, r5
 8004894:	d420      	bmi.n	80048d8 <_malloc_r+0xd0>
 8004896:	2a0b      	cmp	r2, #11
 8004898:	d917      	bls.n	80048ca <_malloc_r+0xc2>
 800489a:	1961      	adds	r1, r4, r5
 800489c:	42a3      	cmp	r3, r4
 800489e:	6025      	str	r5, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	6059      	strne	r1, [r3, #4]
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	bf08      	it	eq
 80048a8:	f8c8 1000 	streq.w	r1, [r8]
 80048ac:	5162      	str	r2, [r4, r5]
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 f82f 	bl	8004914 <__malloc_unlock>
 80048b6:	f104 000b 	add.w	r0, r4, #11
 80048ba:	1d23      	adds	r3, r4, #4
 80048bc:	f020 0007 	bic.w	r0, r0, #7
 80048c0:	1ac2      	subs	r2, r0, r3
 80048c2:	bf1c      	itt	ne
 80048c4:	1a1b      	subne	r3, r3, r0
 80048c6:	50a3      	strne	r3, [r4, r2]
 80048c8:	e7af      	b.n	800482a <_malloc_r+0x22>
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	bf0c      	ite	eq
 80048d0:	f8c8 2000 	streq.w	r2, [r8]
 80048d4:	605a      	strne	r2, [r3, #4]
 80048d6:	e7eb      	b.n	80048b0 <_malloc_r+0xa8>
 80048d8:	4623      	mov	r3, r4
 80048da:	6864      	ldr	r4, [r4, #4]
 80048dc:	e7ae      	b.n	800483c <_malloc_r+0x34>
 80048de:	463c      	mov	r4, r7
 80048e0:	687f      	ldr	r7, [r7, #4]
 80048e2:	e7b6      	b.n	8004852 <_malloc_r+0x4a>
 80048e4:	461a      	mov	r2, r3
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d1fb      	bne.n	80048e4 <_malloc_r+0xdc>
 80048ec:	2300      	movs	r3, #0
 80048ee:	6053      	str	r3, [r2, #4]
 80048f0:	e7de      	b.n	80048b0 <_malloc_r+0xa8>
 80048f2:	230c      	movs	r3, #12
 80048f4:	6033      	str	r3, [r6, #0]
 80048f6:	4630      	mov	r0, r6
 80048f8:	f000 f80c 	bl	8004914 <__malloc_unlock>
 80048fc:	e794      	b.n	8004828 <_malloc_r+0x20>
 80048fe:	6005      	str	r5, [r0, #0]
 8004900:	e7d6      	b.n	80048b0 <_malloc_r+0xa8>
 8004902:	bf00      	nop
 8004904:	200003d4 	.word	0x200003d4

08004908 <__malloc_lock>:
 8004908:	4801      	ldr	r0, [pc, #4]	@ (8004910 <__malloc_lock+0x8>)
 800490a:	f000 be26 	b.w	800555a <__retarget_lock_acquire_recursive>
 800490e:	bf00      	nop
 8004910:	20000518 	.word	0x20000518

08004914 <__malloc_unlock>:
 8004914:	4801      	ldr	r0, [pc, #4]	@ (800491c <__malloc_unlock+0x8>)
 8004916:	f000 be21 	b.w	800555c <__retarget_lock_release_recursive>
 800491a:	bf00      	nop
 800491c:	20000518 	.word	0x20000518

08004920 <__cvt>:
 8004920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	ec57 6b10 	vmov	r6, r7, d0
 8004928:	2f00      	cmp	r7, #0
 800492a:	460c      	mov	r4, r1
 800492c:	4619      	mov	r1, r3
 800492e:	463b      	mov	r3, r7
 8004930:	bfbb      	ittet	lt
 8004932:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004936:	461f      	movlt	r7, r3
 8004938:	2300      	movge	r3, #0
 800493a:	232d      	movlt	r3, #45	@ 0x2d
 800493c:	700b      	strb	r3, [r1, #0]
 800493e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004940:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004944:	4691      	mov	r9, r2
 8004946:	f023 0820 	bic.w	r8, r3, #32
 800494a:	bfbc      	itt	lt
 800494c:	4632      	movlt	r2, r6
 800494e:	4616      	movlt	r6, r2
 8004950:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004954:	d005      	beq.n	8004962 <__cvt+0x42>
 8004956:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800495a:	d100      	bne.n	800495e <__cvt+0x3e>
 800495c:	3401      	adds	r4, #1
 800495e:	2102      	movs	r1, #2
 8004960:	e000      	b.n	8004964 <__cvt+0x44>
 8004962:	2103      	movs	r1, #3
 8004964:	ab03      	add	r3, sp, #12
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	ab02      	add	r3, sp, #8
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	ec47 6b10 	vmov	d0, r6, r7
 8004970:	4653      	mov	r3, sl
 8004972:	4622      	mov	r2, r4
 8004974:	f000 fe7c 	bl	8005670 <_dtoa_r>
 8004978:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800497c:	4605      	mov	r5, r0
 800497e:	d119      	bne.n	80049b4 <__cvt+0x94>
 8004980:	f019 0f01 	tst.w	r9, #1
 8004984:	d00e      	beq.n	80049a4 <__cvt+0x84>
 8004986:	eb00 0904 	add.w	r9, r0, r4
 800498a:	2200      	movs	r2, #0
 800498c:	2300      	movs	r3, #0
 800498e:	4630      	mov	r0, r6
 8004990:	4639      	mov	r1, r7
 8004992:	f7fc f8b9 	bl	8000b08 <__aeabi_dcmpeq>
 8004996:	b108      	cbz	r0, 800499c <__cvt+0x7c>
 8004998:	f8cd 900c 	str.w	r9, [sp, #12]
 800499c:	2230      	movs	r2, #48	@ 0x30
 800499e:	9b03      	ldr	r3, [sp, #12]
 80049a0:	454b      	cmp	r3, r9
 80049a2:	d31e      	bcc.n	80049e2 <__cvt+0xc2>
 80049a4:	9b03      	ldr	r3, [sp, #12]
 80049a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049a8:	1b5b      	subs	r3, r3, r5
 80049aa:	4628      	mov	r0, r5
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	b004      	add	sp, #16
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049b8:	eb00 0904 	add.w	r9, r0, r4
 80049bc:	d1e5      	bne.n	800498a <__cvt+0x6a>
 80049be:	7803      	ldrb	r3, [r0, #0]
 80049c0:	2b30      	cmp	r3, #48	@ 0x30
 80049c2:	d10a      	bne.n	80049da <__cvt+0xba>
 80049c4:	2200      	movs	r2, #0
 80049c6:	2300      	movs	r3, #0
 80049c8:	4630      	mov	r0, r6
 80049ca:	4639      	mov	r1, r7
 80049cc:	f7fc f89c 	bl	8000b08 <__aeabi_dcmpeq>
 80049d0:	b918      	cbnz	r0, 80049da <__cvt+0xba>
 80049d2:	f1c4 0401 	rsb	r4, r4, #1
 80049d6:	f8ca 4000 	str.w	r4, [sl]
 80049da:	f8da 3000 	ldr.w	r3, [sl]
 80049de:	4499      	add	r9, r3
 80049e0:	e7d3      	b.n	800498a <__cvt+0x6a>
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	9103      	str	r1, [sp, #12]
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e7d9      	b.n	800499e <__cvt+0x7e>

080049ea <__exponent>:
 80049ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ec:	2900      	cmp	r1, #0
 80049ee:	bfba      	itte	lt
 80049f0:	4249      	neglt	r1, r1
 80049f2:	232d      	movlt	r3, #45	@ 0x2d
 80049f4:	232b      	movge	r3, #43	@ 0x2b
 80049f6:	2909      	cmp	r1, #9
 80049f8:	7002      	strb	r2, [r0, #0]
 80049fa:	7043      	strb	r3, [r0, #1]
 80049fc:	dd29      	ble.n	8004a52 <__exponent+0x68>
 80049fe:	f10d 0307 	add.w	r3, sp, #7
 8004a02:	461d      	mov	r5, r3
 8004a04:	270a      	movs	r7, #10
 8004a06:	461a      	mov	r2, r3
 8004a08:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a0c:	fb07 1416 	mls	r4, r7, r6, r1
 8004a10:	3430      	adds	r4, #48	@ 0x30
 8004a12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a16:	460c      	mov	r4, r1
 8004a18:	2c63      	cmp	r4, #99	@ 0x63
 8004a1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a1e:	4631      	mov	r1, r6
 8004a20:	dcf1      	bgt.n	8004a06 <__exponent+0x1c>
 8004a22:	3130      	adds	r1, #48	@ 0x30
 8004a24:	1e94      	subs	r4, r2, #2
 8004a26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a2a:	1c41      	adds	r1, r0, #1
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	42ab      	cmp	r3, r5
 8004a30:	d30a      	bcc.n	8004a48 <__exponent+0x5e>
 8004a32:	f10d 0309 	add.w	r3, sp, #9
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	42ac      	cmp	r4, r5
 8004a3a:	bf88      	it	hi
 8004a3c:	2300      	movhi	r3, #0
 8004a3e:	3302      	adds	r3, #2
 8004a40:	4403      	add	r3, r0
 8004a42:	1a18      	subs	r0, r3, r0
 8004a44:	b003      	add	sp, #12
 8004a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a50:	e7ed      	b.n	8004a2e <__exponent+0x44>
 8004a52:	2330      	movs	r3, #48	@ 0x30
 8004a54:	3130      	adds	r1, #48	@ 0x30
 8004a56:	7083      	strb	r3, [r0, #2]
 8004a58:	70c1      	strb	r1, [r0, #3]
 8004a5a:	1d03      	adds	r3, r0, #4
 8004a5c:	e7f1      	b.n	8004a42 <__exponent+0x58>
	...

08004a60 <_printf_float>:
 8004a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	b08d      	sub	sp, #52	@ 0x34
 8004a66:	460c      	mov	r4, r1
 8004a68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	461f      	mov	r7, r3
 8004a70:	4605      	mov	r5, r0
 8004a72:	f000 fced 	bl	8005450 <_localeconv_r>
 8004a76:	6803      	ldr	r3, [r0, #0]
 8004a78:	9304      	str	r3, [sp, #16]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fb fc18 	bl	80002b0 <strlen>
 8004a80:	2300      	movs	r3, #0
 8004a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a84:	f8d8 3000 	ldr.w	r3, [r8]
 8004a88:	9005      	str	r0, [sp, #20]
 8004a8a:	3307      	adds	r3, #7
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	f103 0208 	add.w	r2, r3, #8
 8004a94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a98:	f8d4 b000 	ldr.w	fp, [r4]
 8004a9c:	f8c8 2000 	str.w	r2, [r8]
 8004aa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004aa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004aa8:	9307      	str	r3, [sp, #28]
 8004aaa:	f8cd 8018 	str.w	r8, [sp, #24]
 8004aae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8004d28 <_printf_float+0x2c8>)
 8004ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8004abc:	f7fc f856 	bl	8000b6c <__aeabi_dcmpun>
 8004ac0:	bb70      	cbnz	r0, 8004b20 <_printf_float+0xc0>
 8004ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ac6:	4b98      	ldr	r3, [pc, #608]	@ (8004d28 <_printf_float+0x2c8>)
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	f7fc f830 	bl	8000b30 <__aeabi_dcmple>
 8004ad0:	bb30      	cbnz	r0, 8004b20 <_printf_float+0xc0>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	4649      	mov	r1, r9
 8004ada:	f7fc f81f 	bl	8000b1c <__aeabi_dcmplt>
 8004ade:	b110      	cbz	r0, 8004ae6 <_printf_float+0x86>
 8004ae0:	232d      	movs	r3, #45	@ 0x2d
 8004ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae6:	4a91      	ldr	r2, [pc, #580]	@ (8004d2c <_printf_float+0x2cc>)
 8004ae8:	4b91      	ldr	r3, [pc, #580]	@ (8004d30 <_printf_float+0x2d0>)
 8004aea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004aee:	bf94      	ite	ls
 8004af0:	4690      	movls	r8, r2
 8004af2:	4698      	movhi	r8, r3
 8004af4:	2303      	movs	r3, #3
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	f02b 0304 	bic.w	r3, fp, #4
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	f04f 0900 	mov.w	r9, #0
 8004b02:	9700      	str	r7, [sp, #0]
 8004b04:	4633      	mov	r3, r6
 8004b06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 f9d2 	bl	8004eb4 <_printf_common>
 8004b10:	3001      	adds	r0, #1
 8004b12:	f040 808d 	bne.w	8004c30 <_printf_float+0x1d0>
 8004b16:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1a:	b00d      	add	sp, #52	@ 0x34
 8004b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	4640      	mov	r0, r8
 8004b26:	4649      	mov	r1, r9
 8004b28:	f7fc f820 	bl	8000b6c <__aeabi_dcmpun>
 8004b2c:	b140      	cbz	r0, 8004b40 <_printf_float+0xe0>
 8004b2e:	464b      	mov	r3, r9
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bfbc      	itt	lt
 8004b34:	232d      	movlt	r3, #45	@ 0x2d
 8004b36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d34 <_printf_float+0x2d4>)
 8004b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d38 <_printf_float+0x2d8>)
 8004b3e:	e7d4      	b.n	8004aea <_printf_float+0x8a>
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004b46:	9206      	str	r2, [sp, #24]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	d13b      	bne.n	8004bc4 <_printf_float+0x164>
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	6063      	str	r3, [r4, #4]
 8004b50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b54:	2300      	movs	r3, #0
 8004b56:	6022      	str	r2, [r4, #0]
 8004b58:	9303      	str	r3, [sp, #12]
 8004b5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b60:	ab09      	add	r3, sp, #36	@ 0x24
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	6861      	ldr	r1, [r4, #4]
 8004b66:	ec49 8b10 	vmov	d0, r8, r9
 8004b6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f7ff fed6 	bl	8004920 <__cvt>
 8004b74:	9b06      	ldr	r3, [sp, #24]
 8004b76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b78:	2b47      	cmp	r3, #71	@ 0x47
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	d129      	bne.n	8004bd2 <_printf_float+0x172>
 8004b7e:	1cc8      	adds	r0, r1, #3
 8004b80:	db02      	blt.n	8004b88 <_printf_float+0x128>
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	4299      	cmp	r1, r3
 8004b86:	dd41      	ble.n	8004c0c <_printf_float+0x1ac>
 8004b88:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b90:	3901      	subs	r1, #1
 8004b92:	4652      	mov	r2, sl
 8004b94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b98:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b9a:	f7ff ff26 	bl	80049ea <__exponent>
 8004b9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ba0:	1813      	adds	r3, r2, r0
 8004ba2:	2a01      	cmp	r2, #1
 8004ba4:	4681      	mov	r9, r0
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	dc02      	bgt.n	8004bb0 <_printf_float+0x150>
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	07d2      	lsls	r2, r2, #31
 8004bae:	d501      	bpl.n	8004bb4 <_printf_float+0x154>
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	6123      	str	r3, [r4, #16]
 8004bb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0a2      	beq.n	8004b02 <_printf_float+0xa2>
 8004bbc:	232d      	movs	r3, #45	@ 0x2d
 8004bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bc2:	e79e      	b.n	8004b02 <_printf_float+0xa2>
 8004bc4:	9a06      	ldr	r2, [sp, #24]
 8004bc6:	2a47      	cmp	r2, #71	@ 0x47
 8004bc8:	d1c2      	bne.n	8004b50 <_printf_float+0xf0>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1c0      	bne.n	8004b50 <_printf_float+0xf0>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e7bd      	b.n	8004b4e <_printf_float+0xee>
 8004bd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bd6:	d9db      	bls.n	8004b90 <_printf_float+0x130>
 8004bd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004bdc:	d118      	bne.n	8004c10 <_printf_float+0x1b0>
 8004bde:	2900      	cmp	r1, #0
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	dd0b      	ble.n	8004bfc <_printf_float+0x19c>
 8004be4:	6121      	str	r1, [r4, #16]
 8004be6:	b913      	cbnz	r3, 8004bee <_printf_float+0x18e>
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	07d0      	lsls	r0, r2, #31
 8004bec:	d502      	bpl.n	8004bf4 <_printf_float+0x194>
 8004bee:	3301      	adds	r3, #1
 8004bf0:	440b      	add	r3, r1
 8004bf2:	6123      	str	r3, [r4, #16]
 8004bf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004bf6:	f04f 0900 	mov.w	r9, #0
 8004bfa:	e7db      	b.n	8004bb4 <_printf_float+0x154>
 8004bfc:	b913      	cbnz	r3, 8004c04 <_printf_float+0x1a4>
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	07d2      	lsls	r2, r2, #31
 8004c02:	d501      	bpl.n	8004c08 <_printf_float+0x1a8>
 8004c04:	3302      	adds	r3, #2
 8004c06:	e7f4      	b.n	8004bf2 <_printf_float+0x192>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e7f2      	b.n	8004bf2 <_printf_float+0x192>
 8004c0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c12:	4299      	cmp	r1, r3
 8004c14:	db05      	blt.n	8004c22 <_printf_float+0x1c2>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	6121      	str	r1, [r4, #16]
 8004c1a:	07d8      	lsls	r0, r3, #31
 8004c1c:	d5ea      	bpl.n	8004bf4 <_printf_float+0x194>
 8004c1e:	1c4b      	adds	r3, r1, #1
 8004c20:	e7e7      	b.n	8004bf2 <_printf_float+0x192>
 8004c22:	2900      	cmp	r1, #0
 8004c24:	bfd4      	ite	le
 8004c26:	f1c1 0202 	rsble	r2, r1, #2
 8004c2a:	2201      	movgt	r2, #1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	e7e0      	b.n	8004bf2 <_printf_float+0x192>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	055a      	lsls	r2, r3, #21
 8004c34:	d407      	bmi.n	8004c46 <_printf_float+0x1e6>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	4642      	mov	r2, r8
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	d12b      	bne.n	8004c9c <_printf_float+0x23c>
 8004c44:	e767      	b.n	8004b16 <_printf_float+0xb6>
 8004c46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c4a:	f240 80dd 	bls.w	8004e08 <_printf_float+0x3a8>
 8004c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c52:	2200      	movs	r2, #0
 8004c54:	2300      	movs	r3, #0
 8004c56:	f7fb ff57 	bl	8000b08 <__aeabi_dcmpeq>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d033      	beq.n	8004cc6 <_printf_float+0x266>
 8004c5e:	4a37      	ldr	r2, [pc, #220]	@ (8004d3c <_printf_float+0x2dc>)
 8004c60:	2301      	movs	r3, #1
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f af54 	beq.w	8004b16 <_printf_float+0xb6>
 8004c6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c72:	4543      	cmp	r3, r8
 8004c74:	db02      	blt.n	8004c7c <_printf_float+0x21c>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	07d8      	lsls	r0, r3, #31
 8004c7a:	d50f      	bpl.n	8004c9c <_printf_float+0x23c>
 8004c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f af45 	beq.w	8004b16 <_printf_float+0xb6>
 8004c8c:	f04f 0900 	mov.w	r9, #0
 8004c90:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c94:	f104 0a1a 	add.w	sl, r4, #26
 8004c98:	45c8      	cmp	r8, r9
 8004c9a:	dc09      	bgt.n	8004cb0 <_printf_float+0x250>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	079b      	lsls	r3, r3, #30
 8004ca0:	f100 8103 	bmi.w	8004eaa <_printf_float+0x44a>
 8004ca4:	68e0      	ldr	r0, [r4, #12]
 8004ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ca8:	4298      	cmp	r0, r3
 8004caa:	bfb8      	it	lt
 8004cac:	4618      	movlt	r0, r3
 8004cae:	e734      	b.n	8004b1a <_printf_float+0xba>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4652      	mov	r2, sl
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af2b 	beq.w	8004b16 <_printf_float+0xb6>
 8004cc0:	f109 0901 	add.w	r9, r9, #1
 8004cc4:	e7e8      	b.n	8004c98 <_printf_float+0x238>
 8004cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dc39      	bgt.n	8004d40 <_printf_float+0x2e0>
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d3c <_printf_float+0x2dc>)
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	f43f af1d 	beq.w	8004b16 <_printf_float+0xb6>
 8004cdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004ce0:	ea59 0303 	orrs.w	r3, r9, r3
 8004ce4:	d102      	bne.n	8004cec <_printf_float+0x28c>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	07d9      	lsls	r1, r3, #31
 8004cea:	d5d7      	bpl.n	8004c9c <_printf_float+0x23c>
 8004cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f af0d 	beq.w	8004b16 <_printf_float+0xb6>
 8004cfc:	f04f 0a00 	mov.w	sl, #0
 8004d00:	f104 0b1a 	add.w	fp, r4, #26
 8004d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d06:	425b      	negs	r3, r3
 8004d08:	4553      	cmp	r3, sl
 8004d0a:	dc01      	bgt.n	8004d10 <_printf_float+0x2b0>
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	e793      	b.n	8004c38 <_printf_float+0x1d8>
 8004d10:	2301      	movs	r3, #1
 8004d12:	465a      	mov	r2, fp
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f43f aefb 	beq.w	8004b16 <_printf_float+0xb6>
 8004d20:	f10a 0a01 	add.w	sl, sl, #1
 8004d24:	e7ee      	b.n	8004d04 <_printf_float+0x2a4>
 8004d26:	bf00      	nop
 8004d28:	7fefffff 	.word	0x7fefffff
 8004d2c:	08007598 	.word	0x08007598
 8004d30:	0800759c 	.word	0x0800759c
 8004d34:	080075a0 	.word	0x080075a0
 8004d38:	080075a4 	.word	0x080075a4
 8004d3c:	080075a8 	.word	0x080075a8
 8004d40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d46:	4553      	cmp	r3, sl
 8004d48:	bfa8      	it	ge
 8004d4a:	4653      	movge	r3, sl
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	4699      	mov	r9, r3
 8004d50:	dc36      	bgt.n	8004dc0 <_printf_float+0x360>
 8004d52:	f04f 0b00 	mov.w	fp, #0
 8004d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d5a:	f104 021a 	add.w	r2, r4, #26
 8004d5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d60:	9306      	str	r3, [sp, #24]
 8004d62:	eba3 0309 	sub.w	r3, r3, r9
 8004d66:	455b      	cmp	r3, fp
 8004d68:	dc31      	bgt.n	8004dce <_printf_float+0x36e>
 8004d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d6c:	459a      	cmp	sl, r3
 8004d6e:	dc3a      	bgt.n	8004de6 <_printf_float+0x386>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07da      	lsls	r2, r3, #31
 8004d74:	d437      	bmi.n	8004de6 <_printf_float+0x386>
 8004d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d78:	ebaa 0903 	sub.w	r9, sl, r3
 8004d7c:	9b06      	ldr	r3, [sp, #24]
 8004d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8004d82:	4599      	cmp	r9, r3
 8004d84:	bfa8      	it	ge
 8004d86:	4699      	movge	r9, r3
 8004d88:	f1b9 0f00 	cmp.w	r9, #0
 8004d8c:	dc33      	bgt.n	8004df6 <_printf_float+0x396>
 8004d8e:	f04f 0800 	mov.w	r8, #0
 8004d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d96:	f104 0b1a 	add.w	fp, r4, #26
 8004d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8004da0:	eba3 0309 	sub.w	r3, r3, r9
 8004da4:	4543      	cmp	r3, r8
 8004da6:	f77f af79 	ble.w	8004c9c <_printf_float+0x23c>
 8004daa:	2301      	movs	r3, #1
 8004dac:	465a      	mov	r2, fp
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f aeae 	beq.w	8004b16 <_printf_float+0xb6>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	e7ec      	b.n	8004d9a <_printf_float+0x33a>
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	47b8      	blx	r7
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d1c2      	bne.n	8004d52 <_printf_float+0x2f2>
 8004dcc:	e6a3      	b.n	8004b16 <_printf_float+0xb6>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	9206      	str	r2, [sp, #24]
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f43f ae9c 	beq.w	8004b16 <_printf_float+0xb6>
 8004dde:	9a06      	ldr	r2, [sp, #24]
 8004de0:	f10b 0b01 	add.w	fp, fp, #1
 8004de4:	e7bb      	b.n	8004d5e <_printf_float+0x2fe>
 8004de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	d1c0      	bne.n	8004d76 <_printf_float+0x316>
 8004df4:	e68f      	b.n	8004b16 <_printf_float+0xb6>
 8004df6:	9a06      	ldr	r2, [sp, #24]
 8004df8:	464b      	mov	r3, r9
 8004dfa:	4442      	add	r2, r8
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4628      	mov	r0, r5
 8004e00:	47b8      	blx	r7
 8004e02:	3001      	adds	r0, #1
 8004e04:	d1c3      	bne.n	8004d8e <_printf_float+0x32e>
 8004e06:	e686      	b.n	8004b16 <_printf_float+0xb6>
 8004e08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e0c:	f1ba 0f01 	cmp.w	sl, #1
 8004e10:	dc01      	bgt.n	8004e16 <_printf_float+0x3b6>
 8004e12:	07db      	lsls	r3, r3, #31
 8004e14:	d536      	bpl.n	8004e84 <_printf_float+0x424>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4642      	mov	r2, r8
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae78 	beq.w	8004b16 <_printf_float+0xb6>
 8004e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f ae70 	beq.w	8004b16 <_printf_float+0xb6>
 8004e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e42:	f7fb fe61 	bl	8000b08 <__aeabi_dcmpeq>
 8004e46:	b9c0      	cbnz	r0, 8004e7a <_printf_float+0x41a>
 8004e48:	4653      	mov	r3, sl
 8004e4a:	f108 0201 	add.w	r2, r8, #1
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	d10c      	bne.n	8004e72 <_printf_float+0x412>
 8004e58:	e65d      	b.n	8004b16 <_printf_float+0xb6>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	465a      	mov	r2, fp
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f ae56 	beq.w	8004b16 <_printf_float+0xb6>
 8004e6a:	f108 0801 	add.w	r8, r8, #1
 8004e6e:	45d0      	cmp	r8, sl
 8004e70:	dbf3      	blt.n	8004e5a <_printf_float+0x3fa>
 8004e72:	464b      	mov	r3, r9
 8004e74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e78:	e6df      	b.n	8004c3a <_printf_float+0x1da>
 8004e7a:	f04f 0800 	mov.w	r8, #0
 8004e7e:	f104 0b1a 	add.w	fp, r4, #26
 8004e82:	e7f4      	b.n	8004e6e <_printf_float+0x40e>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4642      	mov	r2, r8
 8004e88:	e7e1      	b.n	8004e4e <_printf_float+0x3ee>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	464a      	mov	r2, r9
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b8      	blx	r7
 8004e94:	3001      	adds	r0, #1
 8004e96:	f43f ae3e 	beq.w	8004b16 <_printf_float+0xb6>
 8004e9a:	f108 0801 	add.w	r8, r8, #1
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ea2:	1a5b      	subs	r3, r3, r1
 8004ea4:	4543      	cmp	r3, r8
 8004ea6:	dcf0      	bgt.n	8004e8a <_printf_float+0x42a>
 8004ea8:	e6fc      	b.n	8004ca4 <_printf_float+0x244>
 8004eaa:	f04f 0800 	mov.w	r8, #0
 8004eae:	f104 0919 	add.w	r9, r4, #25
 8004eb2:	e7f4      	b.n	8004e9e <_printf_float+0x43e>

08004eb4 <_printf_common>:
 8004eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	4616      	mov	r6, r2
 8004eba:	4698      	mov	r8, r3
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	690b      	ldr	r3, [r1, #16]
 8004ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bfb8      	it	lt
 8004ec8:	4613      	movlt	r3, r2
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	b10a      	cbz	r2, 8004eda <_printf_common+0x26>
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	0699      	lsls	r1, r3, #26
 8004ede:	bf42      	ittt	mi
 8004ee0:	6833      	ldrmi	r3, [r6, #0]
 8004ee2:	3302      	addmi	r3, #2
 8004ee4:	6033      	strmi	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	f015 0506 	ands.w	r5, r5, #6
 8004eec:	d106      	bne.n	8004efc <_printf_common+0x48>
 8004eee:	f104 0a19 	add.w	sl, r4, #25
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dc26      	bgt.n	8004f4a <_printf_common+0x96>
 8004efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	3b00      	subs	r3, #0
 8004f04:	bf18      	it	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	0692      	lsls	r2, r2, #26
 8004f0a:	d42b      	bmi.n	8004f64 <_printf_common+0xb0>
 8004f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f10:	4641      	mov	r1, r8
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c8      	blx	r9
 8004f16:	3001      	adds	r0, #1
 8004f18:	d01e      	beq.n	8004f58 <_printf_common+0xa4>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	6922      	ldr	r2, [r4, #16]
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	bf02      	ittt	eq
 8004f26:	68e5      	ldreq	r5, [r4, #12]
 8004f28:	6833      	ldreq	r3, [r6, #0]
 8004f2a:	1aed      	subeq	r5, r5, r3
 8004f2c:	68a3      	ldr	r3, [r4, #8]
 8004f2e:	bf0c      	ite	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	2500      	movne	r5, #0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bfc4      	itt	gt
 8004f3a:	1a9b      	subgt	r3, r3, r2
 8004f3c:	18ed      	addgt	r5, r5, r3
 8004f3e:	2600      	movs	r6, #0
 8004f40:	341a      	adds	r4, #26
 8004f42:	42b5      	cmp	r5, r6
 8004f44:	d11a      	bne.n	8004f7c <_printf_common+0xc8>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e008      	b.n	8004f5c <_printf_common+0xa8>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	4641      	mov	r1, r8
 8004f50:	4638      	mov	r0, r7
 8004f52:	47c8      	blx	r9
 8004f54:	3001      	adds	r0, #1
 8004f56:	d103      	bne.n	8004f60 <_printf_common+0xac>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f60:	3501      	adds	r5, #1
 8004f62:	e7c6      	b.n	8004ef2 <_printf_common+0x3e>
 8004f64:	18e1      	adds	r1, r4, r3
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	2030      	movs	r0, #48	@ 0x30
 8004f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f6e:	4422      	add	r2, r4
 8004f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f78:	3302      	adds	r3, #2
 8004f7a:	e7c7      	b.n	8004f0c <_printf_common+0x58>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4641      	mov	r1, r8
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c8      	blx	r9
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0e6      	beq.n	8004f58 <_printf_common+0xa4>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7d9      	b.n	8004f42 <_printf_common+0x8e>
	...

08004f90 <_printf_i>:
 8004f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	7e0f      	ldrb	r7, [r1, #24]
 8004f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f98:	2f78      	cmp	r7, #120	@ 0x78
 8004f9a:	4691      	mov	r9, r2
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fa6:	d807      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fa8:	2f62      	cmp	r7, #98	@ 0x62
 8004faa:	d80a      	bhi.n	8004fc2 <_printf_i+0x32>
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	f000 80d2 	beq.w	8005156 <_printf_i+0x1c6>
 8004fb2:	2f58      	cmp	r7, #88	@ 0x58
 8004fb4:	f000 80b9 	beq.w	800512a <_printf_i+0x19a>
 8004fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fc0:	e03a      	b.n	8005038 <_printf_i+0xa8>
 8004fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fc6:	2b15      	cmp	r3, #21
 8004fc8:	d8f6      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fca:	a101      	add	r1, pc, #4	@ (adr r1, 8004fd0 <_printf_i+0x40>)
 8004fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	08004fb9 	.word	0x08004fb9
 8004fdc:	08004fb9 	.word	0x08004fb9
 8004fe0:	08004fb9 	.word	0x08004fb9
 8004fe4:	08004fb9 	.word	0x08004fb9
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004fb9 	.word	0x08004fb9
 8004ff0:	08004fb9 	.word	0x08004fb9
 8004ff4:	08004fb9 	.word	0x08004fb9
 8004ff8:	08004fb9 	.word	0x08004fb9
 8004ffc:	0800513d 	.word	0x0800513d
 8005000:	08005067 	.word	0x08005067
 8005004:	080050f7 	.word	0x080050f7
 8005008:	08004fb9 	.word	0x08004fb9
 800500c:	08004fb9 	.word	0x08004fb9
 8005010:	0800515f 	.word	0x0800515f
 8005014:	08004fb9 	.word	0x08004fb9
 8005018:	08005067 	.word	0x08005067
 800501c:	08004fb9 	.word	0x08004fb9
 8005020:	08004fb9 	.word	0x08004fb9
 8005024:	080050ff 	.word	0x080050ff
 8005028:	6833      	ldr	r3, [r6, #0]
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6032      	str	r2, [r6, #0]
 8005030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005038:	2301      	movs	r3, #1
 800503a:	e09d      	b.n	8005178 <_printf_i+0x1e8>
 800503c:	6833      	ldr	r3, [r6, #0]
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	1d19      	adds	r1, r3, #4
 8005042:	6031      	str	r1, [r6, #0]
 8005044:	0606      	lsls	r6, r0, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xbc>
 8005048:	681d      	ldr	r5, [r3, #0]
 800504a:	e003      	b.n	8005054 <_printf_i+0xc4>
 800504c:	0645      	lsls	r5, r0, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xb8>
 8005050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005054:	2d00      	cmp	r5, #0
 8005056:	da03      	bge.n	8005060 <_printf_i+0xd0>
 8005058:	232d      	movs	r3, #45	@ 0x2d
 800505a:	426d      	negs	r5, r5
 800505c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005060:	4859      	ldr	r0, [pc, #356]	@ (80051c8 <_printf_i+0x238>)
 8005062:	230a      	movs	r3, #10
 8005064:	e011      	b.n	800508a <_printf_i+0xfa>
 8005066:	6821      	ldr	r1, [r4, #0]
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	0608      	lsls	r0, r1, #24
 800506c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005070:	d402      	bmi.n	8005078 <_printf_i+0xe8>
 8005072:	0649      	lsls	r1, r1, #25
 8005074:	bf48      	it	mi
 8005076:	b2ad      	uxthmi	r5, r5
 8005078:	2f6f      	cmp	r7, #111	@ 0x6f
 800507a:	4853      	ldr	r0, [pc, #332]	@ (80051c8 <_printf_i+0x238>)
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	bf14      	ite	ne
 8005080:	230a      	movne	r3, #10
 8005082:	2308      	moveq	r3, #8
 8005084:	2100      	movs	r1, #0
 8005086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800508a:	6866      	ldr	r6, [r4, #4]
 800508c:	60a6      	str	r6, [r4, #8]
 800508e:	2e00      	cmp	r6, #0
 8005090:	bfa2      	ittt	ge
 8005092:	6821      	ldrge	r1, [r4, #0]
 8005094:	f021 0104 	bicge.w	r1, r1, #4
 8005098:	6021      	strge	r1, [r4, #0]
 800509a:	b90d      	cbnz	r5, 80050a0 <_printf_i+0x110>
 800509c:	2e00      	cmp	r6, #0
 800509e:	d04b      	beq.n	8005138 <_printf_i+0x1a8>
 80050a0:	4616      	mov	r6, r2
 80050a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050a6:	fb03 5711 	mls	r7, r3, r1, r5
 80050aa:	5dc7      	ldrb	r7, [r0, r7]
 80050ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050b0:	462f      	mov	r7, r5
 80050b2:	42bb      	cmp	r3, r7
 80050b4:	460d      	mov	r5, r1
 80050b6:	d9f4      	bls.n	80050a2 <_printf_i+0x112>
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d10b      	bne.n	80050d4 <_printf_i+0x144>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07df      	lsls	r7, r3, #31
 80050c0:	d508      	bpl.n	80050d4 <_printf_i+0x144>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	6861      	ldr	r1, [r4, #4]
 80050c6:	4299      	cmp	r1, r3
 80050c8:	bfde      	ittt	le
 80050ca:	2330      	movle	r3, #48	@ 0x30
 80050cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050d4:	1b92      	subs	r2, r2, r6
 80050d6:	6122      	str	r2, [r4, #16]
 80050d8:	f8cd a000 	str.w	sl, [sp]
 80050dc:	464b      	mov	r3, r9
 80050de:	aa03      	add	r2, sp, #12
 80050e0:	4621      	mov	r1, r4
 80050e2:	4640      	mov	r0, r8
 80050e4:	f7ff fee6 	bl	8004eb4 <_printf_common>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d14a      	bne.n	8005182 <_printf_i+0x1f2>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	b004      	add	sp, #16
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	4833      	ldr	r0, [pc, #204]	@ (80051cc <_printf_i+0x23c>)
 8005100:	2778      	movs	r7, #120	@ 0x78
 8005102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	6831      	ldr	r1, [r6, #0]
 800510a:	061f      	lsls	r7, r3, #24
 800510c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005110:	d402      	bmi.n	8005118 <_printf_i+0x188>
 8005112:	065f      	lsls	r7, r3, #25
 8005114:	bf48      	it	mi
 8005116:	b2ad      	uxthmi	r5, r5
 8005118:	6031      	str	r1, [r6, #0]
 800511a:	07d9      	lsls	r1, r3, #31
 800511c:	bf44      	itt	mi
 800511e:	f043 0320 	orrmi.w	r3, r3, #32
 8005122:	6023      	strmi	r3, [r4, #0]
 8005124:	b11d      	cbz	r5, 800512e <_printf_i+0x19e>
 8005126:	2310      	movs	r3, #16
 8005128:	e7ac      	b.n	8005084 <_printf_i+0xf4>
 800512a:	4827      	ldr	r0, [pc, #156]	@ (80051c8 <_printf_i+0x238>)
 800512c:	e7e9      	b.n	8005102 <_printf_i+0x172>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f023 0320 	bic.w	r3, r3, #32
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	e7f6      	b.n	8005126 <_printf_i+0x196>
 8005138:	4616      	mov	r6, r2
 800513a:	e7bd      	b.n	80050b8 <_printf_i+0x128>
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	6825      	ldr	r5, [r4, #0]
 8005140:	6961      	ldr	r1, [r4, #20]
 8005142:	1d18      	adds	r0, r3, #4
 8005144:	6030      	str	r0, [r6, #0]
 8005146:	062e      	lsls	r6, r5, #24
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	d501      	bpl.n	8005150 <_printf_i+0x1c0>
 800514c:	6019      	str	r1, [r3, #0]
 800514e:	e002      	b.n	8005156 <_printf_i+0x1c6>
 8005150:	0668      	lsls	r0, r5, #25
 8005152:	d5fb      	bpl.n	800514c <_printf_i+0x1bc>
 8005154:	8019      	strh	r1, [r3, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	4616      	mov	r6, r2
 800515c:	e7bc      	b.n	80050d8 <_printf_i+0x148>
 800515e:	6833      	ldr	r3, [r6, #0]
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	6032      	str	r2, [r6, #0]
 8005164:	681e      	ldr	r6, [r3, #0]
 8005166:	6862      	ldr	r2, [r4, #4]
 8005168:	2100      	movs	r1, #0
 800516a:	4630      	mov	r0, r6
 800516c:	f7fb f850 	bl	8000210 <memchr>
 8005170:	b108      	cbz	r0, 8005176 <_printf_i+0x1e6>
 8005172:	1b80      	subs	r0, r0, r6
 8005174:	6060      	str	r0, [r4, #4]
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	6123      	str	r3, [r4, #16]
 800517a:	2300      	movs	r3, #0
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005180:	e7aa      	b.n	80050d8 <_printf_i+0x148>
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	4632      	mov	r2, r6
 8005186:	4649      	mov	r1, r9
 8005188:	4640      	mov	r0, r8
 800518a:	47d0      	blx	sl
 800518c:	3001      	adds	r0, #1
 800518e:	d0ad      	beq.n	80050ec <_printf_i+0x15c>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	079b      	lsls	r3, r3, #30
 8005194:	d413      	bmi.n	80051be <_printf_i+0x22e>
 8005196:	68e0      	ldr	r0, [r4, #12]
 8005198:	9b03      	ldr	r3, [sp, #12]
 800519a:	4298      	cmp	r0, r3
 800519c:	bfb8      	it	lt
 800519e:	4618      	movlt	r0, r3
 80051a0:	e7a6      	b.n	80050f0 <_printf_i+0x160>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4632      	mov	r2, r6
 80051a6:	4649      	mov	r1, r9
 80051a8:	4640      	mov	r0, r8
 80051aa:	47d0      	blx	sl
 80051ac:	3001      	adds	r0, #1
 80051ae:	d09d      	beq.n	80050ec <_printf_i+0x15c>
 80051b0:	3501      	adds	r5, #1
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	9903      	ldr	r1, [sp, #12]
 80051b6:	1a5b      	subs	r3, r3, r1
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dcf2      	bgt.n	80051a2 <_printf_i+0x212>
 80051bc:	e7eb      	b.n	8005196 <_printf_i+0x206>
 80051be:	2500      	movs	r5, #0
 80051c0:	f104 0619 	add.w	r6, r4, #25
 80051c4:	e7f5      	b.n	80051b2 <_printf_i+0x222>
 80051c6:	bf00      	nop
 80051c8:	080075aa 	.word	0x080075aa
 80051cc:	080075bb 	.word	0x080075bb

080051d0 <std>:
 80051d0:	2300      	movs	r3, #0
 80051d2:	b510      	push	{r4, lr}
 80051d4:	4604      	mov	r4, r0
 80051d6:	e9c0 3300 	strd	r3, r3, [r0]
 80051da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051de:	6083      	str	r3, [r0, #8]
 80051e0:	8181      	strh	r1, [r0, #12]
 80051e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80051e4:	81c2      	strh	r2, [r0, #14]
 80051e6:	6183      	str	r3, [r0, #24]
 80051e8:	4619      	mov	r1, r3
 80051ea:	2208      	movs	r2, #8
 80051ec:	305c      	adds	r0, #92	@ 0x5c
 80051ee:	f000 f926 	bl	800543e <memset>
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <std+0x58>)
 80051f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80051f6:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <std+0x5c>)
 80051f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <std+0x60>)
 80051fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005234 <std+0x64>)
 8005200:	6323      	str	r3, [r4, #48]	@ 0x30
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <std+0x68>)
 8005204:	6224      	str	r4, [r4, #32]
 8005206:	429c      	cmp	r4, r3
 8005208:	d006      	beq.n	8005218 <std+0x48>
 800520a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800520e:	4294      	cmp	r4, r2
 8005210:	d002      	beq.n	8005218 <std+0x48>
 8005212:	33d0      	adds	r3, #208	@ 0xd0
 8005214:	429c      	cmp	r4, r3
 8005216:	d105      	bne.n	8005224 <std+0x54>
 8005218:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005220:	f000 b99a 	b.w	8005558 <__retarget_lock_init_recursive>
 8005224:	bd10      	pop	{r4, pc}
 8005226:	bf00      	nop
 8005228:	080053b9 	.word	0x080053b9
 800522c:	080053db 	.word	0x080053db
 8005230:	08005413 	.word	0x08005413
 8005234:	08005437 	.word	0x08005437
 8005238:	200003d8 	.word	0x200003d8

0800523c <stdio_exit_handler>:
 800523c:	4a02      	ldr	r2, [pc, #8]	@ (8005248 <stdio_exit_handler+0xc>)
 800523e:	4903      	ldr	r1, [pc, #12]	@ (800524c <stdio_exit_handler+0x10>)
 8005240:	4803      	ldr	r0, [pc, #12]	@ (8005250 <stdio_exit_handler+0x14>)
 8005242:	f000 b869 	b.w	8005318 <_fwalk_sglue>
 8005246:	bf00      	nop
 8005248:	2000001c 	.word	0x2000001c
 800524c:	08006fcd 	.word	0x08006fcd
 8005250:	2000002c 	.word	0x2000002c

08005254 <cleanup_stdio>:
 8005254:	6841      	ldr	r1, [r0, #4]
 8005256:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <cleanup_stdio+0x34>)
 8005258:	4299      	cmp	r1, r3
 800525a:	b510      	push	{r4, lr}
 800525c:	4604      	mov	r4, r0
 800525e:	d001      	beq.n	8005264 <cleanup_stdio+0x10>
 8005260:	f001 feb4 	bl	8006fcc <_fflush_r>
 8005264:	68a1      	ldr	r1, [r4, #8]
 8005266:	4b09      	ldr	r3, [pc, #36]	@ (800528c <cleanup_stdio+0x38>)
 8005268:	4299      	cmp	r1, r3
 800526a:	d002      	beq.n	8005272 <cleanup_stdio+0x1e>
 800526c:	4620      	mov	r0, r4
 800526e:	f001 fead 	bl	8006fcc <_fflush_r>
 8005272:	68e1      	ldr	r1, [r4, #12]
 8005274:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <cleanup_stdio+0x3c>)
 8005276:	4299      	cmp	r1, r3
 8005278:	d004      	beq.n	8005284 <cleanup_stdio+0x30>
 800527a:	4620      	mov	r0, r4
 800527c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005280:	f001 bea4 	b.w	8006fcc <_fflush_r>
 8005284:	bd10      	pop	{r4, pc}
 8005286:	bf00      	nop
 8005288:	200003d8 	.word	0x200003d8
 800528c:	20000440 	.word	0x20000440
 8005290:	200004a8 	.word	0x200004a8

08005294 <global_stdio_init.part.0>:
 8005294:	b510      	push	{r4, lr}
 8005296:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <global_stdio_init.part.0+0x30>)
 8005298:	4c0b      	ldr	r4, [pc, #44]	@ (80052c8 <global_stdio_init.part.0+0x34>)
 800529a:	4a0c      	ldr	r2, [pc, #48]	@ (80052cc <global_stdio_init.part.0+0x38>)
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	4620      	mov	r0, r4
 80052a0:	2200      	movs	r2, #0
 80052a2:	2104      	movs	r1, #4
 80052a4:	f7ff ff94 	bl	80051d0 <std>
 80052a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052ac:	2201      	movs	r2, #1
 80052ae:	2109      	movs	r1, #9
 80052b0:	f7ff ff8e 	bl	80051d0 <std>
 80052b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052b8:	2202      	movs	r2, #2
 80052ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052be:	2112      	movs	r1, #18
 80052c0:	f7ff bf86 	b.w	80051d0 <std>
 80052c4:	20000510 	.word	0x20000510
 80052c8:	200003d8 	.word	0x200003d8
 80052cc:	0800523d 	.word	0x0800523d

080052d0 <__sfp_lock_acquire>:
 80052d0:	4801      	ldr	r0, [pc, #4]	@ (80052d8 <__sfp_lock_acquire+0x8>)
 80052d2:	f000 b942 	b.w	800555a <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	20000519 	.word	0x20000519

080052dc <__sfp_lock_release>:
 80052dc:	4801      	ldr	r0, [pc, #4]	@ (80052e4 <__sfp_lock_release+0x8>)
 80052de:	f000 b93d 	b.w	800555c <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	20000519 	.word	0x20000519

080052e8 <__sinit>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	4604      	mov	r4, r0
 80052ec:	f7ff fff0 	bl	80052d0 <__sfp_lock_acquire>
 80052f0:	6a23      	ldr	r3, [r4, #32]
 80052f2:	b11b      	cbz	r3, 80052fc <__sinit+0x14>
 80052f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f8:	f7ff bff0 	b.w	80052dc <__sfp_lock_release>
 80052fc:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <__sinit+0x28>)
 80052fe:	6223      	str	r3, [r4, #32]
 8005300:	4b04      	ldr	r3, [pc, #16]	@ (8005314 <__sinit+0x2c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f5      	bne.n	80052f4 <__sinit+0xc>
 8005308:	f7ff ffc4 	bl	8005294 <global_stdio_init.part.0>
 800530c:	e7f2      	b.n	80052f4 <__sinit+0xc>
 800530e:	bf00      	nop
 8005310:	08005255 	.word	0x08005255
 8005314:	20000510 	.word	0x20000510

08005318 <_fwalk_sglue>:
 8005318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800531c:	4607      	mov	r7, r0
 800531e:	4688      	mov	r8, r1
 8005320:	4614      	mov	r4, r2
 8005322:	2600      	movs	r6, #0
 8005324:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005328:	f1b9 0901 	subs.w	r9, r9, #1
 800532c:	d505      	bpl.n	800533a <_fwalk_sglue+0x22>
 800532e:	6824      	ldr	r4, [r4, #0]
 8005330:	2c00      	cmp	r4, #0
 8005332:	d1f7      	bne.n	8005324 <_fwalk_sglue+0xc>
 8005334:	4630      	mov	r0, r6
 8005336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d907      	bls.n	8005350 <_fwalk_sglue+0x38>
 8005340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005344:	3301      	adds	r3, #1
 8005346:	d003      	beq.n	8005350 <_fwalk_sglue+0x38>
 8005348:	4629      	mov	r1, r5
 800534a:	4638      	mov	r0, r7
 800534c:	47c0      	blx	r8
 800534e:	4306      	orrs	r6, r0
 8005350:	3568      	adds	r5, #104	@ 0x68
 8005352:	e7e9      	b.n	8005328 <_fwalk_sglue+0x10>

08005354 <iprintf>:
 8005354:	b40f      	push	{r0, r1, r2, r3}
 8005356:	b507      	push	{r0, r1, r2, lr}
 8005358:	4906      	ldr	r1, [pc, #24]	@ (8005374 <iprintf+0x20>)
 800535a:	ab04      	add	r3, sp, #16
 800535c:	6808      	ldr	r0, [r1, #0]
 800535e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005362:	6881      	ldr	r1, [r0, #8]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	f001 fc95 	bl	8006c94 <_vfiprintf_r>
 800536a:	b003      	add	sp, #12
 800536c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005370:	b004      	add	sp, #16
 8005372:	4770      	bx	lr
 8005374:	20000028 	.word	0x20000028

08005378 <siprintf>:
 8005378:	b40e      	push	{r1, r2, r3}
 800537a:	b500      	push	{lr}
 800537c:	b09c      	sub	sp, #112	@ 0x70
 800537e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	9006      	str	r0, [sp, #24]
 8005384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005388:	4809      	ldr	r0, [pc, #36]	@ (80053b0 <siprintf+0x38>)
 800538a:	9107      	str	r1, [sp, #28]
 800538c:	9104      	str	r1, [sp, #16]
 800538e:	4909      	ldr	r1, [pc, #36]	@ (80053b4 <siprintf+0x3c>)
 8005390:	f853 2b04 	ldr.w	r2, [r3], #4
 8005394:	9105      	str	r1, [sp, #20]
 8005396:	6800      	ldr	r0, [r0, #0]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	a902      	add	r1, sp, #8
 800539c:	f001 fb54 	bl	8006a48 <_svfiprintf_r>
 80053a0:	9b02      	ldr	r3, [sp, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	b01c      	add	sp, #112	@ 0x70
 80053a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053ac:	b003      	add	sp, #12
 80053ae:	4770      	bx	lr
 80053b0:	20000028 	.word	0x20000028
 80053b4:	ffff0208 	.word	0xffff0208

080053b8 <__sread>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	460c      	mov	r4, r1
 80053bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c0:	f000 f86c 	bl	800549c <_read_r>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	bfab      	itete	ge
 80053c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053ca:	89a3      	ldrhlt	r3, [r4, #12]
 80053cc:	181b      	addge	r3, r3, r0
 80053ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053d2:	bfac      	ite	ge
 80053d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053d6:	81a3      	strhlt	r3, [r4, #12]
 80053d8:	bd10      	pop	{r4, pc}

080053da <__swrite>:
 80053da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053de:	461f      	mov	r7, r3
 80053e0:	898b      	ldrh	r3, [r1, #12]
 80053e2:	05db      	lsls	r3, r3, #23
 80053e4:	4605      	mov	r5, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	4616      	mov	r6, r2
 80053ea:	d505      	bpl.n	80053f8 <__swrite+0x1e>
 80053ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f0:	2302      	movs	r3, #2
 80053f2:	2200      	movs	r2, #0
 80053f4:	f000 f840 	bl	8005478 <_lseek_r>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	4632      	mov	r2, r6
 8005406:	463b      	mov	r3, r7
 8005408:	4628      	mov	r0, r5
 800540a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800540e:	f000 b867 	b.w	80054e0 <_write_r>

08005412 <__sseek>:
 8005412:	b510      	push	{r4, lr}
 8005414:	460c      	mov	r4, r1
 8005416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541a:	f000 f82d 	bl	8005478 <_lseek_r>
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	bf15      	itete	ne
 8005424:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005426:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800542a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800542e:	81a3      	strheq	r3, [r4, #12]
 8005430:	bf18      	it	ne
 8005432:	81a3      	strhne	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__sclose>:
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 b80d 	b.w	8005458 <_close_r>

0800543e <memset>:
 800543e:	4402      	add	r2, r0
 8005440:	4603      	mov	r3, r0
 8005442:	4293      	cmp	r3, r2
 8005444:	d100      	bne.n	8005448 <memset+0xa>
 8005446:	4770      	bx	lr
 8005448:	f803 1b01 	strb.w	r1, [r3], #1
 800544c:	e7f9      	b.n	8005442 <memset+0x4>
	...

08005450 <_localeconv_r>:
 8005450:	4800      	ldr	r0, [pc, #0]	@ (8005454 <_localeconv_r+0x4>)
 8005452:	4770      	bx	lr
 8005454:	20000168 	.word	0x20000168

08005458 <_close_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	@ (8005474 <_close_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fc fb64 	bl	8001b30 <_close>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_close_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_close_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000514 	.word	0x20000514

08005478 <_lseek_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d07      	ldr	r5, [pc, #28]	@ (8005498 <_lseek_r+0x20>)
 800547c:	4604      	mov	r4, r0
 800547e:	4608      	mov	r0, r1
 8005480:	4611      	mov	r1, r2
 8005482:	2200      	movs	r2, #0
 8005484:	602a      	str	r2, [r5, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	f7fc fb79 	bl	8001b7e <_lseek>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_lseek_r+0x1e>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_lseek_r+0x1e>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20000514 	.word	0x20000514

0800549c <_read_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d07      	ldr	r5, [pc, #28]	@ (80054bc <_read_r+0x20>)
 80054a0:	4604      	mov	r4, r0
 80054a2:	4608      	mov	r0, r1
 80054a4:	4611      	mov	r1, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	602a      	str	r2, [r5, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fc fb07 	bl	8001abe <_read>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_read_r+0x1e>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_read_r+0x1e>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20000514 	.word	0x20000514

080054c0 <_sbrk_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d06      	ldr	r5, [pc, #24]	@ (80054dc <_sbrk_r+0x1c>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4604      	mov	r4, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	f7fc fb64 	bl	8001b98 <_sbrk>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_sbrk_r+0x1a>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_sbrk_r+0x1a>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	20000514 	.word	0x20000514

080054e0 <_write_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d07      	ldr	r5, [pc, #28]	@ (8005500 <_write_r+0x20>)
 80054e4:	4604      	mov	r4, r0
 80054e6:	4608      	mov	r0, r1
 80054e8:	4611      	mov	r1, r2
 80054ea:	2200      	movs	r2, #0
 80054ec:	602a      	str	r2, [r5, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f7fc fb02 	bl	8001af8 <_write>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_write_r+0x1e>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_write_r+0x1e>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	20000514 	.word	0x20000514

08005504 <__errno>:
 8005504:	4b01      	ldr	r3, [pc, #4]	@ (800550c <__errno+0x8>)
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000028 	.word	0x20000028

08005510 <__libc_init_array>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4d0d      	ldr	r5, [pc, #52]	@ (8005548 <__libc_init_array+0x38>)
 8005514:	4c0d      	ldr	r4, [pc, #52]	@ (800554c <__libc_init_array+0x3c>)
 8005516:	1b64      	subs	r4, r4, r5
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	2600      	movs	r6, #0
 800551c:	42a6      	cmp	r6, r4
 800551e:	d109      	bne.n	8005534 <__libc_init_array+0x24>
 8005520:	4d0b      	ldr	r5, [pc, #44]	@ (8005550 <__libc_init_array+0x40>)
 8005522:	4c0c      	ldr	r4, [pc, #48]	@ (8005554 <__libc_init_array+0x44>)
 8005524:	f001 ffa0 	bl	8007468 <_init>
 8005528:	1b64      	subs	r4, r4, r5
 800552a:	10a4      	asrs	r4, r4, #2
 800552c:	2600      	movs	r6, #0
 800552e:	42a6      	cmp	r6, r4
 8005530:	d105      	bne.n	800553e <__libc_init_array+0x2e>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	f855 3b04 	ldr.w	r3, [r5], #4
 8005538:	4798      	blx	r3
 800553a:	3601      	adds	r6, #1
 800553c:	e7ee      	b.n	800551c <__libc_init_array+0xc>
 800553e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005542:	4798      	blx	r3
 8005544:	3601      	adds	r6, #1
 8005546:	e7f2      	b.n	800552e <__libc_init_array+0x1e>
 8005548:	08007910 	.word	0x08007910
 800554c:	08007910 	.word	0x08007910
 8005550:	08007910 	.word	0x08007910
 8005554:	08007914 	.word	0x08007914

08005558 <__retarget_lock_init_recursive>:
 8005558:	4770      	bx	lr

0800555a <__retarget_lock_acquire_recursive>:
 800555a:	4770      	bx	lr

0800555c <__retarget_lock_release_recursive>:
 800555c:	4770      	bx	lr

0800555e <quorem>:
 800555e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005562:	6903      	ldr	r3, [r0, #16]
 8005564:	690c      	ldr	r4, [r1, #16]
 8005566:	42a3      	cmp	r3, r4
 8005568:	4607      	mov	r7, r0
 800556a:	db7e      	blt.n	800566a <quorem+0x10c>
 800556c:	3c01      	subs	r4, #1
 800556e:	f101 0814 	add.w	r8, r1, #20
 8005572:	00a3      	lsls	r3, r4, #2
 8005574:	f100 0514 	add.w	r5, r0, #20
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005588:	3301      	adds	r3, #1
 800558a:	429a      	cmp	r2, r3
 800558c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005590:	fbb2 f6f3 	udiv	r6, r2, r3
 8005594:	d32e      	bcc.n	80055f4 <quorem+0x96>
 8005596:	f04f 0a00 	mov.w	sl, #0
 800559a:	46c4      	mov	ip, r8
 800559c:	46ae      	mov	lr, r5
 800559e:	46d3      	mov	fp, sl
 80055a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055a4:	b298      	uxth	r0, r3
 80055a6:	fb06 a000 	mla	r0, r6, r0, sl
 80055aa:	0c02      	lsrs	r2, r0, #16
 80055ac:	0c1b      	lsrs	r3, r3, #16
 80055ae:	fb06 2303 	mla	r3, r6, r3, r2
 80055b2:	f8de 2000 	ldr.w	r2, [lr]
 80055b6:	b280      	uxth	r0, r0
 80055b8:	b292      	uxth	r2, r2
 80055ba:	1a12      	subs	r2, r2, r0
 80055bc:	445a      	add	r2, fp
 80055be:	f8de 0000 	ldr.w	r0, [lr]
 80055c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055d0:	b292      	uxth	r2, r2
 80055d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055d6:	45e1      	cmp	r9, ip
 80055d8:	f84e 2b04 	str.w	r2, [lr], #4
 80055dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055e0:	d2de      	bcs.n	80055a0 <quorem+0x42>
 80055e2:	9b00      	ldr	r3, [sp, #0]
 80055e4:	58eb      	ldr	r3, [r5, r3]
 80055e6:	b92b      	cbnz	r3, 80055f4 <quorem+0x96>
 80055e8:	9b01      	ldr	r3, [sp, #4]
 80055ea:	3b04      	subs	r3, #4
 80055ec:	429d      	cmp	r5, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	d32f      	bcc.n	8005652 <quorem+0xf4>
 80055f2:	613c      	str	r4, [r7, #16]
 80055f4:	4638      	mov	r0, r7
 80055f6:	f001 f8c3 	bl	8006780 <__mcmp>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	db25      	blt.n	800564a <quorem+0xec>
 80055fe:	4629      	mov	r1, r5
 8005600:	2000      	movs	r0, #0
 8005602:	f858 2b04 	ldr.w	r2, [r8], #4
 8005606:	f8d1 c000 	ldr.w	ip, [r1]
 800560a:	fa1f fe82 	uxth.w	lr, r2
 800560e:	fa1f f38c 	uxth.w	r3, ip
 8005612:	eba3 030e 	sub.w	r3, r3, lr
 8005616:	4403      	add	r3, r0
 8005618:	0c12      	lsrs	r2, r2, #16
 800561a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800561e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005622:	b29b      	uxth	r3, r3
 8005624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005628:	45c1      	cmp	r9, r8
 800562a:	f841 3b04 	str.w	r3, [r1], #4
 800562e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005632:	d2e6      	bcs.n	8005602 <quorem+0xa4>
 8005634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800563c:	b922      	cbnz	r2, 8005648 <quorem+0xea>
 800563e:	3b04      	subs	r3, #4
 8005640:	429d      	cmp	r5, r3
 8005642:	461a      	mov	r2, r3
 8005644:	d30b      	bcc.n	800565e <quorem+0x100>
 8005646:	613c      	str	r4, [r7, #16]
 8005648:	3601      	adds	r6, #1
 800564a:	4630      	mov	r0, r6
 800564c:	b003      	add	sp, #12
 800564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	3b04      	subs	r3, #4
 8005656:	2a00      	cmp	r2, #0
 8005658:	d1cb      	bne.n	80055f2 <quorem+0x94>
 800565a:	3c01      	subs	r4, #1
 800565c:	e7c6      	b.n	80055ec <quorem+0x8e>
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	3b04      	subs	r3, #4
 8005662:	2a00      	cmp	r2, #0
 8005664:	d1ef      	bne.n	8005646 <quorem+0xe8>
 8005666:	3c01      	subs	r4, #1
 8005668:	e7ea      	b.n	8005640 <quorem+0xe2>
 800566a:	2000      	movs	r0, #0
 800566c:	e7ee      	b.n	800564c <quorem+0xee>
	...

08005670 <_dtoa_r>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	69c7      	ldr	r7, [r0, #28]
 8005676:	b099      	sub	sp, #100	@ 0x64
 8005678:	ed8d 0b02 	vstr	d0, [sp, #8]
 800567c:	ec55 4b10 	vmov	r4, r5, d0
 8005680:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005682:	9109      	str	r1, [sp, #36]	@ 0x24
 8005684:	4683      	mov	fp, r0
 8005686:	920e      	str	r2, [sp, #56]	@ 0x38
 8005688:	9313      	str	r3, [sp, #76]	@ 0x4c
 800568a:	b97f      	cbnz	r7, 80056ac <_dtoa_r+0x3c>
 800568c:	2010      	movs	r0, #16
 800568e:	f7ff f891 	bl	80047b4 <malloc>
 8005692:	4602      	mov	r2, r0
 8005694:	f8cb 001c 	str.w	r0, [fp, #28]
 8005698:	b920      	cbnz	r0, 80056a4 <_dtoa_r+0x34>
 800569a:	4ba7      	ldr	r3, [pc, #668]	@ (8005938 <_dtoa_r+0x2c8>)
 800569c:	21ef      	movs	r1, #239	@ 0xef
 800569e:	48a7      	ldr	r0, [pc, #668]	@ (800593c <_dtoa_r+0x2cc>)
 80056a0:	f001 fd78 	bl	8007194 <__assert_func>
 80056a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056a8:	6007      	str	r7, [r0, #0]
 80056aa:	60c7      	str	r7, [r0, #12]
 80056ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056b0:	6819      	ldr	r1, [r3, #0]
 80056b2:	b159      	cbz	r1, 80056cc <_dtoa_r+0x5c>
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	604a      	str	r2, [r1, #4]
 80056b8:	2301      	movs	r3, #1
 80056ba:	4093      	lsls	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
 80056be:	4658      	mov	r0, fp
 80056c0:	f000 fe24 	bl	800630c <_Bfree>
 80056c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	1e2b      	subs	r3, r5, #0
 80056ce:	bfb9      	ittee	lt
 80056d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056d4:	9303      	strlt	r3, [sp, #12]
 80056d6:	2300      	movge	r3, #0
 80056d8:	6033      	strge	r3, [r6, #0]
 80056da:	9f03      	ldr	r7, [sp, #12]
 80056dc:	4b98      	ldr	r3, [pc, #608]	@ (8005940 <_dtoa_r+0x2d0>)
 80056de:	bfbc      	itt	lt
 80056e0:	2201      	movlt	r2, #1
 80056e2:	6032      	strlt	r2, [r6, #0]
 80056e4:	43bb      	bics	r3, r7
 80056e6:	d112      	bne.n	800570e <_dtoa_r+0x9e>
 80056e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056f4:	4323      	orrs	r3, r4
 80056f6:	f000 854d 	beq.w	8006194 <_dtoa_r+0xb24>
 80056fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005954 <_dtoa_r+0x2e4>
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 854f 	beq.w	80061a4 <_dtoa_r+0xb34>
 8005706:	f10a 0303 	add.w	r3, sl, #3
 800570a:	f000 bd49 	b.w	80061a0 <_dtoa_r+0xb30>
 800570e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005712:	2200      	movs	r2, #0
 8005714:	ec51 0b17 	vmov	r0, r1, d7
 8005718:	2300      	movs	r3, #0
 800571a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800571e:	f7fb f9f3 	bl	8000b08 <__aeabi_dcmpeq>
 8005722:	4680      	mov	r8, r0
 8005724:	b158      	cbz	r0, 800573e <_dtoa_r+0xce>
 8005726:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005728:	2301      	movs	r3, #1
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800572e:	b113      	cbz	r3, 8005736 <_dtoa_r+0xc6>
 8005730:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005732:	4b84      	ldr	r3, [pc, #528]	@ (8005944 <_dtoa_r+0x2d4>)
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005958 <_dtoa_r+0x2e8>
 800573a:	f000 bd33 	b.w	80061a4 <_dtoa_r+0xb34>
 800573e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005742:	aa16      	add	r2, sp, #88	@ 0x58
 8005744:	a917      	add	r1, sp, #92	@ 0x5c
 8005746:	4658      	mov	r0, fp
 8005748:	f001 f8ca 	bl	80068e0 <__d2b>
 800574c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005750:	4681      	mov	r9, r0
 8005752:	2e00      	cmp	r6, #0
 8005754:	d077      	beq.n	8005846 <_dtoa_r+0x1d6>
 8005756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005758:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800575c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005764:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005768:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800576c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005770:	4619      	mov	r1, r3
 8005772:	2200      	movs	r2, #0
 8005774:	4b74      	ldr	r3, [pc, #464]	@ (8005948 <_dtoa_r+0x2d8>)
 8005776:	f7fa fda7 	bl	80002c8 <__aeabi_dsub>
 800577a:	a369      	add	r3, pc, #420	@ (adr r3, 8005920 <_dtoa_r+0x2b0>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f7fa ff5a 	bl	8000638 <__aeabi_dmul>
 8005784:	a368      	add	r3, pc, #416	@ (adr r3, 8005928 <_dtoa_r+0x2b8>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fd9f 	bl	80002cc <__adddf3>
 800578e:	4604      	mov	r4, r0
 8005790:	4630      	mov	r0, r6
 8005792:	460d      	mov	r5, r1
 8005794:	f7fa fee6 	bl	8000564 <__aeabi_i2d>
 8005798:	a365      	add	r3, pc, #404	@ (adr r3, 8005930 <_dtoa_r+0x2c0>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f7fa ff4b 	bl	8000638 <__aeabi_dmul>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4620      	mov	r0, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	f7fa fd8f 	bl	80002cc <__adddf3>
 80057ae:	4604      	mov	r4, r0
 80057b0:	460d      	mov	r5, r1
 80057b2:	f7fb f9f1 	bl	8000b98 <__aeabi_d2iz>
 80057b6:	2200      	movs	r2, #0
 80057b8:	4607      	mov	r7, r0
 80057ba:	2300      	movs	r3, #0
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fb f9ac 	bl	8000b1c <__aeabi_dcmplt>
 80057c4:	b140      	cbz	r0, 80057d8 <_dtoa_r+0x168>
 80057c6:	4638      	mov	r0, r7
 80057c8:	f7fa fecc 	bl	8000564 <__aeabi_i2d>
 80057cc:	4622      	mov	r2, r4
 80057ce:	462b      	mov	r3, r5
 80057d0:	f7fb f99a 	bl	8000b08 <__aeabi_dcmpeq>
 80057d4:	b900      	cbnz	r0, 80057d8 <_dtoa_r+0x168>
 80057d6:	3f01      	subs	r7, #1
 80057d8:	2f16      	cmp	r7, #22
 80057da:	d851      	bhi.n	8005880 <_dtoa_r+0x210>
 80057dc:	4b5b      	ldr	r3, [pc, #364]	@ (800594c <_dtoa_r+0x2dc>)
 80057de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057ea:	f7fb f997 	bl	8000b1c <__aeabi_dcmplt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d048      	beq.n	8005884 <_dtoa_r+0x214>
 80057f2:	3f01      	subs	r7, #1
 80057f4:	2300      	movs	r3, #0
 80057f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80057f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80057fa:	1b9b      	subs	r3, r3, r6
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	bf44      	itt	mi
 8005800:	f1c3 0801 	rsbmi	r8, r3, #1
 8005804:	2300      	movmi	r3, #0
 8005806:	9208      	str	r2, [sp, #32]
 8005808:	bf54      	ite	pl
 800580a:	f04f 0800 	movpl.w	r8, #0
 800580e:	9308      	strmi	r3, [sp, #32]
 8005810:	2f00      	cmp	r7, #0
 8005812:	db39      	blt.n	8005888 <_dtoa_r+0x218>
 8005814:	9b08      	ldr	r3, [sp, #32]
 8005816:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005818:	443b      	add	r3, r7
 800581a:	9308      	str	r3, [sp, #32]
 800581c:	2300      	movs	r3, #0
 800581e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005822:	2b09      	cmp	r3, #9
 8005824:	d864      	bhi.n	80058f0 <_dtoa_r+0x280>
 8005826:	2b05      	cmp	r3, #5
 8005828:	bfc4      	itt	gt
 800582a:	3b04      	subgt	r3, #4
 800582c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800582e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005830:	f1a3 0302 	sub.w	r3, r3, #2
 8005834:	bfcc      	ite	gt
 8005836:	2400      	movgt	r4, #0
 8005838:	2401      	movle	r4, #1
 800583a:	2b03      	cmp	r3, #3
 800583c:	d863      	bhi.n	8005906 <_dtoa_r+0x296>
 800583e:	e8df f003 	tbb	[pc, r3]
 8005842:	372a      	.short	0x372a
 8005844:	5535      	.short	0x5535
 8005846:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800584a:	441e      	add	r6, r3
 800584c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005850:	2b20      	cmp	r3, #32
 8005852:	bfc1      	itttt	gt
 8005854:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005858:	409f      	lslgt	r7, r3
 800585a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800585e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005862:	bfd6      	itet	le
 8005864:	f1c3 0320 	rsble	r3, r3, #32
 8005868:	ea47 0003 	orrgt.w	r0, r7, r3
 800586c:	fa04 f003 	lslle.w	r0, r4, r3
 8005870:	f7fa fe68 	bl	8000544 <__aeabi_ui2d>
 8005874:	2201      	movs	r2, #1
 8005876:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800587a:	3e01      	subs	r6, #1
 800587c:	9214      	str	r2, [sp, #80]	@ 0x50
 800587e:	e777      	b.n	8005770 <_dtoa_r+0x100>
 8005880:	2301      	movs	r3, #1
 8005882:	e7b8      	b.n	80057f6 <_dtoa_r+0x186>
 8005884:	9012      	str	r0, [sp, #72]	@ 0x48
 8005886:	e7b7      	b.n	80057f8 <_dtoa_r+0x188>
 8005888:	427b      	negs	r3, r7
 800588a:	930a      	str	r3, [sp, #40]	@ 0x28
 800588c:	2300      	movs	r3, #0
 800588e:	eba8 0807 	sub.w	r8, r8, r7
 8005892:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005894:	e7c4      	b.n	8005820 <_dtoa_r+0x1b0>
 8005896:	2300      	movs	r3, #0
 8005898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800589a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc35      	bgt.n	800590c <_dtoa_r+0x29c>
 80058a0:	2301      	movs	r3, #1
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	9307      	str	r3, [sp, #28]
 80058a6:	461a      	mov	r2, r3
 80058a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80058aa:	e00b      	b.n	80058c4 <_dtoa_r+0x254>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e7f3      	b.n	8005898 <_dtoa_r+0x228>
 80058b0:	2300      	movs	r3, #0
 80058b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	3301      	adds	r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	9307      	str	r3, [sp, #28]
 80058c0:	bfb8      	it	lt
 80058c2:	2301      	movlt	r3, #1
 80058c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058c8:	2100      	movs	r1, #0
 80058ca:	2204      	movs	r2, #4
 80058cc:	f102 0514 	add.w	r5, r2, #20
 80058d0:	429d      	cmp	r5, r3
 80058d2:	d91f      	bls.n	8005914 <_dtoa_r+0x2a4>
 80058d4:	6041      	str	r1, [r0, #4]
 80058d6:	4658      	mov	r0, fp
 80058d8:	f000 fcd8 	bl	800628c <_Balloc>
 80058dc:	4682      	mov	sl, r0
 80058de:	2800      	cmp	r0, #0
 80058e0:	d13c      	bne.n	800595c <_dtoa_r+0x2ec>
 80058e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005950 <_dtoa_r+0x2e0>)
 80058e4:	4602      	mov	r2, r0
 80058e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80058ea:	e6d8      	b.n	800569e <_dtoa_r+0x2e>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e7e0      	b.n	80058b2 <_dtoa_r+0x242>
 80058f0:	2401      	movs	r4, #1
 80058f2:	2300      	movs	r3, #0
 80058f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	2200      	movs	r2, #0
 8005902:	2312      	movs	r3, #18
 8005904:	e7d0      	b.n	80058a8 <_dtoa_r+0x238>
 8005906:	2301      	movs	r3, #1
 8005908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800590a:	e7f5      	b.n	80058f8 <_dtoa_r+0x288>
 800590c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	9307      	str	r3, [sp, #28]
 8005912:	e7d7      	b.n	80058c4 <_dtoa_r+0x254>
 8005914:	3101      	adds	r1, #1
 8005916:	0052      	lsls	r2, r2, #1
 8005918:	e7d8      	b.n	80058cc <_dtoa_r+0x25c>
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w
 8005920:	636f4361 	.word	0x636f4361
 8005924:	3fd287a7 	.word	0x3fd287a7
 8005928:	8b60c8b3 	.word	0x8b60c8b3
 800592c:	3fc68a28 	.word	0x3fc68a28
 8005930:	509f79fb 	.word	0x509f79fb
 8005934:	3fd34413 	.word	0x3fd34413
 8005938:	080075d9 	.word	0x080075d9
 800593c:	080075f0 	.word	0x080075f0
 8005940:	7ff00000 	.word	0x7ff00000
 8005944:	080075a9 	.word	0x080075a9
 8005948:	3ff80000 	.word	0x3ff80000
 800594c:	080076e8 	.word	0x080076e8
 8005950:	08007648 	.word	0x08007648
 8005954:	080075d5 	.word	0x080075d5
 8005958:	080075a8 	.word	0x080075a8
 800595c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005960:	6018      	str	r0, [r3, #0]
 8005962:	9b07      	ldr	r3, [sp, #28]
 8005964:	2b0e      	cmp	r3, #14
 8005966:	f200 80a4 	bhi.w	8005ab2 <_dtoa_r+0x442>
 800596a:	2c00      	cmp	r4, #0
 800596c:	f000 80a1 	beq.w	8005ab2 <_dtoa_r+0x442>
 8005970:	2f00      	cmp	r7, #0
 8005972:	dd33      	ble.n	80059dc <_dtoa_r+0x36c>
 8005974:	4bad      	ldr	r3, [pc, #692]	@ (8005c2c <_dtoa_r+0x5bc>)
 8005976:	f007 020f 	and.w	r2, r7, #15
 800597a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800597e:	ed93 7b00 	vldr	d7, [r3]
 8005982:	05f8      	lsls	r0, r7, #23
 8005984:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005988:	ea4f 1427 	mov.w	r4, r7, asr #4
 800598c:	d516      	bpl.n	80059bc <_dtoa_r+0x34c>
 800598e:	4ba8      	ldr	r3, [pc, #672]	@ (8005c30 <_dtoa_r+0x5c0>)
 8005990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005994:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005998:	f7fa ff78 	bl	800088c <__aeabi_ddiv>
 800599c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a0:	f004 040f 	and.w	r4, r4, #15
 80059a4:	2603      	movs	r6, #3
 80059a6:	4da2      	ldr	r5, [pc, #648]	@ (8005c30 <_dtoa_r+0x5c0>)
 80059a8:	b954      	cbnz	r4, 80059c0 <_dtoa_r+0x350>
 80059aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b2:	f7fa ff6b 	bl	800088c <__aeabi_ddiv>
 80059b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ba:	e028      	b.n	8005a0e <_dtoa_r+0x39e>
 80059bc:	2602      	movs	r6, #2
 80059be:	e7f2      	b.n	80059a6 <_dtoa_r+0x336>
 80059c0:	07e1      	lsls	r1, r4, #31
 80059c2:	d508      	bpl.n	80059d6 <_dtoa_r+0x366>
 80059c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059cc:	f7fa fe34 	bl	8000638 <__aeabi_dmul>
 80059d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059d4:	3601      	adds	r6, #1
 80059d6:	1064      	asrs	r4, r4, #1
 80059d8:	3508      	adds	r5, #8
 80059da:	e7e5      	b.n	80059a8 <_dtoa_r+0x338>
 80059dc:	f000 80d2 	beq.w	8005b84 <_dtoa_r+0x514>
 80059e0:	427c      	negs	r4, r7
 80059e2:	4b92      	ldr	r3, [pc, #584]	@ (8005c2c <_dtoa_r+0x5bc>)
 80059e4:	4d92      	ldr	r5, [pc, #584]	@ (8005c30 <_dtoa_r+0x5c0>)
 80059e6:	f004 020f 	and.w	r2, r4, #15
 80059ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059f6:	f7fa fe1f 	bl	8000638 <__aeabi_dmul>
 80059fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059fe:	1124      	asrs	r4, r4, #4
 8005a00:	2300      	movs	r3, #0
 8005a02:	2602      	movs	r6, #2
 8005a04:	2c00      	cmp	r4, #0
 8005a06:	f040 80b2 	bne.w	8005b6e <_dtoa_r+0x4fe>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1d3      	bne.n	80059b6 <_dtoa_r+0x346>
 8005a0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80b7 	beq.w	8005b88 <_dtoa_r+0x518>
 8005a1a:	4b86      	ldr	r3, [pc, #536]	@ (8005c34 <_dtoa_r+0x5c4>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4620      	mov	r0, r4
 8005a20:	4629      	mov	r1, r5
 8005a22:	f7fb f87b 	bl	8000b1c <__aeabi_dcmplt>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	f000 80ae 	beq.w	8005b88 <_dtoa_r+0x518>
 8005a2c:	9b07      	ldr	r3, [sp, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 80aa 	beq.w	8005b88 <_dtoa_r+0x518>
 8005a34:	9b00      	ldr	r3, [sp, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	dd37      	ble.n	8005aaa <_dtoa_r+0x43a>
 8005a3a:	1e7b      	subs	r3, r7, #1
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4b7d      	ldr	r3, [pc, #500]	@ (8005c38 <_dtoa_r+0x5c8>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	4629      	mov	r1, r5
 8005a46:	f7fa fdf7 	bl	8000638 <__aeabi_dmul>
 8005a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a4e:	9c00      	ldr	r4, [sp, #0]
 8005a50:	3601      	adds	r6, #1
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7fa fd86 	bl	8000564 <__aeabi_i2d>
 8005a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a5c:	f7fa fdec 	bl	8000638 <__aeabi_dmul>
 8005a60:	4b76      	ldr	r3, [pc, #472]	@ (8005c3c <_dtoa_r+0x5cc>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	f7fa fc32 	bl	80002cc <__adddf3>
 8005a68:	4605      	mov	r5, r0
 8005a6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a6e:	2c00      	cmp	r4, #0
 8005a70:	f040 808d 	bne.w	8005b8e <_dtoa_r+0x51e>
 8005a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a78:	4b71      	ldr	r3, [pc, #452]	@ (8005c40 <_dtoa_r+0x5d0>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fa fc24 	bl	80002c8 <__aeabi_dsub>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4633      	mov	r3, r6
 8005a8c:	f7fb f864 	bl	8000b58 <__aeabi_dcmpgt>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f040 828b 	bne.w	8005fac <_dtoa_r+0x93c>
 8005a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a9a:	462a      	mov	r2, r5
 8005a9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005aa0:	f7fb f83c 	bl	8000b1c <__aeabi_dcmplt>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f040 8128 	bne.w	8005cfa <_dtoa_r+0x68a>
 8005aaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005aae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005ab2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f2c0 815a 	blt.w	8005d6e <_dtoa_r+0x6fe>
 8005aba:	2f0e      	cmp	r7, #14
 8005abc:	f300 8157 	bgt.w	8005d6e <_dtoa_r+0x6fe>
 8005ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c2c <_dtoa_r+0x5bc>)
 8005ac2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ac6:	ed93 7b00 	vldr	d7, [r3]
 8005aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	ed8d 7b00 	vstr	d7, [sp]
 8005ad2:	da03      	bge.n	8005adc <_dtoa_r+0x46c>
 8005ad4:	9b07      	ldr	r3, [sp, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f340 8101 	ble.w	8005cde <_dtoa_r+0x66e>
 8005adc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ae0:	4656      	mov	r6, sl
 8005ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f7fa fecf 	bl	800088c <__aeabi_ddiv>
 8005aee:	f7fb f853 	bl	8000b98 <__aeabi_d2iz>
 8005af2:	4680      	mov	r8, r0
 8005af4:	f7fa fd36 	bl	8000564 <__aeabi_i2d>
 8005af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afc:	f7fa fd9c 	bl	8000638 <__aeabi_dmul>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b0c:	f7fa fbdc 	bl	80002c8 <__aeabi_dsub>
 8005b10:	f806 4b01 	strb.w	r4, [r6], #1
 8005b14:	9d07      	ldr	r5, [sp, #28]
 8005b16:	eba6 040a 	sub.w	r4, r6, sl
 8005b1a:	42a5      	cmp	r5, r4
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	f040 8117 	bne.w	8005d52 <_dtoa_r+0x6e2>
 8005b24:	f7fa fbd2 	bl	80002cc <__adddf3>
 8005b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	f7fb f812 	bl	8000b58 <__aeabi_dcmpgt>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f040 80f9 	bne.w	8005d2c <_dtoa_r+0x6bc>
 8005b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	f7fa ffe1 	bl	8000b08 <__aeabi_dcmpeq>
 8005b46:	b118      	cbz	r0, 8005b50 <_dtoa_r+0x4e0>
 8005b48:	f018 0f01 	tst.w	r8, #1
 8005b4c:	f040 80ee 	bne.w	8005d2c <_dtoa_r+0x6bc>
 8005b50:	4649      	mov	r1, r9
 8005b52:	4658      	mov	r0, fp
 8005b54:	f000 fbda 	bl	800630c <_Bfree>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	7033      	strb	r3, [r6, #0]
 8005b5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b5e:	3701      	adds	r7, #1
 8005b60:	601f      	str	r7, [r3, #0]
 8005b62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 831d 	beq.w	80061a4 <_dtoa_r+0xb34>
 8005b6a:	601e      	str	r6, [r3, #0]
 8005b6c:	e31a      	b.n	80061a4 <_dtoa_r+0xb34>
 8005b6e:	07e2      	lsls	r2, r4, #31
 8005b70:	d505      	bpl.n	8005b7e <_dtoa_r+0x50e>
 8005b72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b76:	f7fa fd5f 	bl	8000638 <__aeabi_dmul>
 8005b7a:	3601      	adds	r6, #1
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	1064      	asrs	r4, r4, #1
 8005b80:	3508      	adds	r5, #8
 8005b82:	e73f      	b.n	8005a04 <_dtoa_r+0x394>
 8005b84:	2602      	movs	r6, #2
 8005b86:	e742      	b.n	8005a0e <_dtoa_r+0x39e>
 8005b88:	9c07      	ldr	r4, [sp, #28]
 8005b8a:	9704      	str	r7, [sp, #16]
 8005b8c:	e761      	b.n	8005a52 <_dtoa_r+0x3e2>
 8005b8e:	4b27      	ldr	r3, [pc, #156]	@ (8005c2c <_dtoa_r+0x5bc>)
 8005b90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b9a:	4454      	add	r4, sl
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	d053      	beq.n	8005c48 <_dtoa_r+0x5d8>
 8005ba0:	4928      	ldr	r1, [pc, #160]	@ (8005c44 <_dtoa_r+0x5d4>)
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f7fa fe72 	bl	800088c <__aeabi_ddiv>
 8005ba8:	4633      	mov	r3, r6
 8005baa:	462a      	mov	r2, r5
 8005bac:	f7fa fb8c 	bl	80002c8 <__aeabi_dsub>
 8005bb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bb4:	4656      	mov	r6, sl
 8005bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bba:	f7fa ffed 	bl	8000b98 <__aeabi_d2iz>
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	f7fa fcd0 	bl	8000564 <__aeabi_i2d>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bcc:	f7fa fb7c 	bl	80002c8 <__aeabi_dsub>
 8005bd0:	3530      	adds	r5, #48	@ 0x30
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bda:	f806 5b01 	strb.w	r5, [r6], #1
 8005bde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005be2:	f7fa ff9b 	bl	8000b1c <__aeabi_dcmplt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d171      	bne.n	8005cce <_dtoa_r+0x65e>
 8005bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bee:	4911      	ldr	r1, [pc, #68]	@ (8005c34 <_dtoa_r+0x5c4>)
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	f7fa fb69 	bl	80002c8 <__aeabi_dsub>
 8005bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bfa:	f7fa ff8f 	bl	8000b1c <__aeabi_dcmplt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f040 8095 	bne.w	8005d2e <_dtoa_r+0x6be>
 8005c04:	42a6      	cmp	r6, r4
 8005c06:	f43f af50 	beq.w	8005aaa <_dtoa_r+0x43a>
 8005c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c38 <_dtoa_r+0x5c8>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	f7fa fd11 	bl	8000638 <__aeabi_dmul>
 8005c16:	4b08      	ldr	r3, [pc, #32]	@ (8005c38 <_dtoa_r+0x5c8>)
 8005c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c22:	f7fa fd09 	bl	8000638 <__aeabi_dmul>
 8005c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c2a:	e7c4      	b.n	8005bb6 <_dtoa_r+0x546>
 8005c2c:	080076e8 	.word	0x080076e8
 8005c30:	080076c0 	.word	0x080076c0
 8005c34:	3ff00000 	.word	0x3ff00000
 8005c38:	40240000 	.word	0x40240000
 8005c3c:	401c0000 	.word	0x401c0000
 8005c40:	40140000 	.word	0x40140000
 8005c44:	3fe00000 	.word	0x3fe00000
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f7fa fcf4 	bl	8000638 <__aeabi_dmul>
 8005c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c54:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c56:	4656      	mov	r6, sl
 8005c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c5c:	f7fa ff9c 	bl	8000b98 <__aeabi_d2iz>
 8005c60:	4605      	mov	r5, r0
 8005c62:	f7fa fc7f 	bl	8000564 <__aeabi_i2d>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6e:	f7fa fb2b 	bl	80002c8 <__aeabi_dsub>
 8005c72:	3530      	adds	r5, #48	@ 0x30
 8005c74:	f806 5b01 	strb.w	r5, [r6], #1
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	42a6      	cmp	r6, r4
 8005c7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	d124      	bne.n	8005cd2 <_dtoa_r+0x662>
 8005c88:	4bac      	ldr	r3, [pc, #688]	@ (8005f3c <_dtoa_r+0x8cc>)
 8005c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c8e:	f7fa fb1d 	bl	80002cc <__adddf3>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9a:	f7fa ff5d 	bl	8000b58 <__aeabi_dcmpgt>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d145      	bne.n	8005d2e <_dtoa_r+0x6be>
 8005ca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ca6:	49a5      	ldr	r1, [pc, #660]	@ (8005f3c <_dtoa_r+0x8cc>)
 8005ca8:	2000      	movs	r0, #0
 8005caa:	f7fa fb0d 	bl	80002c8 <__aeabi_dsub>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb6:	f7fa ff31 	bl	8000b1c <__aeabi_dcmplt>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	f43f aef5 	beq.w	8005aaa <_dtoa_r+0x43a>
 8005cc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cc2:	1e73      	subs	r3, r6, #1
 8005cc4:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cca:	2b30      	cmp	r3, #48	@ 0x30
 8005ccc:	d0f8      	beq.n	8005cc0 <_dtoa_r+0x650>
 8005cce:	9f04      	ldr	r7, [sp, #16]
 8005cd0:	e73e      	b.n	8005b50 <_dtoa_r+0x4e0>
 8005cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8005f40 <_dtoa_r+0x8d0>)
 8005cd4:	f7fa fcb0 	bl	8000638 <__aeabi_dmul>
 8005cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cdc:	e7bc      	b.n	8005c58 <_dtoa_r+0x5e8>
 8005cde:	d10c      	bne.n	8005cfa <_dtoa_r+0x68a>
 8005ce0:	4b98      	ldr	r3, [pc, #608]	@ (8005f44 <_dtoa_r+0x8d4>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ce8:	f7fa fca6 	bl	8000638 <__aeabi_dmul>
 8005cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cf0:	f7fa ff28 	bl	8000b44 <__aeabi_dcmpge>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f000 8157 	beq.w	8005fa8 <_dtoa_r+0x938>
 8005cfa:	2400      	movs	r4, #0
 8005cfc:	4625      	mov	r5, r4
 8005cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d00:	43db      	mvns	r3, r3
 8005d02:	9304      	str	r3, [sp, #16]
 8005d04:	4656      	mov	r6, sl
 8005d06:	2700      	movs	r7, #0
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4658      	mov	r0, fp
 8005d0c:	f000 fafe 	bl	800630c <_Bfree>
 8005d10:	2d00      	cmp	r5, #0
 8005d12:	d0dc      	beq.n	8005cce <_dtoa_r+0x65e>
 8005d14:	b12f      	cbz	r7, 8005d22 <_dtoa_r+0x6b2>
 8005d16:	42af      	cmp	r7, r5
 8005d18:	d003      	beq.n	8005d22 <_dtoa_r+0x6b2>
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	4658      	mov	r0, fp
 8005d1e:	f000 faf5 	bl	800630c <_Bfree>
 8005d22:	4629      	mov	r1, r5
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 faf1 	bl	800630c <_Bfree>
 8005d2a:	e7d0      	b.n	8005cce <_dtoa_r+0x65e>
 8005d2c:	9704      	str	r7, [sp, #16]
 8005d2e:	4633      	mov	r3, r6
 8005d30:	461e      	mov	r6, r3
 8005d32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d36:	2a39      	cmp	r2, #57	@ 0x39
 8005d38:	d107      	bne.n	8005d4a <_dtoa_r+0x6da>
 8005d3a:	459a      	cmp	sl, r3
 8005d3c:	d1f8      	bne.n	8005d30 <_dtoa_r+0x6c0>
 8005d3e:	9a04      	ldr	r2, [sp, #16]
 8005d40:	3201      	adds	r2, #1
 8005d42:	9204      	str	r2, [sp, #16]
 8005d44:	2230      	movs	r2, #48	@ 0x30
 8005d46:	f88a 2000 	strb.w	r2, [sl]
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	3201      	adds	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	e7bd      	b.n	8005cce <_dtoa_r+0x65e>
 8005d52:	4b7b      	ldr	r3, [pc, #492]	@ (8005f40 <_dtoa_r+0x8d0>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	f7fa fc6f 	bl	8000638 <__aeabi_dmul>
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	460d      	mov	r5, r1
 8005d62:	f7fa fed1 	bl	8000b08 <__aeabi_dcmpeq>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f43f aebb 	beq.w	8005ae2 <_dtoa_r+0x472>
 8005d6c:	e6f0      	b.n	8005b50 <_dtoa_r+0x4e0>
 8005d6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	f000 80db 	beq.w	8005f2c <_dtoa_r+0x8bc>
 8005d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d78:	2a01      	cmp	r2, #1
 8005d7a:	f300 80bf 	bgt.w	8005efc <_dtoa_r+0x88c>
 8005d7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	f000 80b7 	beq.w	8005ef4 <_dtoa_r+0x884>
 8005d86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d8c:	4646      	mov	r6, r8
 8005d8e:	9a08      	ldr	r2, [sp, #32]
 8005d90:	2101      	movs	r1, #1
 8005d92:	441a      	add	r2, r3
 8005d94:	4658      	mov	r0, fp
 8005d96:	4498      	add	r8, r3
 8005d98:	9208      	str	r2, [sp, #32]
 8005d9a:	f000 fb6b 	bl	8006474 <__i2b>
 8005d9e:	4605      	mov	r5, r0
 8005da0:	b15e      	cbz	r6, 8005dba <_dtoa_r+0x74a>
 8005da2:	9b08      	ldr	r3, [sp, #32]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dd08      	ble.n	8005dba <_dtoa_r+0x74a>
 8005da8:	42b3      	cmp	r3, r6
 8005daa:	9a08      	ldr	r2, [sp, #32]
 8005dac:	bfa8      	it	ge
 8005dae:	4633      	movge	r3, r6
 8005db0:	eba8 0803 	sub.w	r8, r8, r3
 8005db4:	1af6      	subs	r6, r6, r3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	9308      	str	r3, [sp, #32]
 8005dba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dbc:	b1f3      	cbz	r3, 8005dfc <_dtoa_r+0x78c>
 8005dbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80b7 	beq.w	8005f34 <_dtoa_r+0x8c4>
 8005dc6:	b18c      	cbz	r4, 8005dec <_dtoa_r+0x77c>
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4622      	mov	r2, r4
 8005dcc:	4658      	mov	r0, fp
 8005dce:	f000 fc11 	bl	80065f4 <__pow5mult>
 8005dd2:	464a      	mov	r2, r9
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	4658      	mov	r0, fp
 8005dda:	f000 fb61 	bl	80064a0 <__multiply>
 8005dde:	4649      	mov	r1, r9
 8005de0:	9004      	str	r0, [sp, #16]
 8005de2:	4658      	mov	r0, fp
 8005de4:	f000 fa92 	bl	800630c <_Bfree>
 8005de8:	9b04      	ldr	r3, [sp, #16]
 8005dea:	4699      	mov	r9, r3
 8005dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dee:	1b1a      	subs	r2, r3, r4
 8005df0:	d004      	beq.n	8005dfc <_dtoa_r+0x78c>
 8005df2:	4649      	mov	r1, r9
 8005df4:	4658      	mov	r0, fp
 8005df6:	f000 fbfd 	bl	80065f4 <__pow5mult>
 8005dfa:	4681      	mov	r9, r0
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4658      	mov	r0, fp
 8005e00:	f000 fb38 	bl	8006474 <__i2b>
 8005e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e06:	4604      	mov	r4, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 81cf 	beq.w	80061ac <_dtoa_r+0xb3c>
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4601      	mov	r1, r0
 8005e12:	4658      	mov	r0, fp
 8005e14:	f000 fbee 	bl	80065f4 <__pow5mult>
 8005e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	f300 8095 	bgt.w	8005f4c <_dtoa_r+0x8dc>
 8005e22:	9b02      	ldr	r3, [sp, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f040 8087 	bne.w	8005f38 <_dtoa_r+0x8c8>
 8005e2a:	9b03      	ldr	r3, [sp, #12]
 8005e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 8089 	bne.w	8005f48 <_dtoa_r+0x8d8>
 8005e36:	9b03      	ldr	r3, [sp, #12]
 8005e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e3c:	0d1b      	lsrs	r3, r3, #20
 8005e3e:	051b      	lsls	r3, r3, #20
 8005e40:	b12b      	cbz	r3, 8005e4e <_dtoa_r+0x7de>
 8005e42:	9b08      	ldr	r3, [sp, #32]
 8005e44:	3301      	adds	r3, #1
 8005e46:	9308      	str	r3, [sp, #32]
 8005e48:	f108 0801 	add.w	r8, r8, #1
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 81b0 	beq.w	80061b8 <_dtoa_r+0xb48>
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e5e:	6918      	ldr	r0, [r3, #16]
 8005e60:	f000 fabc 	bl	80063dc <__hi0bits>
 8005e64:	f1c0 0020 	rsb	r0, r0, #32
 8005e68:	9b08      	ldr	r3, [sp, #32]
 8005e6a:	4418      	add	r0, r3
 8005e6c:	f010 001f 	ands.w	r0, r0, #31
 8005e70:	d077      	beq.n	8005f62 <_dtoa_r+0x8f2>
 8005e72:	f1c0 0320 	rsb	r3, r0, #32
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	dd6b      	ble.n	8005f52 <_dtoa_r+0x8e2>
 8005e7a:	9b08      	ldr	r3, [sp, #32]
 8005e7c:	f1c0 001c 	rsb	r0, r0, #28
 8005e80:	4403      	add	r3, r0
 8005e82:	4480      	add	r8, r0
 8005e84:	4406      	add	r6, r0
 8005e86:	9308      	str	r3, [sp, #32]
 8005e88:	f1b8 0f00 	cmp.w	r8, #0
 8005e8c:	dd05      	ble.n	8005e9a <_dtoa_r+0x82a>
 8005e8e:	4649      	mov	r1, r9
 8005e90:	4642      	mov	r2, r8
 8005e92:	4658      	mov	r0, fp
 8005e94:	f000 fc08 	bl	80066a8 <__lshift>
 8005e98:	4681      	mov	r9, r0
 8005e9a:	9b08      	ldr	r3, [sp, #32]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	dd05      	ble.n	8005eac <_dtoa_r+0x83c>
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4658      	mov	r0, fp
 8005ea6:	f000 fbff 	bl	80066a8 <__lshift>
 8005eaa:	4604      	mov	r4, r0
 8005eac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d059      	beq.n	8005f66 <_dtoa_r+0x8f6>
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4648      	mov	r0, r9
 8005eb6:	f000 fc63 	bl	8006780 <__mcmp>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	da53      	bge.n	8005f66 <_dtoa_r+0x8f6>
 8005ebe:	1e7b      	subs	r3, r7, #1
 8005ec0:	9304      	str	r3, [sp, #16]
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	220a      	movs	r2, #10
 8005ec8:	4658      	mov	r0, fp
 8005eca:	f000 fa41 	bl	8006350 <__multadd>
 8005ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ed0:	4681      	mov	r9, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8172 	beq.w	80061bc <_dtoa_r+0xb4c>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4629      	mov	r1, r5
 8005edc:	220a      	movs	r2, #10
 8005ede:	4658      	mov	r0, fp
 8005ee0:	f000 fa36 	bl	8006350 <__multadd>
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	4605      	mov	r5, r0
 8005eea:	dc67      	bgt.n	8005fbc <_dtoa_r+0x94c>
 8005eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	dc41      	bgt.n	8005f76 <_dtoa_r+0x906>
 8005ef2:	e063      	b.n	8005fbc <_dtoa_r+0x94c>
 8005ef4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005ef6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005efa:	e746      	b.n	8005d8a <_dtoa_r+0x71a>
 8005efc:	9b07      	ldr	r3, [sp, #28]
 8005efe:	1e5c      	subs	r4, r3, #1
 8005f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	bfbf      	itttt	lt
 8005f06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f0c:	1ae3      	sublt	r3, r4, r3
 8005f0e:	bfb4      	ite	lt
 8005f10:	18d2      	addlt	r2, r2, r3
 8005f12:	1b1c      	subge	r4, r3, r4
 8005f14:	9b07      	ldr	r3, [sp, #28]
 8005f16:	bfbc      	itt	lt
 8005f18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f1a:	2400      	movlt	r4, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bfb5      	itete	lt
 8005f20:	eba8 0603 	sublt.w	r6, r8, r3
 8005f24:	9b07      	ldrge	r3, [sp, #28]
 8005f26:	2300      	movlt	r3, #0
 8005f28:	4646      	movge	r6, r8
 8005f2a:	e730      	b.n	8005d8e <_dtoa_r+0x71e>
 8005f2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f30:	4646      	mov	r6, r8
 8005f32:	e735      	b.n	8005da0 <_dtoa_r+0x730>
 8005f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f36:	e75c      	b.n	8005df2 <_dtoa_r+0x782>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e788      	b.n	8005e4e <_dtoa_r+0x7de>
 8005f3c:	3fe00000 	.word	0x3fe00000
 8005f40:	40240000 	.word	0x40240000
 8005f44:	40140000 	.word	0x40140000
 8005f48:	9b02      	ldr	r3, [sp, #8]
 8005f4a:	e780      	b.n	8005e4e <_dtoa_r+0x7de>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f50:	e782      	b.n	8005e58 <_dtoa_r+0x7e8>
 8005f52:	d099      	beq.n	8005e88 <_dtoa_r+0x818>
 8005f54:	9a08      	ldr	r2, [sp, #32]
 8005f56:	331c      	adds	r3, #28
 8005f58:	441a      	add	r2, r3
 8005f5a:	4498      	add	r8, r3
 8005f5c:	441e      	add	r6, r3
 8005f5e:	9208      	str	r2, [sp, #32]
 8005f60:	e792      	b.n	8005e88 <_dtoa_r+0x818>
 8005f62:	4603      	mov	r3, r0
 8005f64:	e7f6      	b.n	8005f54 <_dtoa_r+0x8e4>
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	9704      	str	r7, [sp, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dc20      	bgt.n	8005fb0 <_dtoa_r+0x940>
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	dd1e      	ble.n	8005fb4 <_dtoa_r+0x944>
 8005f76:	9b00      	ldr	r3, [sp, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f47f aec0 	bne.w	8005cfe <_dtoa_r+0x68e>
 8005f7e:	4621      	mov	r1, r4
 8005f80:	2205      	movs	r2, #5
 8005f82:	4658      	mov	r0, fp
 8005f84:	f000 f9e4 	bl	8006350 <__multadd>
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	f000 fbf7 	bl	8006780 <__mcmp>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f77f aeb3 	ble.w	8005cfe <_dtoa_r+0x68e>
 8005f98:	4656      	mov	r6, sl
 8005f9a:	2331      	movs	r3, #49	@ 0x31
 8005f9c:	f806 3b01 	strb.w	r3, [r6], #1
 8005fa0:	9b04      	ldr	r3, [sp, #16]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	e6ae      	b.n	8005d06 <_dtoa_r+0x696>
 8005fa8:	9c07      	ldr	r4, [sp, #28]
 8005faa:	9704      	str	r7, [sp, #16]
 8005fac:	4625      	mov	r5, r4
 8005fae:	e7f3      	b.n	8005f98 <_dtoa_r+0x928>
 8005fb0:	9b07      	ldr	r3, [sp, #28]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 8104 	beq.w	80061c4 <_dtoa_r+0xb54>
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	dd05      	ble.n	8005fcc <_dtoa_r+0x95c>
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	4632      	mov	r2, r6
 8005fc4:	4658      	mov	r0, fp
 8005fc6:	f000 fb6f 	bl	80066a8 <__lshift>
 8005fca:	4605      	mov	r5, r0
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d05a      	beq.n	8006088 <_dtoa_r+0xa18>
 8005fd2:	6869      	ldr	r1, [r5, #4]
 8005fd4:	4658      	mov	r0, fp
 8005fd6:	f000 f959 	bl	800628c <_Balloc>
 8005fda:	4606      	mov	r6, r0
 8005fdc:	b928      	cbnz	r0, 8005fea <_dtoa_r+0x97a>
 8005fde:	4b84      	ldr	r3, [pc, #528]	@ (80061f0 <_dtoa_r+0xb80>)
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fe6:	f7ff bb5a 	b.w	800569e <_dtoa_r+0x2e>
 8005fea:	692a      	ldr	r2, [r5, #16]
 8005fec:	3202      	adds	r2, #2
 8005fee:	0092      	lsls	r2, r2, #2
 8005ff0:	f105 010c 	add.w	r1, r5, #12
 8005ff4:	300c      	adds	r0, #12
 8005ff6:	f001 f8bf 	bl	8007178 <memcpy>
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4658      	mov	r0, fp
 8006000:	f000 fb52 	bl	80066a8 <__lshift>
 8006004:	f10a 0301 	add.w	r3, sl, #1
 8006008:	9307      	str	r3, [sp, #28]
 800600a:	9b00      	ldr	r3, [sp, #0]
 800600c:	4453      	add	r3, sl
 800600e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006010:	9b02      	ldr	r3, [sp, #8]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	462f      	mov	r7, r5
 8006018:	930a      	str	r3, [sp, #40]	@ 0x28
 800601a:	4605      	mov	r5, r0
 800601c:	9b07      	ldr	r3, [sp, #28]
 800601e:	4621      	mov	r1, r4
 8006020:	3b01      	subs	r3, #1
 8006022:	4648      	mov	r0, r9
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	f7ff fa9a 	bl	800555e <quorem>
 800602a:	4639      	mov	r1, r7
 800602c:	9002      	str	r0, [sp, #8]
 800602e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006032:	4648      	mov	r0, r9
 8006034:	f000 fba4 	bl	8006780 <__mcmp>
 8006038:	462a      	mov	r2, r5
 800603a:	9008      	str	r0, [sp, #32]
 800603c:	4621      	mov	r1, r4
 800603e:	4658      	mov	r0, fp
 8006040:	f000 fbba 	bl	80067b8 <__mdiff>
 8006044:	68c2      	ldr	r2, [r0, #12]
 8006046:	4606      	mov	r6, r0
 8006048:	bb02      	cbnz	r2, 800608c <_dtoa_r+0xa1c>
 800604a:	4601      	mov	r1, r0
 800604c:	4648      	mov	r0, r9
 800604e:	f000 fb97 	bl	8006780 <__mcmp>
 8006052:	4602      	mov	r2, r0
 8006054:	4631      	mov	r1, r6
 8006056:	4658      	mov	r0, fp
 8006058:	920e      	str	r2, [sp, #56]	@ 0x38
 800605a:	f000 f957 	bl	800630c <_Bfree>
 800605e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006062:	9e07      	ldr	r6, [sp, #28]
 8006064:	ea43 0102 	orr.w	r1, r3, r2
 8006068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800606a:	4319      	orrs	r1, r3
 800606c:	d110      	bne.n	8006090 <_dtoa_r+0xa20>
 800606e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006072:	d029      	beq.n	80060c8 <_dtoa_r+0xa58>
 8006074:	9b08      	ldr	r3, [sp, #32]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dd02      	ble.n	8006080 <_dtoa_r+0xa10>
 800607a:	9b02      	ldr	r3, [sp, #8]
 800607c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006080:	9b00      	ldr	r3, [sp, #0]
 8006082:	f883 8000 	strb.w	r8, [r3]
 8006086:	e63f      	b.n	8005d08 <_dtoa_r+0x698>
 8006088:	4628      	mov	r0, r5
 800608a:	e7bb      	b.n	8006004 <_dtoa_r+0x994>
 800608c:	2201      	movs	r2, #1
 800608e:	e7e1      	b.n	8006054 <_dtoa_r+0x9e4>
 8006090:	9b08      	ldr	r3, [sp, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	db04      	blt.n	80060a0 <_dtoa_r+0xa30>
 8006096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006098:	430b      	orrs	r3, r1
 800609a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800609c:	430b      	orrs	r3, r1
 800609e:	d120      	bne.n	80060e2 <_dtoa_r+0xa72>
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	dded      	ble.n	8006080 <_dtoa_r+0xa10>
 80060a4:	4649      	mov	r1, r9
 80060a6:	2201      	movs	r2, #1
 80060a8:	4658      	mov	r0, fp
 80060aa:	f000 fafd 	bl	80066a8 <__lshift>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4681      	mov	r9, r0
 80060b2:	f000 fb65 	bl	8006780 <__mcmp>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	dc03      	bgt.n	80060c2 <_dtoa_r+0xa52>
 80060ba:	d1e1      	bne.n	8006080 <_dtoa_r+0xa10>
 80060bc:	f018 0f01 	tst.w	r8, #1
 80060c0:	d0de      	beq.n	8006080 <_dtoa_r+0xa10>
 80060c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060c6:	d1d8      	bne.n	800607a <_dtoa_r+0xa0a>
 80060c8:	9a00      	ldr	r2, [sp, #0]
 80060ca:	2339      	movs	r3, #57	@ 0x39
 80060cc:	7013      	strb	r3, [r2, #0]
 80060ce:	4633      	mov	r3, r6
 80060d0:	461e      	mov	r6, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060d8:	2a39      	cmp	r2, #57	@ 0x39
 80060da:	d052      	beq.n	8006182 <_dtoa_r+0xb12>
 80060dc:	3201      	adds	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	e612      	b.n	8005d08 <_dtoa_r+0x698>
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	dd07      	ble.n	80060f6 <_dtoa_r+0xa86>
 80060e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060ea:	d0ed      	beq.n	80060c8 <_dtoa_r+0xa58>
 80060ec:	9a00      	ldr	r2, [sp, #0]
 80060ee:	f108 0301 	add.w	r3, r8, #1
 80060f2:	7013      	strb	r3, [r2, #0]
 80060f4:	e608      	b.n	8005d08 <_dtoa_r+0x698>
 80060f6:	9b07      	ldr	r3, [sp, #28]
 80060f8:	9a07      	ldr	r2, [sp, #28]
 80060fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80060fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006100:	4293      	cmp	r3, r2
 8006102:	d028      	beq.n	8006156 <_dtoa_r+0xae6>
 8006104:	4649      	mov	r1, r9
 8006106:	2300      	movs	r3, #0
 8006108:	220a      	movs	r2, #10
 800610a:	4658      	mov	r0, fp
 800610c:	f000 f920 	bl	8006350 <__multadd>
 8006110:	42af      	cmp	r7, r5
 8006112:	4681      	mov	r9, r0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	f04f 020a 	mov.w	r2, #10
 800611c:	4639      	mov	r1, r7
 800611e:	4658      	mov	r0, fp
 8006120:	d107      	bne.n	8006132 <_dtoa_r+0xac2>
 8006122:	f000 f915 	bl	8006350 <__multadd>
 8006126:	4607      	mov	r7, r0
 8006128:	4605      	mov	r5, r0
 800612a:	9b07      	ldr	r3, [sp, #28]
 800612c:	3301      	adds	r3, #1
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	e774      	b.n	800601c <_dtoa_r+0x9ac>
 8006132:	f000 f90d 	bl	8006350 <__multadd>
 8006136:	4629      	mov	r1, r5
 8006138:	4607      	mov	r7, r0
 800613a:	2300      	movs	r3, #0
 800613c:	220a      	movs	r2, #10
 800613e:	4658      	mov	r0, fp
 8006140:	f000 f906 	bl	8006350 <__multadd>
 8006144:	4605      	mov	r5, r0
 8006146:	e7f0      	b.n	800612a <_dtoa_r+0xaba>
 8006148:	9b00      	ldr	r3, [sp, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfcc      	ite	gt
 800614e:	461e      	movgt	r6, r3
 8006150:	2601      	movle	r6, #1
 8006152:	4456      	add	r6, sl
 8006154:	2700      	movs	r7, #0
 8006156:	4649      	mov	r1, r9
 8006158:	2201      	movs	r2, #1
 800615a:	4658      	mov	r0, fp
 800615c:	f000 faa4 	bl	80066a8 <__lshift>
 8006160:	4621      	mov	r1, r4
 8006162:	4681      	mov	r9, r0
 8006164:	f000 fb0c 	bl	8006780 <__mcmp>
 8006168:	2800      	cmp	r0, #0
 800616a:	dcb0      	bgt.n	80060ce <_dtoa_r+0xa5e>
 800616c:	d102      	bne.n	8006174 <_dtoa_r+0xb04>
 800616e:	f018 0f01 	tst.w	r8, #1
 8006172:	d1ac      	bne.n	80060ce <_dtoa_r+0xa5e>
 8006174:	4633      	mov	r3, r6
 8006176:	461e      	mov	r6, r3
 8006178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800617c:	2a30      	cmp	r2, #48	@ 0x30
 800617e:	d0fa      	beq.n	8006176 <_dtoa_r+0xb06>
 8006180:	e5c2      	b.n	8005d08 <_dtoa_r+0x698>
 8006182:	459a      	cmp	sl, r3
 8006184:	d1a4      	bne.n	80060d0 <_dtoa_r+0xa60>
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	3301      	adds	r3, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	2331      	movs	r3, #49	@ 0x31
 800618e:	f88a 3000 	strb.w	r3, [sl]
 8006192:	e5b9      	b.n	8005d08 <_dtoa_r+0x698>
 8006194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006196:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061f4 <_dtoa_r+0xb84>
 800619a:	b11b      	cbz	r3, 80061a4 <_dtoa_r+0xb34>
 800619c:	f10a 0308 	add.w	r3, sl, #8
 80061a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4650      	mov	r0, sl
 80061a6:	b019      	add	sp, #100	@ 0x64
 80061a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	f77f ae37 	ble.w	8005e22 <_dtoa_r+0x7b2>
 80061b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b8:	2001      	movs	r0, #1
 80061ba:	e655      	b.n	8005e68 <_dtoa_r+0x7f8>
 80061bc:	9b00      	ldr	r3, [sp, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f77f aed6 	ble.w	8005f70 <_dtoa_r+0x900>
 80061c4:	4656      	mov	r6, sl
 80061c6:	4621      	mov	r1, r4
 80061c8:	4648      	mov	r0, r9
 80061ca:	f7ff f9c8 	bl	800555e <quorem>
 80061ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061d2:	f806 8b01 	strb.w	r8, [r6], #1
 80061d6:	9b00      	ldr	r3, [sp, #0]
 80061d8:	eba6 020a 	sub.w	r2, r6, sl
 80061dc:	4293      	cmp	r3, r2
 80061de:	ddb3      	ble.n	8006148 <_dtoa_r+0xad8>
 80061e0:	4649      	mov	r1, r9
 80061e2:	2300      	movs	r3, #0
 80061e4:	220a      	movs	r2, #10
 80061e6:	4658      	mov	r0, fp
 80061e8:	f000 f8b2 	bl	8006350 <__multadd>
 80061ec:	4681      	mov	r9, r0
 80061ee:	e7ea      	b.n	80061c6 <_dtoa_r+0xb56>
 80061f0:	08007648 	.word	0x08007648
 80061f4:	080075cc 	.word	0x080075cc

080061f8 <_free_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4605      	mov	r5, r0
 80061fc:	2900      	cmp	r1, #0
 80061fe:	d041      	beq.n	8006284 <_free_r+0x8c>
 8006200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006204:	1f0c      	subs	r4, r1, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	bfb8      	it	lt
 800620a:	18e4      	addlt	r4, r4, r3
 800620c:	f7fe fb7c 	bl	8004908 <__malloc_lock>
 8006210:	4a1d      	ldr	r2, [pc, #116]	@ (8006288 <_free_r+0x90>)
 8006212:	6813      	ldr	r3, [r2, #0]
 8006214:	b933      	cbnz	r3, 8006224 <_free_r+0x2c>
 8006216:	6063      	str	r3, [r4, #4]
 8006218:	6014      	str	r4, [r2, #0]
 800621a:	4628      	mov	r0, r5
 800621c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006220:	f7fe bb78 	b.w	8004914 <__malloc_unlock>
 8006224:	42a3      	cmp	r3, r4
 8006226:	d908      	bls.n	800623a <_free_r+0x42>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	1821      	adds	r1, r4, r0
 800622c:	428b      	cmp	r3, r1
 800622e:	bf01      	itttt	eq
 8006230:	6819      	ldreq	r1, [r3, #0]
 8006232:	685b      	ldreq	r3, [r3, #4]
 8006234:	1809      	addeq	r1, r1, r0
 8006236:	6021      	streq	r1, [r4, #0]
 8006238:	e7ed      	b.n	8006216 <_free_r+0x1e>
 800623a:	461a      	mov	r2, r3
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	b10b      	cbz	r3, 8006244 <_free_r+0x4c>
 8006240:	42a3      	cmp	r3, r4
 8006242:	d9fa      	bls.n	800623a <_free_r+0x42>
 8006244:	6811      	ldr	r1, [r2, #0]
 8006246:	1850      	adds	r0, r2, r1
 8006248:	42a0      	cmp	r0, r4
 800624a:	d10b      	bne.n	8006264 <_free_r+0x6c>
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	4401      	add	r1, r0
 8006250:	1850      	adds	r0, r2, r1
 8006252:	4283      	cmp	r3, r0
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	d1e0      	bne.n	800621a <_free_r+0x22>
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	6053      	str	r3, [r2, #4]
 800625e:	4408      	add	r0, r1
 8006260:	6010      	str	r0, [r2, #0]
 8006262:	e7da      	b.n	800621a <_free_r+0x22>
 8006264:	d902      	bls.n	800626c <_free_r+0x74>
 8006266:	230c      	movs	r3, #12
 8006268:	602b      	str	r3, [r5, #0]
 800626a:	e7d6      	b.n	800621a <_free_r+0x22>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	1821      	adds	r1, r4, r0
 8006270:	428b      	cmp	r3, r1
 8006272:	bf04      	itt	eq
 8006274:	6819      	ldreq	r1, [r3, #0]
 8006276:	685b      	ldreq	r3, [r3, #4]
 8006278:	6063      	str	r3, [r4, #4]
 800627a:	bf04      	itt	eq
 800627c:	1809      	addeq	r1, r1, r0
 800627e:	6021      	streq	r1, [r4, #0]
 8006280:	6054      	str	r4, [r2, #4]
 8006282:	e7ca      	b.n	800621a <_free_r+0x22>
 8006284:	bd38      	pop	{r3, r4, r5, pc}
 8006286:	bf00      	nop
 8006288:	200003d4 	.word	0x200003d4

0800628c <_Balloc>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	69c6      	ldr	r6, [r0, #28]
 8006290:	4604      	mov	r4, r0
 8006292:	460d      	mov	r5, r1
 8006294:	b976      	cbnz	r6, 80062b4 <_Balloc+0x28>
 8006296:	2010      	movs	r0, #16
 8006298:	f7fe fa8c 	bl	80047b4 <malloc>
 800629c:	4602      	mov	r2, r0
 800629e:	61e0      	str	r0, [r4, #28]
 80062a0:	b920      	cbnz	r0, 80062ac <_Balloc+0x20>
 80062a2:	4b18      	ldr	r3, [pc, #96]	@ (8006304 <_Balloc+0x78>)
 80062a4:	4818      	ldr	r0, [pc, #96]	@ (8006308 <_Balloc+0x7c>)
 80062a6:	216b      	movs	r1, #107	@ 0x6b
 80062a8:	f000 ff74 	bl	8007194 <__assert_func>
 80062ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062b0:	6006      	str	r6, [r0, #0]
 80062b2:	60c6      	str	r6, [r0, #12]
 80062b4:	69e6      	ldr	r6, [r4, #28]
 80062b6:	68f3      	ldr	r3, [r6, #12]
 80062b8:	b183      	cbz	r3, 80062dc <_Balloc+0x50>
 80062ba:	69e3      	ldr	r3, [r4, #28]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062c2:	b9b8      	cbnz	r0, 80062f4 <_Balloc+0x68>
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f605 	lsl.w	r6, r1, r5
 80062ca:	1d72      	adds	r2, r6, #5
 80062cc:	0092      	lsls	r2, r2, #2
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 ff7e 	bl	80071d0 <_calloc_r>
 80062d4:	b160      	cbz	r0, 80062f0 <_Balloc+0x64>
 80062d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062da:	e00e      	b.n	80062fa <_Balloc+0x6e>
 80062dc:	2221      	movs	r2, #33	@ 0x21
 80062de:	2104      	movs	r1, #4
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 ff75 	bl	80071d0 <_calloc_r>
 80062e6:	69e3      	ldr	r3, [r4, #28]
 80062e8:	60f0      	str	r0, [r6, #12]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e4      	bne.n	80062ba <_Balloc+0x2e>
 80062f0:	2000      	movs	r0, #0
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	6802      	ldr	r2, [r0, #0]
 80062f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062fa:	2300      	movs	r3, #0
 80062fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006300:	e7f7      	b.n	80062f2 <_Balloc+0x66>
 8006302:	bf00      	nop
 8006304:	080075d9 	.word	0x080075d9
 8006308:	08007659 	.word	0x08007659

0800630c <_Bfree>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	69c6      	ldr	r6, [r0, #28]
 8006310:	4605      	mov	r5, r0
 8006312:	460c      	mov	r4, r1
 8006314:	b976      	cbnz	r6, 8006334 <_Bfree+0x28>
 8006316:	2010      	movs	r0, #16
 8006318:	f7fe fa4c 	bl	80047b4 <malloc>
 800631c:	4602      	mov	r2, r0
 800631e:	61e8      	str	r0, [r5, #28]
 8006320:	b920      	cbnz	r0, 800632c <_Bfree+0x20>
 8006322:	4b09      	ldr	r3, [pc, #36]	@ (8006348 <_Bfree+0x3c>)
 8006324:	4809      	ldr	r0, [pc, #36]	@ (800634c <_Bfree+0x40>)
 8006326:	218f      	movs	r1, #143	@ 0x8f
 8006328:	f000 ff34 	bl	8007194 <__assert_func>
 800632c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006330:	6006      	str	r6, [r0, #0]
 8006332:	60c6      	str	r6, [r0, #12]
 8006334:	b13c      	cbz	r4, 8006346 <_Bfree+0x3a>
 8006336:	69eb      	ldr	r3, [r5, #28]
 8006338:	6862      	ldr	r2, [r4, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006340:	6021      	str	r1, [r4, #0]
 8006342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	080075d9 	.word	0x080075d9
 800634c:	08007659 	.word	0x08007659

08006350 <__multadd>:
 8006350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	690d      	ldr	r5, [r1, #16]
 8006356:	4607      	mov	r7, r0
 8006358:	460c      	mov	r4, r1
 800635a:	461e      	mov	r6, r3
 800635c:	f101 0c14 	add.w	ip, r1, #20
 8006360:	2000      	movs	r0, #0
 8006362:	f8dc 3000 	ldr.w	r3, [ip]
 8006366:	b299      	uxth	r1, r3
 8006368:	fb02 6101 	mla	r1, r2, r1, r6
 800636c:	0c1e      	lsrs	r6, r3, #16
 800636e:	0c0b      	lsrs	r3, r1, #16
 8006370:	fb02 3306 	mla	r3, r2, r6, r3
 8006374:	b289      	uxth	r1, r1
 8006376:	3001      	adds	r0, #1
 8006378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800637c:	4285      	cmp	r5, r0
 800637e:	f84c 1b04 	str.w	r1, [ip], #4
 8006382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006386:	dcec      	bgt.n	8006362 <__multadd+0x12>
 8006388:	b30e      	cbz	r6, 80063ce <__multadd+0x7e>
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	42ab      	cmp	r3, r5
 800638e:	dc19      	bgt.n	80063c4 <__multadd+0x74>
 8006390:	6861      	ldr	r1, [r4, #4]
 8006392:	4638      	mov	r0, r7
 8006394:	3101      	adds	r1, #1
 8006396:	f7ff ff79 	bl	800628c <_Balloc>
 800639a:	4680      	mov	r8, r0
 800639c:	b928      	cbnz	r0, 80063aa <__multadd+0x5a>
 800639e:	4602      	mov	r2, r0
 80063a0:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <__multadd+0x84>)
 80063a2:	480d      	ldr	r0, [pc, #52]	@ (80063d8 <__multadd+0x88>)
 80063a4:	21ba      	movs	r1, #186	@ 0xba
 80063a6:	f000 fef5 	bl	8007194 <__assert_func>
 80063aa:	6922      	ldr	r2, [r4, #16]
 80063ac:	3202      	adds	r2, #2
 80063ae:	f104 010c 	add.w	r1, r4, #12
 80063b2:	0092      	lsls	r2, r2, #2
 80063b4:	300c      	adds	r0, #12
 80063b6:	f000 fedf 	bl	8007178 <memcpy>
 80063ba:	4621      	mov	r1, r4
 80063bc:	4638      	mov	r0, r7
 80063be:	f7ff ffa5 	bl	800630c <_Bfree>
 80063c2:	4644      	mov	r4, r8
 80063c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063c8:	3501      	adds	r5, #1
 80063ca:	615e      	str	r6, [r3, #20]
 80063cc:	6125      	str	r5, [r4, #16]
 80063ce:	4620      	mov	r0, r4
 80063d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d4:	08007648 	.word	0x08007648
 80063d8:	08007659 	.word	0x08007659

080063dc <__hi0bits>:
 80063dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063e0:	4603      	mov	r3, r0
 80063e2:	bf36      	itet	cc
 80063e4:	0403      	lslcc	r3, r0, #16
 80063e6:	2000      	movcs	r0, #0
 80063e8:	2010      	movcc	r0, #16
 80063ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063ee:	bf3c      	itt	cc
 80063f0:	021b      	lslcc	r3, r3, #8
 80063f2:	3008      	addcc	r0, #8
 80063f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f8:	bf3c      	itt	cc
 80063fa:	011b      	lslcc	r3, r3, #4
 80063fc:	3004      	addcc	r0, #4
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006402:	bf3c      	itt	cc
 8006404:	009b      	lslcc	r3, r3, #2
 8006406:	3002      	addcc	r0, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	db05      	blt.n	8006418 <__hi0bits+0x3c>
 800640c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006410:	f100 0001 	add.w	r0, r0, #1
 8006414:	bf08      	it	eq
 8006416:	2020      	moveq	r0, #32
 8006418:	4770      	bx	lr

0800641a <__lo0bits>:
 800641a:	6803      	ldr	r3, [r0, #0]
 800641c:	4602      	mov	r2, r0
 800641e:	f013 0007 	ands.w	r0, r3, #7
 8006422:	d00b      	beq.n	800643c <__lo0bits+0x22>
 8006424:	07d9      	lsls	r1, r3, #31
 8006426:	d421      	bmi.n	800646c <__lo0bits+0x52>
 8006428:	0798      	lsls	r0, r3, #30
 800642a:	bf49      	itett	mi
 800642c:	085b      	lsrmi	r3, r3, #1
 800642e:	089b      	lsrpl	r3, r3, #2
 8006430:	2001      	movmi	r0, #1
 8006432:	6013      	strmi	r3, [r2, #0]
 8006434:	bf5c      	itt	pl
 8006436:	6013      	strpl	r3, [r2, #0]
 8006438:	2002      	movpl	r0, #2
 800643a:	4770      	bx	lr
 800643c:	b299      	uxth	r1, r3
 800643e:	b909      	cbnz	r1, 8006444 <__lo0bits+0x2a>
 8006440:	0c1b      	lsrs	r3, r3, #16
 8006442:	2010      	movs	r0, #16
 8006444:	b2d9      	uxtb	r1, r3
 8006446:	b909      	cbnz	r1, 800644c <__lo0bits+0x32>
 8006448:	3008      	adds	r0, #8
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	0719      	lsls	r1, r3, #28
 800644e:	bf04      	itt	eq
 8006450:	091b      	lsreq	r3, r3, #4
 8006452:	3004      	addeq	r0, #4
 8006454:	0799      	lsls	r1, r3, #30
 8006456:	bf04      	itt	eq
 8006458:	089b      	lsreq	r3, r3, #2
 800645a:	3002      	addeq	r0, #2
 800645c:	07d9      	lsls	r1, r3, #31
 800645e:	d403      	bmi.n	8006468 <__lo0bits+0x4e>
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	f100 0001 	add.w	r0, r0, #1
 8006466:	d003      	beq.n	8006470 <__lo0bits+0x56>
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	4770      	bx	lr
 800646c:	2000      	movs	r0, #0
 800646e:	4770      	bx	lr
 8006470:	2020      	movs	r0, #32
 8006472:	4770      	bx	lr

08006474 <__i2b>:
 8006474:	b510      	push	{r4, lr}
 8006476:	460c      	mov	r4, r1
 8006478:	2101      	movs	r1, #1
 800647a:	f7ff ff07 	bl	800628c <_Balloc>
 800647e:	4602      	mov	r2, r0
 8006480:	b928      	cbnz	r0, 800648e <__i2b+0x1a>
 8006482:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <__i2b+0x24>)
 8006484:	4805      	ldr	r0, [pc, #20]	@ (800649c <__i2b+0x28>)
 8006486:	f240 1145 	movw	r1, #325	@ 0x145
 800648a:	f000 fe83 	bl	8007194 <__assert_func>
 800648e:	2301      	movs	r3, #1
 8006490:	6144      	str	r4, [r0, #20]
 8006492:	6103      	str	r3, [r0, #16]
 8006494:	bd10      	pop	{r4, pc}
 8006496:	bf00      	nop
 8006498:	08007648 	.word	0x08007648
 800649c:	08007659 	.word	0x08007659

080064a0 <__multiply>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	4614      	mov	r4, r2
 80064a6:	690a      	ldr	r2, [r1, #16]
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	bfa8      	it	ge
 80064ae:	4623      	movge	r3, r4
 80064b0:	460f      	mov	r7, r1
 80064b2:	bfa4      	itt	ge
 80064b4:	460c      	movge	r4, r1
 80064b6:	461f      	movge	r7, r3
 80064b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80064bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80064c0:	68a3      	ldr	r3, [r4, #8]
 80064c2:	6861      	ldr	r1, [r4, #4]
 80064c4:	eb0a 0609 	add.w	r6, sl, r9
 80064c8:	42b3      	cmp	r3, r6
 80064ca:	b085      	sub	sp, #20
 80064cc:	bfb8      	it	lt
 80064ce:	3101      	addlt	r1, #1
 80064d0:	f7ff fedc 	bl	800628c <_Balloc>
 80064d4:	b930      	cbnz	r0, 80064e4 <__multiply+0x44>
 80064d6:	4602      	mov	r2, r0
 80064d8:	4b44      	ldr	r3, [pc, #272]	@ (80065ec <__multiply+0x14c>)
 80064da:	4845      	ldr	r0, [pc, #276]	@ (80065f0 <__multiply+0x150>)
 80064dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064e0:	f000 fe58 	bl	8007194 <__assert_func>
 80064e4:	f100 0514 	add.w	r5, r0, #20
 80064e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064ec:	462b      	mov	r3, r5
 80064ee:	2200      	movs	r2, #0
 80064f0:	4543      	cmp	r3, r8
 80064f2:	d321      	bcc.n	8006538 <__multiply+0x98>
 80064f4:	f107 0114 	add.w	r1, r7, #20
 80064f8:	f104 0214 	add.w	r2, r4, #20
 80064fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006500:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006504:	9302      	str	r3, [sp, #8]
 8006506:	1b13      	subs	r3, r2, r4
 8006508:	3b15      	subs	r3, #21
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	3304      	adds	r3, #4
 8006510:	f104 0715 	add.w	r7, r4, #21
 8006514:	42ba      	cmp	r2, r7
 8006516:	bf38      	it	cc
 8006518:	2304      	movcc	r3, #4
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	9b02      	ldr	r3, [sp, #8]
 800651e:	9103      	str	r1, [sp, #12]
 8006520:	428b      	cmp	r3, r1
 8006522:	d80c      	bhi.n	800653e <__multiply+0x9e>
 8006524:	2e00      	cmp	r6, #0
 8006526:	dd03      	ble.n	8006530 <__multiply+0x90>
 8006528:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800652c:	2b00      	cmp	r3, #0
 800652e:	d05b      	beq.n	80065e8 <__multiply+0x148>
 8006530:	6106      	str	r6, [r0, #16]
 8006532:	b005      	add	sp, #20
 8006534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006538:	f843 2b04 	str.w	r2, [r3], #4
 800653c:	e7d8      	b.n	80064f0 <__multiply+0x50>
 800653e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006542:	f1ba 0f00 	cmp.w	sl, #0
 8006546:	d024      	beq.n	8006592 <__multiply+0xf2>
 8006548:	f104 0e14 	add.w	lr, r4, #20
 800654c:	46a9      	mov	r9, r5
 800654e:	f04f 0c00 	mov.w	ip, #0
 8006552:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006556:	f8d9 3000 	ldr.w	r3, [r9]
 800655a:	fa1f fb87 	uxth.w	fp, r7
 800655e:	b29b      	uxth	r3, r3
 8006560:	fb0a 330b 	mla	r3, sl, fp, r3
 8006564:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006568:	f8d9 7000 	ldr.w	r7, [r9]
 800656c:	4463      	add	r3, ip
 800656e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006572:	fb0a c70b 	mla	r7, sl, fp, ip
 8006576:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800657a:	b29b      	uxth	r3, r3
 800657c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006580:	4572      	cmp	r2, lr
 8006582:	f849 3b04 	str.w	r3, [r9], #4
 8006586:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800658a:	d8e2      	bhi.n	8006552 <__multiply+0xb2>
 800658c:	9b01      	ldr	r3, [sp, #4]
 800658e:	f845 c003 	str.w	ip, [r5, r3]
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006598:	3104      	adds	r1, #4
 800659a:	f1b9 0f00 	cmp.w	r9, #0
 800659e:	d021      	beq.n	80065e4 <__multiply+0x144>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	f104 0c14 	add.w	ip, r4, #20
 80065a6:	46ae      	mov	lr, r5
 80065a8:	f04f 0a00 	mov.w	sl, #0
 80065ac:	f8bc b000 	ldrh.w	fp, [ip]
 80065b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80065b4:	fb09 770b 	mla	r7, r9, fp, r7
 80065b8:	4457      	add	r7, sl
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80065c0:	f84e 3b04 	str.w	r3, [lr], #4
 80065c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065cc:	f8be 3000 	ldrh.w	r3, [lr]
 80065d0:	fb09 330a 	mla	r3, r9, sl, r3
 80065d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80065d8:	4562      	cmp	r2, ip
 80065da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065de:	d8e5      	bhi.n	80065ac <__multiply+0x10c>
 80065e0:	9f01      	ldr	r7, [sp, #4]
 80065e2:	51eb      	str	r3, [r5, r7]
 80065e4:	3504      	adds	r5, #4
 80065e6:	e799      	b.n	800651c <__multiply+0x7c>
 80065e8:	3e01      	subs	r6, #1
 80065ea:	e79b      	b.n	8006524 <__multiply+0x84>
 80065ec:	08007648 	.word	0x08007648
 80065f0:	08007659 	.word	0x08007659

080065f4 <__pow5mult>:
 80065f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f8:	4615      	mov	r5, r2
 80065fa:	f012 0203 	ands.w	r2, r2, #3
 80065fe:	4607      	mov	r7, r0
 8006600:	460e      	mov	r6, r1
 8006602:	d007      	beq.n	8006614 <__pow5mult+0x20>
 8006604:	4c25      	ldr	r4, [pc, #148]	@ (800669c <__pow5mult+0xa8>)
 8006606:	3a01      	subs	r2, #1
 8006608:	2300      	movs	r3, #0
 800660a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800660e:	f7ff fe9f 	bl	8006350 <__multadd>
 8006612:	4606      	mov	r6, r0
 8006614:	10ad      	asrs	r5, r5, #2
 8006616:	d03d      	beq.n	8006694 <__pow5mult+0xa0>
 8006618:	69fc      	ldr	r4, [r7, #28]
 800661a:	b97c      	cbnz	r4, 800663c <__pow5mult+0x48>
 800661c:	2010      	movs	r0, #16
 800661e:	f7fe f8c9 	bl	80047b4 <malloc>
 8006622:	4602      	mov	r2, r0
 8006624:	61f8      	str	r0, [r7, #28]
 8006626:	b928      	cbnz	r0, 8006634 <__pow5mult+0x40>
 8006628:	4b1d      	ldr	r3, [pc, #116]	@ (80066a0 <__pow5mult+0xac>)
 800662a:	481e      	ldr	r0, [pc, #120]	@ (80066a4 <__pow5mult+0xb0>)
 800662c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006630:	f000 fdb0 	bl	8007194 <__assert_func>
 8006634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006638:	6004      	str	r4, [r0, #0]
 800663a:	60c4      	str	r4, [r0, #12]
 800663c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006644:	b94c      	cbnz	r4, 800665a <__pow5mult+0x66>
 8006646:	f240 2171 	movw	r1, #625	@ 0x271
 800664a:	4638      	mov	r0, r7
 800664c:	f7ff ff12 	bl	8006474 <__i2b>
 8006650:	2300      	movs	r3, #0
 8006652:	f8c8 0008 	str.w	r0, [r8, #8]
 8006656:	4604      	mov	r4, r0
 8006658:	6003      	str	r3, [r0, #0]
 800665a:	f04f 0900 	mov.w	r9, #0
 800665e:	07eb      	lsls	r3, r5, #31
 8006660:	d50a      	bpl.n	8006678 <__pow5mult+0x84>
 8006662:	4631      	mov	r1, r6
 8006664:	4622      	mov	r2, r4
 8006666:	4638      	mov	r0, r7
 8006668:	f7ff ff1a 	bl	80064a0 <__multiply>
 800666c:	4631      	mov	r1, r6
 800666e:	4680      	mov	r8, r0
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff fe4b 	bl	800630c <_Bfree>
 8006676:	4646      	mov	r6, r8
 8006678:	106d      	asrs	r5, r5, #1
 800667a:	d00b      	beq.n	8006694 <__pow5mult+0xa0>
 800667c:	6820      	ldr	r0, [r4, #0]
 800667e:	b938      	cbnz	r0, 8006690 <__pow5mult+0x9c>
 8006680:	4622      	mov	r2, r4
 8006682:	4621      	mov	r1, r4
 8006684:	4638      	mov	r0, r7
 8006686:	f7ff ff0b 	bl	80064a0 <__multiply>
 800668a:	6020      	str	r0, [r4, #0]
 800668c:	f8c0 9000 	str.w	r9, [r0]
 8006690:	4604      	mov	r4, r0
 8006692:	e7e4      	b.n	800665e <__pow5mult+0x6a>
 8006694:	4630      	mov	r0, r6
 8006696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669a:	bf00      	nop
 800669c:	080076b4 	.word	0x080076b4
 80066a0:	080075d9 	.word	0x080075d9
 80066a4:	08007659 	.word	0x08007659

080066a8 <__lshift>:
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	460c      	mov	r4, r1
 80066ae:	6849      	ldr	r1, [r1, #4]
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066b6:	68a3      	ldr	r3, [r4, #8]
 80066b8:	4607      	mov	r7, r0
 80066ba:	4691      	mov	r9, r2
 80066bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066c0:	f108 0601 	add.w	r6, r8, #1
 80066c4:	42b3      	cmp	r3, r6
 80066c6:	db0b      	blt.n	80066e0 <__lshift+0x38>
 80066c8:	4638      	mov	r0, r7
 80066ca:	f7ff fddf 	bl	800628c <_Balloc>
 80066ce:	4605      	mov	r5, r0
 80066d0:	b948      	cbnz	r0, 80066e6 <__lshift+0x3e>
 80066d2:	4602      	mov	r2, r0
 80066d4:	4b28      	ldr	r3, [pc, #160]	@ (8006778 <__lshift+0xd0>)
 80066d6:	4829      	ldr	r0, [pc, #164]	@ (800677c <__lshift+0xd4>)
 80066d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80066dc:	f000 fd5a 	bl	8007194 <__assert_func>
 80066e0:	3101      	adds	r1, #1
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	e7ee      	b.n	80066c4 <__lshift+0x1c>
 80066e6:	2300      	movs	r3, #0
 80066e8:	f100 0114 	add.w	r1, r0, #20
 80066ec:	f100 0210 	add.w	r2, r0, #16
 80066f0:	4618      	mov	r0, r3
 80066f2:	4553      	cmp	r3, sl
 80066f4:	db33      	blt.n	800675e <__lshift+0xb6>
 80066f6:	6920      	ldr	r0, [r4, #16]
 80066f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066fc:	f104 0314 	add.w	r3, r4, #20
 8006700:	f019 091f 	ands.w	r9, r9, #31
 8006704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800670c:	d02b      	beq.n	8006766 <__lshift+0xbe>
 800670e:	f1c9 0e20 	rsb	lr, r9, #32
 8006712:	468a      	mov	sl, r1
 8006714:	2200      	movs	r2, #0
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	fa00 f009 	lsl.w	r0, r0, r9
 800671c:	4310      	orrs	r0, r2
 800671e:	f84a 0b04 	str.w	r0, [sl], #4
 8006722:	f853 2b04 	ldr.w	r2, [r3], #4
 8006726:	459c      	cmp	ip, r3
 8006728:	fa22 f20e 	lsr.w	r2, r2, lr
 800672c:	d8f3      	bhi.n	8006716 <__lshift+0x6e>
 800672e:	ebac 0304 	sub.w	r3, ip, r4
 8006732:	3b15      	subs	r3, #21
 8006734:	f023 0303 	bic.w	r3, r3, #3
 8006738:	3304      	adds	r3, #4
 800673a:	f104 0015 	add.w	r0, r4, #21
 800673e:	4584      	cmp	ip, r0
 8006740:	bf38      	it	cc
 8006742:	2304      	movcc	r3, #4
 8006744:	50ca      	str	r2, [r1, r3]
 8006746:	b10a      	cbz	r2, 800674c <__lshift+0xa4>
 8006748:	f108 0602 	add.w	r6, r8, #2
 800674c:	3e01      	subs	r6, #1
 800674e:	4638      	mov	r0, r7
 8006750:	612e      	str	r6, [r5, #16]
 8006752:	4621      	mov	r1, r4
 8006754:	f7ff fdda 	bl	800630c <_Bfree>
 8006758:	4628      	mov	r0, r5
 800675a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006762:	3301      	adds	r3, #1
 8006764:	e7c5      	b.n	80066f2 <__lshift+0x4a>
 8006766:	3904      	subs	r1, #4
 8006768:	f853 2b04 	ldr.w	r2, [r3], #4
 800676c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006770:	459c      	cmp	ip, r3
 8006772:	d8f9      	bhi.n	8006768 <__lshift+0xc0>
 8006774:	e7ea      	b.n	800674c <__lshift+0xa4>
 8006776:	bf00      	nop
 8006778:	08007648 	.word	0x08007648
 800677c:	08007659 	.word	0x08007659

08006780 <__mcmp>:
 8006780:	690a      	ldr	r2, [r1, #16]
 8006782:	4603      	mov	r3, r0
 8006784:	6900      	ldr	r0, [r0, #16]
 8006786:	1a80      	subs	r0, r0, r2
 8006788:	b530      	push	{r4, r5, lr}
 800678a:	d10e      	bne.n	80067aa <__mcmp+0x2a>
 800678c:	3314      	adds	r3, #20
 800678e:	3114      	adds	r1, #20
 8006790:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006794:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800679c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067a0:	4295      	cmp	r5, r2
 80067a2:	d003      	beq.n	80067ac <__mcmp+0x2c>
 80067a4:	d205      	bcs.n	80067b2 <__mcmp+0x32>
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295
 80067aa:	bd30      	pop	{r4, r5, pc}
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	d3f3      	bcc.n	8006798 <__mcmp+0x18>
 80067b0:	e7fb      	b.n	80067aa <__mcmp+0x2a>
 80067b2:	2001      	movs	r0, #1
 80067b4:	e7f9      	b.n	80067aa <__mcmp+0x2a>
	...

080067b8 <__mdiff>:
 80067b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067bc:	4689      	mov	r9, r1
 80067be:	4606      	mov	r6, r0
 80067c0:	4611      	mov	r1, r2
 80067c2:	4648      	mov	r0, r9
 80067c4:	4614      	mov	r4, r2
 80067c6:	f7ff ffdb 	bl	8006780 <__mcmp>
 80067ca:	1e05      	subs	r5, r0, #0
 80067cc:	d112      	bne.n	80067f4 <__mdiff+0x3c>
 80067ce:	4629      	mov	r1, r5
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff fd5b 	bl	800628c <_Balloc>
 80067d6:	4602      	mov	r2, r0
 80067d8:	b928      	cbnz	r0, 80067e6 <__mdiff+0x2e>
 80067da:	4b3f      	ldr	r3, [pc, #252]	@ (80068d8 <__mdiff+0x120>)
 80067dc:	f240 2137 	movw	r1, #567	@ 0x237
 80067e0:	483e      	ldr	r0, [pc, #248]	@ (80068dc <__mdiff+0x124>)
 80067e2:	f000 fcd7 	bl	8007194 <__assert_func>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067ec:	4610      	mov	r0, r2
 80067ee:	b003      	add	sp, #12
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	bfbc      	itt	lt
 80067f6:	464b      	movlt	r3, r9
 80067f8:	46a1      	movlt	r9, r4
 80067fa:	4630      	mov	r0, r6
 80067fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006800:	bfba      	itte	lt
 8006802:	461c      	movlt	r4, r3
 8006804:	2501      	movlt	r5, #1
 8006806:	2500      	movge	r5, #0
 8006808:	f7ff fd40 	bl	800628c <_Balloc>
 800680c:	4602      	mov	r2, r0
 800680e:	b918      	cbnz	r0, 8006818 <__mdiff+0x60>
 8006810:	4b31      	ldr	r3, [pc, #196]	@ (80068d8 <__mdiff+0x120>)
 8006812:	f240 2145 	movw	r1, #581	@ 0x245
 8006816:	e7e3      	b.n	80067e0 <__mdiff+0x28>
 8006818:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800681c:	6926      	ldr	r6, [r4, #16]
 800681e:	60c5      	str	r5, [r0, #12]
 8006820:	f109 0310 	add.w	r3, r9, #16
 8006824:	f109 0514 	add.w	r5, r9, #20
 8006828:	f104 0e14 	add.w	lr, r4, #20
 800682c:	f100 0b14 	add.w	fp, r0, #20
 8006830:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006834:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	46d9      	mov	r9, fp
 800683c:	f04f 0c00 	mov.w	ip, #0
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006846:	f853 af04 	ldr.w	sl, [r3, #4]!
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	fa1f f38a 	uxth.w	r3, sl
 8006850:	4619      	mov	r1, r3
 8006852:	b283      	uxth	r3, r0
 8006854:	1acb      	subs	r3, r1, r3
 8006856:	0c00      	lsrs	r0, r0, #16
 8006858:	4463      	add	r3, ip
 800685a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800685e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006862:	b29b      	uxth	r3, r3
 8006864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006868:	4576      	cmp	r6, lr
 800686a:	f849 3b04 	str.w	r3, [r9], #4
 800686e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006872:	d8e5      	bhi.n	8006840 <__mdiff+0x88>
 8006874:	1b33      	subs	r3, r6, r4
 8006876:	3b15      	subs	r3, #21
 8006878:	f023 0303 	bic.w	r3, r3, #3
 800687c:	3415      	adds	r4, #21
 800687e:	3304      	adds	r3, #4
 8006880:	42a6      	cmp	r6, r4
 8006882:	bf38      	it	cc
 8006884:	2304      	movcc	r3, #4
 8006886:	441d      	add	r5, r3
 8006888:	445b      	add	r3, fp
 800688a:	461e      	mov	r6, r3
 800688c:	462c      	mov	r4, r5
 800688e:	4544      	cmp	r4, r8
 8006890:	d30e      	bcc.n	80068b0 <__mdiff+0xf8>
 8006892:	f108 0103 	add.w	r1, r8, #3
 8006896:	1b49      	subs	r1, r1, r5
 8006898:	f021 0103 	bic.w	r1, r1, #3
 800689c:	3d03      	subs	r5, #3
 800689e:	45a8      	cmp	r8, r5
 80068a0:	bf38      	it	cc
 80068a2:	2100      	movcc	r1, #0
 80068a4:	440b      	add	r3, r1
 80068a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80068aa:	b191      	cbz	r1, 80068d2 <__mdiff+0x11a>
 80068ac:	6117      	str	r7, [r2, #16]
 80068ae:	e79d      	b.n	80067ec <__mdiff+0x34>
 80068b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80068b4:	46e6      	mov	lr, ip
 80068b6:	0c08      	lsrs	r0, r1, #16
 80068b8:	fa1c fc81 	uxtah	ip, ip, r1
 80068bc:	4471      	add	r1, lr
 80068be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80068c2:	b289      	uxth	r1, r1
 80068c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80068c8:	f846 1b04 	str.w	r1, [r6], #4
 80068cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068d0:	e7dd      	b.n	800688e <__mdiff+0xd6>
 80068d2:	3f01      	subs	r7, #1
 80068d4:	e7e7      	b.n	80068a6 <__mdiff+0xee>
 80068d6:	bf00      	nop
 80068d8:	08007648 	.word	0x08007648
 80068dc:	08007659 	.word	0x08007659

080068e0 <__d2b>:
 80068e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068e4:	460f      	mov	r7, r1
 80068e6:	2101      	movs	r1, #1
 80068e8:	ec59 8b10 	vmov	r8, r9, d0
 80068ec:	4616      	mov	r6, r2
 80068ee:	f7ff fccd 	bl	800628c <_Balloc>
 80068f2:	4604      	mov	r4, r0
 80068f4:	b930      	cbnz	r0, 8006904 <__d2b+0x24>
 80068f6:	4602      	mov	r2, r0
 80068f8:	4b23      	ldr	r3, [pc, #140]	@ (8006988 <__d2b+0xa8>)
 80068fa:	4824      	ldr	r0, [pc, #144]	@ (800698c <__d2b+0xac>)
 80068fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8006900:	f000 fc48 	bl	8007194 <__assert_func>
 8006904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800690c:	b10d      	cbz	r5, 8006912 <__d2b+0x32>
 800690e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	f1b8 0300 	subs.w	r3, r8, #0
 8006918:	d023      	beq.n	8006962 <__d2b+0x82>
 800691a:	4668      	mov	r0, sp
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	f7ff fd7c 	bl	800641a <__lo0bits>
 8006922:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006926:	b1d0      	cbz	r0, 800695e <__d2b+0x7e>
 8006928:	f1c0 0320 	rsb	r3, r0, #32
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	430b      	orrs	r3, r1
 8006932:	40c2      	lsrs	r2, r0
 8006934:	6163      	str	r3, [r4, #20]
 8006936:	9201      	str	r2, [sp, #4]
 8006938:	9b01      	ldr	r3, [sp, #4]
 800693a:	61a3      	str	r3, [r4, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	bf0c      	ite	eq
 8006940:	2201      	moveq	r2, #1
 8006942:	2202      	movne	r2, #2
 8006944:	6122      	str	r2, [r4, #16]
 8006946:	b1a5      	cbz	r5, 8006972 <__d2b+0x92>
 8006948:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800694c:	4405      	add	r5, r0
 800694e:	603d      	str	r5, [r7, #0]
 8006950:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006954:	6030      	str	r0, [r6, #0]
 8006956:	4620      	mov	r0, r4
 8006958:	b003      	add	sp, #12
 800695a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800695e:	6161      	str	r1, [r4, #20]
 8006960:	e7ea      	b.n	8006938 <__d2b+0x58>
 8006962:	a801      	add	r0, sp, #4
 8006964:	f7ff fd59 	bl	800641a <__lo0bits>
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	6163      	str	r3, [r4, #20]
 800696c:	3020      	adds	r0, #32
 800696e:	2201      	movs	r2, #1
 8006970:	e7e8      	b.n	8006944 <__d2b+0x64>
 8006972:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006976:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800697a:	6038      	str	r0, [r7, #0]
 800697c:	6918      	ldr	r0, [r3, #16]
 800697e:	f7ff fd2d 	bl	80063dc <__hi0bits>
 8006982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006986:	e7e5      	b.n	8006954 <__d2b+0x74>
 8006988:	08007648 	.word	0x08007648
 800698c:	08007659 	.word	0x08007659

08006990 <__ssputs_r>:
 8006990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	688e      	ldr	r6, [r1, #8]
 8006996:	461f      	mov	r7, r3
 8006998:	42be      	cmp	r6, r7
 800699a:	680b      	ldr	r3, [r1, #0]
 800699c:	4682      	mov	sl, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	4690      	mov	r8, r2
 80069a2:	d82d      	bhi.n	8006a00 <__ssputs_r+0x70>
 80069a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80069ac:	d026      	beq.n	80069fc <__ssputs_r+0x6c>
 80069ae:	6965      	ldr	r5, [r4, #20]
 80069b0:	6909      	ldr	r1, [r1, #16]
 80069b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069b6:	eba3 0901 	sub.w	r9, r3, r1
 80069ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069be:	1c7b      	adds	r3, r7, #1
 80069c0:	444b      	add	r3, r9
 80069c2:	106d      	asrs	r5, r5, #1
 80069c4:	429d      	cmp	r5, r3
 80069c6:	bf38      	it	cc
 80069c8:	461d      	movcc	r5, r3
 80069ca:	0553      	lsls	r3, r2, #21
 80069cc:	d527      	bpl.n	8006a1e <__ssputs_r+0x8e>
 80069ce:	4629      	mov	r1, r5
 80069d0:	f7fd ff1a 	bl	8004808 <_malloc_r>
 80069d4:	4606      	mov	r6, r0
 80069d6:	b360      	cbz	r0, 8006a32 <__ssputs_r+0xa2>
 80069d8:	6921      	ldr	r1, [r4, #16]
 80069da:	464a      	mov	r2, r9
 80069dc:	f000 fbcc 	bl	8007178 <memcpy>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	6126      	str	r6, [r4, #16]
 80069ee:	6165      	str	r5, [r4, #20]
 80069f0:	444e      	add	r6, r9
 80069f2:	eba5 0509 	sub.w	r5, r5, r9
 80069f6:	6026      	str	r6, [r4, #0]
 80069f8:	60a5      	str	r5, [r4, #8]
 80069fa:	463e      	mov	r6, r7
 80069fc:	42be      	cmp	r6, r7
 80069fe:	d900      	bls.n	8006a02 <__ssputs_r+0x72>
 8006a00:	463e      	mov	r6, r7
 8006a02:	6820      	ldr	r0, [r4, #0]
 8006a04:	4632      	mov	r2, r6
 8006a06:	4641      	mov	r1, r8
 8006a08:	f000 fb9c 	bl	8007144 <memmove>
 8006a0c:	68a3      	ldr	r3, [r4, #8]
 8006a0e:	1b9b      	subs	r3, r3, r6
 8006a10:	60a3      	str	r3, [r4, #8]
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	4433      	add	r3, r6
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	2000      	movs	r0, #0
 8006a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1e:	462a      	mov	r2, r5
 8006a20:	f000 fbfc 	bl	800721c <_realloc_r>
 8006a24:	4606      	mov	r6, r0
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d1e0      	bne.n	80069ec <__ssputs_r+0x5c>
 8006a2a:	6921      	ldr	r1, [r4, #16]
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	f7ff fbe3 	bl	80061f8 <_free_r>
 8006a32:	230c      	movs	r3, #12
 8006a34:	f8ca 3000 	str.w	r3, [sl]
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a3e:	81a3      	strh	r3, [r4, #12]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	e7e9      	b.n	8006a1a <__ssputs_r+0x8a>
	...

08006a48 <_svfiprintf_r>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	4698      	mov	r8, r3
 8006a4e:	898b      	ldrh	r3, [r1, #12]
 8006a50:	061b      	lsls	r3, r3, #24
 8006a52:	b09d      	sub	sp, #116	@ 0x74
 8006a54:	4607      	mov	r7, r0
 8006a56:	460d      	mov	r5, r1
 8006a58:	4614      	mov	r4, r2
 8006a5a:	d510      	bpl.n	8006a7e <_svfiprintf_r+0x36>
 8006a5c:	690b      	ldr	r3, [r1, #16]
 8006a5e:	b973      	cbnz	r3, 8006a7e <_svfiprintf_r+0x36>
 8006a60:	2140      	movs	r1, #64	@ 0x40
 8006a62:	f7fd fed1 	bl	8004808 <_malloc_r>
 8006a66:	6028      	str	r0, [r5, #0]
 8006a68:	6128      	str	r0, [r5, #16]
 8006a6a:	b930      	cbnz	r0, 8006a7a <_svfiprintf_r+0x32>
 8006a6c:	230c      	movs	r3, #12
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	b01d      	add	sp, #116	@ 0x74
 8006a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7a:	2340      	movs	r3, #64	@ 0x40
 8006a7c:	616b      	str	r3, [r5, #20]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a82:	2320      	movs	r3, #32
 8006a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a8c:	2330      	movs	r3, #48	@ 0x30
 8006a8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c2c <_svfiprintf_r+0x1e4>
 8006a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a96:	f04f 0901 	mov.w	r9, #1
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	469a      	mov	sl, r3
 8006a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aa2:	b10a      	cbz	r2, 8006aa8 <_svfiprintf_r+0x60>
 8006aa4:	2a25      	cmp	r2, #37	@ 0x25
 8006aa6:	d1f9      	bne.n	8006a9c <_svfiprintf_r+0x54>
 8006aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8006aac:	d00b      	beq.n	8006ac6 <_svfiprintf_r+0x7e>
 8006aae:	465b      	mov	r3, fp
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f7ff ff6b 	bl	8006990 <__ssputs_r>
 8006aba:	3001      	adds	r0, #1
 8006abc:	f000 80a7 	beq.w	8006c0e <_svfiprintf_r+0x1c6>
 8006ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac2:	445a      	add	r2, fp
 8006ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 809f 	beq.w	8006c0e <_svfiprintf_r+0x1c6>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ada:	f10a 0a01 	add.w	sl, sl, #1
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	9307      	str	r3, [sp, #28]
 8006ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ae8:	4654      	mov	r4, sl
 8006aea:	2205      	movs	r2, #5
 8006aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af0:	484e      	ldr	r0, [pc, #312]	@ (8006c2c <_svfiprintf_r+0x1e4>)
 8006af2:	f7f9 fb8d 	bl	8000210 <memchr>
 8006af6:	9a04      	ldr	r2, [sp, #16]
 8006af8:	b9d8      	cbnz	r0, 8006b32 <_svfiprintf_r+0xea>
 8006afa:	06d0      	lsls	r0, r2, #27
 8006afc:	bf44      	itt	mi
 8006afe:	2320      	movmi	r3, #32
 8006b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b04:	0711      	lsls	r1, r2, #28
 8006b06:	bf44      	itt	mi
 8006b08:	232b      	movmi	r3, #43	@ 0x2b
 8006b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b14:	d015      	beq.n	8006b42 <_svfiprintf_r+0xfa>
 8006b16:	9a07      	ldr	r2, [sp, #28]
 8006b18:	4654      	mov	r4, sl
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f04f 0c0a 	mov.w	ip, #10
 8006b20:	4621      	mov	r1, r4
 8006b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b26:	3b30      	subs	r3, #48	@ 0x30
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	d94b      	bls.n	8006bc4 <_svfiprintf_r+0x17c>
 8006b2c:	b1b0      	cbz	r0, 8006b5c <_svfiprintf_r+0x114>
 8006b2e:	9207      	str	r2, [sp, #28]
 8006b30:	e014      	b.n	8006b5c <_svfiprintf_r+0x114>
 8006b32:	eba0 0308 	sub.w	r3, r0, r8
 8006b36:	fa09 f303 	lsl.w	r3, r9, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	46a2      	mov	sl, r4
 8006b40:	e7d2      	b.n	8006ae8 <_svfiprintf_r+0xa0>
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	1d19      	adds	r1, r3, #4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	9103      	str	r1, [sp, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bfbb      	ittet	lt
 8006b4e:	425b      	neglt	r3, r3
 8006b50:	f042 0202 	orrlt.w	r2, r2, #2
 8006b54:	9307      	strge	r3, [sp, #28]
 8006b56:	9307      	strlt	r3, [sp, #28]
 8006b58:	bfb8      	it	lt
 8006b5a:	9204      	strlt	r2, [sp, #16]
 8006b5c:	7823      	ldrb	r3, [r4, #0]
 8006b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b60:	d10a      	bne.n	8006b78 <_svfiprintf_r+0x130>
 8006b62:	7863      	ldrb	r3, [r4, #1]
 8006b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b66:	d132      	bne.n	8006bce <_svfiprintf_r+0x186>
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	1d1a      	adds	r2, r3, #4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	9203      	str	r2, [sp, #12]
 8006b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b74:	3402      	adds	r4, #2
 8006b76:	9305      	str	r3, [sp, #20]
 8006b78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c3c <_svfiprintf_r+0x1f4>
 8006b7c:	7821      	ldrb	r1, [r4, #0]
 8006b7e:	2203      	movs	r2, #3
 8006b80:	4650      	mov	r0, sl
 8006b82:	f7f9 fb45 	bl	8000210 <memchr>
 8006b86:	b138      	cbz	r0, 8006b98 <_svfiprintf_r+0x150>
 8006b88:	9b04      	ldr	r3, [sp, #16]
 8006b8a:	eba0 000a 	sub.w	r0, r0, sl
 8006b8e:	2240      	movs	r2, #64	@ 0x40
 8006b90:	4082      	lsls	r2, r0
 8006b92:	4313      	orrs	r3, r2
 8006b94:	3401      	adds	r4, #1
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9c:	4824      	ldr	r0, [pc, #144]	@ (8006c30 <_svfiprintf_r+0x1e8>)
 8006b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ba2:	2206      	movs	r2, #6
 8006ba4:	f7f9 fb34 	bl	8000210 <memchr>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d036      	beq.n	8006c1a <_svfiprintf_r+0x1d2>
 8006bac:	4b21      	ldr	r3, [pc, #132]	@ (8006c34 <_svfiprintf_r+0x1ec>)
 8006bae:	bb1b      	cbnz	r3, 8006bf8 <_svfiprintf_r+0x1b0>
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	3307      	adds	r3, #7
 8006bb4:	f023 0307 	bic.w	r3, r3, #7
 8006bb8:	3308      	adds	r3, #8
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bbe:	4433      	add	r3, r6
 8006bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bc2:	e76a      	b.n	8006a9a <_svfiprintf_r+0x52>
 8006bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bc8:	460c      	mov	r4, r1
 8006bca:	2001      	movs	r0, #1
 8006bcc:	e7a8      	b.n	8006b20 <_svfiprintf_r+0xd8>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	3401      	adds	r4, #1
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f04f 0c0a 	mov.w	ip, #10
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006be0:	3a30      	subs	r2, #48	@ 0x30
 8006be2:	2a09      	cmp	r2, #9
 8006be4:	d903      	bls.n	8006bee <_svfiprintf_r+0x1a6>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0c6      	beq.n	8006b78 <_svfiprintf_r+0x130>
 8006bea:	9105      	str	r1, [sp, #20]
 8006bec:	e7c4      	b.n	8006b78 <_svfiprintf_r+0x130>
 8006bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e7f0      	b.n	8006bda <_svfiprintf_r+0x192>
 8006bf8:	ab03      	add	r3, sp, #12
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	462a      	mov	r2, r5
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8006c38 <_svfiprintf_r+0x1f0>)
 8006c00:	a904      	add	r1, sp, #16
 8006c02:	4638      	mov	r0, r7
 8006c04:	f7fd ff2c 	bl	8004a60 <_printf_float>
 8006c08:	1c42      	adds	r2, r0, #1
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	d1d6      	bne.n	8006bbc <_svfiprintf_r+0x174>
 8006c0e:	89ab      	ldrh	r3, [r5, #12]
 8006c10:	065b      	lsls	r3, r3, #25
 8006c12:	f53f af2d 	bmi.w	8006a70 <_svfiprintf_r+0x28>
 8006c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c18:	e72c      	b.n	8006a74 <_svfiprintf_r+0x2c>
 8006c1a:	ab03      	add	r3, sp, #12
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	462a      	mov	r2, r5
 8006c20:	4b05      	ldr	r3, [pc, #20]	@ (8006c38 <_svfiprintf_r+0x1f0>)
 8006c22:	a904      	add	r1, sp, #16
 8006c24:	4638      	mov	r0, r7
 8006c26:	f7fe f9b3 	bl	8004f90 <_printf_i>
 8006c2a:	e7ed      	b.n	8006c08 <_svfiprintf_r+0x1c0>
 8006c2c:	080077b0 	.word	0x080077b0
 8006c30:	080077ba 	.word	0x080077ba
 8006c34:	08004a61 	.word	0x08004a61
 8006c38:	08006991 	.word	0x08006991
 8006c3c:	080077b6 	.word	0x080077b6

08006c40 <__sfputc_r>:
 8006c40:	6893      	ldr	r3, [r2, #8]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	b410      	push	{r4}
 8006c48:	6093      	str	r3, [r2, #8]
 8006c4a:	da08      	bge.n	8006c5e <__sfputc_r+0x1e>
 8006c4c:	6994      	ldr	r4, [r2, #24]
 8006c4e:	42a3      	cmp	r3, r4
 8006c50:	db01      	blt.n	8006c56 <__sfputc_r+0x16>
 8006c52:	290a      	cmp	r1, #10
 8006c54:	d103      	bne.n	8006c5e <__sfputc_r+0x1e>
 8006c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5a:	f000 b9df 	b.w	800701c <__swbuf_r>
 8006c5e:	6813      	ldr	r3, [r2, #0]
 8006c60:	1c58      	adds	r0, r3, #1
 8006c62:	6010      	str	r0, [r2, #0]
 8006c64:	7019      	strb	r1, [r3, #0]
 8006c66:	4608      	mov	r0, r1
 8006c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <__sfputs_r>:
 8006c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c70:	4606      	mov	r6, r0
 8006c72:	460f      	mov	r7, r1
 8006c74:	4614      	mov	r4, r2
 8006c76:	18d5      	adds	r5, r2, r3
 8006c78:	42ac      	cmp	r4, r5
 8006c7a:	d101      	bne.n	8006c80 <__sfputs_r+0x12>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	e007      	b.n	8006c90 <__sfputs_r+0x22>
 8006c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c84:	463a      	mov	r2, r7
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7ff ffda 	bl	8006c40 <__sfputc_r>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d1f3      	bne.n	8006c78 <__sfputs_r+0xa>
 8006c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c94 <_vfiprintf_r>:
 8006c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	460d      	mov	r5, r1
 8006c9a:	b09d      	sub	sp, #116	@ 0x74
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	4698      	mov	r8, r3
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	b118      	cbz	r0, 8006cac <_vfiprintf_r+0x18>
 8006ca4:	6a03      	ldr	r3, [r0, #32]
 8006ca6:	b90b      	cbnz	r3, 8006cac <_vfiprintf_r+0x18>
 8006ca8:	f7fe fb1e 	bl	80052e8 <__sinit>
 8006cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cae:	07d9      	lsls	r1, r3, #31
 8006cb0:	d405      	bmi.n	8006cbe <_vfiprintf_r+0x2a>
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	059a      	lsls	r2, r3, #22
 8006cb6:	d402      	bmi.n	8006cbe <_vfiprintf_r+0x2a>
 8006cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cba:	f7fe fc4e 	bl	800555a <__retarget_lock_acquire_recursive>
 8006cbe:	89ab      	ldrh	r3, [r5, #12]
 8006cc0:	071b      	lsls	r3, r3, #28
 8006cc2:	d501      	bpl.n	8006cc8 <_vfiprintf_r+0x34>
 8006cc4:	692b      	ldr	r3, [r5, #16]
 8006cc6:	b99b      	cbnz	r3, 8006cf0 <_vfiprintf_r+0x5c>
 8006cc8:	4629      	mov	r1, r5
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f000 f9e4 	bl	8007098 <__swsetup_r>
 8006cd0:	b170      	cbz	r0, 8006cf0 <_vfiprintf_r+0x5c>
 8006cd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cd4:	07dc      	lsls	r4, r3, #31
 8006cd6:	d504      	bpl.n	8006ce2 <_vfiprintf_r+0x4e>
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	b01d      	add	sp, #116	@ 0x74
 8006cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce2:	89ab      	ldrh	r3, [r5, #12]
 8006ce4:	0598      	lsls	r0, r3, #22
 8006ce6:	d4f7      	bmi.n	8006cd8 <_vfiprintf_r+0x44>
 8006ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cea:	f7fe fc37 	bl	800555c <__retarget_lock_release_recursive>
 8006cee:	e7f3      	b.n	8006cd8 <_vfiprintf_r+0x44>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfe:	2330      	movs	r3, #48	@ 0x30
 8006d00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006eb0 <_vfiprintf_r+0x21c>
 8006d04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d08:	f04f 0901 	mov.w	r9, #1
 8006d0c:	4623      	mov	r3, r4
 8006d0e:	469a      	mov	sl, r3
 8006d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d14:	b10a      	cbz	r2, 8006d1a <_vfiprintf_r+0x86>
 8006d16:	2a25      	cmp	r2, #37	@ 0x25
 8006d18:	d1f9      	bne.n	8006d0e <_vfiprintf_r+0x7a>
 8006d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1e:	d00b      	beq.n	8006d38 <_vfiprintf_r+0xa4>
 8006d20:	465b      	mov	r3, fp
 8006d22:	4622      	mov	r2, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff ffa1 	bl	8006c6e <__sfputs_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f000 80a7 	beq.w	8006e80 <_vfiprintf_r+0x1ec>
 8006d32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d34:	445a      	add	r2, fp
 8006d36:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d38:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 809f 	beq.w	8006e80 <_vfiprintf_r+0x1ec>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f04f 32ff 	mov.w	r2, #4294967295
 8006d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4c:	f10a 0a01 	add.w	sl, sl, #1
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	9307      	str	r3, [sp, #28]
 8006d54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d58:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d5a:	4654      	mov	r4, sl
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d62:	4853      	ldr	r0, [pc, #332]	@ (8006eb0 <_vfiprintf_r+0x21c>)
 8006d64:	f7f9 fa54 	bl	8000210 <memchr>
 8006d68:	9a04      	ldr	r2, [sp, #16]
 8006d6a:	b9d8      	cbnz	r0, 8006da4 <_vfiprintf_r+0x110>
 8006d6c:	06d1      	lsls	r1, r2, #27
 8006d6e:	bf44      	itt	mi
 8006d70:	2320      	movmi	r3, #32
 8006d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d76:	0713      	lsls	r3, r2, #28
 8006d78:	bf44      	itt	mi
 8006d7a:	232b      	movmi	r3, #43	@ 0x2b
 8006d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d80:	f89a 3000 	ldrb.w	r3, [sl]
 8006d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d86:	d015      	beq.n	8006db4 <_vfiprintf_r+0x120>
 8006d88:	9a07      	ldr	r2, [sp, #28]
 8006d8a:	4654      	mov	r4, sl
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f04f 0c0a 	mov.w	ip, #10
 8006d92:	4621      	mov	r1, r4
 8006d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d98:	3b30      	subs	r3, #48	@ 0x30
 8006d9a:	2b09      	cmp	r3, #9
 8006d9c:	d94b      	bls.n	8006e36 <_vfiprintf_r+0x1a2>
 8006d9e:	b1b0      	cbz	r0, 8006dce <_vfiprintf_r+0x13a>
 8006da0:	9207      	str	r2, [sp, #28]
 8006da2:	e014      	b.n	8006dce <_vfiprintf_r+0x13a>
 8006da4:	eba0 0308 	sub.w	r3, r0, r8
 8006da8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	46a2      	mov	sl, r4
 8006db2:	e7d2      	b.n	8006d5a <_vfiprintf_r+0xc6>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	1d19      	adds	r1, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	9103      	str	r1, [sp, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbb      	ittet	lt
 8006dc0:	425b      	neglt	r3, r3
 8006dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc6:	9307      	strge	r3, [sp, #28]
 8006dc8:	9307      	strlt	r3, [sp, #28]
 8006dca:	bfb8      	it	lt
 8006dcc:	9204      	strlt	r2, [sp, #16]
 8006dce:	7823      	ldrb	r3, [r4, #0]
 8006dd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dd2:	d10a      	bne.n	8006dea <_vfiprintf_r+0x156>
 8006dd4:	7863      	ldrb	r3, [r4, #1]
 8006dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dd8:	d132      	bne.n	8006e40 <_vfiprintf_r+0x1ac>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	1d1a      	adds	r2, r3, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	9203      	str	r2, [sp, #12]
 8006de2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006de6:	3402      	adds	r4, #2
 8006de8:	9305      	str	r3, [sp, #20]
 8006dea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ec0 <_vfiprintf_r+0x22c>
 8006dee:	7821      	ldrb	r1, [r4, #0]
 8006df0:	2203      	movs	r2, #3
 8006df2:	4650      	mov	r0, sl
 8006df4:	f7f9 fa0c 	bl	8000210 <memchr>
 8006df8:	b138      	cbz	r0, 8006e0a <_vfiprintf_r+0x176>
 8006dfa:	9b04      	ldr	r3, [sp, #16]
 8006dfc:	eba0 000a 	sub.w	r0, r0, sl
 8006e00:	2240      	movs	r2, #64	@ 0x40
 8006e02:	4082      	lsls	r2, r0
 8006e04:	4313      	orrs	r3, r2
 8006e06:	3401      	adds	r4, #1
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0e:	4829      	ldr	r0, [pc, #164]	@ (8006eb4 <_vfiprintf_r+0x220>)
 8006e10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e14:	2206      	movs	r2, #6
 8006e16:	f7f9 f9fb 	bl	8000210 <memchr>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d03f      	beq.n	8006e9e <_vfiprintf_r+0x20a>
 8006e1e:	4b26      	ldr	r3, [pc, #152]	@ (8006eb8 <_vfiprintf_r+0x224>)
 8006e20:	bb1b      	cbnz	r3, 8006e6a <_vfiprintf_r+0x1d6>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	3307      	adds	r3, #7
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	9303      	str	r3, [sp, #12]
 8006e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e30:	443b      	add	r3, r7
 8006e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e34:	e76a      	b.n	8006d0c <_vfiprintf_r+0x78>
 8006e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	e7a8      	b.n	8006d92 <_vfiprintf_r+0xfe>
 8006e40:	2300      	movs	r3, #0
 8006e42:	3401      	adds	r4, #1
 8006e44:	9305      	str	r3, [sp, #20]
 8006e46:	4619      	mov	r1, r3
 8006e48:	f04f 0c0a 	mov.w	ip, #10
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e52:	3a30      	subs	r2, #48	@ 0x30
 8006e54:	2a09      	cmp	r2, #9
 8006e56:	d903      	bls.n	8006e60 <_vfiprintf_r+0x1cc>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0c6      	beq.n	8006dea <_vfiprintf_r+0x156>
 8006e5c:	9105      	str	r1, [sp, #20]
 8006e5e:	e7c4      	b.n	8006dea <_vfiprintf_r+0x156>
 8006e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e64:	4604      	mov	r4, r0
 8006e66:	2301      	movs	r3, #1
 8006e68:	e7f0      	b.n	8006e4c <_vfiprintf_r+0x1b8>
 8006e6a:	ab03      	add	r3, sp, #12
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	462a      	mov	r2, r5
 8006e70:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <_vfiprintf_r+0x228>)
 8006e72:	a904      	add	r1, sp, #16
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7fd fdf3 	bl	8004a60 <_printf_float>
 8006e7a:	4607      	mov	r7, r0
 8006e7c:	1c78      	adds	r0, r7, #1
 8006e7e:	d1d6      	bne.n	8006e2e <_vfiprintf_r+0x19a>
 8006e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e82:	07d9      	lsls	r1, r3, #31
 8006e84:	d405      	bmi.n	8006e92 <_vfiprintf_r+0x1fe>
 8006e86:	89ab      	ldrh	r3, [r5, #12]
 8006e88:	059a      	lsls	r2, r3, #22
 8006e8a:	d402      	bmi.n	8006e92 <_vfiprintf_r+0x1fe>
 8006e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e8e:	f7fe fb65 	bl	800555c <__retarget_lock_release_recursive>
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	065b      	lsls	r3, r3, #25
 8006e96:	f53f af1f 	bmi.w	8006cd8 <_vfiprintf_r+0x44>
 8006e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e9c:	e71e      	b.n	8006cdc <_vfiprintf_r+0x48>
 8006e9e:	ab03      	add	r3, sp, #12
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	4b05      	ldr	r3, [pc, #20]	@ (8006ebc <_vfiprintf_r+0x228>)
 8006ea6:	a904      	add	r1, sp, #16
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f7fe f871 	bl	8004f90 <_printf_i>
 8006eae:	e7e4      	b.n	8006e7a <_vfiprintf_r+0x1e6>
 8006eb0:	080077b0 	.word	0x080077b0
 8006eb4:	080077ba 	.word	0x080077ba
 8006eb8:	08004a61 	.word	0x08004a61
 8006ebc:	08006c6f 	.word	0x08006c6f
 8006ec0:	080077b6 	.word	0x080077b6

08006ec4 <__sflush_r>:
 8006ec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ecc:	0716      	lsls	r6, r2, #28
 8006ece:	4605      	mov	r5, r0
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	d454      	bmi.n	8006f7e <__sflush_r+0xba>
 8006ed4:	684b      	ldr	r3, [r1, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dc02      	bgt.n	8006ee0 <__sflush_r+0x1c>
 8006eda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dd48      	ble.n	8006f72 <__sflush_r+0xae>
 8006ee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ee2:	2e00      	cmp	r6, #0
 8006ee4:	d045      	beq.n	8006f72 <__sflush_r+0xae>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006eec:	682f      	ldr	r7, [r5, #0]
 8006eee:	6a21      	ldr	r1, [r4, #32]
 8006ef0:	602b      	str	r3, [r5, #0]
 8006ef2:	d030      	beq.n	8006f56 <__sflush_r+0x92>
 8006ef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	0759      	lsls	r1, r3, #29
 8006efa:	d505      	bpl.n	8006f08 <__sflush_r+0x44>
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	1ad2      	subs	r2, r2, r3
 8006f00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f02:	b10b      	cbz	r3, 8006f08 <__sflush_r+0x44>
 8006f04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	2300      	movs	r3, #0
 8006f0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f0c:	6a21      	ldr	r1, [r4, #32]
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b0      	blx	r6
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	d106      	bne.n	8006f26 <__sflush_r+0x62>
 8006f18:	6829      	ldr	r1, [r5, #0]
 8006f1a:	291d      	cmp	r1, #29
 8006f1c:	d82b      	bhi.n	8006f76 <__sflush_r+0xb2>
 8006f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc8 <__sflush_r+0x104>)
 8006f20:	410a      	asrs	r2, r1
 8006f22:	07d6      	lsls	r6, r2, #31
 8006f24:	d427      	bmi.n	8006f76 <__sflush_r+0xb2>
 8006f26:	2200      	movs	r2, #0
 8006f28:	6062      	str	r2, [r4, #4]
 8006f2a:	04d9      	lsls	r1, r3, #19
 8006f2c:	6922      	ldr	r2, [r4, #16]
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	d504      	bpl.n	8006f3c <__sflush_r+0x78>
 8006f32:	1c42      	adds	r2, r0, #1
 8006f34:	d101      	bne.n	8006f3a <__sflush_r+0x76>
 8006f36:	682b      	ldr	r3, [r5, #0]
 8006f38:	b903      	cbnz	r3, 8006f3c <__sflush_r+0x78>
 8006f3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f3e:	602f      	str	r7, [r5, #0]
 8006f40:	b1b9      	cbz	r1, 8006f72 <__sflush_r+0xae>
 8006f42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f46:	4299      	cmp	r1, r3
 8006f48:	d002      	beq.n	8006f50 <__sflush_r+0x8c>
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f7ff f954 	bl	80061f8 <_free_r>
 8006f50:	2300      	movs	r3, #0
 8006f52:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f54:	e00d      	b.n	8006f72 <__sflush_r+0xae>
 8006f56:	2301      	movs	r3, #1
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b0      	blx	r6
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	1c50      	adds	r0, r2, #1
 8006f60:	d1c9      	bne.n	8006ef6 <__sflush_r+0x32>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0c6      	beq.n	8006ef6 <__sflush_r+0x32>
 8006f68:	2b1d      	cmp	r3, #29
 8006f6a:	d001      	beq.n	8006f70 <__sflush_r+0xac>
 8006f6c:	2b16      	cmp	r3, #22
 8006f6e:	d11e      	bne.n	8006fae <__sflush_r+0xea>
 8006f70:	602f      	str	r7, [r5, #0]
 8006f72:	2000      	movs	r0, #0
 8006f74:	e022      	b.n	8006fbc <__sflush_r+0xf8>
 8006f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f7a:	b21b      	sxth	r3, r3
 8006f7c:	e01b      	b.n	8006fb6 <__sflush_r+0xf2>
 8006f7e:	690f      	ldr	r7, [r1, #16]
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	d0f6      	beq.n	8006f72 <__sflush_r+0xae>
 8006f84:	0793      	lsls	r3, r2, #30
 8006f86:	680e      	ldr	r6, [r1, #0]
 8006f88:	bf08      	it	eq
 8006f8a:	694b      	ldreq	r3, [r1, #20]
 8006f8c:	600f      	str	r7, [r1, #0]
 8006f8e:	bf18      	it	ne
 8006f90:	2300      	movne	r3, #0
 8006f92:	eba6 0807 	sub.w	r8, r6, r7
 8006f96:	608b      	str	r3, [r1, #8]
 8006f98:	f1b8 0f00 	cmp.w	r8, #0
 8006f9c:	dde9      	ble.n	8006f72 <__sflush_r+0xae>
 8006f9e:	6a21      	ldr	r1, [r4, #32]
 8006fa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fa2:	4643      	mov	r3, r8
 8006fa4:	463a      	mov	r2, r7
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b0      	blx	r6
 8006faa:	2800      	cmp	r0, #0
 8006fac:	dc08      	bgt.n	8006fc0 <__sflush_r+0xfc>
 8006fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb6:	81a3      	strh	r3, [r4, #12]
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc0:	4407      	add	r7, r0
 8006fc2:	eba8 0800 	sub.w	r8, r8, r0
 8006fc6:	e7e7      	b.n	8006f98 <__sflush_r+0xd4>
 8006fc8:	dfbffffe 	.word	0xdfbffffe

08006fcc <_fflush_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	690b      	ldr	r3, [r1, #16]
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	b913      	cbnz	r3, 8006fdc <_fflush_r+0x10>
 8006fd6:	2500      	movs	r5, #0
 8006fd8:	4628      	mov	r0, r5
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	b118      	cbz	r0, 8006fe6 <_fflush_r+0x1a>
 8006fde:	6a03      	ldr	r3, [r0, #32]
 8006fe0:	b90b      	cbnz	r3, 8006fe6 <_fflush_r+0x1a>
 8006fe2:	f7fe f981 	bl	80052e8 <__sinit>
 8006fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f3      	beq.n	8006fd6 <_fflush_r+0xa>
 8006fee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ff0:	07d0      	lsls	r0, r2, #31
 8006ff2:	d404      	bmi.n	8006ffe <_fflush_r+0x32>
 8006ff4:	0599      	lsls	r1, r3, #22
 8006ff6:	d402      	bmi.n	8006ffe <_fflush_r+0x32>
 8006ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ffa:	f7fe faae 	bl	800555a <__retarget_lock_acquire_recursive>
 8006ffe:	4628      	mov	r0, r5
 8007000:	4621      	mov	r1, r4
 8007002:	f7ff ff5f 	bl	8006ec4 <__sflush_r>
 8007006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007008:	07da      	lsls	r2, r3, #31
 800700a:	4605      	mov	r5, r0
 800700c:	d4e4      	bmi.n	8006fd8 <_fflush_r+0xc>
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	059b      	lsls	r3, r3, #22
 8007012:	d4e1      	bmi.n	8006fd8 <_fflush_r+0xc>
 8007014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007016:	f7fe faa1 	bl	800555c <__retarget_lock_release_recursive>
 800701a:	e7dd      	b.n	8006fd8 <_fflush_r+0xc>

0800701c <__swbuf_r>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	460e      	mov	r6, r1
 8007020:	4614      	mov	r4, r2
 8007022:	4605      	mov	r5, r0
 8007024:	b118      	cbz	r0, 800702e <__swbuf_r+0x12>
 8007026:	6a03      	ldr	r3, [r0, #32]
 8007028:	b90b      	cbnz	r3, 800702e <__swbuf_r+0x12>
 800702a:	f7fe f95d 	bl	80052e8 <__sinit>
 800702e:	69a3      	ldr	r3, [r4, #24]
 8007030:	60a3      	str	r3, [r4, #8]
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	071a      	lsls	r2, r3, #28
 8007036:	d501      	bpl.n	800703c <__swbuf_r+0x20>
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	b943      	cbnz	r3, 800704e <__swbuf_r+0x32>
 800703c:	4621      	mov	r1, r4
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f82a 	bl	8007098 <__swsetup_r>
 8007044:	b118      	cbz	r0, 800704e <__swbuf_r+0x32>
 8007046:	f04f 37ff 	mov.w	r7, #4294967295
 800704a:	4638      	mov	r0, r7
 800704c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	6922      	ldr	r2, [r4, #16]
 8007052:	1a98      	subs	r0, r3, r2
 8007054:	6963      	ldr	r3, [r4, #20]
 8007056:	b2f6      	uxtb	r6, r6
 8007058:	4283      	cmp	r3, r0
 800705a:	4637      	mov	r7, r6
 800705c:	dc05      	bgt.n	800706a <__swbuf_r+0x4e>
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f7ff ffb3 	bl	8006fcc <_fflush_r>
 8007066:	2800      	cmp	r0, #0
 8007068:	d1ed      	bne.n	8007046 <__swbuf_r+0x2a>
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	3b01      	subs	r3, #1
 800706e:	60a3      	str	r3, [r4, #8]
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	6022      	str	r2, [r4, #0]
 8007076:	701e      	strb	r6, [r3, #0]
 8007078:	6962      	ldr	r2, [r4, #20]
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	429a      	cmp	r2, r3
 800707e:	d004      	beq.n	800708a <__swbuf_r+0x6e>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	07db      	lsls	r3, r3, #31
 8007084:	d5e1      	bpl.n	800704a <__swbuf_r+0x2e>
 8007086:	2e0a      	cmp	r6, #10
 8007088:	d1df      	bne.n	800704a <__swbuf_r+0x2e>
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f7ff ff9d 	bl	8006fcc <_fflush_r>
 8007092:	2800      	cmp	r0, #0
 8007094:	d0d9      	beq.n	800704a <__swbuf_r+0x2e>
 8007096:	e7d6      	b.n	8007046 <__swbuf_r+0x2a>

08007098 <__swsetup_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4b29      	ldr	r3, [pc, #164]	@ (8007140 <__swsetup_r+0xa8>)
 800709c:	4605      	mov	r5, r0
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	460c      	mov	r4, r1
 80070a2:	b118      	cbz	r0, 80070ac <__swsetup_r+0x14>
 80070a4:	6a03      	ldr	r3, [r0, #32]
 80070a6:	b90b      	cbnz	r3, 80070ac <__swsetup_r+0x14>
 80070a8:	f7fe f91e 	bl	80052e8 <__sinit>
 80070ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b0:	0719      	lsls	r1, r3, #28
 80070b2:	d422      	bmi.n	80070fa <__swsetup_r+0x62>
 80070b4:	06da      	lsls	r2, r3, #27
 80070b6:	d407      	bmi.n	80070c8 <__swsetup_r+0x30>
 80070b8:	2209      	movs	r2, #9
 80070ba:	602a      	str	r2, [r5, #0]
 80070bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	f04f 30ff 	mov.w	r0, #4294967295
 80070c6:	e033      	b.n	8007130 <__swsetup_r+0x98>
 80070c8:	0758      	lsls	r0, r3, #29
 80070ca:	d512      	bpl.n	80070f2 <__swsetup_r+0x5a>
 80070cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070ce:	b141      	cbz	r1, 80070e2 <__swsetup_r+0x4a>
 80070d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070d4:	4299      	cmp	r1, r3
 80070d6:	d002      	beq.n	80070de <__swsetup_r+0x46>
 80070d8:	4628      	mov	r0, r5
 80070da:	f7ff f88d 	bl	80061f8 <_free_r>
 80070de:	2300      	movs	r3, #0
 80070e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	2300      	movs	r3, #0
 80070ec:	6063      	str	r3, [r4, #4]
 80070ee:	6923      	ldr	r3, [r4, #16]
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	f043 0308 	orr.w	r3, r3, #8
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	b94b      	cbnz	r3, 8007112 <__swsetup_r+0x7a>
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007108:	d003      	beq.n	8007112 <__swsetup_r+0x7a>
 800710a:	4621      	mov	r1, r4
 800710c:	4628      	mov	r0, r5
 800710e:	f000 f8f9 	bl	8007304 <__smakebuf_r>
 8007112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007116:	f013 0201 	ands.w	r2, r3, #1
 800711a:	d00a      	beq.n	8007132 <__swsetup_r+0x9a>
 800711c:	2200      	movs	r2, #0
 800711e:	60a2      	str	r2, [r4, #8]
 8007120:	6962      	ldr	r2, [r4, #20]
 8007122:	4252      	negs	r2, r2
 8007124:	61a2      	str	r2, [r4, #24]
 8007126:	6922      	ldr	r2, [r4, #16]
 8007128:	b942      	cbnz	r2, 800713c <__swsetup_r+0xa4>
 800712a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800712e:	d1c5      	bne.n	80070bc <__swsetup_r+0x24>
 8007130:	bd38      	pop	{r3, r4, r5, pc}
 8007132:	0799      	lsls	r1, r3, #30
 8007134:	bf58      	it	pl
 8007136:	6962      	ldrpl	r2, [r4, #20]
 8007138:	60a2      	str	r2, [r4, #8]
 800713a:	e7f4      	b.n	8007126 <__swsetup_r+0x8e>
 800713c:	2000      	movs	r0, #0
 800713e:	e7f7      	b.n	8007130 <__swsetup_r+0x98>
 8007140:	20000028 	.word	0x20000028

08007144 <memmove>:
 8007144:	4288      	cmp	r0, r1
 8007146:	b510      	push	{r4, lr}
 8007148:	eb01 0402 	add.w	r4, r1, r2
 800714c:	d902      	bls.n	8007154 <memmove+0x10>
 800714e:	4284      	cmp	r4, r0
 8007150:	4623      	mov	r3, r4
 8007152:	d807      	bhi.n	8007164 <memmove+0x20>
 8007154:	1e43      	subs	r3, r0, #1
 8007156:	42a1      	cmp	r1, r4
 8007158:	d008      	beq.n	800716c <memmove+0x28>
 800715a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800715e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007162:	e7f8      	b.n	8007156 <memmove+0x12>
 8007164:	4402      	add	r2, r0
 8007166:	4601      	mov	r1, r0
 8007168:	428a      	cmp	r2, r1
 800716a:	d100      	bne.n	800716e <memmove+0x2a>
 800716c:	bd10      	pop	{r4, pc}
 800716e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007176:	e7f7      	b.n	8007168 <memmove+0x24>

08007178 <memcpy>:
 8007178:	440a      	add	r2, r1
 800717a:	4291      	cmp	r1, r2
 800717c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007180:	d100      	bne.n	8007184 <memcpy+0xc>
 8007182:	4770      	bx	lr
 8007184:	b510      	push	{r4, lr}
 8007186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718e:	4291      	cmp	r1, r2
 8007190:	d1f9      	bne.n	8007186 <memcpy+0xe>
 8007192:	bd10      	pop	{r4, pc}

08007194 <__assert_func>:
 8007194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007196:	4614      	mov	r4, r2
 8007198:	461a      	mov	r2, r3
 800719a:	4b09      	ldr	r3, [pc, #36]	@ (80071c0 <__assert_func+0x2c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4605      	mov	r5, r0
 80071a0:	68d8      	ldr	r0, [r3, #12]
 80071a2:	b954      	cbnz	r4, 80071ba <__assert_func+0x26>
 80071a4:	4b07      	ldr	r3, [pc, #28]	@ (80071c4 <__assert_func+0x30>)
 80071a6:	461c      	mov	r4, r3
 80071a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071ac:	9100      	str	r1, [sp, #0]
 80071ae:	462b      	mov	r3, r5
 80071b0:	4905      	ldr	r1, [pc, #20]	@ (80071c8 <__assert_func+0x34>)
 80071b2:	f000 f86f 	bl	8007294 <fiprintf>
 80071b6:	f000 f903 	bl	80073c0 <abort>
 80071ba:	4b04      	ldr	r3, [pc, #16]	@ (80071cc <__assert_func+0x38>)
 80071bc:	e7f4      	b.n	80071a8 <__assert_func+0x14>
 80071be:	bf00      	nop
 80071c0:	20000028 	.word	0x20000028
 80071c4:	08007806 	.word	0x08007806
 80071c8:	080077d8 	.word	0x080077d8
 80071cc:	080077cb 	.word	0x080077cb

080071d0 <_calloc_r>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	fba1 5402 	umull	r5, r4, r1, r2
 80071d6:	b93c      	cbnz	r4, 80071e8 <_calloc_r+0x18>
 80071d8:	4629      	mov	r1, r5
 80071da:	f7fd fb15 	bl	8004808 <_malloc_r>
 80071de:	4606      	mov	r6, r0
 80071e0:	b928      	cbnz	r0, 80071ee <_calloc_r+0x1e>
 80071e2:	2600      	movs	r6, #0
 80071e4:	4630      	mov	r0, r6
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	220c      	movs	r2, #12
 80071ea:	6002      	str	r2, [r0, #0]
 80071ec:	e7f9      	b.n	80071e2 <_calloc_r+0x12>
 80071ee:	462a      	mov	r2, r5
 80071f0:	4621      	mov	r1, r4
 80071f2:	f7fe f924 	bl	800543e <memset>
 80071f6:	e7f5      	b.n	80071e4 <_calloc_r+0x14>

080071f8 <__ascii_mbtowc>:
 80071f8:	b082      	sub	sp, #8
 80071fa:	b901      	cbnz	r1, 80071fe <__ascii_mbtowc+0x6>
 80071fc:	a901      	add	r1, sp, #4
 80071fe:	b142      	cbz	r2, 8007212 <__ascii_mbtowc+0x1a>
 8007200:	b14b      	cbz	r3, 8007216 <__ascii_mbtowc+0x1e>
 8007202:	7813      	ldrb	r3, [r2, #0]
 8007204:	600b      	str	r3, [r1, #0]
 8007206:	7812      	ldrb	r2, [r2, #0]
 8007208:	1e10      	subs	r0, r2, #0
 800720a:	bf18      	it	ne
 800720c:	2001      	movne	r0, #1
 800720e:	b002      	add	sp, #8
 8007210:	4770      	bx	lr
 8007212:	4610      	mov	r0, r2
 8007214:	e7fb      	b.n	800720e <__ascii_mbtowc+0x16>
 8007216:	f06f 0001 	mvn.w	r0, #1
 800721a:	e7f8      	b.n	800720e <__ascii_mbtowc+0x16>

0800721c <_realloc_r>:
 800721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	4680      	mov	r8, r0
 8007222:	4615      	mov	r5, r2
 8007224:	460c      	mov	r4, r1
 8007226:	b921      	cbnz	r1, 8007232 <_realloc_r+0x16>
 8007228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	4611      	mov	r1, r2
 800722e:	f7fd baeb 	b.w	8004808 <_malloc_r>
 8007232:	b92a      	cbnz	r2, 8007240 <_realloc_r+0x24>
 8007234:	f7fe ffe0 	bl	80061f8 <_free_r>
 8007238:	2400      	movs	r4, #0
 800723a:	4620      	mov	r0, r4
 800723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007240:	f000 f8c5 	bl	80073ce <_malloc_usable_size_r>
 8007244:	4285      	cmp	r5, r0
 8007246:	4606      	mov	r6, r0
 8007248:	d802      	bhi.n	8007250 <_realloc_r+0x34>
 800724a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800724e:	d8f4      	bhi.n	800723a <_realloc_r+0x1e>
 8007250:	4629      	mov	r1, r5
 8007252:	4640      	mov	r0, r8
 8007254:	f7fd fad8 	bl	8004808 <_malloc_r>
 8007258:	4607      	mov	r7, r0
 800725a:	2800      	cmp	r0, #0
 800725c:	d0ec      	beq.n	8007238 <_realloc_r+0x1c>
 800725e:	42b5      	cmp	r5, r6
 8007260:	462a      	mov	r2, r5
 8007262:	4621      	mov	r1, r4
 8007264:	bf28      	it	cs
 8007266:	4632      	movcs	r2, r6
 8007268:	f7ff ff86 	bl	8007178 <memcpy>
 800726c:	4621      	mov	r1, r4
 800726e:	4640      	mov	r0, r8
 8007270:	f7fe ffc2 	bl	80061f8 <_free_r>
 8007274:	463c      	mov	r4, r7
 8007276:	e7e0      	b.n	800723a <_realloc_r+0x1e>

08007278 <__ascii_wctomb>:
 8007278:	4603      	mov	r3, r0
 800727a:	4608      	mov	r0, r1
 800727c:	b141      	cbz	r1, 8007290 <__ascii_wctomb+0x18>
 800727e:	2aff      	cmp	r2, #255	@ 0xff
 8007280:	d904      	bls.n	800728c <__ascii_wctomb+0x14>
 8007282:	228a      	movs	r2, #138	@ 0x8a
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	f04f 30ff 	mov.w	r0, #4294967295
 800728a:	4770      	bx	lr
 800728c:	700a      	strb	r2, [r1, #0]
 800728e:	2001      	movs	r0, #1
 8007290:	4770      	bx	lr
	...

08007294 <fiprintf>:
 8007294:	b40e      	push	{r1, r2, r3}
 8007296:	b503      	push	{r0, r1, lr}
 8007298:	4601      	mov	r1, r0
 800729a:	ab03      	add	r3, sp, #12
 800729c:	4805      	ldr	r0, [pc, #20]	@ (80072b4 <fiprintf+0x20>)
 800729e:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a2:	6800      	ldr	r0, [r0, #0]
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	f7ff fcf5 	bl	8006c94 <_vfiprintf_r>
 80072aa:	b002      	add	sp, #8
 80072ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b0:	b003      	add	sp, #12
 80072b2:	4770      	bx	lr
 80072b4:	20000028 	.word	0x20000028

080072b8 <__swhatbuf_r>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	460c      	mov	r4, r1
 80072bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c0:	2900      	cmp	r1, #0
 80072c2:	b096      	sub	sp, #88	@ 0x58
 80072c4:	4615      	mov	r5, r2
 80072c6:	461e      	mov	r6, r3
 80072c8:	da0d      	bge.n	80072e6 <__swhatbuf_r+0x2e>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072d0:	f04f 0100 	mov.w	r1, #0
 80072d4:	bf14      	ite	ne
 80072d6:	2340      	movne	r3, #64	@ 0x40
 80072d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072dc:	2000      	movs	r0, #0
 80072de:	6031      	str	r1, [r6, #0]
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	b016      	add	sp, #88	@ 0x58
 80072e4:	bd70      	pop	{r4, r5, r6, pc}
 80072e6:	466a      	mov	r2, sp
 80072e8:	f000 f848 	bl	800737c <_fstat_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	dbec      	blt.n	80072ca <__swhatbuf_r+0x12>
 80072f0:	9901      	ldr	r1, [sp, #4]
 80072f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072fa:	4259      	negs	r1, r3
 80072fc:	4159      	adcs	r1, r3
 80072fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007302:	e7eb      	b.n	80072dc <__swhatbuf_r+0x24>

08007304 <__smakebuf_r>:
 8007304:	898b      	ldrh	r3, [r1, #12]
 8007306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007308:	079d      	lsls	r5, r3, #30
 800730a:	4606      	mov	r6, r0
 800730c:	460c      	mov	r4, r1
 800730e:	d507      	bpl.n	8007320 <__smakebuf_r+0x1c>
 8007310:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	6123      	str	r3, [r4, #16]
 8007318:	2301      	movs	r3, #1
 800731a:	6163      	str	r3, [r4, #20]
 800731c:	b003      	add	sp, #12
 800731e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007320:	ab01      	add	r3, sp, #4
 8007322:	466a      	mov	r2, sp
 8007324:	f7ff ffc8 	bl	80072b8 <__swhatbuf_r>
 8007328:	9f00      	ldr	r7, [sp, #0]
 800732a:	4605      	mov	r5, r0
 800732c:	4639      	mov	r1, r7
 800732e:	4630      	mov	r0, r6
 8007330:	f7fd fa6a 	bl	8004808 <_malloc_r>
 8007334:	b948      	cbnz	r0, 800734a <__smakebuf_r+0x46>
 8007336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733a:	059a      	lsls	r2, r3, #22
 800733c:	d4ee      	bmi.n	800731c <__smakebuf_r+0x18>
 800733e:	f023 0303 	bic.w	r3, r3, #3
 8007342:	f043 0302 	orr.w	r3, r3, #2
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	e7e2      	b.n	8007310 <__smakebuf_r+0xc>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	6020      	str	r0, [r4, #0]
 800734e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800735a:	b15b      	cbz	r3, 8007374 <__smakebuf_r+0x70>
 800735c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007360:	4630      	mov	r0, r6
 8007362:	f000 f81d 	bl	80073a0 <_isatty_r>
 8007366:	b128      	cbz	r0, 8007374 <__smakebuf_r+0x70>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	f043 0301 	orr.w	r3, r3, #1
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	431d      	orrs	r5, r3
 8007378:	81a5      	strh	r5, [r4, #12]
 800737a:	e7cf      	b.n	800731c <__smakebuf_r+0x18>

0800737c <_fstat_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d07      	ldr	r5, [pc, #28]	@ (800739c <_fstat_r+0x20>)
 8007380:	2300      	movs	r3, #0
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	4611      	mov	r1, r2
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	f7fa fbdd 	bl	8001b48 <_fstat>
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	d102      	bne.n	8007398 <_fstat_r+0x1c>
 8007392:	682b      	ldr	r3, [r5, #0]
 8007394:	b103      	cbz	r3, 8007398 <_fstat_r+0x1c>
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	bd38      	pop	{r3, r4, r5, pc}
 800739a:	bf00      	nop
 800739c:	20000514 	.word	0x20000514

080073a0 <_isatty_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d06      	ldr	r5, [pc, #24]	@ (80073bc <_isatty_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7fa fbdc 	bl	8001b68 <_isatty>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_isatty_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_isatty_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20000514 	.word	0x20000514

080073c0 <abort>:
 80073c0:	b508      	push	{r3, lr}
 80073c2:	2006      	movs	r0, #6
 80073c4:	f000 f834 	bl	8007430 <raise>
 80073c8:	2001      	movs	r0, #1
 80073ca:	f7fa fb6d 	bl	8001aa8 <_exit>

080073ce <_malloc_usable_size_r>:
 80073ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d2:	1f18      	subs	r0, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bfbc      	itt	lt
 80073d8:	580b      	ldrlt	r3, [r1, r0]
 80073da:	18c0      	addlt	r0, r0, r3
 80073dc:	4770      	bx	lr

080073de <_raise_r>:
 80073de:	291f      	cmp	r1, #31
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4605      	mov	r5, r0
 80073e4:	460c      	mov	r4, r1
 80073e6:	d904      	bls.n	80073f2 <_raise_r+0x14>
 80073e8:	2316      	movs	r3, #22
 80073ea:	6003      	str	r3, [r0, #0]
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	bd38      	pop	{r3, r4, r5, pc}
 80073f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073f4:	b112      	cbz	r2, 80073fc <_raise_r+0x1e>
 80073f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073fa:	b94b      	cbnz	r3, 8007410 <_raise_r+0x32>
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 f831 	bl	8007464 <_getpid_r>
 8007402:	4622      	mov	r2, r4
 8007404:	4601      	mov	r1, r0
 8007406:	4628      	mov	r0, r5
 8007408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800740c:	f000 b818 	b.w	8007440 <_kill_r>
 8007410:	2b01      	cmp	r3, #1
 8007412:	d00a      	beq.n	800742a <_raise_r+0x4c>
 8007414:	1c59      	adds	r1, r3, #1
 8007416:	d103      	bne.n	8007420 <_raise_r+0x42>
 8007418:	2316      	movs	r3, #22
 800741a:	6003      	str	r3, [r0, #0]
 800741c:	2001      	movs	r0, #1
 800741e:	e7e7      	b.n	80073f0 <_raise_r+0x12>
 8007420:	2100      	movs	r1, #0
 8007422:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007426:	4620      	mov	r0, r4
 8007428:	4798      	blx	r3
 800742a:	2000      	movs	r0, #0
 800742c:	e7e0      	b.n	80073f0 <_raise_r+0x12>
	...

08007430 <raise>:
 8007430:	4b02      	ldr	r3, [pc, #8]	@ (800743c <raise+0xc>)
 8007432:	4601      	mov	r1, r0
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	f7ff bfd2 	b.w	80073de <_raise_r>
 800743a:	bf00      	nop
 800743c:	20000028 	.word	0x20000028

08007440 <_kill_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d07      	ldr	r5, [pc, #28]	@ (8007460 <_kill_r+0x20>)
 8007444:	2300      	movs	r3, #0
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	4611      	mov	r1, r2
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	f7fa fb1b 	bl	8001a88 <_kill>
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d102      	bne.n	800745c <_kill_r+0x1c>
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	b103      	cbz	r3, 800745c <_kill_r+0x1c>
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	bd38      	pop	{r3, r4, r5, pc}
 800745e:	bf00      	nop
 8007460:	20000514 	.word	0x20000514

08007464 <_getpid_r>:
 8007464:	f7fa bb08 	b.w	8001a78 <_getpid>

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
